(()=>{"use strict";var __webpack_modules__={297:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  v: () => (/* binding */ tweenGroup)\n});\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js + 1 modules\nvar three_module = __webpack_require__(815);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(24);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(40);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/controllers/switcher.css\nvar switcher = __webpack_require__(688);\n;// ./src/controllers/switcher.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, \"head\");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(switcher/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const controllers_switcher = (switcher/* default */.A && switcher/* default */.A.locals ? switcher/* default */.A.locals : undefined);\n\n;// ./src/widgets/switcher.js\n\r\n// 渲染右上角切换控件\r\n// current: 'external' | 'internal'\r\n// options: { tile?: string, icon?: string, gap?: string, extra?: string }\r\nfunction renderSwitcher(current, options = {}){\r\n  const nav = document.createElement('nav');\r\n  nav.className = 'switcher';\r\n  nav.setAttribute('role', 'tablist');\r\n  nav.setAttribute('aria-label', '页面切换');\r\n\r\n  // 允许通过 CSS 变量自定义尺寸/间距\r\n  if (options.tile)  nav.style.setProperty('--tile', options.tile);\r\n  if (options.icon)  nav.style.setProperty('--icon', options.icon);\r\n  if (options.gap)   nav.style.setProperty('--switcher-gap', options.gap);\r\n  if (options.extra) nav.style.setProperty('--switcher-extra', options.extra);\r\n\r\n  const external = document.createElement('a');\r\n  external.className = 'tile left';\r\n  external.id = 'tab-external';\r\n  external.setAttribute('role', 'tab');\r\n  external.setAttribute('href', 'index.html');\r\n  external.setAttribute('title', '外部（面板/示波器）');\r\n  external.setAttribute('aria-selected', String(current === 'external'));\r\n  external.innerHTML = '<span class=\"sr-only\">外部</span>'+\r\n    '<svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">'+\r\n    '  <rect class=\"stroke\" x=\"3\" y=\"4\" width=\"18\" height=\"14\" rx=\"1.5\"/>'+\r\n    '  <rect class=\"stroke\" x=\"5\" y=\"6\" width=\"10\" height=\"8\" rx=\"0.5\"/>'+\r\n    '  <circle class=\"stroke\" cx=\"18\" cy=\"9\" r=\"1.3\"/>'+\r\n    '  <circle class=\"stroke\" cx=\"18\" cy=\"13\" r=\"1.3\"/>'+\r\n    '</svg>';\r\n\r\n  const internal = document.createElement('a');\r\n  internal.className = 'tile right';\r\n  internal.id = 'tab-internal';\r\n  internal.setAttribute('role', 'tab');\r\n  internal.setAttribute('href', 'internal.html');\r\n  internal.setAttribute('title', '内部原理（波形/电路）');\r\n  internal.setAttribute('aria-selected', String(current === 'internal'));\r\n  internal.innerHTML = '<span class=\"sr-only\">内部原理</span>'+\r\n    '<svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">'+\r\n    '  <path class=\"stroke\" d=\"M2 12c2-6 4 6 6 0s4 6 6 0 4 6 6 0\"/>'+\r\n    '  <circle class=\"dot\" cx=\"19\" cy=\"6\" r=\"1.1\"/>'+\r\n    '</svg>';\r\n\r\n  nav.appendChild(external);\r\n  nav.appendChild(internal);\r\n  document.body.appendChild(nav);\r\n}\r\n\r\n// 兼容：同时挂到 window 以避免历史调用报错\r\nif (typeof window !== 'undefined') {\r\n  window.renderSwitcher = renderSwitcher;\r\n}\r\n\r\n\r\n\r\n\r\n\n;// ./src/config.json\nconst config_namespaceObject = /*#__PURE__*/JSON.parse('{\"CONFIG\":{\"beam\":{\"intensity\":1,\"color\":\"0x00ff00\"},\"deflection\":{\"horizontal\":{\"voltage\":0,\"maxDeflection\":3},\"vertical\":{\"voltage\":0,\"maxDeflection\":2.5}},\"waveform\":{\"type\":\"sine\",\"frequency\":1,\"amplitude\":3,\"phase\":0,\"enabled\":false},\"screen\":{\"persistence\":0.95,\"color\":\"0x0\",\"intensity\":0.6,\"gridColor\":\"0x666666\",\"gridSpacing\":0.5,\"gridOpacity\":0.3},\"dotLight\":{\"color\":\"0xffff00\"},\"shell\":{\"visible\":true,\"opacity\":0.8,\"size\":{\"width\":3.75,\"height\":3.75,\"depth\":4},\"cylinder1\":{\"visible\":false,\"radius\":1.5,\"height\":3.5,\"position\":{\"x\":0,\"y\":0,\"z\":0},\"rotation\":{\"x\":0,\"y\":0,\"z\":-3.1416},\"color\":\"0x88ccff\",\"opacity\":1},\"cylinder2\":{\"visible\":true,\"radius\":1,\"height\":2,\"position\":{\"x\":-4.5,\"y\":0,\"z\":0},\"rotation\":{\"x\":0,\"y\":0,\"z\":0},\"color\":\"0xF0F0F0\",\"opacity\":1},\"rotationCurveConnection\":{\"visible\":true,\"curveType\":\"G2\",\"connectionLength\":4.65,\"segments\":50,\"radialSegments\":32,\"color\":\"0xF0F0F0\",\"opacity\":1,\"position\":{\"offset\":{\"x\":3.3,\"y\":0,\"z\":0},\"description\":\"连接相对于计算中心点的位置偏移\"},\"rotation\":{\"offset\":{\"x\":0,\"y\":0,\"z\":0},\"description\":\"连接相对于计算方向的旋转偏移（弧度）\"},\"description\":\"旋转曲线连接配置 - 用于创建圆柱体之间的平滑过渡\"},\"superellipseTransition\":{\"visible\":true,\"segments\":64,\"radialSegments\":32,\"transitionLength\":5,\"startExponent\":2,\"endExponent\":40,\"g2Smoothing\":true,\"color\":\"0xF0F0F0\",\"opacity\":1,\"position\":{\"offset\":{\"x\":1.25,\"y\":0,\"z\":0},\"description\":\"形状渐变相对于计算中心点的位置偏移\"},\"rotation\":{\"offset\":{\"x\":0,\"y\":0,\"z\":0},\"description\":\"形状渐变相对于计算方向的旋转偏移（弧度）\"},\"description\":\"超椭圆形状渐变配置 - 从圆形平滑过渡到矩形（基于|x/a|^m + |y/b|^m = 1，更高的endExponent创造更接近矩形的形状）\"}},\"camera\":{\"fov\":45,\"near\":0.1,\"far\":1000,\"position\":{\"x\":9,\"y\":6,\"z\":15},\"target\":{\"x\":0,\"y\":0,\"z\":0}},\"scene\":{\"background\":\"0x20232a\",\"grid\":{\"size\":20,\"divisions\":40,\"color1\":\"0x4a4a4a\",\"color2\":\"0x2f2f2f\",\"position\":{\"x\":0,\"y\":-1.6,\"z\":0}}},\"materials\":{\"metal\":{\"color\":\"0xF0F0F0\",\"metalness\":0.6,\"roughness\":0.3,\"textures\":{\"map\":\"textures/silver_metal_background_1.jpg\"}},\"plate\":{\"color\":\"0xF0F0F0\",\"metalness\":0.6,\"roughness\":0.3,\"textures\":{\"map\":\"textures/silver_metal_background_1.jpg\"}},\"screen\":{\"color\":\"0x001a00\",\"roughness\":0.4,\"side\":\"DoubleSide\"},\"glow\":{\"opacity\":0.8,\"size\":0.02}},\"components\":{\"gun\":{\"radius\":0.15,\"height\":2,\"position\":{\"x\":-4,\"y\":0,\"z\":0}},\"gunHead\":{\"radius\":0.1,\"height\":0.4,\"position\":{\"x\":-2.9,\"y\":0,\"z\":0}},\"verticalPlates\":{\"width\":0.05,\"height\":1.5,\"depth\":1,\"positions\":[{\"x\":-1.5,\"y\":0.8,\"z\":0},{\"x\":-1.5,\"y\":-0.8,\"z\":0}]},\"horizontalPlates\":{\"width\":1.5,\"height\":0.05,\"depth\":1,\"positions\":[{\"x\":-0.2,\"y\":0,\"z\":0.55},{\"x\":-0.2,\"y\":0,\"z\":-0.55}]},\"screen\":{\"width\":4,\"height\":3,\"position\":{\"x\":6,\"y\":0,\"z\":0}}},\"electronBeam\":{\"startPoint\":{\"x\":-3,\"y\":0,\"z\":0},\"endPoint\":{\"x\":6,\"y\":0,\"z\":0},\"pathPoints\":[{\"x\":-2.7,\"y\":0,\"z\":0},{\"x\":-1.5,\"y\":0,\"z\":0},{\"x\":-0.2,\"y\":0,\"z\":0},{\"x\":3,\"y\":0,\"z\":0}],\"trace\":{\"maxPoints\":100,\"opacity\":0.3},\"parabolicSegments\":15,\"trajectorySmoothing\":0.3,\"linearSegments\":{\"gunToVerticalPlate\":3,\"betweenPlates\":3,\"plateToScreen\":5},\"voltageScalingFactor\":1,\"zFightingOffset\":0.05,\"screenOffset\":0.01,\"enableParticleEffect\":false,\"physics\":{\"electronVelocity\":1,\"electricFieldStrength\":0.8,\"platePositions\":{\"verticalPlateStart\":-1.8,\"verticalPlateEnd\":-1.2,\"horizontalPlateStart\":-0.5,\"horizontalPlateEnd\":0.5}}},\"screenEffects\":{\"maxGlowPoints\":200,\"glowPointSize\":0.02,\"fadeRate\":10,\"minOpacity\":0.05},\"explodedView\":{\"explodeFactor\":1.5,\"animationDuration\":1000,\"cameraOffset\":{\"x\":3,\"y\":2,\"z\":3}},\"demoAnimation\":{\"electronParticle\":{\"size\":0.015,\"opacity\":0.8,\"emissionRate\":8},\"cameraOffset\":{\"x\":3,\"y\":2,\"z\":3},\"animationDuration\":1500},\"ui\":{\"controlPanel\":{\"position\":{\"bottom\":\"20px\",\"right\":\"20px\"},\"backgroundColor\":\"rgba(0, 0, 0, 0.7)\",\"borderRadius\":\"8px\",\"padding\":\"10px\",\"zIndex\":100},\"demoPanel\":{\"position\":{\"top\":\"20px\",\"left\":\"20px\"},\"backgroundColor\":\"rgba(0, 0, 0, 0.7)\",\"borderRadius\":\"8px\",\"padding\":\"15px\",\"maxWidth\":\"300px\",\"zIndex\":100},\"button\":{\"backgroundColor\":\"#2196F3\",\"hoverColor\":\"#0b7dda\",\"activeColor\":\"#4CAF50\",\"warningColor\":\"#f44336\",\"padding\":\"8px 12px\",\"borderRadius\":\"4px\"}},\"labelSystem\":{\"backgroundColor\":\"rgba(0, 0, 0, 0.6)\",\"color\":\"white\",\"padding\":\"2px 6px\",\"borderRadius\":\"3px\",\"fontSize\":\"12px\",\"descriptionPanel\":{\"position\":{\"bottom\":\"20px\",\"left\":\"20px\"},\"backgroundColor\":\"rgba(0, 0, 0, 0.8)\",\"maxWidth\":\"400px\",\"zIndex\":1000}},\"descriptions\":{\"gun\":{\"name\":\"电子枪\",\"description\":\"电子枪是阴极射线管的核心部件，负责产生并加速电子束。它由加热的阴极（负极）和带正电的阳极组成，电子从阴极释放后被阳极加速，形成高速电子束。\"},\"gunHead\":{\"name\":\"电子枪出口\",\"description\":\"电子枪出口是电子束离开电子枪进入偏转系统的位置。在这里，电子束被聚焦成一个细小的光点，准备接受后续的偏转控制。\"},\"v1\":{\"name\":\"垂直偏转板（上）\",\"description\":\"垂直偏转板是一对带电平行板，用于控制电子束在垂直方向上的偏转。当上下偏转板之间施加电压时，电子束会受到垂直方向的电场力，导致在垂直方向上偏转。\"},\"v2\":{\"name\":\"垂直偏转板（下）\",\"description\":\"垂直偏转板的下板，与上板形成电场。通过调整两板之间的电压，可以控制电子束向上或向下偏转的程度。\"},\"h1\":{\"name\":\"水平偏转板（左）\",\"description\":\"水平偏转板是一对带电平行板，用于控制电子束在水平方向上的偏转。当左右偏转板之间施加电压时，电子束会受到水平方向的电场力，导致在水平方向上偏转。\"},\"h2\":{\"name\":\"水平偏转板（右）\",\"description\":\"水平偏转板的右板，与左板形成电场。通过调整两板之间的电压，可以控制电子束向左或向右偏转的程度。\"},\"screen\":{\"name\":\"荧光屏\",\"description\":\"荧光屏是涂有荧光物质的平板，当高速电子束击中荧光屏时，荧光物质会发光，形成可见的光点。通过控制电子束的偏转，可以在荧光屏上绘制各种图形和波形。\"}}},\"WAVEFORM_TYPES\":{\"sine\":\"正弦波\",\"square\":\"方波\",\"sawtooth\":\"锯齿波\",\"triangle\":\"三角波\"}}');\n;// ./src/configLoader.js\n// 配置加载器 - 从JSON加载并处理配置\r\n\r\n\r\n// 递归处理对象，将字符串形式的十六进制颜色转换为数字\r\nfunction processConfig(obj) {\r\n  if (typeof obj === 'string' && obj.startsWith('0x')) {\r\n    // 转换十六进制字符串为数字\r\n    return parseInt(obj, 16);\r\n  } else if (Array.isArray(obj)) {\r\n    // 处理数组\r\n    return obj.map(processConfig);\r\n  } else if (obj && typeof obj === 'object') {\r\n    // 处理对象\r\n    const processed = {};\r\n    for (const [key, value] of Object.entries(obj)) {\r\n      processed[key] = processConfig(value);\r\n    }\r\n    return processed;\r\n  }\r\n  return obj;\r\n}\r\n\r\n// 处理配置数据\r\nconst processedConfig = processConfig(config_namespaceObject);\r\n\r\n// 导出处理后的配置\r\nconst CONFIG = processedConfig.CONFIG;\r\nconst WAVEFORM_TYPES = processedConfig.WAVEFORM_TYPES;\r\n\n;// ./src/examples/ConnectionPositionDemo.js\n/**\r\n * 旋转曲线连接位置控制演示\r\n * 展示如何在代码中动态移动和旋转连接\r\n */\r\n\r\nclass ConnectionPositionDemo {\r\n  constructor(crtShell) {\r\n    this.crtShell = crtShell;\r\n    this.animationId = null;\r\n    this.isAnimating = false;\r\n    \r\n    // 原始偏移量\r\n    this.originalPositionOffset = { x: 0, y: 0, z: 0 };\r\n    this.originalRotationOffset = { x: 0, y: 0, z: 0 };\r\n    \r\n    // 动画参数\r\n    this.time = 0;\r\n    this.animationSpeed = 0.01;\r\n  }\r\n\r\n  /**\r\n   * 开始位置动画演示\r\n   */\r\n  startPositionAnimation() {\r\n    if (this.isAnimating) return;\r\n    \r\n    this.isAnimating = true;\r\n    this.time = 0;\r\n    \r\n    // 保存原始偏移量\r\n    this.originalPositionOffset = this.crtShell.getConnectionPositionOffset();\r\n    this.originalRotationOffset = this.crtShell.getConnectionRotationOffset();\r\n    \r\n    console.log('🎬 开始旋转曲线连接位置动画演示');\r\n    this.animate();\r\n  }\r\n\r\n  /**\r\n   * 停止位置动画演示\r\n   */\r\n  stopPositionAnimation() {\r\n    if (!this.isAnimating) return;\r\n    \r\n    this.isAnimating = false;\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n    }\r\n    \r\n    // 恢复原始偏移量\r\n    this.crtShell.setConnectionPositionOffset(\r\n      this.originalPositionOffset.x,\r\n      this.originalPositionOffset.y,\r\n      this.originalPositionOffset.z\r\n    );\r\n    this.crtShell.setConnectionRotationOffset(\r\n      this.originalRotationOffset.x,\r\n      this.originalRotationOffset.y,\r\n      this.originalRotationOffset.z\r\n    );\r\n    \r\n    console.log('⏹️ 停止旋转曲线连接位置动画演示');\r\n  }\r\n\r\n  /**\r\n   * 动画循环\r\n   */\r\n  animate() {\r\n    if (!this.isAnimating) return;\r\n    \r\n    this.time += this.animationSpeed;\r\n    \r\n    // 计算动态位置偏移\r\n    const positionOffset = {\r\n      x: this.originalPositionOffset.x + Math.sin(this.time) * 0.5,\r\n      y: this.originalPositionOffset.y + Math.cos(this.time * 0.8) * 0.3,\r\n      z: this.originalPositionOffset.z + Math.sin(this.time * 1.2) * 0.2\r\n    };\r\n    \r\n    // 计算动态旋转偏移\r\n    const rotationOffset = {\r\n      x: this.originalRotationOffset.x + Math.sin(this.time * 0.7) * 0.2,\r\n      y: this.originalRotationOffset.y + Math.cos(this.time * 0.9) * 0.15,\r\n      z: this.originalRotationOffset.z + Math.sin(this.time * 1.1) * 0.1\r\n    };\r\n    \r\n    // 应用偏移\r\n    this.crtShell.setConnectionPositionOffset(\r\n      positionOffset.x,\r\n      positionOffset.y,\r\n      positionOffset.z\r\n    );\r\n    this.crtShell.setConnectionRotationOffset(\r\n      rotationOffset.x,\r\n      rotationOffset.y,\r\n      rotationOffset.z\r\n    );\r\n    \r\n    this.animationId = requestAnimationFrame(() => this.animate());\r\n  }\r\n\r\n  /**\r\n   * 演示不同的位置预设\r\n   */\r\n  demonstratePositionPresets() {\r\n    console.log('🎯 演示旋转曲线连接位置预设');\r\n    \r\n    const presets = [\r\n      {\r\n        name: '默认位置',\r\n        position: { x: 0, y: 0, z: 0 },\r\n        rotation: { x: 0, y: 0, z: 0 }\r\n      },\r\n      {\r\n        name: '向上偏移',\r\n        position: { x: 0, y: 0.5, z: 0 },\r\n        rotation: { x: 0, y: 0, z: 0 }\r\n      },\r\n      {\r\n        name: '向右偏移',\r\n        position: { x: 0.5, y: 0, z: 0 },\r\n        rotation: { x: 0, y: 0, z: 0 }\r\n      },\r\n      {\r\n        name: '向前偏移',\r\n        position: { x: 0, y: 0, z: 0.5 },\r\n        rotation: { x: 0, y: 0, z: 0 }\r\n      },\r\n      {\r\n        name: '旋转倾斜',\r\n        position: { x: 0, y: 0, z: 0 },\r\n        rotation: { x: 0.3, y: 0.2, z: 0.1 }\r\n      },\r\n      {\r\n        name: '复合变换',\r\n        position: { x: 0.3, y: 0.2, z: 0.1 },\r\n        rotation: { x: 0.2, y: 0.3, z: 0.1 }\r\n      }\r\n    ];\r\n    \r\n    let currentIndex = 0;\r\n    \r\n    const switchPreset = () => {\r\n      if (currentIndex >= presets.length) {\r\n        console.log('✅ 位置预设演示完成');\r\n        return;\r\n      }\r\n      \r\n      const preset = presets[currentIndex];\r\n      console.log(`📍 切换到预设: ${preset.name}`);\r\n      \r\n      this.crtShell.setConnectionPositionOffset(\r\n        preset.position.x,\r\n        preset.position.y,\r\n        preset.position.z\r\n      );\r\n      this.crtShell.setConnectionRotationOffset(\r\n        preset.rotation.x,\r\n        preset.rotation.y,\r\n        preset.rotation.z\r\n      );\r\n      \r\n      currentIndex++;\r\n      setTimeout(switchPreset, 2000); // 每2秒切换一个预设\r\n    };\r\n    \r\n    switchPreset();\r\n  }\r\n\r\n  /**\r\n   * 手动设置连接位置\r\n   */\r\n  setConnectionPosition(x, y, z) {\r\n    console.log(`🎯 手动设置连接位置: (${x}, ${y}, ${z})`);\r\n    this.crtShell.setConnectionPositionOffset(x, y, z);\r\n  }\r\n\r\n  /**\r\n   * 手动设置连接旋转\r\n   */\r\n  setConnectionRotation(x, y, z) {\r\n    console.log(`🔄 手动设置连接旋转: (${x}, ${y}, ${z}) 弧度`);\r\n    this.crtShell.setConnectionRotationOffset(x, y, z);\r\n  }\r\n\r\n  /**\r\n   * 获取当前连接变换信息\r\n   */\r\n  getConnectionTransform() {\r\n    const position = this.crtShell.getConnectionPositionOffset();\r\n    const rotation = this.crtShell.getConnectionRotationOffset();\r\n    const actualPosition = this.crtShell.getConnectionPosition();\r\n    const actualRotation = this.crtShell.getConnectionRotation();\r\n    \r\n    const info = {\r\n      positionOffset: position,\r\n      rotationOffset: rotation,\r\n      actualPosition: {\r\n        x: actualPosition.x,\r\n        y: actualPosition.y,\r\n        z: actualPosition.z\r\n      },\r\n      actualRotation: {\r\n        x: actualRotation.x,\r\n        y: actualRotation.y,\r\n        z: actualRotation.z\r\n      }\r\n    };\r\n    \r\n    console.log('📊 当前连接变换信息:', info);\r\n    return info;\r\n  }\r\n\r\n  /**\r\n   * 重置连接到默认位置\r\n   */\r\n  resetConnectionTransform() {\r\n    console.log('🔄 重置连接到默认位置');\r\n    this.crtShell.setConnectionPositionOffset(0, 0, 0);\r\n    this.crtShell.setConnectionRotationOffset(0, 0, 0);\r\n  }\r\n}\r\n\r\n// 使用示例（在浏览器控制台中）：\r\n/*\r\n// 假设你已经有了 crtShell 实例\r\nconst demo = new ConnectionPositionDemo(crtShell);\r\n\r\n// 开始动画演示\r\ndemo.startPositionAnimation();\r\n\r\n// 停止动画\r\ndemo.stopPositionAnimation();\r\n\r\n// 演示位置预设\r\ndemo.demonstratePositionPresets();\r\n\r\n// 手动设置位置\r\ndemo.setConnectionPosition(0.5, 0.3, 0.2);\r\n\r\n// 手动设置旋转\r\ndemo.setConnectionRotation(0.1, 0.2, 0.1);\r\n\r\n// 获取当前变换信息\r\ndemo.getConnectionTransform();\r\n\r\n// 重置到默认位置\r\ndemo.resetConnectionTransform();\r\n*/\r\n\n;// ./src/examples/SuperellipseTransitionDemo.js\n/**\r\n * 超椭圆形状渐变演示类\r\n * 提供形状渐变的交互控制和动画演示\r\n */\r\nclass SuperellipseTransitionDemo {\r\n  /**\r\n   * 构造函数\r\n   * @param {CRTShell} crtShell - CRT外壳实例\r\n   */\r\n  constructor(crtShell) {\r\n    this.crtShell = crtShell;\r\n    this.animationId = null;\r\n    this.animationStartTime = 0;\r\n    \r\n    console.log('🎨 超椭圆形状渐变演示已初始化');\r\n    console.log('📖 可用方法：');\r\n    console.log('  • startMorphAnimation() - 开始形状变形动画');\r\n    console.log('  • stopMorphAnimation() - 停止动画');\r\n    console.log('  • demonstrateExponents() - 演示不同指数效果');\r\n    console.log('  • setTransitionPosition(x,y,z) - 设置位置');\r\n    console.log('  • setTransitionExponents(start,end) - 设置指数范围');\r\n    console.log('  • resetTransition() - 重置到默认状态');\r\n  }\r\n\r\n  /**\r\n   * 开始形状变形动画\r\n   * 动态改变超椭圆指数，实现从圆形到方形的连续变形\r\n   */\r\n  startMorphAnimation() {\r\n    console.log('🎬 开始超椭圆形状变形动画...');\r\n    \r\n    this.stopMorphAnimation(); // 确保没有重复动画\r\n    this.animationStartTime = Date.now();\r\n    \r\n    const animate = () => {\r\n      const elapsed = (Date.now() - this.animationStartTime) / 1000;\r\n      const period = 6.0; // 动画周期（秒）\r\n      \r\n      // 使用正弦波创建平滑的指数变化\r\n      const t = (Math.sin(elapsed * 2 * Math.PI / period) + 1) / 2; // 0到1之间\r\n      \r\n      // 指数范围：2.0（圆形）到 12.0（尖锐方形）\r\n      const startExponent = 2.0 + t * 10.0;\r\n      const endExponent = 2.0 + (1 - t) * 10.0;\r\n      \r\n      // 更新形状渐变\r\n      this.crtShell.updateTransitionExponents(startExponent, endExponent);\r\n      \r\n      // 同时调整位置产生波动效果\r\n      const positionWave = Math.sin(elapsed * 4) * 0.2;\r\n      this.crtShell.setTransitionPositionOffset(1.2 + positionWave, 0, 0);\r\n      \r\n      this.animationId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    animate();\r\n  }\r\n\r\n  /**\r\n   * 停止形状变形动画\r\n   */\r\n  stopMorphAnimation() {\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n      console.log('⏹️ 形状变形动画已停止');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 演示不同的超椭圆指数效果\r\n   * 自动循环展示各种形状\r\n   */\r\n  demonstrateExponents() {\r\n    console.log('🎯 演示超椭圆指数效果...');\r\n    \r\n    const demonstrations = [\r\n      { name: '标准圆形', start: 2.0, end: 2.0, duration: 2000 },\r\n      { name: '椭圆形', start: 2.0, end: 2.5, duration: 2000 },\r\n      { name: '圆角方形', start: 2.0, end: 6.0, duration: 2000 },\r\n      { name: '方形', start: 2.0, end: 8.0, duration: 2000 },\r\n      { name: '尖锐方形', start: 2.0, end: 12.0, duration: 2000 },\r\n      { name: '超尖锐方形', start: 2.0, end: 20.0, duration: 2000 },\r\n      { name: '极端方形', start: 2.0, end: 50.0, duration: 2000 }\r\n    ];\r\n    \r\n    let currentIndex = 0;\r\n    \r\n    const showNext = () => {\r\n      if (currentIndex >= demonstrations.length) {\r\n        console.log('✅ 指数演示完成');\r\n        this.resetTransition();\r\n        return;\r\n      }\r\n      \r\n      const demo = demonstrations[currentIndex];\r\n      console.log(`📐 ${demo.name}: 起始指数=${demo.start}, 结束指数=${demo.end}`);\r\n      \r\n      this.crtShell.updateTransitionExponents(demo.start, demo.end);\r\n      \r\n      currentIndex++;\r\n      setTimeout(showNext, demo.duration);\r\n    };\r\n    \r\n    showNext();\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变位置\r\n   * @param {number} x - X坐标\r\n   * @param {number} y - Y坐标  \r\n   * @param {number} z - Z坐标\r\n   */\r\n  setTransitionPosition(x, y, z) {\r\n    this.crtShell.setTransitionPosition(x, y, z);\r\n    console.log(`📍 形状渐变位置设置为: (${x.toFixed(2)}, ${y.toFixed(2)}, ${z.toFixed(2)})`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变位置偏移\r\n   * @param {number} x - X轴偏移\r\n   * @param {number} y - Y轴偏移\r\n   * @param {number} z - Z轴偏移\r\n   */\r\n  setTransitionPositionOffset(x, y, z) {\r\n    this.crtShell.setTransitionPositionOffset(x, y, z);\r\n    console.log(`📍 形状渐变位置偏移设置为: (${x.toFixed(2)}, ${y.toFixed(2)}, ${z.toFixed(2)})`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变旋转偏移\r\n   * @param {number} x - X轴旋转偏移（弧度）\r\n   * @param {number} y - Y轴旋转偏移（弧度）\r\n   * @param {number} z - Z轴旋转偏移（弧度）\r\n   */\r\n  setTransitionRotationOffset(x, y, z) {\r\n    this.crtShell.setTransitionRotationOffset(x, y, z);\r\n    console.log(`🔄 形状渐变旋转偏移设置为: (${x.toFixed(3)}, ${y.toFixed(3)}, ${z.toFixed(3)}) 弧度`);\r\n  }\r\n\r\n  /**\r\n   * 设置超椭圆指数\r\n   * @param {number} startExponent - 起始指数（圆形：2.0）\r\n   * @param {number} endExponent - 结束指数（方形：8.0+）\r\n   */\r\n  setTransitionExponents(startExponent, endExponent) {\r\n    this.crtShell.updateTransitionExponents(startExponent, endExponent);\r\n    console.log(`📐 超椭圆指数设置为: 起始=${startExponent}, 结束=${endExponent}`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变可见性\r\n   * @param {boolean} visible - 是否可见\r\n   */\r\n  setTransitionVisible(visible) {\r\n    this.crtShell.setTransitionVisible(visible);\r\n    console.log(`👁️ 形状渐变可见性: ${visible ? '显示' : '隐藏'}`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变颜色\r\n   * @param {number} color - 颜色值（十六进制）\r\n   */\r\n  setTransitionColor(color) {\r\n    this.crtShell.setTransitionColor(color);\r\n    console.log(`🎨 形状渐变颜色设置为: 0x${color.toString(16)}`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变透明度\r\n   * @param {number} opacity - 透明度（0-1）\r\n   */\r\n  setTransitionOpacity(opacity) {\r\n    this.crtShell.setTransitionOpacity(opacity);\r\n    console.log(`🔍 形状渐变透明度设置为: ${opacity.toFixed(2)}`);\r\n  }\r\n\r\n  /**\r\n   * 获取当前形状渐变状态信息\r\n   */\r\n  getTransitionInfo() {\r\n    const position = this.crtShell.getTransitionPosition();\r\n    const rotation = this.crtShell.getTransitionRotation();\r\n    const posOffset = this.crtShell.getTransitionPositionOffset();\r\n    const rotOffset = this.crtShell.getTransitionRotationOffset();\r\n    \r\n    const info = {\r\n      position: { x: position.x, y: position.y, z: position.z },\r\n      rotation: { x: rotation.x, y: rotation.y, z: rotation.z },\r\n      positionOffset: posOffset,\r\n      rotationOffset: rotOffset\r\n    };\r\n    \r\n    console.log('📊 当前形状渐变状态:', info);\r\n    return info;\r\n  }\r\n\r\n  /**\r\n   * 重置形状渐变到默认状态\r\n   */\r\n  resetTransition() {\r\n    console.log('🔄 重置形状渐变到默认状态...');\r\n    \r\n    // 停止动画\r\n    this.stopMorphAnimation();\r\n    \r\n    // 重置指数\r\n    this.crtShell.updateTransitionExponents(2.0, 8.0);\r\n    \r\n    // 重置位置偏移\r\n    this.crtShell.setTransitionPositionOffset(1.2, 0, 0);\r\n    \r\n    // 重置旋转偏移\r\n    this.crtShell.setTransitionRotationOffset(0, 0, 0);\r\n    \r\n    // 重置可见性和样式\r\n    this.crtShell.setTransitionVisible(true);\r\n    this.crtShell.setTransitionColor(0x99ddff);\r\n    this.crtShell.setTransitionOpacity(0.8);\r\n    \r\n    console.log('✅ 形状渐变已重置');\r\n  }\r\n\r\n  /**\r\n   * 演示位置控制功能\r\n   */\r\n  demonstratePositionControl() {\r\n    console.log('🎯 演示位置控制功能...');\r\n    \r\n    const positions = [\r\n      { name: '默认位置', offset: { x: 1.2, y: 0, z: 0 } },\r\n      { name: '上移', offset: { x: 1.2, y: 0.5, z: 0 } },\r\n      { name: '下移', offset: { x: 1.2, y: -0.5, z: 0 } },\r\n      { name: '前移', offset: { x: 1.2, y: 0, z: 0.5 } },\r\n      { name: '后移', offset: { x: 1.2, y: 0, z: -0.5 } },\r\n      { name: '左移', offset: { x: 0.7, y: 0, z: 0 } },\r\n      { name: '右移', offset: { x: 1.7, y: 0, z: 0 } }\r\n    ];\r\n    \r\n    let currentIndex = 0;\r\n    \r\n    const showNext = () => {\r\n      if (currentIndex >= positions.length) {\r\n        console.log('✅ 位置控制演示完成');\r\n        this.resetTransition();\r\n        return;\r\n      }\r\n      \r\n      const pos = positions[currentIndex];\r\n      console.log(`📍 ${pos.name}: (${pos.offset.x}, ${pos.offset.y}, ${pos.offset.z})`);\r\n      \r\n      this.crtShell.setTransitionPositionOffset(pos.offset.x, pos.offset.y, pos.offset.z);\r\n      \r\n      currentIndex++;\r\n      setTimeout(showNext, 1500);\r\n    };\r\n    \r\n    showNext();\r\n  }\r\n\r\n  /**\r\n   * 开始螺旋位置动画\r\n   */\r\n  startSpiralAnimation() {\r\n    console.log('🌀 开始螺旋位置动画...');\r\n    \r\n    this.stopMorphAnimation(); // 停止其他动画\r\n    this.animationStartTime = Date.now();\r\n    \r\n    const animate = () => {\r\n      const elapsed = (Date.now() - this.animationStartTime) / 1000;\r\n      const frequency = 0.5; // 螺旋频率\r\n      \r\n      // 螺旋参数\r\n      const radius = 0.3;\r\n      const baseX = 1.2;\r\n      \r\n      const x = baseX + Math.cos(elapsed * frequency * 2 * Math.PI) * radius;\r\n      const y = Math.sin(elapsed * frequency * 2 * Math.PI) * radius;\r\n      const z = Math.sin(elapsed * frequency * Math.PI) * 0.2;\r\n      \r\n      this.crtShell.setTransitionPositionOffset(x, y, z);\r\n      \r\n      // 同时变化指数创建更复杂的效果\r\n      const expWave = (Math.sin(elapsed * 2) + 1) / 2;\r\n      const startExp = 2.0 + expWave * 6.0;\r\n      const endExp = 8.0 - expWave * 4.0;\r\n      this.crtShell.updateTransitionExponents(startExp, endExp);\r\n      \r\n      this.animationId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    animate();\r\n  }\r\n}\r\n\n// EXTERNAL MODULE: ./node_modules/dat.gui/build/dat.gui.module.js\nvar dat_gui_module = __webpack_require__(924);\n;// ./src/controllers/GuiController.js\n\n\n\nclass GuiController {\n  constructor(callbacks = {}) {\n    // 响应式宽度计算 - 基于2560*1440标准向下兼容\n    this.getResponsiveWidth = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      // 2K分辨率及以上 (2560*1440+)\n      if (width >= 2560 && height >= 1440) return 400;\n      // 标准FHD (1920*1080)\n      if (width >= 1920 && height >= 1080) return 350;\n      // 中等分辨率 (1366*768, 1600*900)\n      if (width >= 1366) return 300;\n      // 小屏幕 (1024*768)\n      if (width >= 1024) return 260;\n      // 平板 (768px-1023px)\n      if (width >= 768) return 240;\n      // 移动设备 (< 768px)\n      return 220;\n    };\n    \n    this.gui = new dat_gui_module/* GUI */.cL({ width: this.getResponsiveWidth() });\n    this.callbacks = callbacks;\n    \n    // 保存回调函数\n    this.onBeamChange = callbacks.onBeamChange || (() => {});\n    this.onDeflectionChange = callbacks.onDeflectionChange || (() => {});\n    this.onWaveformChange = callbacks.onWaveformChange || (() => {});\n    this.onScreenChange = callbacks.onScreenChange || (() => {});\n    this.onShellChange = callbacks.onShellChange || (() => {});\n    \n    this.initGui();\n    this.setupResponsiveHandlers();\n  }\n  \n  initGui() {\n    // 创建各个控制面板\n    this.initBeamControls();\n    this.initDeflectionControls();\n    this.initWaveformControls();\n    this.initScreenControls();\n    this.initShellControls();\n  }\n  \n  initBeamControls() {\n    const beamFolder = this.gui.addFolder('电子束参数');\n    \n    beamFolder.add(CONFIG.beam, 'intensity', 0, 1)\n      .name('强度')\n      .onChange(() => this.onBeamChange(CONFIG.beam));\n      \n    beamFolder.addColor({ color: CONFIG.beam.color }, 'color')\n      .name('颜色')\n      .onChange((value) => {\n        CONFIG.beam.color = value;\n        this.onBeamChange(CONFIG.beam);\n      });\n      \n    beamFolder.open();\n  }\n  \n  initDeflectionControls() {\n    const deflectionFolder = this.gui.addFolder('偏转板参数');\n    \n    deflectionFolder.add(CONFIG.deflection.horizontal, 'voltage', -5, 5, 0.1)\n      .name('水平电压 (V)')\n      .onChange(() => this.onDeflectionChange(CONFIG.deflection));\n      \n    deflectionFolder.add(CONFIG.deflection.vertical, 'voltage', -5, 5, 0.1)\n      .name('垂直电压 (V)')\n      .onChange(() => this.onDeflectionChange(CONFIG.deflection));\n      \n    deflectionFolder.open();\n  }\n  \n  initWaveformControls() {\n    const waveformFolder = this.gui.addFolder('波形参数');\n    \n    // 创建波形类型下拉菜单\n    const waveformOptions = {};\n    Object.entries(WAVEFORM_TYPES).forEach(([key, value]) => {\n      waveformOptions[value] = key;\n    });\n    \n    waveformFolder.add(CONFIG.waveform, 'enabled')\n      .name('启用波形')\n      .onChange(() => this.onWaveformChange(CONFIG.waveform));\n      \n    waveformFolder.add(CONFIG.waveform, 'type', Object.keys(WAVEFORM_TYPES))\n      .name('波形类型')\n      .onChange(() => this.onWaveformChange(CONFIG.waveform));\n      \n    waveformFolder.add(CONFIG.waveform, 'frequency', 0.1, 5, 0.1)\n      .name('频率 (Hz)')\n      .onChange(() => this.onWaveformChange(CONFIG.waveform));\n      \n    waveformFolder.add(CONFIG.waveform, 'amplitude', 0, 5, 0.1)\n      .name('振幅')\n      .onChange(() => this.onWaveformChange(CONFIG.waveform));\n      \n    waveformFolder.open();\n  }\n  \n  initScreenControls() {\n    const screenFolder = this.gui.addFolder('荧光屏参数');\n    \n    screenFolder.add(CONFIG.screen, 'persistence', 0, 1, 0.01)\n      .name('余辉持续')\n      .onChange(() => this.onScreenChange(CONFIG.screen));\n      \n    screenFolder.addColor({ color: CONFIG.screen.color }, 'color')\n      .name('荧光颜色')\n      .onChange((value) => {\n        CONFIG.screen.color = value;\n        this.onScreenChange(CONFIG.screen);\n      });\n      \n    screenFolder.add(CONFIG.screen, 'intensity', 0, 1, 0.1)\n      .name('发光强度')\n      .onChange(() => this.onScreenChange(CONFIG.screen));\n      \n    screenFolder.open();\n  }\n  \n  initShellControls() {\n    const shellFolder = this.gui.addFolder('外壳参数');\n    \n    shellFolder.add(CONFIG.shell, 'visible')\n      .name('显示外壳')\n      .onChange(() => this.onShellChange(CONFIG.shell));\n      \n    shellFolder.add(CONFIG.shell, 'opacity', 0, 1, 0.01)\n      .name('透明度')\n      .onChange(() => this.onShellChange(CONFIG.shell));\n      \n  \n    shellFolder.open();\n  }\n  \n  /**\n   * 设置响应式处理器\n   */\n  setupResponsiveHandlers() {\n    // 防抖函数\n    let resizeTimeout;\n    const debounce = (func, wait) => {\n      return function executedFunction(...args) {\n        const later = () => {\n          clearTimeout(resizeTimeout);\n          func(...args);\n        };\n        clearTimeout(resizeTimeout);\n        resizeTimeout = setTimeout(later, wait);\n      };\n    };\n    \n    // 窗口大小改变时调整GUI宽度\n    const handleResize = debounce(() => {\n      const newWidth = this.getResponsiveWidth();\n      if (this.gui && this.gui.domElement) {\n        this.gui.width = newWidth;\n        // 手动更新GUI的DOM样式\n        const guiElement = this.gui.domElement;\n        if (guiElement) {\n          guiElement.style.width = newWidth + 'px';\n        }\n      }\n    }, 250);\n    \n    // 监听窗口大小变化\n    window.addEventListener('resize', handleResize);\n    \n    // 存储清理函数\n    this.cleanup = () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }\n  \n  /**\n   * 销毁GUI控制器\n   */\n  destroy() {\n    if (this.cleanup) {\n      this.cleanup();\n    }\n    if (this.gui) {\n      this.gui.destroy();\n    }\n  }\n} \n;// ./src/controllers/UIController.js\n\n\n\n/**\n * UI控制器类\n * 负责管理界面元素和交互\n */\nclass UIController {\n  /**\n   * 构造函数\n   * @param {Object} options - 选项\n   * @param {Object} options.components - 组件对象\n   * @param {Object} options.controllers - 控制器对象\n   */\n  constructor(options = {}) {\n    this.components = options.components || {};\n    this.controllers = options.controllers || {};\n    \n    // 创建UI容器\n    this.container = document.createElement('div');\n    this.container.id = 'ui-container';\n    \n    // 确保DOM已加载\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        this.initializeUI();\n      });\n    } else {\n      this.initializeUI();\n    }\n  }\n  \n  /**\n   * 初始化UI（在DOM加载完成后调用）\n   */\n  initializeUI() {\n    console.log('初始化UI...');\n    document.body.appendChild(this.container);\n    \n    // 初始化UI\n    this.initStyles();\n    this.initUI();\n    \n    // 检查controllers是否正确传递\n    console.log('检查控制器:', {\n      labelSystem: !!this.controllers.labelSystem,\n      explodedView: !!this.controllers.explodedView,\n      demoAnimation: !!this.controllers.demoAnimation\n    });\n    \n    console.log('UI控制器初始化完成');\n  }\n  \n  /**\n   * 初始化样式\n   */\n  initStyles() {\n    const style = document.createElement('style');\n    style.textContent = `\n      #ui-container {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n      }\n      \n      .control-panel {\n        position: absolute;\n        bottom: ${CONFIG.ui.controlPanel.position.bottom};\n        right: ${CONFIG.ui.controlPanel.position.right};\n        background-color: ${CONFIG.ui.controlPanel.backgroundColor};\n        border-radius: ${CONFIG.ui.controlPanel.borderRadius};\n        padding: ${CONFIG.ui.controlPanel.padding};\n        color: white;\n        font-family: Arial, sans-serif;\n        pointer-events: auto;\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        z-index: ${CONFIG.ui.controlPanel.zIndex};\n      }\n      \n      .control-panel button {\n        background-color: ${CONFIG.ui.button.backgroundColor};\n        border: none;\n        color: white;\n        padding: ${CONFIG.ui.button.padding};\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 14px;\n        margin: 2px;\n        cursor: pointer;\n        border-radius: ${CONFIG.ui.button.borderRadius};\n        transition: background-color 0.3s;\n      }\n      \n      .control-panel button:hover {\n        background-color: ${CONFIG.ui.button.hoverColor};\n      }\n      \n      .control-panel button.active {\n        background-color: ${CONFIG.ui.button.activeColor};\n      }\n      \n      .control-panel button.warning {\n        background-color: ${CONFIG.ui.button.warningColor};\n      }\n      \n      .control-panel .button-group {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n      }\n      \n      .demo-panel {\n        position: absolute;\n        top: ${CONFIG.ui.demoPanel.position.top};\n        left: ${CONFIG.ui.demoPanel.position.left};\n        background-color: ${CONFIG.ui.demoPanel.backgroundColor};\n        border-radius: ${CONFIG.ui.demoPanel.borderRadius};\n        padding: ${CONFIG.ui.demoPanel.padding};\n        color: white;\n        font-family: Arial, sans-serif;\n        pointer-events: auto;\n        max-width: ${CONFIG.ui.demoPanel.maxWidth};\n        z-index: ${CONFIG.ui.demoPanel.zIndex};\n        transition: opacity 0.5s;\n      }\n      \n      .demo-panel h2 {\n        margin-top: 0;\n        margin-bottom: 10px;\n        font-size: 18px;\n      }\n      \n      .demo-panel p {\n        margin-bottom: 15px;\n        font-size: 14px;\n        line-height: 1.5;\n      }\n      \n      .demo-panel .progress {\n        width: 100%;\n        height: 4px;\n        background-color: #555;\n        margin-top: 10px;\n        border-radius: 2px;\n        overflow: hidden;\n      }\n      \n      .demo-panel .progress-bar {\n        height: 100%;\n        background-color: #4CAF50;\n        width: 0%;\n        transition: width 0.3s;\n      }\n      \n      .demo-panel .step-info {\n        display: flex;\n        justify-content: space-between;\n        font-size: 12px;\n        margin-top: 5px;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n  \n  /**\n   * 初始化UI\n   */\n  initUI() {\n    this.initControlPanel();\n    this.initDemoPanel();\n  }\n  \n  /**\n   * 初始化控制面板\n   */\n  initControlPanel() {\n    console.log('初始化控制面板...');\n    \n    // 创建控制面板\n    this.controlPanel = document.createElement('div');\n    this.controlPanel.className = 'control-panel';\n    this.container.appendChild(this.controlPanel);\n    \n    // 标签控制\n    const labelGroup = document.createElement('div');\n    labelGroup.className = 'button-group';\n    \n    const labelTitle = document.createElement('div');\n    labelTitle.textContent = '标签控制';\n    labelTitle.style.marginBottom = '5px';\n    labelGroup.appendChild(labelTitle);\n    \n    const toggleLabelsBtn = document.createElement('button');\n    toggleLabelsBtn.textContent = '显示标签';\n    toggleLabelsBtn.onclick = () => {\n      console.log('标签按钮被点击');\n      this.toggleLabels();\n    };\n    toggleLabelsBtn.id = 'toggle-labels-btn';\n    labelGroup.appendChild(toggleLabelsBtn);\n    \n    this.controlPanel.appendChild(labelGroup);\n    \n    // 分解视图控制\n    const explodeGroup = document.createElement('div');\n    explodeGroup.className = 'button-group';\n    \n    const explodeTitle = document.createElement('div');\n    explodeTitle.textContent = '分解视图';\n    explodeTitle.style.marginBottom = '5px';\n    explodeGroup.appendChild(explodeTitle);\n    \n    const toggleExplodeBtn = document.createElement('button');\n    toggleExplodeBtn.textContent = '分解视图';\n    toggleExplodeBtn.onclick = () => {\n      console.log('分解视图按钮被点击');\n      this.toggleExplodedView();\n    };\n    toggleExplodeBtn.id = 'toggle-explode-btn';\n    explodeGroup.appendChild(toggleExplodeBtn);\n    \n    const resetViewBtn = document.createElement('button');\n    resetViewBtn.textContent = '重置视图';\n    resetViewBtn.onclick = () => {\n      console.log('重置视图按钮被点击');\n      this.resetView();\n    };\n    explodeGroup.appendChild(resetViewBtn);\n    \n    this.controlPanel.appendChild(explodeGroup);\n    \n    // 组件聚焦控制\n    const focusGroup = document.createElement('div');\n    focusGroup.className = 'button-group';\n    \n    const focusTitle = document.createElement('div');\n    focusTitle.textContent = '聚焦组件';\n    focusTitle.style.marginBottom = '5px';\n    focusGroup.appendChild(focusTitle);\n    \n    // 为每个主要组件创建聚焦按钮\n    const components = [\n      { key: 'gun', name: '电子枪' },\n      { key: 'v1', name: '垂直偏转板' },\n      { key: 'h1', name: '水平偏转板' },\n      { key: 'screen', name: '荧光屏' }\n    ];\n    \n    components.forEach(comp => {\n      const btn = document.createElement('button');\n      btn.textContent = comp.name;\n      btn.onclick = () => {\n        console.log('聚焦到组件:', comp.key);\n        this.focusComponent(comp.key);\n      };\n      focusGroup.appendChild(btn);\n    });\n    \n    this.controlPanel.appendChild(focusGroup);\n    \n    // 演示动画控制\n    const demoGroup = document.createElement('div');\n    demoGroup.className = 'button-group';\n    \n    const demoTitle = document.createElement('div');\n    demoTitle.textContent = '工作原理演示';\n    demoTitle.style.marginBottom = '5px';\n    demoGroup.appendChild(demoTitle);\n    \n    const startDemoBtn = document.createElement('button');\n    startDemoBtn.textContent = '开始演示';\n    startDemoBtn.onclick = () => {\n      console.log('开始演示按钮被点击');\n      this.startDemoAnimation();\n    };\n    startDemoBtn.id = 'start-demo-btn';\n    demoGroup.appendChild(startDemoBtn);\n    \n    const stopDemoBtn = document.createElement('button');\n    stopDemoBtn.textContent = '停止演示';\n    stopDemoBtn.onclick = () => {\n      console.log('停止演示按钮被点击');\n      this.stopDemoAnimation();\n    };\n    stopDemoBtn.className = 'warning';\n    stopDemoBtn.style.display = 'none';\n    stopDemoBtn.id = 'stop-demo-btn';\n    demoGroup.appendChild(stopDemoBtn);\n    \n    this.controlPanel.appendChild(demoGroup);\n    \n    console.log('控制面板初始化完成');\n  }\n  \n  /**\n   * 初始化演示面板\n   */\n  initDemoPanel() {\n    this.demoPanel = document.createElement('div');\n    this.demoPanel.className = 'demo-panel';\n    this.demoPanel.style.opacity = '0';\n    this.demoPanel.style.display = 'none';\n    this.container.appendChild(this.demoPanel);\n    \n    // 标题\n    this.demoTitle = document.createElement('h2');\n    this.demoPanel.appendChild(this.demoTitle);\n    \n    // 描述\n    this.demoDescription = document.createElement('p');\n    this.demoPanel.appendChild(this.demoDescription);\n    \n    // 进度条\n    const progressContainer = document.createElement('div');\n    progressContainer.className = 'progress';\n    this.progressBar = document.createElement('div');\n    this.progressBar.className = 'progress-bar';\n    progressContainer.appendChild(this.progressBar);\n    this.demoPanel.appendChild(progressContainer);\n    \n    // 步骤信息\n    const stepInfo = document.createElement('div');\n    stepInfo.className = 'step-info';\n    this.stepCurrent = document.createElement('span');\n    this.stepTotal = document.createElement('span');\n    stepInfo.appendChild(this.stepCurrent);\n    stepInfo.appendChild(this.stepTotal);\n    this.demoPanel.appendChild(stepInfo);\n  }\n  \n  /**\n   * 切换标签显示\n   */\n  toggleLabels() {\n    console.log('切换标签显示', this.controllers.labelSystem);\n    if (!this.controllers.labelSystem) {\n      console.error('标签系统未初始化');\n      return;\n    }\n    \n    const visible = !this.controllers.labelSystem.visible;\n    console.log('设置标签可见性:', visible);\n    this.controllers.labelSystem.setVisible(visible);\n    \n    // 更新按钮文本\n    const btn = document.getElementById('toggle-labels-btn');\n    if (btn) {\n      btn.textContent = visible ? '隐藏标签' : '显示标签';\n      btn.classList.toggle('active', visible);\n      console.log('按钮状态已更新');\n    } else {\n      console.error('找不到标签按钮');\n    }\n  }\n  \n  /**\n   * 切换分解视图\n   */\n  toggleExplodedView() {\n    console.log('切换分解视图', this.controllers.explodedView);\n    console.log('当前components:', this.components);\n    console.log('crtShell存在?', !!this.components.crtShell);\n    \n    if (!this.controllers.explodedView) return;\n    \n    const exploded = this.controllers.explodedView.toggle();\n    console.log('分解视图状态:', exploded);\n    \n    // 同时切换cylinder2的爆炸效果\n    if (this.components.crtShell && this.components.crtShell.toggleCylinder2Explode) {\n      console.log('正在调用cylinder2爆炸效果...');\n      const cylinder2Exploded = this.components.crtShell.toggleCylinder2Explode(exploded);\n      console.log('Cylinder2爆炸状态:', cylinder2Exploded);\n    } else {\n      console.warn('无法调用cylinder2爆炸效果:', {\n        crtShell: !!this.components.crtShell,\n        toggleMethod: !!(this.components.crtShell && this.components.crtShell.toggleCylinder2Explode)\n      });\n    }\n    \n    // 同时切换旋转曲线连接的爆炸效果\n    if (this.components.crtShell && this.components.crtShell.toggleConnectionExplode) {\n      console.log('正在调用旋转曲线连接爆炸效果...');\n      const connectionExploded = this.components.crtShell.toggleConnectionExplode(exploded);\n      console.log('旋转曲线连接爆炸状态:', connectionExploded);\n    } else {\n      console.warn('无法调用旋转曲线连接爆炸效果:', {\n        crtShell: !!this.components.crtShell,\n        toggleMethod: !!(this.components.crtShell && this.components.crtShell.toggleConnectionExplode)\n      });\n    }\n    \n    // 同时切换超椭圆形状渐变的爆炸效果\n    if (this.components.crtShell && this.components.crtShell.toggleSuperellipseExplode) {\n      console.log('正在调用超椭圆形状渐变爆炸效果...');\n      const superellipseExploded = this.components.crtShell.toggleSuperellipseExplode(exploded);\n      console.log('超椭圆形状渐变爆炸状态:', superellipseExploded);\n    } else {\n      console.warn('无法调用超椭圆形状渐变爆炸效果:', {\n        crtShell: !!this.components.crtShell,\n        toggleMethod: !!(this.components.crtShell && this.components.crtShell.toggleSuperellipseExplode)\n      });\n    }\n    \n    // 更新按钮文本\n    const btn = document.getElementById('toggle-explode-btn');\n    if (btn) {\n      btn.textContent = exploded ? '合并视图' : '分解视图';\n      btn.classList.toggle('active', exploded);\n    }\n  }\n  \n  /**\n   * 重置视图\n   */\n  resetView() {\n    if (!this.controllers.explodedView) return;\n    \n    this.controllers.explodedView.resetView(\n      this.controllers.camera,\n      this.controllers.controls\n    );\n    \n    // 重置cylinder2爆炸状态\n    if (this.components.crtShell && this.components.crtShell.toggleCylinder2Explode) {\n      this.components.crtShell.toggleCylinder2Explode(false);\n      console.log('重置Cylinder2爆炸状态');\n    }\n    \n    // 重置旋转曲线连接爆炸状态\n    if (this.components.crtShell && this.components.crtShell.toggleConnectionExplode) {\n      this.components.crtShell.toggleConnectionExplode(false);\n      console.log('重置旋转曲线连接爆炸状态');\n    }\n    \n    // 重置超椭圆形状渐变爆炸状态\n    if (this.components.crtShell && this.components.crtShell.toggleSuperellipseExplode) {\n      this.components.crtShell.toggleSuperellipseExplode(false);\n      console.log('重置超椭圆形状渐变爆炸状态');\n    }\n    \n    // 更新分解视图按钮状态\n    const explodeBtn = document.getElementById('toggle-explode-btn');\n    if (explodeBtn) {\n      explodeBtn.textContent = '分解视图';\n      explodeBtn.classList.remove('active');\n    }\n  }\n  \n  /**\n   * 聚焦到组件\n   * @param {string} componentKey - 组件键名\n   */\n  focusComponent(componentKey) {\n    console.log('focusComponent被调用，componentKey:', componentKey);\n    console.log('this.controllers:', this.controllers);\n    console.log('this.controllers.explodedView:', this.controllers.explodedView);\n    console.log('this.controllers.camera:', this.controllers.camera);\n    console.log('this.controllers.controls:', this.controllers.controls);\n    \n    if (!this.controllers.explodedView) {\n      console.error('explodedView未初始化');\n      return;\n    }\n    \n    if (!this.controllers.camera) {\n      console.error('camera未初始化');\n      return;\n    }\n    \n    if (!this.controllers.controls) {\n      console.error('controls未初始化');\n      return;\n    }\n    \n    console.log('开始调用explodedView.focusComponent');\n    this.controllers.explodedView.focusComponent(\n      componentKey,\n      this.controllers.camera,\n      this.controllers.controls\n    );\n    console.log('explodedView.focusComponent调用完成');\n  }\n  \n  /**\n   * 开始演示动画\n   */\n  startDemoAnimation() {\n    console.log('startDemoAnimation被调用');\n    console.log('this.controllers.demoAnimation:', this.controllers.demoAnimation);\n    \n    if (!this.controllers.demoAnimation) {\n      console.error('demoAnimation未初始化');\n      return;\n    }\n    \n    console.log('显示演示面板');\n    // 显示演示面板\n    this.showDemoPanel();\n    \n    console.log('设置步骤回调');\n    // 设置步骤回调\n    this.controllers.demoAnimation.onStepStart = (stepIndex, step) => {\n      console.log('步骤回调被触发:', stepIndex, step);\n      this.updateDemoPanel(stepIndex, step);\n    };\n    \n    console.log('开始演示');\n    // 开始演示\n    this.controllers.demoAnimation.start();\n    \n    console.log('更新按钮状态');\n    // 更新按钮状态\n    document.getElementById('start-demo-btn').style.display = 'none';\n    document.getElementById('stop-demo-btn').style.display = 'inline-block';\n    \n    console.log('startDemoAnimation完成');\n  }\n  \n  /**\n   * 停止演示动画\n   */\n  stopDemoAnimation() {\n    if (!this.controllers.demoAnimation) return;\n    \n    // 停止演示\n    this.controllers.demoAnimation.stop();\n    \n    // 隐藏演示面板\n    this.hideDemoPanel();\n    \n    // 更新按钮状态\n    document.getElementById('start-demo-btn').style.display = 'inline-block';\n    document.getElementById('stop-demo-btn').style.display = 'none';\n  }\n  \n  /**\n   * 显示演示面板\n   */\n  showDemoPanel() {\n    this.demoPanel.style.display = 'block';\n    setTimeout(() => {\n      this.demoPanel.style.opacity = '1';\n    }, 10);\n  }\n  \n  /**\n   * 隐藏演示面板\n   */\n  hideDemoPanel() {\n    this.demoPanel.style.opacity = '0';\n    setTimeout(() => {\n      this.demoPanel.style.display = 'none';\n    }, 500);\n  }\n  \n  /**\n   * 更新演示面板\n   * @param {number} stepIndex - 当前步骤索引\n   * @param {Object} step - 当前步骤对象\n   */\n  updateDemoPanel(stepIndex, step) {\n    if (!this.controllers.demoAnimation) return;\n    \n    const totalSteps = this.controllers.demoAnimation.animationSteps.length;\n    const progress = ((stepIndex + 1) / totalSteps) * 100;\n    \n    // 更新标题和描述\n    this.demoTitle.textContent = step.title;\n    this.demoDescription.textContent = step.description;\n    \n    // 更新进度条\n    this.progressBar.style.width = `${progress}%`;\n    \n    // 更新步骤信息\n    this.stepCurrent.textContent = `步骤 ${stepIndex + 1}`;\n    this.stepTotal.textContent = `共 ${totalSteps} 步`;\n    \n    // 如果是最后一步，准备结束演示\n    if (stepIndex === totalSteps - 1) {\n      setTimeout(() => {\n        this.stopDemoAnimation();\n      }, step.duration);\n    }\n  }\n  \n  /**\n   * 调整UI大小\n   * @param {number} width - 宽度\n   * @param {number} height - 高度\n   */\n  resize(width, height) {\n    // 如果需要根据窗口大小调整UI，可以在这里实现\n  }\n}\n;// ./src/components/WaveformGenerator.js\n/**\n * 波形生成器类\n * 负责生成各种波形并计算偏转电压\n */\nclass WaveformGenerator {\n  constructor() {\n    this.time = 0;\n    this.lastTimestamp = 0;\n    this.lastHorizontalPosition = 0; // 记录上一次的水平位置\n    this.onWaveformReset = null; // 波形重置回调函数\n  }\n\n  /**\n   * 更新时间\n   * @param {number} timestamp - 当前时间戳\n   */\n  update(timestamp) {\n    // 添加防护检查\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      console.warn('波形生成器 - 无效的时间戳:', timestamp);\n      return;\n    }\n    \n    // 计算时间增量（秒）\n    if (this.lastTimestamp === 0) {\n      this.lastTimestamp = timestamp;\n      return;\n    }\n    \n    const deltaTime = (timestamp - this.lastTimestamp) / 1000;\n    \n    // 防护异常的 deltaTime\n    if (isNaN(deltaTime) || deltaTime < 0 || deltaTime > 1) {\n      console.warn('波形生成器 - 异常的时间增量:', deltaTime, '重置时间戳');\n      this.lastTimestamp = timestamp;\n      return;\n    }\n    \n    this.lastTimestamp = timestamp;\n    \n    // 更新内部时间（在演示动画期间减慢50%）\n    const timeScale = (window.demoAnimation && window.demoAnimation.isPlaying) ? 0.6 : 1.0;\n    this.time += deltaTime * timeScale;\n  }\n\n  /**\n   * 生成波形值\n   * @param {Object} params - 波形参数\n   * @returns {number} - 波形值 (-1 到 1 之间)\n   */\n  generateWaveform(params) {\n    if (!params.enabled) {\n      return 0;\n    }\n    \n    const { type, frequency, amplitude, phase } = params;\n    \n    // 添加防护检查\n    if (isNaN(this.time) || isNaN(frequency) || isNaN(amplitude) || isNaN(phase)) {\n      console.error('波形生成器 - 检测到 NaN 参数:', {\n        time: this.time,\n        frequency,\n        amplitude,\n        phase\n      });\n      return 0;\n    }\n    \n    const t = this.time * frequency * Math.PI * 2 + phase;\n    \n    // 检查计算结果\n    if (isNaN(t)) {\n      console.error('波形生成器 - 时间计算结果为 NaN:', t);\n      return 0;\n    }\n    \n    let result = 0;\n    switch (type) {\n      case 'sine':\n        result = Math.sin(t) * amplitude;\n        break;\n      case 'square':\n        result = (Math.sin(t) >= 0 ? 1 : -1) * amplitude;\n        break;\n      case 'sawtooth':\n        result = (((t / (Math.PI * 2)) % 1) * 2 - 1) * amplitude;\n        break;\n      case 'triangle':\n        result = (Math.abs(((t / Math.PI) % 2) - 1) * 2 - 1) * amplitude;\n        break;\n      default:\n        result = 0;\n    }\n    \n    // 最终检查结果\n    if (isNaN(result)) {\n      console.error('波形生成器 - 波形计算结果为 NaN:', { type, t, amplitude, result });\n      return 0;\n    }\n    \n    return result;\n  }\n  \n  /**\n   * 计算当前的偏转电压\n   * @param {Object} waveformParams - 波形参数\n   * @param {Object} deflectionParams - 偏转参数\n   * @returns {Object} - 包含水平和垂直偏转电压的对象\n   */\n  calculateDeflectionVoltage(waveformParams, deflectionParams) {\n    // 在演示动画期间，使用固定的原始电压值以保持波形位置不变\n    let baseHorizontal, baseVertical;\n    if (window.demoAnimation && window.demoAnimation.isPlaying && window.demoAnimation.originalVoltages) {\n      baseHorizontal = window.demoAnimation.originalVoltages.horizontal;\n      baseVertical = window.demoAnimation.originalVoltages.vertical;\n    } else {\n      // 获取基础电压值，添加防护\n      baseHorizontal = deflectionParams?.horizontal?.voltage ?? 0;\n      baseVertical = deflectionParams?.vertical?.voltage ?? 0;\n    }\n    \n    // 如果波形未启用，直接返回基础电压\n    if (!waveformParams.enabled) {\n      return {\n        horizontal: baseHorizontal,\n        vertical: baseVertical\n      };\n    }\n    \n    // 根据波形类型生成不同的扫描模式，使用偏转电压作为幅度调制因子\n    const scanPattern = this.generateScanPattern(waveformParams, deflectionParams);\n    \n    // 直接返回波形扫描模式产生的电压值（不再与基础电压相加）\n    // 这样偏转电压就控制波形幅度，而不是位置偏移\n    return {\n      horizontal: scanPattern.horizontal,\n      vertical: scanPattern.vertical\n    };\n  }\n  \n  /**\n   * 根据波形类型生成扫描模式\n   * @param {Object} params - 波形参数\n   * @param {Object} deflectionParams - 偏转参数，用于控制波形幅度\n   * @returns {Object} - 包含水平和垂直偏转值的对象\n   */\n  generateScanPattern(params, deflectionParams = null) {\n    const { type, frequency, amplitude, phase } = params;\n    \n    // 添加防护检查\n    if (isNaN(this.time) || isNaN(frequency) || isNaN(amplitude) || isNaN(phase)) {\n      console.error('波形生成器 - 检测到 NaN 参数:', {\n        time: this.time,\n        frequency,\n        amplitude,\n        phase\n      });\n      return { horizontal: 0, vertical: 0 };\n    }\n    \n    const t = this.time * frequency * Math.PI * 2 + phase;\n    \n    // 检查计算结果\n    if (isNaN(t)) {\n      console.error('波形生成器 - 时间计算结果为 NaN:', t);\n      return { horizontal: 0, vertical: 0 };\n    }\n    \n    // 获取偏转电压作为幅度调制因子\n    // 使用基础幅度 + 偏转电压调制，确保即使电压为0也有基本波形显示\n    const baseAmplitude = amplitude * 0.3; // 基础幅度（30%的原始幅度）\n    const horizontalVoltage = deflectionParams?.horizontal?.voltage ?? 0;\n    const verticalVoltage = deflectionParams?.vertical?.voltage ?? 0;\n    \n    // 幅度 = 基础幅度 + (电压调制 * 原始幅度)\n    const horizontalAmplitude = baseAmplitude + (Math.abs(horizontalVoltage) * amplitude * 0.2);\n    const verticalAmplitude = baseAmplitude + (Math.abs(verticalVoltage) * amplitude * 0.2);\n    \n    // 添加防护检查\n    if (isNaN(horizontalAmplitude) || isNaN(verticalAmplitude)) {\n      console.error('波形生成器 - 检测到 NaN 幅度参数:', {\n        horizontalAmplitude,\n        verticalAmplitude\n      });\n      return { horizontal: 0, vertical: 0 };\n    }\n    \n    let horizontal = 0;\n    let vertical = 0;\n    \n    // 使用频率参数来控制波形密集程度\n    const freqMultiplier = frequency * 2; // 频率倍数，用于控制波形密集度\n    \n    switch (type) {\n      case 'sine':\n        // 正弦波 - 水平锯齿扫描（从右向左）+ 垂直正弦波\n        // 水平扫描的幅度由水平偏转电压控制\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        // 垂直波形的幅度由垂直偏转电压控制\n        vertical = Math.sin(t * freqMultiplier) * Math.abs(verticalAmplitude) * 0.5;\n        break;\n        \n      case 'square':\n        // 方波 - 水平锯齿扫描（从右向左）+ 垂直方波\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        vertical = (Math.sin(t * freqMultiplier) >= 0 ? 1 : -1) * Math.abs(verticalAmplitude) * 0.5;\n        break;\n        \n      case 'triangle':\n        // 三角波 - 水平锯齿扫描（从右向左）+ 垂直三角波\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        vertical = (Math.abs(((t * freqMultiplier / Math.PI) % 2) - 1) * 2 - 1) * Math.abs(verticalAmplitude) * 0.5;\n        break;\n        \n      case 'sawtooth':\n        // 锯齿波 - 水平锯齿扫描（从右向左）+ 垂直锯齿波\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        vertical = (((t * freqMultiplier / (Math.PI * 2)) % 1) * 2 - 1) * Math.abs(verticalAmplitude) * 0.5;\n        break;\n        \n      default:\n        // 默认为简单的水平扫描（从右向左）\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        vertical = 0;\n    }\n    \n    // 最终检查结果\n    if (isNaN(horizontal) || isNaN(vertical)) {\n      console.error('波形生成器 - 扫描模式计算结果为 NaN:', { type, t, horizontalAmplitude, verticalAmplitude, horizontal, vertical });\n      return { horizontal: 0, vertical: 0 };\n    }\n    \n    // 检测波形重置（水平位置从左侧跳回右侧）\n    this.detectWaveformReset(horizontal);\n    \n    return { horizontal, vertical };\n  }\n\n\n  /**\n   * 检测波形重置（水平扫描从左端跳回右端）\n   * @param {number} currentHorizontal - 当前水平位置\n   */\n  detectWaveformReset(currentHorizontal) {\n    // 检测从负值（左侧）跳到正值（右侧）的情况\n    // 这表示开始了新的扫描周期（从右向左扫描完成后跳回右侧重新开始）\n    if (this.lastHorizontalPosition < -0.5 && currentHorizontal > 0.5) {\n      // 触发波形重置回调\n      if (this.onWaveformReset) {\n        this.onWaveformReset();\n      }\n    }\n    \n    // 更新上一次的水平位置\n    this.lastHorizontalPosition = currentHorizontal;\n  }\n\n  /**\n   * 设置波形重置回调函数\n   * @param {Function} callback - 回调函数\n   */\n  setWaveformResetCallback(callback) {\n    this.onWaveformReset = callback;\n  }\n\n  /**\n   * 重置时间和时间戳\n   * 在波形类型切换时调用，确保新波形从干净的状态开始\n   */\n  resetTime() {\n    this.time = 0;\n    this.lastTimestamp = 0;\n    this.lastHorizontalPosition = 0;\n    console.log('波形生成器时间已重置');\n  }\n} \n;// ./src/components/ElectronBeam.js\n\n\n\n/**\n * 电子束类\n * 负责处理电子束的路径和显示\n */\nclass ElectronBeam {\n  /**\n   * 构造函数\n   * @param {THREE.Scene} scene - Three.js场景\n   */\n  constructor(scene) {\n    this.scene = scene;\n    this.beamLine = null;\n    this.glowLine = null;\n    this.particleSystem = null;\n    this.beamPoints = [];\n    this.tracePoints = [];\n    this.traceLines = [];\n    this.traceSegments = []; // 存储轨迹段，避免回扫线\n    \n    // 电子束材质\n    this.beamMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.beam.intensity,\n      transparent: true\n    });\n    \n    // 轨迹材质（淡一些）\n    this.traceMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.electronBeam.trace.opacity,\n      transparent: true\n    });\n    \n    // 初始化电子束\n    this.initBeam();\n  }\n  \n  /**\n   * 初始化电子束\n   */\n  initBeam() {\n    // 默认电子束路径点\n    this.beamPoints = CONFIG.electronBeam.pathPoints.map(point => \n      new three_module/* Vector3 */.Pq0(point.x, point.y, point.z)\n    );\n    \n    // 创建增强的电子束材质\n    this.createEnhancedBeamMaterial();\n    \n    // 创建电子束几何体和线条\n    const beamGeometry = new three_module/* BufferGeometry */.LoY().setFromPoints(this.beamPoints);\n    this.beamLine = new three_module/* Line */.N1A(beamGeometry, this.beamMaterial);\n    \n    // 设置渲染顺序，确保电子束在透明极板之后渲染\n    this.beamLine.renderOrder = 5;\n    \n    this.scene.add(this.beamLine);\n  }\n\n  /**\n   * 创建增强的电子束材质，包含发光效果\n   */\n  createEnhancedBeamMaterial() {\n    // 主电子束材质（更亮更鲜艳）- 优化透明度渲染\n    this.beamMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.beam.intensity,\n      transparent: true,\n      linewidth: 3, // 增加线宽\n      depthTest: false, // 禁用深度测试，确保电子束总是可见\n      depthWrite: false // 禁用深度写入\n    });\n    \n    // 创建发光外围材质\n    this.glowMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.beam.intensity * 0.3,\n      transparent: true,\n      linewidth: 8, // 更宽的发光效果\n      depthTest: false, // 禁用深度测试\n      depthWrite: false // 禁用深度写入\n    });\n    \n    // 轨迹材质 - 优化透明度渲染\n    this.traceMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.electronBeam.trace.opacity,\n      transparent: true,\n      depthTest: false, // 禁用深度测试，确保轨迹可见\n      depthWrite: false // 禁用深度写入\n    });\n  }\n  \n  /**\n   * 更新电子束路径\n   * @param {Object} deflectionParams - 偏转参数对象\n   * @param {Object} deflectionParams.vertical - 垂直偏转参数\n   * @param {number} deflectionParams.vertical.voltage - 垂直偏转电压\n   * @param {Object} deflectionParams.horizontal - 水平偏转参数\n   * @param {number} deflectionParams.horizontal.voltage - 水平偏转电压\n   */\n  updateBeamPath(deflectionParams) {\n    // 计算偏转量，添加防护\n    const voltageScalingFactor = CONFIG.electronBeam.voltageScalingFactor;\n    const verticalVoltage = deflectionParams?.vertical?.voltage ?? 0;\n    const horizontalVoltage = deflectionParams?.horizontal?.voltage ?? 0;\n    \n    // 检查是否有 NaN 值\n    if (isNaN(verticalVoltage) || isNaN(horizontalVoltage)) {\n      console.error('电子束错误 - 检测到 NaN 值:', { verticalVoltage, horizontalVoltage });\n      return; // 直接返回，避免后续计算错误\n    }\n    \n    const verticalDeflection = verticalVoltage * (CONFIG.deflection.vertical.maxDeflection / voltageScalingFactor);\n    const horizontalDeflection = horizontalVoltage * (CONFIG.deflection.horizontal.maxDeflection / voltageScalingFactor);\n    \n    // 生成简单的直线电子束轨迹\n    this.beamPoints = this.generateSimpleBeamPath(verticalDeflection, horizontalDeflection);\n    \n    // 更新几何体\n    const beamGeometry = new three_module/* BufferGeometry */.LoY().setFromPoints(this.beamPoints);\n    \n    // 清除旧的电子束\n    this.clearBeamLines();\n    \n    // 创建多层电子束效果\n    this.createLayeredBeam(beamGeometry);\n    \n    // 可选：创建粒子效果（在配置中启用时）\n    if (CONFIG.electronBeam.enableParticleEffect) {\n      this.createParticleBeam(this.beamPoints);\n    }\n    \n    // 更新材质颜色和强度\n    this.updateBeamMaterials();\n    \n    // 记录轨迹点（只记录打在荧光屏上的点）\n    const lastBeamPoint = this.beamPoints[this.beamPoints.length - 1];\n    this.addTracePoint(lastBeamPoint.clone());\n  }\n  \n  /**\n   * 生成真实的电子束轨迹（考虑物理偏转效果）\n   * @param {number} verticalDeflection - 垂直偏转量\n   * @param {number} horizontalDeflection - 水平偏转量\n   * @returns {Array<THREE.Vector3>} 轨迹点数组\n   */\n  generateSimpleBeamPath(verticalDeflection, horizontalDeflection) {\n    return this.generateRealisticBeamPath(verticalDeflection, horizontalDeflection);\n  }\n\n  /**\n   * 生成真实的电子束轨迹，模拟物理偏转效果\n   * @param {number} verticalDeflection - 垂直偏转量\n   * @param {number} horizontalDeflection - 水平偏转量\n   * @returns {Array<THREE.Vector3>} 轨迹点数组\n   */\n  generateRealisticBeamPath(verticalDeflection, horizontalDeflection) {\n    const trajectoryPoints = [];\n    const totalSegments = 100; // 增加段数以获得更平滑的曲线，特别是对方波\n    \n    // 从配置文件获取关键位置点\n    const electronGun = new three_module/* Vector3 */.Pq0(\n      CONFIG.electronBeam.startPoint.x, \n      CONFIG.electronBeam.startPoint.y, \n      CONFIG.electronBeam.startPoint.z\n    );\n    const screenPosition = new three_module/* Vector3 */.Pq0(\n      CONFIG.electronBeam.endPoint.x, \n      CONFIG.electronBeam.endPoint.y, \n      CONFIG.electronBeam.endPoint.z\n    );\n    \n    // 从配置文件获取偏转板位置\n    const platePositions = CONFIG.electronBeam.physics.platePositions;\n    const verticalPlateStart = new three_module/* Vector3 */.Pq0(platePositions.verticalPlateStart, 0, 0);\n    const verticalPlateEnd = new three_module/* Vector3 */.Pq0(platePositions.verticalPlateEnd, 0, 0);\n    const horizontalPlateStart = new three_module/* Vector3 */.Pq0(platePositions.horizontalPlateStart, 0, 0);\n    const horizontalPlateEnd = new three_module/* Vector3 */.Pq0(platePositions.horizontalPlateEnd, 0, 0);\n    \n    // 从配置文件获取物理参数\n    const electronVelocity = CONFIG.electronBeam.physics.electronVelocity;\n    const electricFieldStrength = CONFIG.electronBeam.physics.electricFieldStrength;\n    \n    // 当前位置和速度\n    let currentPos = electronGun.clone();\n    let velocity = new three_module/* Vector3 */.Pq0(electronVelocity, 0, 0); // 初始水平向右\n    \n    for (let i = 0; i <= totalSegments; i++) {\n      const progress = i / totalSegments;\n      const x = electronGun.x + (screenPosition.x - electronGun.x) * progress;\n      \n      // 计算当前段的加速度\n      let acceleration = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      \n      // 在垂直偏转板区域内应用垂直电场\n      if (x >= verticalPlateStart.x && x <= verticalPlateEnd.x) {\n        const plateProgress = (x - verticalPlateStart.x) / (verticalPlateEnd.x - verticalPlateStart.x);\n        const fieldIntensity = Math.sin(plateProgress * Math.PI) * electricFieldStrength; // 平滑过渡\n        acceleration.y = verticalDeflection * fieldIntensity * 0.5;\n      }\n      \n      // 在水平偏转板区域内应用水平电场\n      if (x >= horizontalPlateStart.x && x <= horizontalPlateEnd.x) {\n        const plateProgress = (x - horizontalPlateStart.x) / (horizontalPlateEnd.x - horizontalPlateStart.x);\n        const fieldIntensity = Math.sin(plateProgress * Math.PI) * electricFieldStrength; // 平滑过渡\n        acceleration.z = horizontalDeflection * fieldIntensity * 0.5;\n      }\n      \n      // 更新速度和位置（简化的欧拉积分）\n      const dt = (screenPosition.x - electronGun.x) / totalSegments / electronVelocity;\n      velocity.add(acceleration.clone().multiplyScalar(dt));\n      \n      // 保持水平速度基本恒定（电子束的主要运动方向）\n      velocity.x = electronVelocity;\n      \n      // 计算新位置\n      currentPos.add(velocity.clone().multiplyScalar(dt * 0.1)); // 缩放因子调整轨迹平滑度\n      \n      // 确保 x 坐标按预期递增\n      currentPos.x = x;\n      \n      trajectoryPoints.push(currentPos.clone());\n    }\n    \n    // 应用轨迹平滑处理\n    return this.smoothTrajectory(trajectoryPoints);\n  }\n\n  /**\n   * 平滑轨迹点，使电子束看起来更自然\n   * @param {Array<THREE.Vector3>} points - 原始轨迹点\n   * @returns {Array<THREE.Vector3>} 平滑后的轨迹点\n   */\n  smoothTrajectory(points) {\n    if (points.length < 3) return points;\n    \n    const smoothed = [];\n    const smoothingFactor = CONFIG.electronBeam.trajectorySmoothing || 0.8;\n    \n    // 保持第一个点不变\n    smoothed.push(points[0].clone());\n    \n    // 对中间的点进行平滑处理\n    for (let i = 1; i < points.length - 1; i++) {\n      const prev = points[i - 1];\n      const current = points[i];\n      const next = points[i + 1];\n      \n      // 计算平滑后的位置（加权平均）\n      const smoothedPoint = new three_module/* Vector3 */.Pq0();\n      smoothedPoint.addScaledVector(prev, (1 - smoothingFactor) * 0.5);\n      smoothedPoint.addScaledVector(current, smoothingFactor);\n      smoothedPoint.addScaledVector(next, (1 - smoothingFactor) * 0.5);\n      \n      smoothed.push(smoothedPoint);\n    }\n    \n    // 保持最后一个点不变\n    smoothed.push(points[points.length - 1].clone());\n    \n    return smoothed;\n  }\n  \n  \n  /**\n   * 添加轨迹点\n   * @param {THREE.Vector3} point - 轨迹点\n   */\n  addTracePoint(point) {\n    // 如果没有当前段，创建一个新段\n    if (this.traceSegments.length === 0) {\n      this.traceSegments.push([]);\n    }\n    \n    // 获取当前段\n    const currentSegment = this.traceSegments[this.traceSegments.length - 1];\n    \n    // 添加点到当前段\n    currentSegment.push(point.clone());\n    \n    // 限制每个段的点数\n    if (currentSegment.length > CONFIG.electronBeam.trace.maxPoints / 2) {\n      // 保留最后几个点到新段，确保连续性\n      const newSegment = currentSegment.slice(-2);\n      this.traceSegments.push(newSegment);\n      \n      // 移除过多的段\n      if (this.traceSegments.length > 4) {\n        this.traceSegments.shift();\n      }\n    }\n    \n    // 重新绘制轨迹\n    this.redrawTraceSegments();\n  }\n\n  /**\n   * 重新绘制轨迹段\n   */\n  redrawTraceSegments() {\n    // 清除旧的轨迹线\n    this.clearTraceLines();\n    \n    // 为每个段创建单独的线条\n    this.traceSegments.forEach((segment, index) => {\n      if (segment.length > 1) {\n        const traceGeometry = new three_module/* BufferGeometry */.LoY().setFromPoints(segment);\n        \n        // 为不同段使用不同的透明度，最新的段最亮\n        const opacity = CONFIG.electronBeam.trace.opacity * (0.3 + 0.7 * (index + 1) / this.traceSegments.length);\n        const segmentMaterial = new three_module/* LineBasicMaterial */.mrM({\n          color: CONFIG.beam.color,\n          opacity: opacity,\n          transparent: true,\n          depthTest: false, // 禁用深度测试，确保轨迹可见\n          depthWrite: false // 禁用深度写入\n        });\n        \n        const traceLine = new three_module/* Line */.N1A(traceGeometry, segmentMaterial);\n        traceLine.renderOrder = 3; // 设置轨迹线的渲染顺序，在极板之后渲染\n        this.traceLines.push(traceLine);\n        this.scene.add(traceLine);\n      }\n    });\n  }\n\n  /**\n   * 开始新的轨迹段（用于避免回扫线）\n   */\n  startNewTraceSegment() {\n    // 如果当前段有点，创建新段\n    if (this.traceSegments.length > 0 && this.traceSegments[this.traceSegments.length - 1].length > 0) {\n      this.traceSegments.push([]);\n    }\n  }\n  \n  /**\n   * 清除轨迹线\n   */\n  clearTraceLines() {\n    this.traceLines.forEach(line => {\n      this.scene.remove(line);\n      line.geometry.dispose();\n    });\n    this.traceLines = [];\n  }\n  \n  /**\n   * 更新材质\n   */\n  updateMaterial() {\n    this.updateBeamMaterials();\n  }\n  \n  /**\n   * 清除所有轨迹\n   */\n  clearAllTraces() {\n    this.clearTraceLines();\n    this.tracePoints = [];\n    this.traceSegments = [];\n  }\n\n  /**\n   * 清除电子束线条\n   */\n  clearBeamLines() {\n    if (this.beamLine) {\n      this.scene.remove(this.beamLine);\n      this.beamLine.geometry.dispose();\n      this.beamLine = null;\n    }\n    if (this.glowLine) {\n      this.scene.remove(this.glowLine);\n      this.glowLine.geometry.dispose();\n      this.glowLine = null;\n    }\n    if (this.particleSystem) {\n      this.scene.remove(this.particleSystem);\n      this.particleSystem.geometry.dispose();\n      this.particleSystem.material.dispose();\n      this.particleSystem = null;\n    }\n  }\n\n  /**\n   * 创建分层电子束效果\n   * @param {THREE.BufferGeometry} geometry - 电子束几何体\n   */\n  createLayeredBeam(geometry) {\n    // 创建发光外围层（更宽，透明度更低）\n    this.glowLine = new three_module/* Line */.N1A(geometry.clone(), this.glowMaterial);\n    this.glowLine.renderOrder = 4; // 设置渲染顺序，在极板之后，主电子束之前\n    this.scene.add(this.glowLine);\n    \n    // 创建主电子束（较窄，亮度更高）\n    this.beamLine = new three_module/* Line */.N1A(geometry.clone(), this.beamMaterial);\n    this.beamLine.renderOrder = 5; // 设置渲染顺序，确保在透明极板之后渲染\n    this.scene.add(this.beamLine);\n  }\n\n  /**\n   * 更新电子束材质\n   */\n  updateBeamMaterials() {\n    // 更新主电子束材质\n    if (this.beamMaterial) {\n      this.beamMaterial.color.set(CONFIG.beam.color);\n      this.beamMaterial.opacity = CONFIG.beam.intensity;\n    }\n    \n    // 更新发光材质\n    if (this.glowMaterial) {\n      this.glowMaterial.color.set(CONFIG.beam.color);\n      this.glowMaterial.opacity = CONFIG.beam.intensity * 0.3;\n    }\n    \n    // 更新轨迹材质\n    if (this.traceMaterial) {\n      this.traceMaterial.color.set(CONFIG.beam.color);\n    }\n  }\n\n  /**\n   * 创建粒子电子束效果（可选的高级效果）\n   * @param {Array<THREE.Vector3>} points - 轨迹点\n   */\n  createParticleBeam(points) {\n    // 创建粒子系统来模拟电子流\n    const particleCount = points.length;\n    const particles = new three_module/* BufferGeometry */.LoY();\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const sizes = new Float32Array(particleCount);\n    \n    const color = new three_module/* Color */.Q1f(CONFIG.beam.color);\n    \n    for (let i = 0; i < particleCount; i++) {\n      const point = points[i];\n      const i3 = i * 3;\n      \n      // 位置\n      positions[i3] = point.x;\n      positions[i3 + 1] = point.y;\n      positions[i3 + 2] = point.z;\n      \n      // 颜色（沿着轨迹渐变）\n      const intensity = 1.0 - (i / particleCount) * 0.5; // 从前到后逐渐变暗\n      colors[i3] = color.r * intensity;\n      colors[i3 + 1] = color.g * intensity;\n      colors[i3 + 2] = color.b * intensity;\n      \n      // 大小（前面较小，后面较大）\n      sizes[i] = 0.02 + (i / particleCount) * 0.01;\n    }\n    \n    particles.setAttribute('position', new three_module/* BufferAttribute */.THS(positions, 3));\n    particles.setAttribute('color', new three_module/* BufferAttribute */.THS(colors, 3));\n    particles.setAttribute('size', new three_module/* BufferAttribute */.THS(sizes, 1));\n    \n    const particleMaterial = new three_module/* PointsMaterial */.BH$({\n      size: 0.03,\n      transparent: true,\n      opacity: CONFIG.beam.intensity * 0.8,\n      vertexColors: true,\n      blending: three_module/* AdditiveBlending */.EZo\n    });\n    \n    if (this.particleSystem) {\n      this.scene.remove(this.particleSystem);\n      this.particleSystem.geometry.dispose();\n      this.particleSystem.material.dispose();\n    }\n    \n    this.particleSystem = new three_module/* Points */.ONl(particles, particleMaterial);\n    this.scene.add(this.particleSystem);\n  }\n\n  /**\n   * 演示电子束效果的测试函数\n   * @param {number} testVoltage - 测试电压（可选，默认为1.0）\n   */\n  demonstrateBeamEffects(testVoltage = 1.0) {\n    console.log('🔬 演示新的电子束效果...');\n    \n    // 测试不同的偏转效果\n    const testDeflections = [\n      { v: 0, h: 0, name: '无偏转' },\n      { v: testVoltage, h: 0, name: '垂直偏转' },\n      { v: 0, h: testVoltage, name: '水平偏转' },\n      { v: testVoltage, h: testVoltage, name: '双向偏转' }\n    ];\n    \n    let testIndex = 0;\n    const testInterval = setInterval(() => {\n      if (testIndex >= testDeflections.length) {\n        clearInterval(testInterval);\n        console.log('✅ 电子束效果演示完成！');\n        return;\n      }\n      \n      const test = testDeflections[testIndex];\n      console.log(`📡 测试 ${testIndex + 1}/4: ${test.name} (V:${test.v}, H:${test.h})`);\n      \n      this.updateBeamPath({\n        vertical: { voltage: test.v },\n        horizontal: { voltage: test.h }\n      });\n      \n      testIndex++;\n    }, 2000); // 每2秒切换一次\n    \n    return testInterval;\n  }\n\n  /**\n   * 启用粒子效果\n   */\n  enableParticleEffect() {\n    // 临时修改配置以启用粒子效果\n    const originalConfig = CONFIG.electronBeam.enableParticleEffect;\n    CONFIG.electronBeam.enableParticleEffect = true;\n    \n    // 重新生成电子束以应用粒子效果\n    this.updateBeamPath({\n      vertical: { voltage: 0 },\n      horizontal: { voltage: 0 }\n    });\n    \n    console.log('✨ 粒子效果已启用');\n    \n    // 返回恢复函数\n    return () => {\n      CONFIG.electronBeam.enableParticleEffect = originalConfig;\n      this.updateBeamPath({\n        vertical: { voltage: 0 },\n        horizontal: { voltage: 0 }\n      });\n      console.log('🔄 粒子效果已恢复到原始设置');\n    };\n  }\n} \n;// ./src/components/Screen.js\n\r\n\r\n\r\n/**\r\n * 荧光屏类\r\n * 负责处理荧光屏效果和波形显示\r\n * 集成了ThreeWaveformRenderer的波形渲染功能\r\n */\r\nclass Screen {\r\n  /**\r\n   * 构造函数\r\n   * @param {THREE.Scene} scene - Three.js场景\r\n   * @param {THREE.Mesh} screenMesh - 荧光屏网格\r\n   */\r\n  constructor(scene, screenMesh) {\r\n    this.scene = scene;\r\n    this.screenMesh = screenMesh;\r\n    \r\n    // 创建荧光点集合\r\n    this.glowPoints = [];\r\n    this.glowMeshes = [];\r\n    this.maxGlowPoints = CONFIG.screenEffects.maxGlowPoints;\r\n    \r\n    // 为了兼容DemoAnimation的focusOnComponent方法，添加position属性\r\n    this.position = this.screenMesh.position;\r\n    \r\n    // 移除了静态波形相关属性，保留电子束轨迹波形\r\n    \r\n    // 初始化荧光材质\r\n    this.initGlowMaterial();\r\n    \r\n    // 创建荧光屏网格\r\n    this.createScreenGrid();\r\n    \r\n    // 移除了静态波形初始化\r\n  }\r\n  \r\n  /**\r\n   * 初始化荧光材质\r\n   */\r\n  initGlowMaterial() {\r\n    // 更新荧光屏材质\r\n    this.screenMesh.material.emissive.set(CONFIG.screen.color);\r\n    this.screenMesh.material.emissiveIntensity = CONFIG.screen.intensity;\r\n    \r\n    // 创建荧光点材质\r\n    this.glowMaterial = new three_module/* MeshBasicMaterial */.V9B({\r\n      color: CONFIG.beam.color, // 使用电子束的颜色（绿色）\r\n      transparent: true,\r\n      opacity: 0.8\r\n    });\r\n    \r\n    // 移除了静态波形材质\r\n  }\r\n  \r\n  /**\r\n   * 创建荧光屏网格\r\n   */\r\n  createScreenGrid() {\r\n    // 获取荧光屏的尺寸和位置\r\n    const screenWidth = CONFIG.components.screen.width;\r\n    const screenHeight = CONFIG.components.screen.height;\r\n    const screenPosition = CONFIG.components.screen.position;\r\n    \r\n    // 创建网格材质\r\n    const gridMaterial = new three_module/* LineBasicMaterial */.mrM({\r\n      color: CONFIG.screen.gridColor,\r\n      transparent: true,\r\n      opacity: CONFIG.screen.gridOpacity\r\n    });\r\n    \r\n    // 创建网格几何体\r\n    const gridGeometry = new three_module/* BufferGeometry */.LoY();\r\n    const gridPoints = [];\r\n    \r\n    // 计算网格线间距\r\n    const gridSpacing = CONFIG.screen.gridSpacing;\r\n    const halfWidth = screenWidth / 2;\r\n    const halfHeight = screenHeight / 2;\r\n    \r\n    // 添加垂直线\r\n    for (let x = -halfWidth; x <= halfWidth; x += gridSpacing) {\r\n      gridPoints.push(x, -halfHeight, 0);\r\n      gridPoints.push(x, halfHeight, 0);\r\n    }\r\n    \r\n    // 添加水平线\r\n    for (let y = -halfHeight; y <= halfHeight; y += gridSpacing) {\r\n      gridPoints.push(-halfWidth, y, 0);\r\n      gridPoints.push(halfWidth, y, 0);\r\n    }\r\n    \r\n    // 设置几何体属性\r\n    gridGeometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(gridPoints, 3));\r\n    \r\n    // 创建网格线\r\n    this.screenGrid = new three_module/* LineSegments */.DXC(gridGeometry, gridMaterial);\r\n    \r\n    // 设置网格位置（稍微偏移，避免z-fighting）\r\n    this.screenGrid.position.copy(screenPosition);\r\n    this.screenGrid.position.x += 0.01; // 在荧光屏前面一点点\r\n    this.screenGrid.rotation.y = -Math.PI / 2; // 与荧光屏相同的旋转\r\n    \r\n    // 添加到场景\r\n    this.scene.add(this.screenGrid);\r\n  }\r\n  \r\n  // 移除了initWaveform方法\r\n  \r\n  // 移除了createWaveform方法\r\n  \r\n  // 移除了createSingleWaveform方法\r\n  \r\n  /**\r\n   * 根据波形类型计算电压值\r\n   * @param {string} waveType - 波形类型\r\n   * @param {number} phaseVal - 相位值(弧度)\r\n   * @param {number} amplitude - 振幅\r\n   * @returns {number} 电压值\r\n   */\r\n  calculateVoltage(waveType, phaseVal, amplitude) {\r\n    switch (waveType) {\r\n      case 'sine':\r\n        return amplitude * Math.sin(phaseVal);\r\n      case 'square':\r\n        return amplitude * (Math.sin(phaseVal) >= 0 ? 1 : -1);\r\n      case 'triangle':\r\n        return amplitude * (2 * Math.abs((phaseVal % (2 * Math.PI)) / (2 * Math.PI) - 0.5) - 1);\r\n      case 'sawtooth':\r\n        return amplitude * (((phaseVal % (2 * Math.PI)) / (2 * Math.PI)) * 2 - 1);\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 添加荧光点\r\n   * @param {THREE.Vector3} position - 电子束击中荧光屏的位置\r\n   */\r\n  addGlowPoint(position) {\r\n    // 创建一个小球体代表荧光点\r\n    const glowGeometry = new three_module/* SphereGeometry */.Gu$(CONFIG.screenEffects.glowPointSize, 6, 6);\r\n    const glowMesh = new three_module/* Mesh */.eaF(glowGeometry, this.glowMaterial.clone());\r\n    \r\n    // 设置位置（稍微偏移，避免z-fighting）\r\n    glowMesh.position.copy(position);\r\n    const screenOffset = CONFIG.electronBeam.screenOffset;\r\n    glowMesh.position.x = CONFIG.components.screen.position.x - screenOffset; // 确保在荧光屏前面一点点\r\n    \r\n    // 添加到场景\r\n    this.scene.add(glowMesh);\r\n    \r\n    // 记录荧光点信息\r\n    this.glowPoints.push({\r\n      mesh: glowMesh,\r\n      createdAt: Date.now(),\r\n      initialOpacity: 0.8\r\n    });\r\n    \r\n    // 如果荧光点过多，移除最早的点\r\n    if (this.glowPoints.length > this.maxGlowPoints) {\r\n      const oldestPoint = this.glowPoints.shift();\r\n      this.scene.remove(oldestPoint.mesh);\r\n      oldestPoint.mesh.geometry.dispose();\r\n      oldestPoint.mesh.material.dispose();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 更新荧光点效果和波形动画\r\n   */\r\n  update() {\r\n    const now = Date.now();\r\n    const persistence = CONFIG.screen.persistence;\r\n    \r\n    // 更新荧光屏材质\r\n    this.screenMesh.material.emissive.set(CONFIG.screen.color);\r\n    this.screenMesh.material.emissiveIntensity = CONFIG.screen.intensity;\r\n    \r\n    // 更新每个荧光点的透明度（模拟余辉效果）\r\n    this.glowPoints.forEach((point, index) => {\r\n      const age = (now - point.createdAt) / 1000; // 年龄（秒）\r\n      const fadeRate = 1 - persistence; // 淡出速率\r\n      const opacity = point.initialOpacity * Math.pow(persistence, age * CONFIG.screenEffects.fadeRate);\r\n      \r\n      // 更新透明度\r\n      point.mesh.material.opacity = opacity;\r\n      \r\n      // 如果完全透明，移除这个点\r\n      if (opacity < CONFIG.screenEffects.minOpacity) {\r\n        this.scene.remove(point.mesh);\r\n        point.mesh.geometry.dispose();\r\n        point.mesh.material.dispose();\r\n        this.glowPoints.splice(index, 1);\r\n      }\r\n    });\r\n    \r\n    // 移除了静态波形动画逻辑\r\n  }\r\n  \r\n  /**\r\n   * 清除所有荧光点\r\n   */\r\n  clearAllGlowPoints() {\r\n    this.glowPoints.forEach(point => {\r\n      this.scene.remove(point.mesh);\r\n      point.mesh.geometry.dispose();\r\n      point.mesh.material.dispose();\r\n    });\r\n    this.glowPoints = [];\r\n  }\r\n  \r\n  /**\r\n   * 更新材质颜色\r\n   */\r\n  updateMaterial() {\r\n    // 更新荧光屏材质\r\n    this.screenMesh.material.emissive.set(CONFIG.screen.color);\r\n    this.screenMesh.material.emissiveIntensity = CONFIG.screen.intensity;\r\n    \r\n    // 更新所有荧光点的颜色\r\n    this.glowPoints.forEach(point => {\r\n      point.mesh.material.color.set(CONFIG.screen.color);\r\n    });\r\n  }\r\n  \r\n  // ========== 移除了所有静态波形控制方法 ==========\r\n  // 保留电子束轨迹波形，这些方法不再需要\r\n  \r\n  /**\r\n   * 显示/隐藏波形 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {boolean} show - 是否显示波形\r\n   */\r\n  showWaveform(show) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 设置波形类型 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {string} type - 波形类型\r\n   */\r\n  setWaveformType(type) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 设置频率 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {number} frequency - 频率值\r\n   */\r\n  setFrequency(frequency) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 设置振幅 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {number} amplitude - 振幅值\r\n   */\r\n  setAmplitude(amplitude) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 设置相位 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {number} phase - 相位值（弧度）\r\n   */\r\n  setPhase(phase) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 开始波形动画 - 保留此方法以避免调用错误，但不执行任何操作\r\n   */\r\n  startWaveformAnimation() {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 停止波形动画 - 保留此方法以避免调用错误，但不执行任何操作\r\n   */\r\n  stopWaveformAnimation() {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n} \n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\nvar CSS2DRenderer = __webpack_require__(74);\n;// ./src/components/LabelSystem.js\n\r\n\r\n\r\n\r\n/**\r\n * 标签系统类\r\n * 负责管理和渲染3D场景中的标签\r\n */\r\nclass LabelSystem {\r\n  /**\r\n   * 构造函数\r\n   * @param {THREE.Scene} scene - Three.js场景\r\n   * @param {HTMLElement} container - 容器元素\r\n   */\r\n  constructor(scene, container) {\r\n    this.scene = scene;\r\n    this.container = container;\r\n    this.labels = new Map(); // 存储标签对象\r\n    this.visible = false; // 默认隐藏标签\r\n    \r\n    // 初始化CSS2D渲染器\r\n    this.initRenderer();\r\n    \r\n    console.log('LabelSystem初始化完成');\r\n  }\r\n  \r\n  /**\r\n   * 初始化CSS2D渲染器\r\n   */\r\n  initRenderer() {\r\n    this.labelRenderer = new CSS2DRenderer/* CSS2DRenderer */.B();\r\n    this.labelRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.labelRenderer.domElement.style.position = 'absolute';\r\n    this.labelRenderer.domElement.style.top = '0';\r\n    this.labelRenderer.domElement.style.pointerEvents = 'none';\r\n    this.container.appendChild(this.labelRenderer.domElement);\r\n    \r\n    // 默认隐藏\r\n    this.labelRenderer.domElement.style.display = 'none';\r\n  }\r\n  \r\n  /**\r\n   * 创建标签\r\n   * @param {string} id - 标签ID\r\n   * @param {string} text - 标签文本\r\n   * @param {THREE.Object3D} target - 标签附加的目标对象\r\n   * @param {THREE.Vector3} offset - 标签相对于目标的偏移量\r\n   * @param {string} description - 标签描述（可选）\r\n   */\r\n  createLabel(id, text, target, offset = new three_module/* Vector3 */.Pq0(0, 0.5, 0), description = '') {\r\n    // 创建标签元素\r\n    const labelDiv = document.createElement('div');\r\n    labelDiv.className = 'label';\r\n    labelDiv.textContent = text;\r\n    labelDiv.style.backgroundColor = CONFIG.labelSystem.backgroundColor;\r\n    labelDiv.style.color = CONFIG.labelSystem.color;\r\n    labelDiv.style.padding = CONFIG.labelSystem.padding;\r\n    labelDiv.style.borderRadius = CONFIG.labelSystem.borderRadius;\r\n    labelDiv.style.fontSize = CONFIG.labelSystem.fontSize;\r\n    labelDiv.style.pointerEvents = 'auto';\r\n    labelDiv.style.cursor = 'pointer';\r\n    \r\n    // 创建CSS2D对象\r\n    const labelObject = new CSS2DRenderer/* CSS2DObject */.v(labelDiv);\r\n    labelObject.position.copy(offset);\r\n    \r\n    // 将标签添加到目标对象\r\n    target.add(labelObject);\r\n    \r\n    // 存储标签信息\r\n    this.labels.set(id, {\r\n      object: labelObject,\r\n      element: labelDiv,\r\n      target: target,\r\n      description: description\r\n    });\r\n    \r\n    // 添加点击事件\r\n    if (description) {\r\n      labelDiv.addEventListener('click', () => {\r\n        this.showDescription(id);\r\n      });\r\n      \r\n      // 添加提示\r\n      labelDiv.title = '点击查看详情';\r\n    }\r\n    \r\n    return labelObject;\r\n  }\r\n  \r\n  /**\r\n   * 显示标签描述\r\n   * @param {string} id - 标签ID\r\n   */\r\n  showDescription(id) {\r\n    const label = this.labels.get(id);\r\n    if (!label || !label.description) return;\r\n    \r\n    // 创建或更新描述面板\r\n    let descPanel = document.getElementById('label-description-panel');\r\n    if (!descPanel) {\r\n      descPanel = document.createElement('div');\r\n      descPanel.id = 'label-description-panel';\r\n      descPanel.style.position = 'absolute';\r\n      descPanel.style.bottom = CONFIG.labelSystem.descriptionPanel.position.bottom;\r\n      descPanel.style.left = CONFIG.labelSystem.descriptionPanel.position.left;\r\n      descPanel.style.backgroundColor = CONFIG.labelSystem.descriptionPanel.backgroundColor;\r\n      descPanel.style.color = 'white';\r\n      descPanel.style.padding = '15px';\r\n      descPanel.style.borderRadius = '5px';\r\n      descPanel.style.maxWidth = CONFIG.labelSystem.descriptionPanel.maxWidth;\r\n      descPanel.style.zIndex = CONFIG.labelSystem.descriptionPanel.zIndex;\r\n      descPanel.style.transition = 'opacity 0.3s';\r\n      descPanel.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.5)';\r\n      \r\n      // 添加关闭按钮\r\n      const closeBtn = document.createElement('button');\r\n      closeBtn.textContent = '×';\r\n      closeBtn.style.position = 'absolute';\r\n      closeBtn.style.top = '5px';\r\n      closeBtn.style.right = '5px';\r\n      closeBtn.style.background = 'none';\r\n      closeBtn.style.border = 'none';\r\n      closeBtn.style.color = 'white';\r\n      closeBtn.style.fontSize = '20px';\r\n      closeBtn.style.cursor = 'pointer';\r\n      closeBtn.onclick = () => {\r\n        descPanel.style.opacity = '0';\r\n        setTimeout(() => {\r\n          if (descPanel.parentNode) {\r\n            descPanel.parentNode.removeChild(descPanel);\r\n          }\r\n        }, 300);\r\n      };\r\n      \r\n      descPanel.appendChild(closeBtn);\r\n      this.container.appendChild(descPanel);\r\n    }\r\n    \r\n    // 设置标题和描述\r\n    const title = document.createElement('h3');\r\n    title.textContent = label.element.textContent;\r\n    title.style.margin = '0 0 10px 0';\r\n    \r\n    const description = document.createElement('div');\r\n    description.innerHTML = label.description;\r\n    \r\n    // 清除旧内容\r\n    while (descPanel.firstChild) {\r\n      if (descPanel.firstChild.tagName !== 'BUTTON') {\r\n        descPanel.removeChild(descPanel.firstChild);\r\n      }\r\n    }\r\n    \r\n    descPanel.appendChild(title);\r\n    descPanel.appendChild(description);\r\n    descPanel.style.opacity = '1';\r\n  }\r\n  \r\n  /**\r\n   * 设置标签可见性\r\n   * @param {boolean} visible - 是否可见\r\n   */\r\n  setVisible(visible) {\r\n    this.visible = visible;\r\n    this.labelRenderer.domElement.style.display = visible ? 'block' : 'none';\r\n  }\r\n  \r\n  /**\r\n   * 更新标签位置和大小\r\n   * @param {THREE.Camera} camera - 相机\r\n   */\r\n  update(camera) {\r\n    if (this.visible) {\r\n      this.labelRenderer.render(this.scene, camera);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 调整标签渲染器大小\r\n   * @param {number} width - 宽度\r\n   * @param {number} height - 高度\r\n   */\r\n  resize(width, height) {\r\n    this.labelRenderer.setSize(width, height);\r\n  }\r\n  \r\n  /**\r\n   * 移除标签\r\n   * @param {string} id - 标签ID\r\n   */\r\n  removeLabel(id) {\r\n    const label = this.labels.get(id);\r\n    if (label) {\r\n      label.target.remove(label.object);\r\n      this.labels.delete(id);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 移除所有标签\r\n   */\r\n  removeAllLabels() {\r\n    this.labels.forEach((label, id) => {\r\n      label.target.remove(label.object);\r\n    });\r\n    this.labels.clear();\r\n  }\r\n} \n;// ./src/components/ExplodedView.js\n\n\n\n\n\n/**\n * 分解视图类\n * 负责处理模型的分解视图效果\n */\nclass ExplodedView {\n  /**\n   * 构造函数\n   * @param {Object} components - 组件对象集合\n   */\n  constructor(components) {\n    this.components = components;\n    this.originalPositions = new Map();\n    this.exploded = false;\n    this.explodeFactor = CONFIG.explodedView.explodeFactor;\n    this.tweens = [];\n    \n    // 主要组件列表（仅用于聚焦，不参与分解动画）\n    this.focusOnlyComponents = ['gun', 'gunHead', 'v1', 'v2', 'h1', 'h2', 'screen'];\n    \n    // 保存原始位置\n    this.saveOriginalPositions();\n  }\n  \n  /**\n   * 保存所有组件的原始位置\n   */\n  saveOriginalPositions() {\n    Object.entries(this.components).forEach(([key, object]) => {\n      // 跳过仅用于聚焦的组件\n      if (this.focusOnlyComponents.includes(key)) {\n        return;\n      }\n      \n      if (object && object.position) {\n        this.originalPositions.set(key, object.position.clone());\n      }\n    });\n  }\n  \n  /**\n   * 添加组件\n   * @param {string} key - 组件键名\n   * @param {THREE.Object3D} object - 组件对象\n   */\n  addComponent(key, object) {\n    this.components[key] = object;\n    \n    // 跳过仅用于聚焦的组件，不保存其原始位置\n    if (!this.focusOnlyComponents.includes(key) && object && object.position) {\n      this.originalPositions.set(key, object.position.clone());\n    }\n  }\n  \n  /**\n   * 计算组件的分解位置\n   * @param {THREE.Vector3} originalPosition - 原始位置\n   * @param {string} componentKey - 组件键名\n   * @returns {THREE.Vector3} 分解后的位置\n   */\n  calculateExplodedPosition(originalPosition, componentKey) {\n    // 定义各组件的分解方向\n    const directions = {\n      'gun': new three_module/* Vector3 */.Pq0(-1, 0, 0),\n      'gunHead': new three_module/* Vector3 */.Pq0(-1, 0, 0),\n      'v1': new three_module/* Vector3 */.Pq0(0, 1, 0),\n      'v2': new three_module/* Vector3 */.Pq0(0, -1, 0),\n      'h1': new three_module/* Vector3 */.Pq0(0, 0, 1),\n      'h2': new three_module/* Vector3 */.Pq0(0, 0, -1),\n      'screen': new three_module/* Vector3 */.Pq0(1, 0, 0)\n    };\n    \n    // 获取分解方向，如果没有定义则使用默认方向（向外）\n    let direction;\n    if (directions[componentKey]) {\n      direction = directions[componentKey];\n    } else {\n      // 默认方向：从原点到组件的方向\n      direction = originalPosition.clone().normalize();\n      if (direction.length() === 0) {\n        direction.set(1, 0, 0); // 默认X轴方向\n      }\n    }\n    \n    // 计算分解后的位置\n    return originalPosition.clone().add(\n      direction.multiplyScalar(this.explodeFactor)\n    );\n  }\n  \n  /**\n   * 切换分解视图\n   * @param {boolean} explode - 是否分解\n   * @param {number} duration - 动画持续时间（毫秒）\n   */\n  toggle(explode = !this.exploded, duration = CONFIG.explodedView.animationDuration) {\n    this.exploded = explode;\n    \n    // 停止所有正在进行的动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    // 为每个组件创建动画\n    Object.entries(this.components).forEach(([key, object]) => {\n      // 跳过仅用于聚焦的组件\n      if (this.focusOnlyComponents.includes(key)) return;\n      \n      if (!object || !object.position) return;\n      \n      const originalPosition = this.originalPositions.get(key);\n      if (!originalPosition) return;\n      \n      const targetPosition = explode \n        ? this.calculateExplodedPosition(originalPosition, key)\n        : originalPosition.clone();\n      \n      // 创建位置动画\n      const tween = new tween_esm/* Tween */.K(object.position, tweenGroup)\n        .to({\n          x: targetPosition.x,\n          y: targetPosition.y,\n          z: targetPosition.z\n        }, duration)\n        .easing(tween_esm/* Easing */.GS.Quadratic.InOut)\n        .start();\n      \n      this.tweens.push(tween);\n    });\n    \n    return this.exploded;\n  }\n  \n  /**\n   * 聚焦到特定组件\n   * @param {string} componentKey - 组件键名\n   * @param {THREE.Camera} camera - 相机\n   * @param {THREE.Controls} controls - 控制器\n   * @param {number} duration - 动画持续时间（毫秒）\n   */\n  focusComponent(componentKey, camera, controls, duration = 1000) {\n    console.log('ExplodedView.focusComponent被调用');\n    console.log('componentKey:', componentKey);\n    console.log('this.components:', this.components);\n    console.log('camera:', camera);\n    console.log('controls:', controls);\n    \n    const component = this.components[componentKey];\n    console.log('找到的组件:', component);\n    \n    if (!component) {\n      console.error('组件未找到:', componentKey);\n      return;\n    }\n    \n    // 计算目标位置（组件位置 + 偏移）\n    const targetPosition = component.position.clone();\n    const offset = new three_module/* Vector3 */.Pq0(\n      CONFIG.explodedView.cameraOffset.x,\n      CONFIG.explodedView.cameraOffset.y,\n      CONFIG.explodedView.cameraOffset.z\n    );\n    \n    console.log('组件位置:', targetPosition);\n    console.log('相机偏移:', offset);\n    console.log('目标相机位置:', {\n      x: targetPosition.x + offset.x,\n      y: targetPosition.y + offset.y,\n      z: targetPosition.z + offset.z\n    });\n    \n    // 创建相机位置动画\n    const posTween = new tween_esm/* Tween */.K(camera.position, tweenGroup)\n      .to({\n        x: targetPosition.x + offset.x,\n        y: targetPosition.y + offset.y,\n        z: targetPosition.z + offset.z\n      }, duration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n    \n    // 创建控制器目标点动画\n    const targetTween = new tween_esm/* Tween */.K(controls.target, tweenGroup)\n      .to({\n        x: targetPosition.x,\n        y: targetPosition.y,\n        z: targetPosition.z\n      }, duration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n    \n    this.tweens.push(posTween, targetTween);\n    console.log('动画已创建并添加到tweens数组，当前tweens数量:', this.tweens.length);\n    \n    // 如果动画没有立即开始，强制移动相机\n    setTimeout(() => {\n      if (camera.position.distanceTo(new three_module/* Vector3 */.Pq0(\n        targetPosition.x + offset.x,\n        targetPosition.y + offset.y,\n        targetPosition.z + offset.z\n      )) > 0.1) {\n        console.log('动画可能没有正常工作，强制移动相机');\n        this.forceMoveCamera(camera, controls, targetPosition, offset);\n      }\n    }, 100);\n  }\n  \n  /**\n   * 强制移动相机（备选方案）\n   */\n  forceMoveCamera(camera, controls, targetPosition, offset) {\n    console.log('执行强制移动');\n    \n    // 直接设置相机位置\n    camera.position.set(\n      targetPosition.x + offset.x,\n      targetPosition.y + offset.y,\n      targetPosition.z + offset.z\n    );\n    \n    // 直接设置控制器目标点\n    controls.target.set(\n      targetPosition.x,\n      targetPosition.y,\n      targetPosition.z\n    );\n    \n    // 更新控制器\n    controls.update();\n    \n    console.log('强制移动完成，相机位置:', camera.position);\n    console.log('控制器目标点:', controls.target);\n  }\n  \n  /**\n   * 重置视图\n   * @param {THREE.Camera} camera - 相机\n   * @param {THREE.Controls} controls - 控制器\n   * @param {number} duration - 动画持续时间（毫秒）\n   */\n  resetView(camera, controls, duration = CONFIG.explodedView.animationDuration) {\n    // 重置相机位置\n    const posTween = new tween_esm/* Tween */.K(camera.position, tweenGroup)\n      .to({ \n        x: CONFIG.camera.position.x, \n        y: CONFIG.camera.position.y, \n        z: CONFIG.camera.position.z \n      }, duration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n    \n    // 重置控制器目标点\n    const targetTween = new tween_esm/* Tween */.K(controls.target, tweenGroup)\n      .to({ \n        x: CONFIG.camera.target.x, \n        y: CONFIG.camera.target.y, \n        z: CONFIG.camera.target.z \n      }, duration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n    \n    this.tweens.push(posTween, targetTween);\n    \n    // 如果处于分解状态，重置组件位置\n    if (this.exploded) {\n      this.toggle(false, duration);\n    }\n  }\n  \n  /**\n   * 更新动画\n   */\n  update() {\n    // 更新所有tweens\n    this.tweens.forEach(tween => {\n      if (tween && tween.isPlaying) {\n        tween.update();\n      }\n    });\n    \n    // 清理已完成的tweens\n    this.tweens = this.tweens.filter(tween => tween && tween.isPlaying);\n  }\n} \n;// ./src/utils/ParticlePool.js\n\r\n\r\n\r\n/**\r\n * 粒子对象池类\r\n * 用于管理电子粒子的创建、复用和回收，避免频繁的内存分配和垃圾回收\r\n * 显著提升动画性能，特别是在大量粒子场景下\r\n */\r\nclass ParticlePool {\r\n  /**\r\n   * 构造函数\r\n   * @param {number} maxSize - 对象池最大容量\r\n   * @param {number} preCreateCount - 预创建的粒子数量\r\n   */\r\n  constructor(maxSize = 100, preCreateCount = 20) {\r\n    this.pool = [];                    // 可用粒子池\r\n    this.activeParticles = [];         // 正在使用的粒子\r\n    this.maxSize = maxSize;           // 最大容量\r\n    this.preCreateCount = preCreateCount;\r\n    \r\n    // 性能统计\r\n    this.stats = {\r\n      created: 0,        // 总创建数\r\n      reused: 0,         // 重用次数\r\n      released: 0,       // 释放次数\r\n      maxActive: 0       // 最大同时活跃数\r\n    };\r\n    \r\n    console.log(`ParticlePool: 初始化，最大容量=${maxSize}，预创建=${preCreateCount}`);\r\n    \r\n    // 预创建粒子对象\r\n    this.preCreateParticles();\r\n  }\r\n  \r\n  /**\r\n   * 预创建粒子对象\r\n   * 在初始化时创建一批粒子，避免运行时创建的性能开销\r\n   */\r\n  preCreateParticles() {\r\n    console.log(`ParticlePool: 开始预创建 ${this.preCreateCount} 个粒子`);\r\n    \r\n    for (let i = 0; i < this.preCreateCount; i++) {\r\n      const particle = this.createNewParticle();\r\n      particle.visible = false;  // 初始状态不可见\r\n      this.pool.push(particle);\r\n      this.stats.created++;\r\n    }\r\n    \r\n    console.log(`ParticlePool: 预创建完成，池中可用粒子数: ${this.pool.length}`);\r\n  }\r\n  \r\n  /**\r\n   * 创建新的粒子对象\r\n   * @returns {THREE.Mesh} 新创建的粒子网格对象\r\n   */\r\n  createNewParticle() {\r\n    // 创建球体几何体 - 使用较低的细分级别以提升性能\r\n    const geometry = new three_module/* SphereGeometry */.Gu$(\r\n      CONFIG.demoAnimation?.electronParticle?.radius || 0.02,  // 半径\r\n      8,   // 水平分段数（较低以提升性能）\r\n      6    // 垂直分段数（较低以提升性能）\r\n    );\r\n    \r\n    // 创建材质 - 优化透明度渲染\r\n    const material = new three_module/* MeshBasicMaterial */.V9B({\r\n      color: CONFIG.beam?.color || 0x00ffff,\r\n      transparent: true,\r\n      opacity: CONFIG.demoAnimation?.electronParticle?.opacity || 0.8,\r\n      depthTest: false,  // 禁用深度测试，确保粒子总是可见\r\n      depthWrite: false, // 禁用深度写入以避免透明度问题\r\n      blending: three_module/* AdditiveBlending */.EZo // 使用加法混合，增强发光效果\r\n    });\r\n    \r\n    // 创建网格对象\r\n    const particle = new three_module/* Mesh */.eaF(geometry, material);\r\n    \r\n    // 设置渲染顺序，确保粒子在透明极板之后渲染\r\n    particle.renderOrder = 10;\r\n    \r\n    // 添加自定义属性用于追踪\r\n    particle.userData = {\r\n      poolId: Math.random().toString(36).substr(2, 9),  // 唯一ID\r\n      createdAt: Date.now(),                            // 创建时间\r\n      reuseCount: 0                                     // 重用次数\r\n    };\r\n    \r\n    return particle;\r\n  }\r\n  \r\n  /**\r\n   * 从对象池获取一个粒子\r\n   * @returns {THREE.Mesh} 可用的粒子对象\r\n   */\r\n  getParticle() {\r\n    let particle;\r\n    \r\n    if (this.pool.length > 0) {\r\n      // 从池中取出一个现成的粒子（最佳情况）\r\n      particle = this.pool.pop();\r\n      particle.userData.reuseCount++;\r\n      this.stats.reused++;\r\n      \r\n    } else if (this.activeParticles.length < this.maxSize) {\r\n      // 池空了但还没达到最大限制，创建新的粒子\r\n      particle = this.createNewParticle();\r\n      this.stats.created++;\r\n      console.log(`ParticlePool: 池已空，创建新粒子 (总创建数: ${this.stats.created})`);\r\n      \r\n    } else {\r\n      // 达到最大限制，强制回收最老的粒子\r\n      particle = this.activeParticles.shift();\r\n      console.warn(`ParticlePool: 达到最大容量 ${this.maxSize}，强制回收最老粒子`);\r\n    }\r\n    \r\n    // 重置粒子状态\r\n    this.resetParticle(particle);\r\n    \r\n    // 设置为可见并加入活跃列表\r\n    particle.visible = true;\r\n    this.activeParticles.push(particle);\r\n    \r\n    // 更新统计\r\n    this.stats.maxActive = Math.max(this.stats.maxActive, this.activeParticles.length);\r\n    \r\n    return particle;\r\n  }\r\n  \r\n  /**\r\n   * 将粒子归还到对象池\r\n   * @param {THREE.Mesh} particle - 要归还的粒子对象\r\n   */\r\n  releaseParticle(particle) {\r\n    if (!particle) return;\r\n    \r\n    const index = this.activeParticles.indexOf(particle);\r\n    if (index === -1) {\r\n      console.warn('ParticlePool: 尝试释放未在活跃列表中的粒子');\r\n      return;\r\n    }\r\n    \r\n    // 从活跃列表中移除\r\n    this.activeParticles.splice(index, 1);\r\n    \r\n    // 重置粒子状态\r\n    this.resetParticle(particle);\r\n    particle.visible = false;\r\n    \r\n    // 归还到池中\r\n    this.pool.push(particle);\r\n    this.stats.released++;\r\n  }\r\n  \r\n  /**\r\n   * 重置粒子状态\r\n   * @param {THREE.Mesh} particle - 要重置的粒子\r\n   */\r\n  resetParticle(particle) {\r\n    // 重置位置\r\n    particle.position.set(0, 0, 0);\r\n    \r\n    // 重置旋转\r\n    particle.rotation.set(0, 0, 0);\r\n    \r\n    // 重置缩放\r\n    particle.scale.set(1, 1, 1);\r\n    \r\n    // 重置材质属性\r\n    if (particle.material) {\r\n      particle.material.opacity = CONFIG.demoAnimation?.electronParticle?.opacity || 0.8;\r\n      particle.material.color.setHex(CONFIG.beam?.color || 0x00ffff);\r\n    }\r\n    \r\n    // 停止所有正在进行的动画\r\n    if (particle.userData.currentTween) {\r\n      particle.userData.currentTween.stop();\r\n      delete particle.userData.currentTween;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 批量获取多个粒子\r\n   * @param {number} count - 需要的粒子数量\r\n   * @returns {THREE.Mesh[]} 粒子数组\r\n   */\r\n  getParticles(count) {\r\n    const particles = [];\r\n    for (let i = 0; i < count; i++) {\r\n      particles.push(this.getParticle());\r\n    }\r\n    return particles;\r\n  }\r\n  \r\n  /**\r\n   * 批量释放多个粒子\r\n   * @param {THREE.Mesh[]} particles - 要释放的粒子数组\r\n   */\r\n  releaseParticles(particles) {\r\n    particles.forEach(particle => this.releaseParticle(particle));\r\n  }\r\n  \r\n  /**\r\n   * 清理所有活跃粒子\r\n   */\r\n  clearAll() {\r\n    console.log(`ParticlePool: 清理所有活跃粒子，数量: ${this.activeParticles.length}`);\r\n    \r\n    // 停止所有粒子的动画\r\n    this.activeParticles.forEach(particle => {\r\n      if (particle.userData.currentTween) {\r\n        particle.userData.currentTween.stop();\r\n        delete particle.userData.currentTween;\r\n      }\r\n      particle.visible = false;\r\n    });\r\n    \r\n    // 将所有活跃粒子归还到池中\r\n    this.pool.push(...this.activeParticles);\r\n    this.activeParticles = [];\r\n  }\r\n  \r\n  /**\r\n   * 获取对象池状态信息\r\n   * @returns {Object} 状态信息对象\r\n   */\r\n  getStatus() {\r\n    return {\r\n      poolSize: this.pool.length,           // 池中可用粒子数\r\n      activeCount: this.activeParticles.length,  // 活跃粒子数\r\n      maxSize: this.maxSize,                // 最大容量\r\n      stats: { ...this.stats }             // 性能统计（复制）\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 打印详细状态信息\r\n   */\r\n  printStatus() {\r\n    const status = this.getStatus();\r\n    console.log('=== ParticlePool 状态报告 ===');\r\n    console.log(`池中可用: ${status.poolSize}`);\r\n    console.log(`正在使用: ${status.activeCount}`);\r\n    console.log(`最大容量: ${status.maxSize}`);\r\n    console.log(`总创建数: ${status.stats.created}`);\r\n    console.log(`重用次数: ${status.stats.reused}`);\r\n    console.log(`释放次数: ${status.stats.released}`);\r\n    console.log(`最大同时活跃: ${status.stats.maxActive}`);\r\n    console.log(`重用率: ${status.stats.reused > 0 ? (status.stats.reused / (status.stats.created + status.stats.reused) * 100).toFixed(1) : 0}%`);\r\n    console.log('========================');\r\n  }\r\n  \r\n  /**\r\n   * 销毁对象池，释放所有资源\r\n   */\r\n  dispose() {\r\n    console.log('ParticlePool: 开始销毁，释放所有资源');\r\n    \r\n    // 清理所有粒子\r\n    this.clearAll();\r\n    \r\n    // 释放几何体和材质资源\r\n    const allParticles = [...this.pool, ...this.activeParticles];\r\n    allParticles.forEach(particle => {\r\n      if (particle.geometry) {\r\n        particle.geometry.dispose();\r\n      }\r\n      if (particle.material) {\r\n        particle.material.dispose();\r\n      }\r\n    });\r\n    \r\n    // 清空数组\r\n    this.pool = [];\r\n    this.activeParticles = [];\r\n    \r\n    // 重置统计\r\n    this.stats = {\r\n      created: 0,\r\n      reused: 0,\r\n      released: 0,\r\n      maxActive: 0\r\n    };\r\n    \r\n    console.log('ParticlePool: 销毁完成');\r\n  }\r\n}\r\n\r\n// 导出默认实例（单例模式）\r\nconst defaultParticlePool = new ParticlePool(100, 30);\r\n\n;// ./src/components/DemoAnimation.js\n\n\n\n\n\n\n/**\n * 演示动画类\n * 负责创建和控制阴极射线管工作原理的演示动画\n */\nclass DemoAnimation {\n  /**\n   * 构造函数\n   * @param {THREE.Scene} scene - Three.js场景\n   * @param {Object} components - 组件对象集合\n   * @param {Object} controllers - 控制器对象集合\n   */\n  constructor(scene, components, controllers) {\n    console.log('DemoAnimation构造函数被调用');\n    console.log('scene:', scene);\n    console.log('components:', components);\n    console.log('controllers:', controllers);\n    \n    this.scene = scene;\n    this.components = components;\n    this.controllers = controllers;\n    \n    this.isPlaying = false;\n    this.currentStep = 0;\n    this.animationSteps = [];\n    this.particles = [];\n    this.tweens = [];\n    this.stepCallbacks = [];\n    this.continuousBeamInterval = null; // 连续电子束的定时器\n    this.originalVoltages = null; // 保存原始偏转电压值，用于波形显示\n    this.originalPlateOpacities = null; // 保存极板原始不透明度\n    this.originalGuiState = null; // 保存GUI面板的原始状态\n    \n    // 初始化粒子对象池\n    this.particlePool = new ParticlePool(80, 25); // 最大80个粒子，预创建25个\n    \n    console.log('初始化动画步骤');\n    // 初始化动画步骤\n    this.initAnimationSteps();\n    \n    console.log('创建电子粒子材质');\n    // 创建电子粒子材质 - 优化透明度渲染\n    this.particleMaterial = new three_module/* MeshBasicMaterial */.V9B({\n      color: CONFIG.beam.color,\n      transparent: true,\n      opacity: CONFIG.demoAnimation.electronParticle.opacity,\n      depthTest: false,  // 禁用深度测试，确保粒子总是可见\n      depthWrite: false, // 禁用深度写入，避免影响其他透明物体\n      blending: three_module/* AdditiveBlending */.EZo // 使用加法混合，增强发光效果\n    });\n    \n    console.log('DemoAnimation构造函数完成');\n    console.log('粒子对象池状态:', this.particlePool.getStatus());\n  }\n  \n  /**\n   * 初始化动画步骤\n   */\n  initAnimationSteps() {\n    // 步骤1: 介绍阴极射线管\n    this.animationSteps.push({\n      title: '阴极射线管简介',\n      description: '阴极射线管是一种真空电子管，利用电场控制电子束的偏转来显示图像。',\n      duration: 6000,  // 增加持续时间到6秒\n      setup: () => {\n        // 使用自定义视角展示整个阴极射线管的全貌\n        const viewPromise = this.setCustomView({\n          position: { x: 8, y: 5, z: 12 },  // 稍微远一点的俯视角度\n          target: { x: 0, y: 0, z: 0 }      // 观察整个设备中心\n        });\n        \n        // 在2秒时开始CRT外壳分解和消失\n        setTimeout(() => {\n          console.log('演示动画：开始CRT外壳分解和消失');\n          this.startCRTShellDisappear();\n        }, 2000);  // 在2秒时开始CRT外壳消失\n        \n        return viewPromise;\n      }\n    });\n    \n    // 步骤2: 电子枪发射电子\n    this.animationSteps.push({\n      title: '电子枪发射电子',\n      description: '电子枪加热阴极，释放电子并加速形成电子束。',\n      duration: 4000,\n      setup: () => {\n        // 聚焦到电子枪\n        const focusPromise = this.focusOnComponent('gun');\n        \n        // 创建连续电子束流\n        setTimeout(() => {\n          this.startContinuousElectronBeam(\n            new three_module/* Vector3 */.Pq0(-3, 0, 0),\n            new three_module/* Vector3 */.Pq0(-2.7, 0, 0)\n          );\n        }, 1000);\n        \n        return focusPromise;\n      }\n    });\n    \n    // 步骤3: 垂直偏转板\n    this.animationSteps.push({\n      title: '垂直偏转板',\n      description: '垂直偏转板通过电压控制电子束在垂直方向上的偏转。',\n      duration: 5000,\n      setup: () => {\n        // 聚焦到垂直偏转板\n        const focusPromise = this.focusOnComponent('v1');\n        \n        // 模拟电压变化\n        setTimeout(() => {\n          // 设置垂直电压\n          this.simulateVoltageChange('vertical', 3, 2000);\n          \n          // 创建连续电子束流（从电子枪到偏转板）\n          this.startContinuousElectronBeam(\n            new three_module/* Vector3 */.Pq0(-2.7, 0, 0),\n            new three_module/* Vector3 */.Pq0(-1.5, 0.6, 0)\n          );\n        }, 1000);\n        \n        return focusPromise;\n      }\n    });\n    \n    // 步骤4: 水平偏转板\n    this.animationSteps.push({\n      title: '水平偏转板',\n      description: '水平偏转板通过电压控制电子束在水平方向上的偏转。',\n      duration: 5000,\n      setup: () => {\n        // 聚焦到水平偏转板\n        const focusPromise = this.focusOnComponent('h1');\n        \n        // 模拟电压变化\n        setTimeout(() => {\n          // 设置水平电压\n          this.simulateVoltageChange('horizontal', 2, 2000);\n          \n          // 创建连续电子束流（从垂直偏转板到水平偏转板）\n          this.startContinuousElectronBeam(\n            new three_module/* Vector3 */.Pq0(-1.5, 0.6, 0),\n            new three_module/* Vector3 */.Pq0(-0.2, 0.6, 0.4)\n          );\n        }, 1000);\n        \n        return focusPromise;\n      }\n    });\n    \n    // 步骤5: 荧光屏显示\n    this.animationSteps.push({\n      title: '荧光屏显示',\n      description: '电子束击中荧光屏上的荧光物质，产生可见光，形成图像。',\n      duration: 5000,\n      setup: () => {\n        // 聚焦到荧光屏\n        const focusPromise = this.focusOnComponent('screen');\n        \n        // 创建连续电子束流（从水平偏转板到荧光屏）\n        setTimeout(() => {\n          this.startContinuousElectronBeam(\n            new three_module/* Vector3 */.Pq0(-0.2, 0.6, 0.4),\n            new three_module/* Vector3 */.Pq0(3, 0.6, 0.4)\n          );\n        }, 1000);\n        \n        return focusPromise;\n      }\n    });\n    \n    // 步骤6: 波形显示\n    this.animationSteps.push({\n      title: '波形显示',\n      description: '通过改变偏转电压，可以在荧光屏上绘制各种波形。',\n      duration: 10000,  // 增加持续时间以展示两种波形\n      setup: () => {\n        // 使用自定义视角，从左前方、上方观察整个阴极射线管和波形显示\n        const resetPromise = this.setCustomView({\n          position: { x: 14, y: 1, z: -2.5 },       \n          target: { x: 0, y: 0, z: 0 }         // 聚焦到整个装置的中心\n        });\n        \n        // 启用波形和电子束\n        setTimeout(() => {\n          // 清除之前的粒子和荧光点\n          this.clearAllParticles();\n          if (this.components && this.components.screen) {\n            this.components.screen.clearAllGlowPoints();\n          }\n          \n          // 第一阶段：显示正弦波（前4秒）\n          this.setWaveformParams({\n            type: 'sine',\n            frequency: 1.2,\n            amplitude: 2.5,\n            enabled: true\n          });\n          \n          // 启动连续电子束流 - 从电子枪到荧光屏的完整路径\n          this.startContinuousElectronBeam(\n            new three_module/* Vector3 */.Pq0(-3, 0, 0),     // 从电子枪开始\n            new three_module/* Vector3 */.Pq0(3, 0, 0)       // 到荧光屏结束\n          );\n          \n          // 4秒后切换到方波\n          const waveformSwitchCallback = setTimeout(() => {\n            // 清除荧光屏，准备显示新波形\n            if (this.components && this.components.screen) {\n              this.components.screen.clearAllGlowPoints();\n            }\n            \n            // 切换到方波\n            this.setWaveformParams({\n              type: 'square',\n              frequency: 0.8,\n              amplitude: 3,\n              enabled: true\n            });\n          }, 4000);\n          \n          this.stepCallbacks.push(waveformSwitchCallback);\n          \n        }, 1000);\n        \n        return resetPromise;\n      }\n    });\n    \n    // 步骤7: 演示结束\n    this.animationSteps.push({\n      title: '演示结束',\n      description: '阴极射线管是早期显示器的基础技术，为现代显示技术奠定了基础。',\n      duration: 3000,\n      setup: () => {\n        // 设置自定义视角，展示整个阴极射线管的完整视图\n        const viewPromise = this.setCustomView({\n          position: { x: 6, y: 4, z: 10 },\n          target: { x: 0, y: 0, z: 0 }\n        });\n        \n        // 还原分解视图状态\n        setTimeout(() => {\n          console.log('演示动画结束：还原分解视图状态');\n          const explodeBtn = document.getElementById('toggle-explode-btn');\n          if (explodeBtn && explodeBtn.textContent === '合并视图') {\n            explodeBtn.click();\n          }\n        }, 500);\n        \n        // 还原外壳显示状态\n        setTimeout(() => {\n          console.log('演示动画结束：还原外壳显示状态');\n          if (this.originalShellVisible !== undefined) {\n            // 查找\"显示外壳\"的复选框\n            const shellCheckboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n            let shellCheckbox = null;\n            \n            // 查找对应的复选框\n            shellCheckboxes.forEach(checkbox => {\n              const label = checkbox.closest('li')?.querySelector('.property-name');\n              if (label && label.textContent.includes('显示外壳')) {\n                shellCheckbox = checkbox;\n              }\n            });\n            \n            if (shellCheckbox) {\n              // 如果原始状态和当前状态不同，点击复选框\n              if (shellCheckbox.checked !== this.originalShellVisible) {\n                console.log('演示动画结束：通过复选框还原外壳状态');\n                shellCheckbox.click();\n              }\n            } else {\n              // 直接通过CONFIG还原\n              console.log('演示动画结束：直接通过CONFIG还原外壳状态');\n              if (window.CONFIG) {\n                window.CONFIG.shell.visible = this.originalShellVisible;\n                // 触发外壳更新\n                if (this.controllers && this.controllers.onShellChange) {\n                  this.controllers.onShellChange(window.CONFIG.shell);\n                }\n              }\n            }\n          }\n          \n          // 重置所有参数\n          this.resetAllParams();\n        }, 1000);\n        \n        return viewPromise;\n      }\n    });\n  }\n  \n  /**\n   * 开始演示动画\n   */\n  start() {\n    console.log('DemoAnimation.start被调用');\n    console.log('this.isPlaying:', this.isPlaying);\n    \n    if (this.isPlaying) {\n      console.log('演示已在播放中，返回');\n      return;\n    }\n    \n    // 保存原始偏转电压值，用于波形显示时保持固定位置\n    this.originalVoltages = {\n      horizontal: CONFIG.deflection.horizontal.voltage,\n      vertical: CONFIG.deflection.vertical.voltage\n    };\n    \n    // 保存原始外壳显示状态\n    this.originalShellVisible = CONFIG.shell ? CONFIG.shell.visible : true;\n    console.log('保存原始外壳状态:', this.originalShellVisible);\n    \n    // 保存极板原始不透明度并设置为50%，提高透明度以便更好地观察电子束\n    this.setPlateOpacity(0.5);\n    \n    // 折叠GUI面板，避免演示时界面干扰\n    this.collapseGuiFolders();\n    \n    this.isPlaying = true;\n    this.currentStep = 0;\n    \n    console.log('保存原始参数');\n    // 保存原始参数\n    this.saveOriginalParams();\n    \n    // 在动画开始时启用电子束（设置适当的强度）\n    CONFIG.beam.intensity = 0.9;\n    if (this.controllers.onBeamChange) {\n      this.controllers.onBeamChange(CONFIG.beam);\n    }\n    \n    console.log('开始第一步，调用playCurrentStep');\n    // 开始第一步\n    this.playCurrentStep();\n  }\n  \n  /**\n   * 停止演示动画\n   */\n  stop() {\n    this.isPlaying = false;\n    \n    // 停止连续电子束\n    this.stopContinuousElectronBeam();\n    \n    // 停止所有动画\n    this.tweens.forEach(tween => {\n      if (tween && typeof tween.stop === 'function') {\n        tween.stop();\n      }\n    });\n    this.tweens = [];\n    \n    // 清除所有粒子（使用对象池优化）\n    this.clearAllParticles();\n    \n    // 清理对象池中的所有活跃粒子\n    if (this.particlePool) {\n      this.particlePool.clearAll();\n    }\n    \n    // 恢复原始偏转电压值\n    if (this.originalVoltages) {\n      CONFIG.deflection.horizontal.voltage = this.originalVoltages.horizontal;\n      CONFIG.deflection.vertical.voltage = this.originalVoltages.vertical;\n      this.originalVoltages = null;\n    }\n    \n    // 清理保存的外壳状态\n    this.originalShellVisible = undefined;\n    \n    // 恢复极板原始不透明度\n    this.restorePlateOpacity();\n    \n    // 恢复GUI面板状态\n    this.restoreGuiFolders();\n    \n    // 重置所有参数\n    this.resetAllParams();\n    \n    // 清除所有回调和定时器\n    this.stepCallbacks.forEach(callback => {\n      if (typeof callback === 'number') {\n        clearTimeout(callback);\n      }\n    });\n    this.stepCallbacks = [];\n  }\n  \n  /**\n   * 播放当前步骤\n   */\n  playCurrentStep() {\n    console.log('playCurrentStep被调用');\n    console.log('this.isPlaying:', this.isPlaying);\n    console.log('this.currentStep:', this.currentStep);\n    console.log('this.animationSteps.length:', this.animationSteps.length);\n    \n    if (!this.isPlaying || this.currentStep >= this.animationSteps.length) {\n      console.log('演示结束或已停止，调用stop');\n      this.stop();\n      return;\n    }\n    \n    // 停止之前的连续电子束\n    this.stopContinuousElectronBeam();\n    \n    const step = this.animationSteps[this.currentStep];\n    console.log('当前步骤:', step);\n    \n    // 触发步骤开始事件\n    if (this.onStepStart) {\n      console.log('触发步骤开始事件');\n      this.onStepStart(this.currentStep, step);\n    } else {\n      console.log('onStepStart未设置');\n    }\n    \n    // 设置步骤\n    console.log('执行步骤setup');\n    const setupPromise = step.setup ? step.setup() : Promise.resolve();\n    \n    // 步骤完成后，继续下一步\n    setupPromise.then(() => {\n      console.log('步骤setup完成，设置下一步定时器，持续时间:', step.duration);\n      const callback = setTimeout(() => {\n        console.log('定时器触发，进入下一步');\n        this.currentStep++;\n        this.playCurrentStep();\n      }, step.duration);\n      \n      this.stepCallbacks.push(callback);\n      console.log('定时器已添加到stepCallbacks');\n    }).catch(error => {\n      console.error('步骤setup出错:', error);\n    });\n  }\n  \n  /**\n   * 聚焦到组件\n   * @param {string} componentKey - 组件键名\n   * @returns {Promise} 动画完成的Promise\n   */\n  focusOnComponent(componentKey) {\n    return new Promise(resolve => {\n      const component = this.components[componentKey];\n      if (!component) {\n        resolve();\n        return;\n      }\n      \n      // 计算目标位置\n      const targetPosition = component.position.clone();\n      const offset = new three_module/* Vector3 */.Pq0(\n        CONFIG.demoAnimation.cameraOffset.x,\n        CONFIG.demoAnimation.cameraOffset.y,\n        CONFIG.demoAnimation.cameraOffset.z\n      );\n      \n      // 创建相机位置动画\n      const posTween = new tween_esm/* Tween */.K(this.controllers.camera.position, tweenGroup)\n        .to({\n          x: targetPosition.x + offset.x,\n          y: targetPosition.y + offset.y,\n          z: targetPosition.z + offset.z\n        }, CONFIG.demoAnimation.animationDuration)\n        .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n        .onComplete(resolve)\n        .start();\n      \n      // 创建控制器目标点动画\n      const targetTween = new tween_esm/* Tween */.K(this.controllers.controls.target, tweenGroup)\n        .to({\n          x: targetPosition.x,\n          y: targetPosition.y,\n          z: targetPosition.z\n        }, CONFIG.demoAnimation.animationDuration)\n        .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n        .start();\n      \n      this.tweens.push(posTween, targetTween);\n    });\n  }\n  \n  /**\n   * 重置视图\n   * @returns {Promise} 动画完成的Promise\n   */\n  resetView() {\n    return new Promise(resolve => {\n          // 重置相机位置\n    const posTween = new tween_esm/* Tween */.K(this.controllers.camera.position, tweenGroup)\n      .to({ \n        x: CONFIG.camera.position.x, \n        y: CONFIG.camera.position.y, \n        z: CONFIG.camera.position.z \n      }, CONFIG.demoAnimation.animationDuration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .onComplete(resolve)\n      .start();\n      \n          // 重置控制器目标点\n    const targetTween = new tween_esm/* Tween */.K(this.controllers.controls.target, tweenGroup)\n      .to({ \n        x: CONFIG.camera.target.x, \n        y: CONFIG.camera.target.y, \n        z: CONFIG.camera.target.z \n      }, CONFIG.demoAnimation.animationDuration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n      \n      this.tweens.push(posTween, targetTween);\n    });\n  }\n\n  /**\n   * 设置自定义视图\n   * @param {Object} viewConfig - 视图配置\n   * @param {Object} viewConfig.position - 摄像头位置 {x, y, z}\n   * @param {Object} viewConfig.target - 观察目标 {x, y, z}\n   * @param {number} duration - 动画持续时间（可选）\n   * @returns {Promise} 动画完成的Promise\n   */\n  setCustomView(viewConfig, duration = CONFIG.demoAnimation.animationDuration) {\n    return new Promise(resolve => {\n      // 设置相机位置\n      const posTween = new tween_esm/* Tween */.K(this.controllers.camera.position, tweenGroup)\n        .to({ \n          x: viewConfig.position.x, \n          y: viewConfig.position.y, \n          z: viewConfig.position.z \n        }, duration)\n        .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n        .onComplete(resolve)\n        .start();\n        \n      // 设置控制器目标点\n      const targetTween = new tween_esm/* Tween */.K(this.controllers.controls.target, tweenGroup)\n        .to({ \n          x: viewConfig.target.x, \n          y: viewConfig.target.y, \n          z: viewConfig.target.z \n        }, duration)\n        .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n        .start();\n        \n      this.tweens.push(posTween, targetTween);\n    });\n  }\n\n  /**\n   * 创建连续电子束流\n   * @param {THREE.Vector3} startPos - 起始位置\n   * @param {THREE.Vector3} endPos - 结束位置\n   * @param {number} count - 粒子数量\n   * @param {number} duration - 动画持续时间\n   * @param {Function} onComplete - 完成回调\n   */\n  createElectronParticles(startPos, endPos, count = 10, duration = 2000, onComplete = null) {\n    // 使用配置中的发射频率，如果没有则使用默认值\n    const emissionRate = CONFIG.demoAnimation.electronParticle.emissionRate || 8;\n    const particleInterval = 1000 / emissionRate; // 根据发射频率计算间隔时间（毫秒）\n    \n    // 计算电子束的总路径长度，用于确定粒子的生命周期\n    const beamDistance = startPos.distanceTo(endPos);\n    const particleSpeed = beamDistance / 1500; // 粒子移动速度（单位/毫秒）\n    const particleLifetime = beamDistance / particleSpeed + 500; // 粒子生命周期稍长一些\n    \n    for (let i = 0; i < count; i++) {\n      // 使用 setTimeout 来实现真正的实时发射\n      const timeout = setTimeout(() => {\n        // 从对象池获取粒子，而不是创建新的 (性能优化)\n        const particle = this.particlePool.getParticle();\n        \n        // 设置初始位置\n        particle.position.copy(startPos);\n        \n        // 添加发射效果：粒子从小到正常大小\n        particle.scale.setScalar(0.1);\n        \n        // 添加到场景\n        this.scene.add(particle);\n        this.particles.push(particle);\n        \n        // 创建粒子出现动画\n        const appearTween = new tween_esm/* Tween */.K(particle.scale, tweenGroup)\n          .to({ x: 1, y: 1, z: 1 }, 200)\n          .easing(tween_esm/* Easing */.GS.Back.Out)\n          .start();\n        \n        this.tweens.push(appearTween);\n        \n        // 创建连续移动动画 - 粒子会继续向前运动而不是在endPos停止\n        const extendedEndPos = this.calculateExtendedEndPosition(startPos, endPos);\n        const moveDuration = particleLifetime;\n        \n        const tween = new tween_esm/* Tween */.K(particle.position, tweenGroup)\n          .to({\n            x: extendedEndPos.x,\n            y: extendedEndPos.y,\n            z: extendedEndPos.z\n          }, moveDuration)\n          .easing(tween_esm/* Easing */.GS.Linear.None)\n          .onUpdate(() => {\n            // 当粒子接近荧光屏时，添加发光效果\n            const distanceToScreen = particle.position.distanceTo(endPos);\n            if (distanceToScreen < 0.1) {\n              // 在荧光屏上添加发光点\n              if (this.components && this.components.screen) {\n                this.components.screen.addGlowPoint(particle.position.clone());\n              }\n            }\n          })\n          .onComplete(() => {\n            // 最后一个粒子完成时触发回调\n            if (i === count - 1 && onComplete) {\n              onComplete();\n            }\n            \n            // 从场景中移除粒子\n            this.scene.remove(particle);\n            const index = this.particles.indexOf(particle);\n            if (index !== -1) {\n              this.particles.splice(index, 1);\n            }\n            \n            // 归还粒子到对象池，而不是销毁 (性能优化)\n            this.particlePool.releaseParticle(particle);\n          })\n          .start();\n        \n        this.tweens.push(tween);\n      }, i * particleInterval);\n      \n      // 保存timeout以便在停止动画时可以清除\n      this.stepCallbacks.push(timeout);\n    }\n  }\n  \n  /**\n   * 计算延伸的结束位置，让电子粒子看起来继续运动\n   * @param {THREE.Vector3} startPos - 起始位置\n   * @param {THREE.Vector3} endPos - 原始结束位置\n   * @returns {THREE.Vector3} 延伸的结束位置\n   */\n  calculateExtendedEndPosition(startPos, endPos) {\n    // 计算运动方向向量\n    const direction = new three_module/* Vector3 */.Pq0().subVectors(endPos, startPos).normalize();\n    \n    // 将结束位置向前延伸，让粒子看起来继续运动\n    const extensionDistance = 2.0; // 延伸距离\n    const extendedEndPos = endPos.clone().add(direction.multiplyScalar(extensionDistance));\n    \n    return extendedEndPos;\n  }\n  \n  /**\n   * 创建连续电子束流（无限循环直到停止）\n   * @param {THREE.Vector3} startPos - 起始位置\n   * @param {THREE.Vector3} endPos - 结束位置\n   */\n  startContinuousElectronBeam(startPos, endPos) {\n    // 如果已经有连续电子束在运行，先停止它\n    this.stopContinuousElectronBeam();\n    \n    const emissionRate = CONFIG.demoAnimation.electronParticle.emissionRate || 8;\n    const particleInterval = 1000 / emissionRate;\n    \n    // 计算电子束参数\n    const beamDistance = startPos.distanceTo(endPos);\n    const particleSpeed = beamDistance / 1500; // 粒子移动速度\n    const particleLifetime = beamDistance / particleSpeed + 1000; // 延长生命周期\n    \n    // 创建连续发射的定时器\n    this.continuousBeamInterval = setInterval(() => {\n      if (!this.isPlaying) return; // 如果动画已停止，不再发射新粒子\n      \n      // 创建单个电子粒子 - 使用优化的材质\n      const geometry = new three_module/* SphereGeometry */.Gu$(CONFIG.demoAnimation.electronParticle.size, 6, 6);\n      const particleMat = this.particleMaterial.clone();\n      \n      // 确保粒子材质具有最佳可见性\n      particleMat.depthTest = false;\n      particleMat.depthWrite = false;\n      particleMat.blending = three_module/* AdditiveBlending */.EZo;\n      \n      const particle = new three_module/* Mesh */.eaF(geometry, particleMat);\n      \n      // 设置粒子的渲染顺序，确保在极板之后渲染\n      particle.renderOrder = 10;\n      \n      // 设置初始位置\n      particle.position.copy(startPos);\n      particle.scale.setScalar(0.1);\n      \n      // 添加到场景\n      this.scene.add(particle);\n      this.particles.push(particle);\n      \n      // 粒子出现动画\n      const appearTween = new tween_esm/* Tween */.K(particle.scale, tweenGroup)\n        .to({ x: 1, y: 1, z: 1 }, 200)\n        .easing(tween_esm/* Easing */.GS.Back.Out)\n        .start();\n      \n      this.tweens.push(appearTween);\n      \n      // 获取当前电子束轨迹路径\n      const beamPath = this.getCurrentBeamPath(startPos, endPos);\n      const extendedEndPos = this.calculateExtendedEndPosition(startPos, endPos);\n      \n      // 粒子沿着电子束轨迹移动动画\n      const moveTween = new tween_esm/* Tween */.K({ progress: 0 }, tweenGroup)\n        .to({ progress: 1 }, particleLifetime)\n        .easing(tween_esm/* Easing */.GS.Linear.None)\n        .onUpdate((obj) => {\n          // 根据进度沿着电子束路径移动粒子\n          const position = this.getPositionAlongBeamPath(beamPath, obj.progress, extendedEndPos);\n          particle.position.copy(position);\n          \n          // 当粒子接近荧光屏时，添加发光效果\n          const distanceToScreen = particle.position.distanceTo(endPos);\n          if (distanceToScreen < 0.1 && !particle.hasHitScreen) {\n            particle.hasHitScreen = true; // 防止重复触发\n            if (this.components && this.components.screen) {\n              this.components.screen.addGlowPoint(particle.position.clone());\n            }\n          }\n        })\n        .onComplete(() => {\n          // 移除粒子\n          this.scene.remove(particle);\n          const index = this.particles.indexOf(particle);\n          if (index !== -1) {\n            this.particles.splice(index, 1);\n          }\n          geometry.dispose();\n          particle.material.dispose();\n        })\n        .start();\n      \n      this.tweens.push(moveTween);\n      \n    }, particleInterval);\n  }\n  \n  /**\n   * 获取当前电子束路径\n   * @param {THREE.Vector3} startPos - 起始位置\n   * @param {THREE.Vector3} endPos - 结束位置\n   * @returns {Array<THREE.Vector3>} 电子束路径点数组\n   */\n  getCurrentBeamPath(startPos, endPos) {\n    // 如果有电子束组件且有当前路径，使用实际的电子束路径\n    if (this.components && this.components.electronBeam && this.components.electronBeam.beamPoints && this.components.electronBeam.beamPoints.length > 0) {\n      return this.components.electronBeam.beamPoints;\n    }\n    \n    // 否则生成简单的直线路径\n    const pathPoints = [];\n    const numSegments = 20;\n    \n    for (let i = 0; i <= numSegments; i++) {\n      const t = i / numSegments;\n      const point = new three_module/* Vector3 */.Pq0().lerpVectors(startPos, endPos, t);\n      pathPoints.push(point);\n    }\n    \n    return pathPoints;\n  }\n  \n  /**\n   * 根据进度获取沿电子束路径的位置\n   * @param {Array<THREE.Vector3>} beamPath - 电子束路径点数组\n   * @param {number} progress - 进度 (0-1)\n   * @param {THREE.Vector3} extendedEndPos - 延伸的结束位置\n   * @returns {THREE.Vector3} 当前位置\n   */\n  getPositionAlongBeamPath(beamPath, progress, extendedEndPos) {\n    if (!beamPath || beamPath.length === 0) {\n      // 如果没有路径，返回起始位置\n      return new three_module/* Vector3 */.Pq0();\n    }\n    \n    if (beamPath.length === 1) {\n      return beamPath[0].clone();\n    }\n    \n    // 如果进度超过1，继续向延伸位置移动\n    if (progress > 1) {\n      const lastPoint = beamPath[beamPath.length - 1];\n      const overProgress = progress - 1;\n      return lastPoint.clone().lerp(extendedEndPos, overProgress);\n    }\n    \n    // 在路径上插值\n    const scaledProgress = progress * (beamPath.length - 1);\n    const segmentIndex = Math.floor(scaledProgress);\n    const segmentProgress = scaledProgress - segmentIndex;\n    \n    if (segmentIndex >= beamPath.length - 1) {\n      return beamPath[beamPath.length - 1].clone();\n    }\n    \n    const startPoint = beamPath[segmentIndex];\n    const endPoint = beamPath[segmentIndex + 1];\n    \n    return startPoint.clone().lerp(endPoint, segmentProgress);\n  }\n  \n  /**\n   * 停止连续电子束流\n   */\n  stopContinuousElectronBeam() {\n    if (this.continuousBeamInterval) {\n      clearInterval(this.continuousBeamInterval);\n      this.continuousBeamInterval = null;\n    }\n  }\n  \n  /**\n   * 模拟电压变化\n   * @param {string} direction - 方向（'horizontal' 或 'vertical'）\n   * @param {number} targetVoltage - 目标电压\n   * @param {number} duration - 动画持续时间\n   */\n  simulateVoltageChange(direction, targetVoltage, duration = 1000) {\n    const deflection = CONFIG.deflection[direction];\n    if (!deflection) return;\n    \n    // 创建电压变化动画\n    const tween = new tween_esm/* Tween */.K({ voltage: deflection.voltage }, tweenGroup)\n      .to({ voltage: targetVoltage }, duration)\n      .easing(tween_esm/* Easing */.GS.Quadratic.InOut)\n      .onUpdate(obj => {\n        // 更新电压值\n        deflection.voltage = obj.voltage;\n        \n        // 更新电子束\n        if (this.controllers.onDeflectionChange) {\n          this.controllers.onDeflectionChange(CONFIG.deflection);\n        }\n      })\n      .start();\n    \n    this.tweens.push(tween);\n  }\n  \n  /**\n   * 设置波形参数\n   * @param {Object} params - 波形参数\n   */\n  setWaveformParams(params) {\n    Object.assign(CONFIG.waveform, params);\n    \n    // 更新波形\n    if (this.controllers.onWaveformChange) {\n      this.controllers.onWaveformChange(CONFIG.waveform);\n    }\n  }\n  \n  /**\n   * 保存原始参数\n   */\n  saveOriginalParams() {\n    this.originalParams = {\n      deflection: {\n        horizontal: { voltage: CONFIG.deflection.horizontal.voltage },\n        vertical: { voltage: CONFIG.deflection.vertical.voltage }\n      },\n      waveform: { ...CONFIG.waveform },\n      beam: {\n        intensity: CONFIG.beam.intensity\n      }\n    };\n  }\n  \n  /**\n   * 保存GUI面板状态并折叠所有面板\n   */\n  collapseGuiFolders() {\n    // 获取GUI控制器\n    const guiController = this.controllers.guiController;\n    if (!guiController || !guiController.gui) {\n      return;\n    }\n    \n    // 保存原始状态\n    this.originalGuiState = {};\n    \n    // 遍历所有文件夹并保存其展开状态，然后折叠\n    guiController.gui.__folders && Object.keys(guiController.gui.__folders).forEach(folderName => {\n      const folder = guiController.gui.__folders[folderName];\n      if (folder) {\n        // 保存原始展开状态\n        this.originalGuiState[folderName] = folder.closed;\n        // 折叠面板\n        folder.close();\n      }\n    });\n    \n    console.log('GUI面板已折叠，保存的原始状态:', this.originalGuiState);\n  }\n  \n  /**\n   * 恢复GUI面板状态\n   */\n  restoreGuiFolders() {\n    // 获取GUI控制器\n    const guiController = this.controllers.guiController;\n    if (!guiController || !guiController.gui || !this.originalGuiState) {\n      return;\n    }\n    \n    // 恢复所有文件夹的原始展开状态\n    Object.keys(this.originalGuiState).forEach(folderName => {\n      const folder = guiController.gui.__folders[folderName];\n      if (folder) {\n        if (this.originalGuiState[folderName]) {\n          folder.close();\n        } else {\n          folder.open();\n        }\n      }\n    });\n    \n    console.log('GUI面板状态已恢复');\n    this.originalGuiState = null;\n  }\n  \n  /**\n   * 重置所有参数\n   */\n  resetAllParams() {\n    if (!this.originalParams) return;\n    \n    // 恢复偏转参数\n    CONFIG.deflection.horizontal.voltage = this.originalParams.deflection.horizontal.voltage;\n    CONFIG.deflection.vertical.voltage = this.originalParams.deflection.vertical.voltage;\n    \n    // 恢复波形参数\n    Object.assign(CONFIG.waveform, this.originalParams.waveform);\n    \n    // 恢复电子束参数\n    CONFIG.beam.intensity = this.originalParams.beam.intensity;\n    \n    // 注意：不在这里重置爆炸效果，因为演示结束时已经通过explodeBtn.click()处理了\n    // 避免重复操作导致状态不一致\n    \n    // 重置CRT外壳状态\n    this.resetCRTShell();\n    \n    // 更新控制器\n    if (this.controllers.onDeflectionChange) {\n      this.controllers.onDeflectionChange(CONFIG.deflection);\n    }\n    \n    if (this.controllers.onWaveformChange) {\n      this.controllers.onWaveformChange(CONFIG.waveform);\n    }\n    \n    if (this.controllers.onBeamChange) {\n      this.controllers.onBeamChange(CONFIG.beam);\n    }\n  }\n  \n  /**\n   * 重置CRT外壳状态\n   * 恢复外壳的可见性和各组件的分解状态\n   */\n  resetCRTShell() {\n    console.log('重置CRT外壳状态');\n    \n    const crtShell = this.components.crtShell;\n    if (!crtShell) {\n      console.warn('找不到CRTShell组件');\n      return;\n    }\n    \n    const shellGroup = crtShell.getShell();\n    if (!shellGroup) {\n      console.warn('找不到CRT外壳组');\n      return;\n    }\n    \n    // 1. 恢复外壳可见性\n    shellGroup.visible = CONFIG.shell.visible;\n    console.log('恢复外壳可见性:', CONFIG.shell.visible);\n    \n    // 2. 重置各组件的分解状态为合并状态\n    console.log('重置超椭圆分解状态');\n    crtShell.toggleSuperellipseExplode(false);\n    \n    console.log('重置旋转曲线连接分解状态');\n    crtShell.toggleConnectionExplode(false);\n    \n    console.log('重置Cylinder2分解状态');\n    crtShell.toggleCylinder2Explode(false);\n    \n    // 3. 恢复所有材质的透明度\n    this.restoreCRTShellMaterials(shellGroup);\n    \n    console.log('CRT外壳状态重置完成');\n  }\n  \n  /**\n   * 恢复CRT外壳材质的透明度\n   * @param {THREE.Group} shellGroup - CRT外壳组\n   */\n  restoreCRTShellMaterials(shellGroup) {\n    console.log('恢复CRT外壳材质透明度');\n    \n    // 遍历所有子对象，恢复材质透明度\n    shellGroup.traverse((child) => {\n      if (child.material) {\n        const materials = Array.isArray(child.material) ? child.material : [child.material];\n        \n        materials.forEach(material => {\n          // 恢复原始透明度\n          material.opacity = CONFIG.shell.opacity;\n          material.transparent = CONFIG.shell.opacity < 1.0;\n        });\n      }\n    });\n  }\n  \n  /**\n   * 清除所有粒子\n   */\n  clearAllParticles() {\n    this.particles.forEach(particle => {\n      this.scene.remove(particle);\n      particle.geometry.dispose();\n      particle.material.dispose();\n    });\n    this.particles = [];\n  }\n  \n  /**\n   * 设置极板不透明度\n   * @param {number} opacity - 不透明度值 (0-1)\n   */\n  setPlateOpacity(opacity) {\n    // 如果还没有保存原始不透明度，先保存\n    if (!this.originalPlateOpacities) {\n      this.originalPlateOpacities = {};\n      \n      // 保存垂直偏转板的原始不透明度\n      if (this.components.v1 && this.components.v1.material) {\n        this.originalPlateOpacities.v1 = this.components.v1.material.opacity || 1.0;\n      }\n      if (this.components.v2 && this.components.v2.material) {\n        this.originalPlateOpacities.v2 = this.components.v2.material.opacity || 1.0;\n      }\n      \n      // 保存水平偏转板的原始不透明度\n      if (this.components.h1 && this.components.h1.material) {\n        this.originalPlateOpacities.h1 = this.components.h1.material.opacity || 1.0;\n      }\n      if (this.components.h2 && this.components.h2.material) {\n        this.originalPlateOpacities.h2 = this.components.h2.material.opacity || 1.0;\n      }\n    }\n    \n    // 设置极板的新不透明度 - 优化透明度渲染\n    const plates = [this.components.v1, this.components.v2, this.components.h1, this.components.h2];\n    plates.forEach(plate => {\n      if (plate && plate.material) {\n        plate.material.transparent = true;\n        plate.material.opacity = opacity;\n        plate.material.depthWrite = false; // 禁用深度写入，避免遮挡电子束\n        plate.material.side = three_module/* DoubleSide */.$EB; // 双面渲染，确保各个角度都能看到\n        plate.material.needsUpdate = true;\n        \n        // 调整渲染顺序，让极板在电子束之前渲染\n        plate.renderOrder = -1;\n      }\n    });\n  }\n  \n  /**\n   * 恢复极板原始不透明度\n   */\n  restorePlateOpacity() {\n    if (!this.originalPlateOpacities) {\n      return;\n    }\n    \n    // 恢复所有极板的原始不透明度和渲染属性\n    const plates = [\n      { component: this.components.v1, key: 'v1' },\n      { component: this.components.v2, key: 'v2' },\n      { component: this.components.h1, key: 'h1' },\n      { component: this.components.h2, key: 'h2' }\n    ];\n    \n    plates.forEach(({ component, key }) => {\n      if (component && component.material) {\n        component.material.opacity = this.originalPlateOpacities[key];\n        component.material.transparent = this.originalPlateOpacities[key] < 1.0;\n        component.material.depthWrite = true; // 恢复深度写入\n        component.material.side = three_module/* FrontSide */.hB5; // 恢复单面渲染\n        component.material.needsUpdate = true;\n        \n        // 恢复渲染顺序\n        component.renderOrder = 0;\n      }\n    });\n    \n    // 清除保存的原始值\n    this.originalPlateOpacities = null;\n  }\n\n  /**\n   * 更新动画\n   */\n  update() {\n    // 更新所有tweens\n    this.tweens.forEach(tween => {\n      if (tween && tween.isPlaying) {\n        tween.update();\n      }\n    });\n    \n    // 清理已完成的tweens\n    this.tweens = this.tweens.filter(tween => tween && tween.isPlaying);\n    \n    // 更新TWEEN（使用新的 Group API）\n    tweenGroup.update();\n  }\n  \n  /**\n   * 获取对象池性能统计信息\n   * @returns {Object} 对象池状态和性能统计\n   */\n  getParticlePoolStatus() {\n    if (!this.particlePool) {\n      return null;\n    }\n    return this.particlePool.getStatus();\n  }\n  \n  /**\n   * 打印对象池详细状态（调试用）\n   */\n  printParticlePoolStatus() {\n    if (this.particlePool) {\n      this.particlePool.printStatus();\n    }\n  }\n  \n  /**\n   * CRT外壳分解和消失效果\n   */\n  startCRTShellDisappear() {\n    console.log('开始CRT外壳分解和消失效果');\n    \n    const crtShell = this.components.crtShell;\n    if (!crtShell) {\n      console.warn('找不到CRTShell组件');\n      return;\n    }\n    \n    // 第一阶段：使用各组件自带的分解动画\n    this.explodeCRTShellComponents(crtShell);\n    \n    // 第二阶段：在分解动画完成后开始渐变消失（1.5秒后开始，持续1.5秒）\n    setTimeout(() => {\n      const shellGroup = crtShell.getShell();\n      if (shellGroup) {\n        this.fadeCRTShell(shellGroup, 1500);\n      }\n    }, 1500); // 等待分解动画完成\n  }\n  \n  /**\n   * 使用各组件自带的分解动画分解CRT外壳\n   * @param {CRTShell} crtShell - CRT外壳组件\n   */\n  explodeCRTShellComponents(crtShell) {\n    console.log('使用组件自带的分解动画分解CRT外壳');\n    \n    // 分解超椭圆组件（带延迟以产生层次感）\n    setTimeout(() => {\n      console.log('分解超椭圆组件');\n      crtShell.toggleSuperellipseExplode(true);\n    }, 0);\n    \n    // 分解旋转曲线连接组件\n    setTimeout(() => {\n      console.log('分解旋转曲线连接组件');\n      crtShell.toggleConnectionExplode(true);\n    }, 200); // 200ms延迟\n    \n    // 分解Cylinder2组件\n    setTimeout(() => {\n      console.log('分解Cylinder2组件');\n      crtShell.toggleCylinder2Explode(true);\n    }, 400); // 400ms延迟\n  }\n  \n  /**\n   * CRT外壳渐变消失\n   * @param {THREE.Group} shellGroup - CRT外壳组\n   * @param {number} duration - 消失持续时间\n   */\n  fadeCRTShell(shellGroup, duration) {\n    console.log('CRT外壳开始渐变消失');\n    \n    // 收集所有外壳材质\n    const materialsToFade = [];\n    shellGroup.traverse((child) => {\n      if (child.material) {\n        if (Array.isArray(child.material)) {\n          materialsToFade.push(...child.material);\n        } else {\n          materialsToFade.push(child.material);\n        }\n      }\n    });\n    \n    // 记录原始透明度并设置透明属性\n    const originalOpacities = materialsToFade.map(material => {\n      const originalOpacity = material.opacity;\n      const originalTransparent = material.transparent;\n      \n      // 确保材质支持透明\n      material.transparent = true;\n      \n      return {\n        material: material,\n        originalOpacity: originalOpacity,\n        originalTransparent: originalTransparent\n      };\n    });\n    \n    // 创建渐变消失动画\n    const fadeOutTween = new tween_esm/* Tween */.K({ opacity: 1.0 }, tweenGroup)\n      .to({ opacity: 0.0 }, duration)\n      .easing(tween_esm/* Easing */.GS.Quadratic.InOut)\n      .onUpdate(function(obj) {\n        materialsToFade.forEach(material => {\n          material.opacity = obj.opacity;\n        });\n      })\n      .onComplete(() => {\n        console.log('CRT外壳消失完成，隐藏外壳');\n        // 完全隐藏外壳\n        shellGroup.visible = false;\n      })\n      .start();\n    \n    this.tweens.push(fadeOutTween);\n  }\n  \n  /**\n   * 开始扩张并渐变消失效果\n   * 让模型继续向外扩张，然后在2秒内渐变消失\n   */\n  startExpandAndFadeOut() {\n    console.log('开始扩张并渐变消失效果');\n    \n    // 获取所有需要处理的组件\n    const crtShell = this.components.crtShell;\n    if (!crtShell) {\n      console.warn('找不到CRTShell组件');\n      return;\n    }\n    \n    // 第一阶段：继续扩张（持续1秒）\n    this.continueExpansion(crtShell, 1000);\n    \n    // 第二阶段：开始渐变消失（1秒后开始，持续2秒）\n    setTimeout(() => {\n      this.startFadeOut(crtShell, 2000);\n    }, 1000);\n  }\n  \n  /**\n   * 继续扩张效果\n   * @param {Object} crtShell - CRTShell组件\n   * @param {number} duration - 扩张持续时间\n   */\n  continueExpansion(crtShell, duration) {\n    console.log('继续扩张效果');\n    \n    // 直接操作所有组件的位置，让它们继续向外扩张\n    Object.entries(this.components).forEach(([key, component]) => {\n      if (!component || !component.position) return;\n      \n      // 计算从原点到当前位置的方向\n      const currentPos = component.position.clone();\n      const direction = currentPos.clone().normalize();\n      \n      // 如果方向为零向量，使用默认方向\n      if (direction.length() === 0) {\n        direction.set(1, 0, 0);\n      }\n      \n      // 计算目标位置（继续向外扩张1.5倍）\n      const targetPos = currentPos.clone().add(direction.multiplyScalar(2.0));\n      \n      // 创建扩张动画\n      const expandTween = new tween_esm/* Tween */.K(component.position, tweenGroup)\n        .to({\n          x: targetPos.x,\n          y: targetPos.y,\n          z: targetPos.z\n        }, duration)\n        .easing(tween_esm/* Easing */.GS.Quadratic.Out)\n        .start();\n        \n      this.tweens.push(expandTween);\n    });\n  }\n  \n  /**\n   * 开始渐变消失效果\n   * @param {Object} crtShell - CRTShell组件\n   * @param {number} duration - 渐变持续时间\n   */\n  startFadeOut(crtShell, duration) {\n    console.log('开始渐变消失效果');\n    \n    // 收集所有需要渐变的材质\n    const materialsToFade = [];\n    \n    // 遍历所有组件，收集材质\n    Object.entries(this.components).forEach(([key, component]) => {\n      if (component && component.material) {\n        materialsToFade.push(component.material);\n      } else if (component && component.traverse) {\n        // 对于组对象，遍历所有子对象\n        component.traverse((child) => {\n          if (child.material) {\n            materialsToFade.push(child.material);\n          }\n        });\n      }\n    });\n    \n    // 记录原始透明度\n    const originalOpacities = materialsToFade.map(material => ({\n      material: material,\n      originalOpacity: material.opacity,\n      originalTransparent: material.transparent\n    }));\n    \n    // 创建渐变动画\n    const fadeOutTween = new tween_esm/* Tween */.K({ opacity: 1.0 }, tweenGroup)\n      .to({ opacity: 0.0 }, duration)\n      .easing(tween_esm/* Easing */.GS.Quadratic.InOut)\n      .onUpdate((object) => {\n        // 更新所有材质的透明度\n        originalOpacities.forEach(({ material, originalOpacity }) => {\n          material.transparent = true;\n          material.opacity = originalOpacity * object.opacity;\n          material.needsUpdate = true;\n        });\n      })\n      .onComplete(() => {\n        console.log('渐变消失完成，隐藏外壳');\n        // 动画完成后，隐藏外壳\n        this.hideShellCompletely();\n      })\n      .start();\n      \n    this.tweens.push(fadeOutTween);\n  }\n  \n  \n  /**\n   * 完全隐藏外壳\n   */\n  hideShellCompletely() {\n    console.log('完全隐藏外壳');\n    \n    // 通过GUI控制器隐藏外壳\n    const shellCheckboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n    let shellCheckbox = null;\n    \n    // 查找对应的复选框\n    shellCheckboxes.forEach(checkbox => {\n      const label = checkbox.closest('li')?.querySelector('.property-name');\n      if (label && label.textContent.includes('显示外壳')) {\n        shellCheckbox = checkbox;\n      }\n    });\n    \n    if (shellCheckbox && shellCheckbox.checked) {\n      console.log('通过复选框隐藏外壳');\n      shellCheckbox.click();\n    } else {\n      // 如果找不到复选框，直接通过CONFIG修改\n      console.log('直接通过CONFIG隐藏外壳');\n      if (window.CONFIG) {\n        window.CONFIG.shell.visible = false;\n        // 触发外壳更新\n        if (this.controllers && this.controllers.onShellChange) {\n          this.controllers.onShellChange(window.CONFIG.shell);\n        }\n      }\n    }\n  }\n} \n;// ./src/geometry/RotationCurveGeometry.js\n\n\n/**\n * 旋转曲线几何体生成器\n * 基于数学公式生成平滑连接的旋转曲面\n * 支持G1和G2连续性\n */\nclass RotationCurveGeometry {\n  \n  /**\n   * 构造函数\n   * @param {number} r1 - 小半径\n   * @param {number} r2 - 大半径  \n   * @param {number} length - 过渡长度\n   * @param {string} curveType - 曲线类型 ('G1' 或 'G2')\n   * @param {number} segments - 分段数量\n   * @param {number} radialSegments - 径向分段数\n   */\n  constructor(r1, r2, length, curveType = 'G2', segments = 50, radialSegments = 32) {\n    this.r1 = r1;\n    this.r2 = r2;\n    this.length = length;\n    this.curveType = curveType;\n    this.segments = segments;\n    this.radialSegments = radialSegments;\n    \n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.generateGeometry();\n  }\n  \n  /**\n   * G1连续性曲线 (零斜率端点，够顺滑)\n   * r(z) = r1 + (r2 - r1) * (3s² - 2s³)\n   * 其中 s = z/L ∈ [0,1]\n   */\n  calculateG1Radius(s) {\n    const t = 3 * s * s - 2 * s * s * s;\n    return this.r1 + (this.r2 - this.r1) * t;\n  }\n  \n  /**\n   * G2连续性曲线 (连曲率也连续，更像\"银白金属\"般丝滑)\n   * r(z) = r1 + (r2 - r1) * (10s³ - 15s⁴ + 6s⁵)\n   * 其中 s = z/L ∈ [0,1]\n   */\n  calculateG2Radius(s) {\n    const s3 = s * s * s;\n    const s4 = s3 * s;\n    const s5 = s4 * s;\n    const t = 10 * s3 - 15 * s4 + 6 * s5;\n    return this.r1 + (this.r2 - this.r1) * t;\n  }\n  \n  /**\n   * 根据曲线类型计算半径\n   */\n  calculateRadius(s) {\n    switch (this.curveType) {\n      case 'G1':\n        return this.calculateG1Radius(s);\n      case 'G2':\n        return this.calculateG2Radius(s);\n      default:\n        return this.calculateG2Radius(s); // 默认使用G2\n    }\n  }\n  \n  /**\n   * 生成旋转曲面几何体\n   */\n  generateGeometry() {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    \n    // 生成顶点\n    for (let i = 0; i <= this.segments; i++) {\n      const s = i / this.segments; // 参数 s ∈ [0,1]\n      const z = s * this.length;   // Z坐标\n      const radius = this.calculateRadius(s);\n      \n      // 计算法向量需要的导数\n      const deltaS = 0.001;\n      const r_next = this.calculateRadius(Math.min(1, s + deltaS));\n      const r_prev = this.calculateRadius(Math.max(0, s - deltaS));\n      const dr_ds = (r_next - r_prev) / (2 * deltaS);\n      const dr_dz = dr_ds / this.length;\n      \n      for (let j = 0; j <= this.radialSegments; j++) {\n        const angle = (j / this.radialSegments) * Math.PI * 2;\n        \n        // 计算顶点位置\n        const x = Math.cos(angle) * radius;\n        const y = Math.sin(angle) * radius;\n        \n        vertices.push(x, y, z);\n        \n        // 计算法向量\n        // 对于旋转曲面，法向量 = (-dr/dz * cos(θ), -dr/dz * sin(θ), 1) 归一化\n        const nx = -dr_dz * Math.cos(angle);\n        const ny = -dr_dz * Math.sin(angle);\n        const nz = 1;\n        const length_n = Math.sqrt(nx * nx + ny * ny + nz * nz);\n        \n        normals.push(nx / length_n, ny / length_n, nz / length_n);\n        \n        // UV坐标\n        uvs.push(j / this.radialSegments, s);\n      }\n    }\n    \n    // 生成索引\n    for (let i = 0; i < this.segments; i++) {\n      for (let j = 0; j < this.radialSegments; j++) {\n        const a = i * (this.radialSegments + 1) + j;\n        const b = a + this.radialSegments + 1;\n        const c = a + 1;\n        const d = b + 1;\n        \n        // 两个三角形组成一个四边形\n        indices.push(a, b, c);\n        indices.push(b, d, c);\n      }\n    }\n    \n    // 设置几何体属性\n    this.geometry.setIndex(indices);\n    this.geometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    this.geometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    this.geometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    \n    // 计算边界球和边界框\n    this.geometry.computeBoundingSphere();\n    this.geometry.computeBoundingBox();\n  }\n  \n  /**\n   * 获取生成的几何体\n   */\n  getGeometry() {\n    return this.geometry;\n  }\n  \n  /**\n   * 创建扇形片段几何体\n   * @param {number} segmentIndex - 扇形索引 (0-3)\n   * @param {number} sectorCount - 总扇形数量 (通常是4)\n   * @returns {THREE.BufferGeometry} 扇形片段几何体\n   */\n  createSectorGeometry(segmentIndex, sectorCount = 4) {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    \n    // 计算角度范围\n    const anglePerSector = (Math.PI * 2) / sectorCount;\n    const startAngle = segmentIndex * anglePerSector;\n    const endAngle = (segmentIndex + 1) * anglePerSector;\n    \n    // 计算每个扇形的径向分段数\n    const radialSegmentsPerSector = Math.max(8, Math.floor(this.radialSegments / sectorCount));\n    \n    // 生成扇形顶点\n    for (let i = 0; i <= this.segments; i++) {\n      const s = i / this.segments; // 参数 s ∈ [0,1]\n      const z = s * this.length;   // Z坐标\n      const radius = this.calculateRadius(s);\n      \n      // 计算法向量需要的导数\n      const deltaS = 0.001;\n      const r_next = this.calculateRadius(Math.min(1, s + deltaS));\n      const r_prev = this.calculateRadius(Math.max(0, s - deltaS));\n      const dr_ds = (r_next - r_prev) / (2 * deltaS);\n      const dr_dz = dr_ds / this.length;\n      \n      for (let j = 0; j <= radialSegmentsPerSector; j++) {\n        // 在扇形角度范围内分布\n        const t = j / radialSegmentsPerSector;\n        const angle = startAngle + t * (endAngle - startAngle);\n        \n        // 计算顶点位置\n        const x = Math.cos(angle) * radius;\n        const y = Math.sin(angle) * radius;\n        \n        vertices.push(x, y, z);\n        \n        // 计算法向量\n        const nx = -dr_dz * Math.cos(angle);\n        const ny = -dr_dz * Math.sin(angle);\n        const nz = 1;\n        const length_n = Math.sqrt(nx * nx + ny * ny + nz * nz);\n        \n        normals.push(nx / length_n, ny / length_n, nz / length_n);\n        \n        // UV坐标\n        uvs.push(t, s);\n      }\n    }\n    \n    // 生成索引\n    for (let i = 0; i < this.segments; i++) {\n      for (let j = 0; j < radialSegmentsPerSector; j++) {\n        const a = i * (radialSegmentsPerSector + 1) + j;\n        const b = a + radialSegmentsPerSector + 1;\n        const c = a + 1;\n        const d = b + 1;\n        \n        // 两个三角形组成一个四边形\n        indices.push(a, b, c);\n        indices.push(b, d, c);\n      }\n    }\n    \n    // 创建新的几何体\n    const sectorGeometry = new three_module/* BufferGeometry */.LoY();\n    sectorGeometry.setIndex(indices);\n    sectorGeometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    sectorGeometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    sectorGeometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    \n    // 计算边界球和边界框\n    sectorGeometry.computeBoundingSphere();\n    sectorGeometry.computeBoundingBox();\n    \n    return sectorGeometry;\n  }\n\n  /**\n   * 销毁几何体资源\n   */\n  dispose() {\n    if (this.geometry) {\n      this.geometry.dispose();\n    }\n  }\n}\n\n/**\n * 便捷函数：创建旋转曲线几何体\n */\nfunction createRotationCurveGeometry(r1, r2, length, curveType = 'G2', segments = 50, radialSegments = 32) {\n  const generator = new RotationCurveGeometry(r1, r2, length, curveType, segments, radialSegments);\n  return generator.getGeometry();\n}\n\n;// ./src/materials/UnifiedComponentMaterial.js\n\r\n\r\n\r\n/**\r\n * 统一组件材质管理器\r\n * 为cylinder2、rotationCurveConnection和superellipseTransition提供统一的材质管理\r\n * 使其颜色和材质符合示波器内部的金属材质风格\r\n */\r\nclass UnifiedComponentMaterial {\r\n  constructor() {\r\n    this.textureLoader = new three_module/* TextureLoader */.Tap();\r\n    this.materialCache = new Map();\r\n    this.textures = {};\r\n    \r\n    // 统一的材质配置（基于示波器内部金属材质）\r\n    this.unifiedConfig = {\r\n      color: 0xF0F0F0,        // 银白色金属色\r\n      metalness: 0.6,         // 金属度\r\n      roughness: 0.3,         // 粗糙度\r\n      opacity: 0.7,           // 透明度\r\n      envMapIntensity: 1.0,   // 环境贴图强度\r\n      side: three_module/* DoubleSide */.$EB, // 双面渲染\r\n      depthWrite: false,      // 关闭深度写入（透明物体）\r\n      transparent: true       // 启用透明\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 初始化统一材质系统\r\n   * @returns {Promise} 返回Promise，在初始化完成后解析\r\n   */\r\n  async initialize() {\r\n    console.log('🎨 正在初始化统一组件材质系统...');\r\n    \r\n    try {\r\n      // 加载金属贴图\r\n      await this.loadMetalTextures();\r\n      \r\n      // 预创建常用材质\r\n      this.createStandardMaterial();\r\n      this.createExplodedMaterial();\r\n      this.createTransitionMaterial();\r\n      \r\n      console.log('✅ 统一组件材质系统初始化完成');\r\n      return true;\r\n    } catch (error) {\r\n      console.warn('⚠️ 统一材质系统初始化失败，使用无贴图材质:', error);\r\n      this.createFallbackMaterials();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载金属贴图\r\n   * @returns {Promise} 贴图加载Promise\r\n   */\r\n  async loadMetalTextures() {\r\n    const metalConfig = CONFIG.materials.metal;\r\n    const loadPromises = [];\r\n\r\n    if (metalConfig.textures && metalConfig.textures.map) {\r\n      loadPromises.push(this.loadTexture('metalMap', metalConfig.textures.map));\r\n    }\r\n\r\n    if (metalConfig.textures && metalConfig.textures.normalMap) {\r\n      loadPromises.push(this.loadTexture('metalNormal', metalConfig.textures.normalMap));\r\n    }\r\n\r\n    if (metalConfig.textures && metalConfig.textures.roughnessMap) {\r\n      loadPromises.push(this.loadTexture('metalRoughness', metalConfig.textures.roughnessMap));\r\n    }\r\n\r\n    if (metalConfig.textures && metalConfig.textures.metalnessMap) {\r\n      loadPromises.push(this.loadTexture('metalMetalness', metalConfig.textures.metalnessMap));\r\n    }\r\n\r\n    await Promise.all(loadPromises);\r\n  }\r\n\r\n  /**\r\n   * 加载单个贴图\r\n   * @param {string} name - 贴图名称\r\n   * @param {string} path - 贴图路径\r\n   * @returns {Promise} 贴图加载Promise\r\n   */\r\n  loadTexture(name, path) {\r\n    return new Promise((resolve, reject) => {\r\n      this.textureLoader.load(\r\n        path,\r\n        (texture) => {\r\n          // 设置贴图参数\r\n          texture.wrapS = three_module/* RepeatWrapping */.GJx;\r\n          texture.wrapT = three_module/* RepeatWrapping */.GJx;\r\n          texture.flipY = false;\r\n          \r\n          this.textures[name] = texture;\r\n          console.log(`📸 贴图加载成功: ${name}`);\r\n          resolve(texture);\r\n        },\r\n        undefined,\r\n        (error) => {\r\n          console.warn(`❌ 贴图加载失败: ${name}`, error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建标准统一材质\r\n   */\r\n  createStandardMaterial() {\r\n    const materialProps = {\r\n      ...this.unifiedConfig\r\n    };\r\n\r\n    // 添加贴图（如果有）\r\n    if (this.textures.metalMap) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n\r\n    if (this.textures.metalNormal) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n\r\n    if (this.textures.metalRoughness) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n\r\n    if (this.textures.metalMetalness) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    const material = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n    this.materialCache.set('standard', material);\r\n    \r\n    console.log('🔧 标准统一材质创建完成');\r\n  }\r\n\r\n  /**\r\n   * 创建爆炸分解效果材质（稍微透明一些）\r\n   */\r\n  createExplodedMaterial() {\r\n    const materialProps = {\r\n      ...this.unifiedConfig,\r\n      opacity: 0.6  // 爆炸状态时更透明\r\n    };\r\n\r\n    // 添加贴图（如果有）\r\n    if (this.textures.metalMap) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n\r\n    if (this.textures.metalNormal) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n\r\n    if (this.textures.metalRoughness) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n\r\n    if (this.textures.metalMetalness) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    const material = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n    this.materialCache.set('exploded', material);\r\n    \r\n    console.log('💥 爆炸材质创建完成');\r\n  }\r\n\r\n  /**\r\n   * 创建过渡材质（用于SuperellipseTransition）\r\n   */\r\n  createTransitionMaterial() {\r\n    const materialProps = {\r\n      ...this.unifiedConfig,\r\n      opacity: 0.8  // 过渡材质稍微不透明一些\r\n    };\r\n\r\n    // 添加贴图（如果有）\r\n    if (this.textures.metalMap) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n\r\n    if (this.textures.metalNormal) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n\r\n    if (this.textures.metalRoughness) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n\r\n    if (this.textures.metalMetalness) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    const material = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n    this.materialCache.set('transition', material);\r\n    \r\n    console.log('🔄 过渡材质创建完成');\r\n  }\r\n\r\n  /**\r\n   * 创建备用材质（无贴图版本）\r\n   */\r\n  createFallbackMaterials() {\r\n    console.log('🚧 创建备用统一材质（无贴图）');\r\n    \r\n    // 标准材质\r\n    const standardMaterial = new three_module/* MeshStandardMaterial */._4j(this.unifiedConfig);\r\n    this.materialCache.set('standard', standardMaterial);\r\n    \r\n    // 爆炸材质\r\n    const explodedMaterial = new three_module/* MeshStandardMaterial */._4j({\r\n      ...this.unifiedConfig,\r\n      opacity: 0.6\r\n    });\r\n    this.materialCache.set('exploded', explodedMaterial);\r\n    \r\n    // 过渡材质\r\n    const transitionMaterial = new three_module/* MeshStandardMaterial */._4j({\r\n      ...this.unifiedConfig,\r\n      opacity: 0.8\r\n    });\r\n    this.materialCache.set('transition', transitionMaterial);\r\n  }\r\n\r\n  /**\r\n   * 获取指定类型的材质\r\n   * @param {string} type - 材质类型 ('standard', 'exploded', 'transition')\r\n   * @returns {THREE.Material} 材质对象\r\n   */\r\n  getMaterial(type = 'standard') {\r\n    if (!this.materialCache.has(type)) {\r\n      console.warn(`⚠️ 未找到材质类型: ${type}，返回标准材质`);\r\n      return this.materialCache.get('standard');\r\n    }\r\n    return this.materialCache.get(type);\r\n  }\r\n\r\n  /**\r\n   * 创建自定义材质（基于统一配置）\r\n   * @param {Object} customProps - 自定义属性\r\n   * @returns {THREE.Material} 自定义材质\r\n   */\r\n  createCustomMaterial(customProps = {}) {\r\n    const materialProps = {\r\n      ...this.unifiedConfig,\r\n      ...customProps\r\n    };\r\n\r\n    // 添加贴图（如果有且用户没有覆盖）\r\n    if (this.textures.metalMap && !customProps.map) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n\r\n    if (this.textures.metalNormal && !customProps.normalMap) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n\r\n    if (this.textures.metalRoughness && !customProps.roughnessMap) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n\r\n    if (this.textures.metalMetalness && !customProps.metalnessMap) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    return new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n  }\r\n\r\n  /**\r\n   * 获取统一的颜色值\r\n   * @returns {number} 16进制颜色值\r\n   */\r\n  getUnifiedColor() {\r\n    return this.unifiedConfig.color;\r\n  }\r\n\r\n  /**\r\n   * 获取统一的透明度值\r\n   * @param {string} type - 材质类型\r\n   * @returns {number} 透明度值\r\n   */\r\n  getUnifiedOpacity(type = 'standard') {\r\n    switch (type) {\r\n      case 'exploded':\r\n        return 0.6;\r\n      case 'transition':\r\n        return 0.8;\r\n      default:\r\n        return this.unifiedConfig.opacity;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新统一配置\r\n   * @param {Object} newConfig - 新的配置\r\n   */\r\n  updateUnifiedConfig(newConfig) {\r\n    this.unifiedConfig = { ...this.unifiedConfig, ...newConfig };\r\n    \r\n    // 重新创建所有材质\r\n    this.materialCache.clear();\r\n    if (Object.keys(this.textures).length > 0) {\r\n      this.createStandardMaterial();\r\n      this.createExplodedMaterial();\r\n      this.createTransitionMaterial();\r\n    } else {\r\n      this.createFallbackMaterials();\r\n    }\r\n    \r\n    console.log('🔄 统一材质配置已更新');\r\n  }\r\n\r\n  /**\r\n   * 释放所有资源\r\n   */\r\n  dispose() {\r\n    // 释放贴图\r\n    Object.values(this.textures).forEach(texture => {\r\n      texture.dispose();\r\n    });\r\n\r\n    // 释放材质\r\n    this.materialCache.forEach(material => {\r\n      material.dispose();\r\n    });\r\n\r\n    this.textures = {};\r\n    this.materialCache.clear();\r\n    \r\n    console.log('🗑️ 统一组件材质资源已释放');\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst unifiedComponentMaterial = new UnifiedComponentMaterial();\r\n\n;// ./src/components/CylinderConnection.js\n\n\n\n\n/**\n * 圆柱体连接组件\n * 使用旋转曲线生成两个圆柱体之间的平滑连接\n */\nclass CylinderConnection {\n  \n  /**\n   * 构造函数\n   * @param {Object} cylinder1Config - 第一个圆柱体配置\n   * @param {Object} cylinder2Config - 第二个圆柱体配置\n   * @param {Object} connectionConfig - 连接配置\n   */\n  constructor(cylinder1Config, cylinder2Config, connectionConfig = {}) {\n    this.cylinder1Config = cylinder1Config;\n    this.cylinder2Config = cylinder2Config;\n    this.connectionConfig = {\n      curveType: connectionConfig.curveType || 'G2',\n      segments: connectionConfig.segments || 50,\n      radialSegments: connectionConfig.radialSegments || 32,\n      visible: connectionConfig.visible !== false,\n      color: connectionConfig.color || '0x66aaff',\n      opacity: connectionConfig.opacity || 0.7,\n      connectionLength: connectionConfig.connectionLength || 1.0, // 连接区域长度\n      position: {\n        offset: connectionConfig.position?.offset || { x: 0, y: 0, z: 0 }\n      },\n      rotation: {\n        offset: connectionConfig.rotation?.offset || { x: 0, y: 0, z: 0 }\n      },\n      ...connectionConfig\n    };\n    \n    this.connectionGroup = new three_module/* Group */.YJl();\n    this.connectionGroup.name = 'CylinderConnection';\n    \n    this.connectionMeshes = [];\n    this.materials = [];\n    \n    this.createConnections();\n  }\n  \n  /**\n   * 创建连接\n   */\n  createConnections() {\n    // 计算两个圆柱体之间的连接参数\n    const connectionInfo = this.calculateConnectionParameters();\n    \n    if (connectionInfo.needsConnection) {\n      this.createConnectionMesh(connectionInfo);\n    }\n  }\n  \n  /**\n   * 计算连接参数\n   */\n  calculateConnectionParameters() {\n    const pos1 = this.cylinder1Config.position;\n    const pos2 = this.cylinder2Config.position;\n    const r1 = this.cylinder1Config.radius;\n    const r2 = this.cylinder2Config.radius;\n    \n    // 计算两个圆柱体中心之间的距离和方向\n    const distance = Math.sqrt(\n      Math.pow(pos2.x - pos1.x, 2) + \n      Math.pow(pos2.y - pos1.y, 2) + \n      Math.pow(pos2.z - pos1.z, 2)\n    );\n    \n    // 计算连接向量\n    const direction = new three_module/* Vector3 */.Pq0(\n      pos2.x - pos1.x,\n      pos2.y - pos1.y,\n      pos2.z - pos1.z\n    ).normalize();\n    \n    // 判断是否需要连接（圆柱体之间有间隙）\n    const cylinderLength1 = this.cylinder1Config.height;\n    const cylinderLength2 = this.cylinder2Config.height;\n    \n    // 计算圆柱体端点位置（考虑旋转）\n    const rot1 = new three_module/* Euler */.O9p(\n      this.cylinder1Config.rotation.x,\n      this.cylinder1Config.rotation.y,\n      this.cylinder1Config.rotation.z\n    );\n    const rot2 = new three_module/* Euler */.O9p(\n      this.cylinder2Config.rotation.x,\n      this.cylinder2Config.rotation.y,\n      this.cylinder2Config.rotation.z\n    );\n    \n    // 简化处理：假设圆柱体都是水平放置的（绕Z轴旋转90度）\n    // 在这种情况下，圆柱体的\"长度\"实际上是在X方向上\n    \n    const gap = Math.abs(distance - cylinderLength1/2 - cylinderLength2/2);\n    const needsConnection = gap > 0.1; // 如果间隙大于0.1，则需要连接\n    \n    return {\n      needsConnection,\n      distance,\n      direction,\n      gap,\n      startPos: new three_module/* Vector3 */.Pq0(pos1.x, pos1.y, pos1.z),\n      endPos: new three_module/* Vector3 */.Pq0(pos2.x, pos2.y, pos2.z),\n      startRadius: r1,\n      endRadius: r2,\n      connectionLength: this.connectionConfig.connectionLength\n    };\n  }\n  \n  /**\n   * 创建连接网格\n   */\n  createConnectionMesh(connectionInfo) {\n    // 使用统一组件材质管理器获取标准材质\n    const material = unifiedComponentMaterial.getMaterial('standard');\n    \n    this.materials.push(material);\n    \n    // 创建旋转曲线几何体\n    const curveGeometry = new RotationCurveGeometry(\n      connectionInfo.startRadius,\n      connectionInfo.endRadius,\n      connectionInfo.connectionLength,\n      this.connectionConfig.curveType,\n      this.connectionConfig.segments,\n      this.connectionConfig.radialSegments\n    );\n    \n    // 创建网格\n    const connectionMesh = new three_module/* Mesh */.eaF(curveGeometry.getGeometry(), material);\n    \n    // 设置位置和旋转\n    this.positionConnectionMesh(connectionMesh, connectionInfo);\n    \n    // 设置可见性\n    connectionMesh.visible = this.connectionConfig.visible;\n    \n    // 添加到组中\n    this.connectionGroup.add(connectionMesh);\n    this.connectionMeshes.push(connectionMesh);\n  }\n  \n  /**\n   * 定位连接网格\n   */\n  positionConnectionMesh(mesh, connectionInfo) {\n    // 计算连接中心点\n    const centerX = (connectionInfo.startPos.x + connectionInfo.endPos.x) / 2;\n    const centerY = (connectionInfo.startPos.y + connectionInfo.endPos.y) / 2;\n    const centerZ = (connectionInfo.startPos.z + connectionInfo.endPos.z) / 2;\n    \n    // 应用位置偏移\n    const posOffset = this.connectionConfig.position.offset;\n    mesh.position.set(\n      centerX + posOffset.x, \n      centerY + posOffset.y, \n      centerZ + posOffset.z\n    );\n    \n    // 计算旋转以对齐连接方向\n    // 默认几何体是沿Z轴方向的，需要旋转以对齐实际连接方向\n    const targetDirection = connectionInfo.direction;\n    const defaultDirection = new three_module/* Vector3 */.Pq0(0, 0, 1);\n    \n    // 计算旋转四元数\n    const quaternion = new three_module/* Quaternion */.PTz();\n    quaternion.setFromUnitVectors(defaultDirection, targetDirection);\n    mesh.setRotationFromQuaternion(quaternion);\n    \n    // 由于圆柱体是水平的（绕Z轴旋转90度），连接也需要相应调整\n    mesh.rotateZ(Math.PI / 2);\n    \n    // 应用旋转偏移\n    const rotOffset = this.connectionConfig.rotation.offset;\n    mesh.rotateX(rotOffset.x);\n    mesh.rotateY(rotOffset.y);\n    mesh.rotateZ(rotOffset.z);\n  }\n  \n  /**\n   * 获取连接组\n   */\n  getConnection() {\n    return this.connectionGroup;\n  }\n  \n  /**\n   * 设置可见性\n   */\n  setVisible(visible) {\n    this.connectionGroup.visible = visible;\n    this.connectionMeshes.forEach(mesh => {\n      mesh.visible = visible;\n    });\n  }\n  \n  /**\n   * 设置颜色\n   */\n  setColor(color) {\n    this.materials.forEach(material => {\n      material.color.setHex(color);\n    });\n  }\n  \n  /**\n   * 设置透明度\n   */\n  setOpacity(opacity) {\n    this.materials.forEach(material => {\n      material.opacity = Math.max(0, Math.min(1, opacity));\n    });\n  }\n  \n  /**\n   * 设置位置偏移\n   * @param {number} x - X轴偏移\n   * @param {number} y - Y轴偏移  \n   * @param {number} z - Z轴偏移\n   */\n  setPositionOffset(x, y, z) {\n    this.connectionConfig.position.offset = { x, y, z };\n    this.recreateConnections();\n  }\n  \n  /**\n   * 设置旋转偏移\n   * @param {number} x - X轴旋转偏移（弧度）\n   * @param {number} y - Y轴旋转偏移（弧度）\n   * @param {number} z - Z轴旋转偏移（弧度）\n   */\n  setRotationOffset(x, y, z) {\n    this.connectionConfig.rotation.offset = { x, y, z };\n    this.recreateConnections();\n  }\n  \n  /**\n   * 获取当前位置偏移\n   */\n  getPositionOffset() {\n    return { ...this.connectionConfig.position.offset };\n  }\n  \n  /**\n   * 获取当前旋转偏移\n   */\n  getRotationOffset() {\n    return { ...this.connectionConfig.rotation.offset };\n  }\n  \n  /**\n   * 直接设置连接组的位置（不改变配置，只是临时移动）\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {number} z - Z坐标\n   */\n  setPosition(x, y, z) {\n    this.connectionGroup.position.set(x, y, z);\n  }\n  \n  /**\n   * 直接设置连接组的旋转（不改变配置，只是临时旋转）\n   * @param {number} x - X轴旋转（弧度）\n   * @param {number} y - Y轴旋转（弧度）\n   * @param {number} z - Z轴旋转（弧度）\n   */\n  setRotation(x, y, z) {\n    this.connectionGroup.rotation.set(x, y, z);\n  }\n  \n  /**\n   * 获取连接组的当前位置\n   */\n  getPosition() {\n    return this.connectionGroup.position.clone();\n  }\n  \n  /**\n   * 获取连接组的当前旋转\n   */\n  getRotation() {\n    return this.connectionGroup.rotation.clone();\n  }\n  \n  /**\n   * 设置曲线类型\n   */\n  setCurveType(curveType) {\n    this.connectionConfig.curveType = curveType;\n    this.recreateConnections();\n  }\n  \n  /**\n   * 重新创建连接\n   */\n  recreateConnections() {\n    // 清理现有连接\n    this.dispose();\n    \n    // 重置数组\n    this.connectionMeshes = [];\n    this.materials = [];\n    \n    // 重新创建\n    this.createConnections();\n  }\n  \n  /**\n   * 更新配置\n   */\n  updateConfig(cylinder1Config, cylinder2Config, connectionConfig) {\n    this.cylinder1Config = cylinder1Config;\n    this.cylinder2Config = cylinder2Config;\n    \n    if (connectionConfig) {\n      this.connectionConfig = { ...this.connectionConfig, ...connectionConfig };\n    }\n    \n    this.recreateConnections();\n  }\n  \n  /**\n   * 销毁资源\n   */\n  dispose() {\n    // 销毁材质\n    this.materials.forEach(material => {\n      material.dispose();\n    });\n    \n    // 销毁几何体\n    this.connectionGroup.traverse((child) => {\n      if (child.geometry) {\n        child.geometry.dispose();\n      }\n      if (child.material) {\n        child.material.dispose();\n      }\n    });\n    \n    // 清理组\n    this.connectionGroup.clear();\n    \n    // 重置数组\n    this.connectionMeshes = [];\n    this.materials = [];\n  }\n}\n\n;// ./src/components/SuperellipseTransition.js\n\n\n\n/**\n * 超椭圆形状渐变组件\n * 实现从圆形到方形的平滑几何过渡，基于超椭圆公式：|x/a|^m + |y/b|^m = 1\n * \n * 参数说明：\n * - m = 2: 椭圆/圆形\n * - m → ∞: 趋近方形  \n * - m = 6~12: 圆角方形效果\n * \n * 支持G2五次缓动确保曲率连续性\n */\nclass SuperellipseTransition {\n  /**\n   * 构造函数\n   * @param {Object} startConfig - 起始几何配置（圆形）\n   * @param {Object} endConfig - 结束几何配置（方形）\n   * @param {Object} transitionConfig - 过渡配置\n   */\n  constructor(startConfig, endConfig, transitionConfig) {\n    this.startConfig = startConfig;\n    this.endConfig = endConfig; \n    this.transitionConfig = {\n      // 默认配置\n      segments: 64,              // 长度分段数（影响过渡平滑度）\n      radialSegments: 32,        // 径向分段数\n      transitionLength: 2.0,     // 过渡长度\n      startExponent: 2.0,        // 起始指数（圆形）\n      endExponent: 100.0,        // 结束指数（完全直角矩形）\n      g2Smoothing: true,         // 启用G2五次缓动\n      color: 0x66aaff,\n      opacity: 0.7,\n      position: { offset: { x: 0, y: 0, z: 0 } },\n      rotation: { offset: { x: 0, y: 0, z: 0 } },\n      // 覆盖默认配置\n      ...transitionConfig\n    };\n    \n    this.transitionGroup = new three_module/* Group */.YJl();\n    this.transitionGroup.name = 'SuperellipseTransition';\n    \n    // 材质\n    this.material = null;\n    this.meshes = [];\n    \n    this.createTransition();\n  }\n\n  /**\n   * 创建形状渐变过渡\n   */\n  createTransition() {\n    // 使用统一组件材质（示波器内部金属材质）\n    this.material = unifiedComponentMaterial.getMaterial('transition');\n\n    // 计算过渡参数\n    const transitionInfo = this.calculateTransitionParams();\n    \n    // 创建过渡几何体\n    const geometry = this.createSuperellipseGeometry(transitionInfo);\n    \n    // 创建网格\n    const mesh = new three_module/* Mesh */.eaF(geometry, this.material);\n    \n    // 定位网格\n    this.positionTransitionMesh(mesh, transitionInfo);\n    \n    // 添加到组\n    this.transitionGroup.add(mesh);\n    this.meshes.push(mesh);\n  }\n\n  /**\n   * 计算过渡参数\n   */\n  calculateTransitionParams() {\n    // 计算起始和结束位置\n    const startPos = new three_module/* Vector3 */.Pq0(\n      this.startConfig.position.x,\n      this.startConfig.position.y, \n      this.startConfig.position.z\n    );\n    \n    const endPos = new three_module/* Vector3 */.Pq0(\n      this.endConfig.position.x,\n      this.endConfig.position.y,\n      this.endConfig.position.z\n    );\n    \n    // 计算过渡方向和距离\n    const direction = new three_module/* Vector3 */.Pq0().subVectors(endPos, startPos).normalize();\n    const distance = startPos.distanceTo(endPos);\n    \n    // 计算过渡中心点\n    const center = new three_module/* Vector3 */.Pq0().addVectors(startPos, endPos).multiplyScalar(0.5);\n    \n    // 使用用户配置的过渡长度（移除距离限制，让用户自由控制）\n    const adjustedLength = this.transitionConfig.transitionLength;\n    \n    return {\n      startPos,\n      endPos,\n      center,\n      direction,\n      distance,\n      transitionLength: adjustedLength,\n      startRadius: this.startConfig.radius,\n      endSize: this.endConfig.size // 立方体尺寸\n    };\n  }\n\n  /**\n   * 创建超椭圆过渡几何体\n   * @param {Object} transitionInfo - 过渡信息\n   */\n  createSuperellipseGeometry(transitionInfo) {\n    const segments = this.transitionConfig.segments;\n    const radialSegments = this.transitionConfig.radialSegments;\n    const length = transitionInfo.transitionLength;\n    \n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    \n    // 沿长度方向创建截面\n    for (let i = 0; i <= segments; i++) {\n      const t = i / segments; // 0 到 1\n      const z = -length / 2 + t * length; // 沿Z轴分布\n      \n      // 应用G2五次缓动进行平滑插值\n      const smoothT = this.transitionConfig.g2Smoothing ? this.g2Smoothing(t) : t;\n      \n      // 插值计算当前截面的超椭圆参数\n      const currentExponent = three_module/* MathUtils */.cj9.lerp(\n        this.transitionConfig.startExponent, \n        this.transitionConfig.endExponent, \n        smoothT\n      );\n      \n      // 插值计算当前截面的尺寸\n      // 注意：由于超椭圆会绕Z轴旋转90度，需要交换width和height的映射\n      // X轴（旋转后变成垂直方向）对应荧光屏的height\n      // Y轴（旋转后变成水平方向）对应荧光屏的width\n      const currentRadiusX = three_module/* MathUtils */.cj9.lerp(\n        transitionInfo.startRadius,\n        transitionInfo.endSize.height / 2,  // 高度映射到X轴\n        smoothT\n      );\n      const currentRadiusY = three_module/* MathUtils */.cj9.lerp(\n        transitionInfo.startRadius,\n        transitionInfo.endSize.width / 2,   // 宽度映射到Y轴\n        smoothT\n      );\n      \n      // 创建当前截面的超椭圆轮廓\n      const crossSection = this.generateSuperellipseCrossSection(\n        currentRadiusX,\n        currentRadiusY,\n        currentExponent,\n        radialSegments\n      );\n      \n      // 添加顶点到几何体\n      for (let j = 0; j < crossSection.length; j++) {\n        const point = crossSection[j];\n        vertices.push(point.x, point.y, z);\n        \n        // 计算法向量（简化版，可进一步优化）\n        const normal = new three_module/* Vector3 */.Pq0(point.x, point.y, 0).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        \n        // UV坐标\n        uvs.push(j / radialSegments, t);\n      }\n    }\n    \n    // 生成索引（连接相邻截面）\n    for (let i = 0; i < segments; i++) {\n      for (let j = 0; j < radialSegments; j++) {\n        const current = i * radialSegments + j;\n        const next = i * radialSegments + ((j + 1) % radialSegments);\n        const currentNext = (i + 1) * radialSegments + j;\n        const nextNext = (i + 1) * radialSegments + ((j + 1) % radialSegments);\n        \n        // 两个三角形组成一个四边形\n        indices.push(current, next, currentNext);\n        indices.push(next, nextNext, currentNext);\n      }\n    }\n    \n    // 创建几何体\n    const geometry = new three_module/* BufferGeometry */.LoY();\n    geometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    geometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    geometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    geometry.setIndex(indices);\n    \n    // 计算正确的法向量\n    geometry.computeVertexNormals();\n    \n    return geometry;\n  }\n\n  /**\n   * 生成超椭圆截面轮廓\n   * 使用公式：|x/a|^m + |y/b|^m = 1\n   * @param {number} radiusX - X轴半径\n   * @param {number} radiusY - Y轴半径  \n   * @param {number} exponent - 超椭圆指数\n   * @param {number} segments - 分段数\n   */\n  generateSuperellipseCrossSection(radiusX, radiusY, exponent, segments) {\n    const points = [];\n    \n    // 当指数非常大时，直接生成矩形\n    if (exponent >= 50) {\n      return this.generateRectangleCrossSection(radiusX, radiusY, segments);\n    }\n    \n    for (let i = 0; i < segments; i++) {\n      const angle = (i / segments) * Math.PI * 2;\n      \n      // 参数方程生成超椭圆点\n      // x = a * sign(cos(θ)) * |cos(θ)|^(2/m)\n      // y = b * sign(sin(θ)) * |sin(θ)|^(2/m)\n      const cosTheta = Math.cos(angle);\n      const sinTheta = Math.sin(angle);\n      \n      const signCos = Math.sign(cosTheta);\n      const signSin = Math.sign(sinTheta);\n      \n      // 避免数值问题：当指数很大时，限制最小值\n      const minValue = 1e-12;\n      const absCos = Math.max(Math.abs(cosTheta), minValue);\n      const absSin = Math.max(Math.abs(sinTheta), minValue);\n      \n      const powCos = Math.pow(absCos, 2 / exponent);\n      const powSin = Math.pow(absSin, 2 / exponent);\n      \n      const x = radiusX * signCos * powCos;\n      const y = radiusY * signSin * powSin;\n      \n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    return points;\n  }\n\n  /**\n   * 生成完全直角的矩形截面轮廓\n   * @param {number} radiusX - X轴半径\n   * @param {number} radiusY - Y轴半径  \n   * @param {number} segments - 分段数\n   */\n  generateRectangleCrossSection(radiusX, radiusY, segments) {\n    const points = [];\n    const segmentsPerSide = Math.floor(segments / 4);\n    \n    // 右边（从右下到右上）\n    for (let i = 0; i <= segmentsPerSide; i++) {\n      const t = i / segmentsPerSide;\n      const x = radiusX;\n      const y = radiusY * (2 * t - 1); // -radiusY 到 radiusY\n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    // 上边（从右上到左上）\n    for (let i = 1; i <= segmentsPerSide; i++) {\n      const t = i / segmentsPerSide;\n      const x = radiusX * (1 - 2 * t); // radiusX 到 -radiusX\n      const y = radiusY;\n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    // 左边（从左上到左下）\n    for (let i = 1; i <= segmentsPerSide; i++) {\n      const t = i / segmentsPerSide;\n      const x = -radiusX;\n      const y = radiusY * (1 - 2 * t); // radiusY 到 -radiusY\n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    // 下边（从左下到右下）\n    for (let i = 1; i < segmentsPerSide; i++) {\n      const t = i / segmentsPerSide;\n      const x = radiusX * (2 * t - 1); // -radiusX 到 radiusX\n      const y = -radiusY;\n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    return points;\n  }\n\n  /**\n   * G2五次缓动函数\n   * 保证位置、速度和加速度连续性\n   * 公式：f(t) = 10t³ - 15t⁴ + 6t⁵\n   * @param {number} t - 输入参数 [0,1]\n   */\n  g2Smoothing(t) {\n    // 限制输入范围\n    t = Math.max(0, Math.min(1, t));\n    \n    // G2五次缓动\n    return 10 * Math.pow(t, 3) - 15 * Math.pow(t, 4) + 6 * Math.pow(t, 5);\n  }\n\n  /**\n   * 定位过渡网格\n   * @param {THREE.Mesh} mesh - 网格对象\n   * @param {Object} transitionInfo - 过渡信息\n   */\n  positionTransitionMesh(mesh, transitionInfo) {\n    // 设置基础位置（过渡中心点）\n    const center = transitionInfo.center;\n    const posOffset = this.transitionConfig.position.offset;\n    \n    mesh.position.set(\n      center.x + posOffset.x,\n      center.y + posOffset.y, \n      center.z + posOffset.z\n    );\n    \n    // 计算旋转以对齐过渡方向\n    const targetDirection = transitionInfo.direction;\n    const defaultDirection = new three_module/* Vector3 */.Pq0(0, 0, 1);\n    \n    // 计算旋转四元数\n    const quaternion = new three_module/* Quaternion */.PTz();\n    quaternion.setFromUnitVectors(defaultDirection, targetDirection);\n    mesh.setRotationFromQuaternion(quaternion);\n    \n    // 由于圆柱体是水平的（绕Z轴旋转90度），过渡也需要相应调整\n    mesh.rotateZ(Math.PI / 2);\n    \n    // 应用旋转偏移\n    const rotOffset = this.transitionConfig.rotation.offset;\n    mesh.rotateX(rotOffset.x);\n    mesh.rotateY(rotOffset.y);\n    mesh.rotateZ(rotOffset.z);\n  }\n\n  /**\n   * 获取过渡组\n   */\n  getTransition() {\n    return this.transitionGroup;\n  }\n\n  /**\n   * 设置可见性\n   */\n  setVisible(visible) {\n    this.transitionGroup.visible = visible;\n  }\n\n  /**\n   * 设置颜色\n   */\n  setColor(color) {\n    if (this.material) {\n      this.material.color.setHex(color);\n    }\n  }\n\n  /**\n   * 设置透明度\n   */\n  setOpacity(opacity) {\n    if (this.material) {\n      this.material.opacity = Math.max(0, Math.min(1, opacity));\n    }\n  }\n\n  /**\n   * 设置位置偏移\n   */\n  setPositionOffset(x, y, z) {\n    this.transitionConfig.position.offset = { x, y, z };\n    this.updatePosition();\n  }\n\n  /**\n   * 设置旋转偏移  \n   */\n  setRotationOffset(x, y, z) {\n    this.transitionConfig.rotation.offset = { x, y, z };\n    this.updateRotation();\n  }\n\n  /**\n   * 直接设置位置\n   */\n  setPosition(x, y, z) {\n    this.transitionGroup.position.set(x, y, z);\n  }\n\n  /**\n   * 直接设置旋转\n   */\n  setRotation(x, y, z) {\n    this.transitionGroup.rotation.set(x, y, z);\n  }\n\n  /**\n   * 获取当前位置\n   */\n  getPosition() {\n    return this.transitionGroup.position.clone();\n  }\n\n  /**\n   * 获取当前旋转\n   */\n  getRotation() {\n    return this.transitionGroup.rotation.clone();\n  }\n\n  /**\n   * 获取位置偏移\n   */\n  getPositionOffset() {\n    return { ...this.transitionConfig.position.offset };\n  }\n\n  /**\n   * 获取旋转偏移\n   */\n  getRotationOffset() {\n    return { ...this.transitionConfig.rotation.offset };\n  }\n\n  /**\n   * 更新位置（重新计算基于偏移）\n   */\n  updatePosition() {\n    // 重新计算过渡参数\n    const transitionInfo = this.calculateTransitionParams();\n    \n    // 更新所有网格位置\n    this.meshes.forEach(mesh => {\n      this.positionTransitionMesh(mesh, transitionInfo);\n    });\n  }\n\n  /**\n   * 更新旋转（重新计算基于偏移）\n   */\n  updateRotation() {\n    this.updatePosition(); // 旋转偏移需要重新定位\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfig(startConfig, endConfig, transitionConfig) {\n    this.startConfig = startConfig;\n    this.endConfig = endConfig;\n    this.transitionConfig = { ...this.transitionConfig, ...transitionConfig };\n    \n    // 重新创建过渡\n    this.dispose();\n    this.createTransition();\n  }\n\n  /**\n   * 动态更新超椭圆指数（用于动画效果）\n   * @param {number} startExponent - 起始指数\n   * @param {number} endExponent - 结束指数\n   */\n  updateExponents(startExponent, endExponent) {\n    this.transitionConfig.startExponent = startExponent;\n    this.transitionConfig.endExponent = endExponent;\n    \n    // 重新创建几何体\n    this.dispose();\n    this.createTransition();\n  }\n\n  /**\n   * 销毁资源\n   */\n  dispose() {\n    if (this.material) {\n      this.material.dispose();\n    }\n    \n    this.meshes.forEach(mesh => {\n      if (mesh.geometry) mesh.geometry.dispose();\n      this.transitionGroup.remove(mesh);\n    });\n    \n    this.meshes = [];\n  }\n}\n\n;// ./src/components/Cylinder2ExplodeEffect.js\n\n\n\n\n\n\n/**\n * Cylinder2爆炸分解效果类\n * 将cylinder2模型分解成积木块状组件，模拟积木组装/分解效果\n */\nclass Cylinder2ExplodeEffect {\n  /**\n   * 构造函数\n   * @param {THREE.Mesh} cylinder2Mesh - cylinder2网格对象\n   * @param {THREE.Group} parentGroup - 父级组对象\n   */\n  constructor(cylinder2Mesh, parentGroup) {\n    this.originalMesh = cylinder2Mesh;\n    this.parentGroup = parentGroup;\n    this.exploded = false;\n    this.blocks = [];\n    this.tweens = [];\n    this.originalVisible = cylinder2Mesh.visible;\n    \n    // 分解参数\n    this.config = {\n      // 分解距离系数\n      explodeDistance: 1.5,\n      // 动画持续时间\n      animationDuration: 1200\n    };\n    \n    this.createBlocks();\n  }\n  \n  /**\n   * 创建积木块\n   */\n  createBlocks() {\n    const config = CONFIG.shell.cylinder2;\n    const radius = config.radius;\n    const height = config.height;\n    \n    // 使用统一组件材质（示波器内部金属材质）\n    const blockMaterial = unifiedComponentMaterial.getMaterial('exploded');\n    \n    // 创建4个扇形分块（四分之一圆）\n    for (let i = 0; i < 4; i++) {\n      const block = this.createQuarterBlock(radius, height, blockMaterial, i);\n      \n      // 设置初始位置\n      block.position.copy(this.originalMesh.position);\n      \n      // 保存扇形的基础旋转\n      const baseRotation = block.rotation.clone();\n      \n      // 应用cylinder2的旋转（组合旋转）\n      block.rotation.copy(this.originalMesh.rotation);\n      // 在原始旋转基础上添加扇形的基础旋转\n      block.rotation.z += baseRotation.z;\n      \n      // 初始时隐藏积木块\n      block.visible = false;\n      \n      // 计算扇形的中心角度（用于分解方向）\n      const centerAngle = i * Math.PI / 2 + Math.PI / 4; // 每个扇形的中心角度\n      \n      this.blocks.push({\n        mesh: block,\n        originalPosition: block.position.clone(),\n        originalRotation: block.rotation.clone(),\n        segmentIndex: i,\n        centerAngle: centerAngle\n      });\n      \n      this.parentGroup.add(block);\n    }\n  }\n  \n  /**\n   * 创建四分之一圆扇形积木块\n   */\n  createQuarterBlock(radius, height, material, segmentIndex) {\n    // 创建扇形几何体（四分之一圆）\n    const geometry = new three_module/* CylinderGeometry */.Ho_(\n      radius, \n      radius, \n      height, \n      8, // 每个扇形的径向段数\n      1, // 高度分段数\n      false, // 不封闭\n      segmentIndex * Math.PI / 2, // 起始角度\n      Math.PI / 2 // 扇形角度（90度）\n    );\n    \n    // 创建网格\n    const mesh = new three_module/* Mesh */.eaF(geometry, material);\n    \n    // 调整方向以匹配cylinder2的方向（沿X轴）\n    mesh.rotation.z = Math.PI / 2;\n    \n    return mesh;\n  }\n  \n  /**\n   * 计算爆炸后的位置\n   */\n  calculateExplodedPosition(block) {\n    const { centerAngle, originalPosition } = block;\n    \n    // 计算扇形在径向上的分解方向\n    // 由于cylinder2是沿X轴的，我们需要在YZ平面上分解\n    const explodeDistance = this.config.explodeDistance;\n    \n    // 计算分解的方向向量（在YZ平面上）\n    const directionY = Math.sin(centerAngle) * explodeDistance;\n    const directionZ = Math.cos(centerAngle) * explodeDistance;\n    \n    // 计算新位置\n    const explodedPosition = originalPosition.clone();\n    explodedPosition.y += directionY;\n    explodedPosition.z += directionZ;\n    \n    return explodedPosition;\n  }\n  \n  /**\n   * 切换爆炸效果\n   */\n  toggle(explode = !this.exploded) {\n    this.exploded = explode;\n    \n    // 停止所有正在进行的动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    if (this.exploded) {\n      // 爆炸：隐藏原始网格，显示积木块\n      this.originalMesh.visible = false;\n      this.explodeBlocks();\n    } else {\n      // 合并：重新组装积木块，显示原始网格\n      this.assembleBlocks();\n    }\n    \n    return this.exploded;\n  }\n  \n  /**\n   * 分解积木块\n   */\n  explodeBlocks() {\n    this.blocks.forEach((block, index) => {\n      // 显示积木块\n      block.mesh.visible = true;\n      \n      // 计算目标位置\n      const targetPosition = this.calculateExplodedPosition(block);\n      \n      // 创建位置动画（带延迟以产生连锁效果）\n      const delay = index * 100; // 100ms的延迟间隔，让分解效果更明显\n      \n      const positionTween = new tween_esm/* Tween */.K(block.mesh.position, tweenGroup)\n        .to({\n          x: targetPosition.x,\n          y: targetPosition.y,\n          z: targetPosition.z\n        }, this.config.animationDuration)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.Out)\n        .start();\n      \n      this.tweens.push(positionTween);\n    });\n  }\n  \n  /**\n   * 组装积木块\n   */\n  assembleBlocks() {\n    this.blocks.forEach((block, index) => {\n      // 创建回归动画（反向延迟以产生重新组装效果）\n      const delay = (this.blocks.length - index - 1) * 80; // 反向延迟\n      \n      const positionTween = new tween_esm/* Tween */.K(block.mesh.position, tweenGroup)\n        .to({\n          x: block.originalPosition.x,\n          y: block.originalPosition.y,\n          z: block.originalPosition.z\n        }, this.config.animationDuration * 0.8)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.In)\n        .onComplete(() => {\n          // 最后一个块组装完成后，隐藏所有积木块并显示原始网格\n          if (index === this.blocks.length - 1) {\n            this.blocks.forEach(b => b.mesh.visible = false);\n            this.originalMesh.visible = this.originalVisible;\n          }\n        })\n        .start();\n      \n      this.tweens.push(positionTween);\n    });\n  }\n  \n  /**\n   * 清理资源\n   */\n  dispose() {\n    // 停止所有动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    // 移除积木块\n    this.blocks.forEach(block => {\n      this.parentGroup.remove(block.mesh);\n      block.mesh.geometry.dispose();\n      block.mesh.material.dispose();\n    });\n    \n    this.blocks = [];\n  }\n  \n  /**\n   * 获取爆炸状态\n   */\n  isExploded() {\n    return this.exploded;\n  }\n}\n\n;// ./src/components/RotationCurveExplodeEffect.js\n\n\n\n\n\n\n\n/**\n * 旋转曲线连接爆炸分解效果类\n * 将旋转曲线连接分解成扇形段，模拟积木组装/分解效果\n */\nclass RotationCurveExplodeEffect {\n  /**\n   * 构造函数\n   * @param {THREE.Mesh} connectionMesh - 旋转曲线连接网格对象\n   * @param {THREE.Group} parentGroup - 父级组对象\n   */\n  constructor(connectionMesh, parentGroup) {\n    this.originalMesh = connectionMesh;\n    this.parentGroup = parentGroup;\n    this.exploded = false;\n    this.sectors = [];\n    this.tweens = [];\n    this.originalVisible = connectionMesh.visible;\n    \n    // 分解参数\n    this.config = {\n      // 分解距离系数 - 与Cylinder2ExplodeEffect保持一致\n      explodeDistance: 1.5,\n      // 动画持续时间 - 与Cylinder2ExplodeEffect保持一致\n      animationDuration: 1200,\n      // 扇形段数量\n      sectorCount: 4\n    };\n    \n    this.createSectors();\n  }\n  \n  /**\n   * 创建扇形段\n   */\n  createSectors() {\n    const config = CONFIG.shell.rotationCurveConnection;\n    if (!config) return;\n    \n    // 获取连接的基本参数\n    const segments = config.segments || 50;\n    const radialSegments = config.radialSegments || 32;\n    const connectionLength = config.connectionLength || 4.8;\n    \n    // 使用统一组件材质（示波器内部金属材质）\n    const ringMaterial = unifiedComponentMaterial.getMaterial('exploded');\n    \n    // 创建4个扇形段（每个90度）\n    for (let i = 0; i < this.config.sectorCount; i++) {\n      const sector = this.createSectorSegment(connectionLength, radialSegments, ringMaterial, i);\n      \n      // 设置初始位置\n      sector.position.copy(this.originalMesh.position);\n      \n      // 保存扇形的基础旋转\n      const baseRotation = sector.rotation.clone();\n      \n      // 应用原始连接的旋转（复合旋转）\n      sector.rotation.copy(this.originalMesh.rotation);\n      // 在原始旋转基础上添加扇形的基础旋转\n      sector.rotation.z += baseRotation.z;\n      \n      // 初始时隐藏扇形段\n      sector.visible = false;\n      \n      // 计算扇形段的中心角度（用于分解方向）\n      const centerAngle = i * Math.PI / 2 + Math.PI / 4; // 每个扇形的中心角度（45°, 135°, 225°, 315°）\n      \n      this.sectors.push({\n        mesh: sector,\n        originalPosition: sector.position.clone(),\n        originalRotation: sector.rotation.clone(),\n        segmentIndex: i,\n        centerAngle: centerAngle\n      });\n      \n      this.parentGroup.add(sector);\n    }\n  }\n  \n  /**\n   * 创建单个扇形段\n   */\n  createSectorSegment(length, radialSegments, material, segmentIndex) {\n    // 获取原始连接的参数\n    const connectionParams = this.getConnectionParameters();\n    \n    // 创建旋转曲线几何体生成器\n    const curveGeometry = new RotationCurveGeometry(\n      connectionParams.startRadius,\n      connectionParams.endRadius,\n      connectionParams.connectionLength,\n      connectionParams.curveType,\n      connectionParams.segments,\n      connectionParams.radialSegments\n    );\n    \n    // 创建扇形片段几何体\n    const sectorGeometry = curveGeometry.createSectorGeometry(segmentIndex, this.config.sectorCount);\n    \n    // 创建网格\n    const mesh = new three_module/* Mesh */.eaF(sectorGeometry, material);\n    \n    // 调整方向以匹配旋转曲线连接的方向（沿X轴）\n    mesh.rotation.z = Math.PI / 2;\n    \n    return mesh;\n  }\n  \n  /**\n   * 获取原始连接的参数\n   */\n  getConnectionParameters() {\n    // 从配置中获取连接参数\n    const config = CONFIG.shell.rotationCurveConnection;\n    const cylinder1Config = CONFIG.shell.cylinder1;\n    const cylinder2Config = CONFIG.shell.cylinder2;\n    \n    return {\n      startRadius: cylinder1Config.radius,\n      endRadius: cylinder2Config.radius,\n      connectionLength: config.connectionLength,\n      curveType: config.curveType || 'G2',\n      segments: config.segments || 50,\n      radialSegments: config.radialSegments || 32\n    };\n  }\n\n  /**\n   * 估算连接的半径\n   */\n  estimateConnectionRadius() {\n    // 基于配置估算半径，或者使用默认值\n    const cylinder1Radius = CONFIG.shell.cylinder1?.radius || 1.5;\n    const cylinder2Radius = CONFIG.shell.cylinder2?.radius || 1.0;\n    \n    // 使用两个圆柱体半径的平均值作为连接半径\n    return (cylinder1Radius + cylinder2Radius) / 2;\n  }\n  \n  /**\n   * 计算爆炸后的位置\n   */\n  calculateExplodedPosition(sector) {\n    const { centerAngle, originalPosition } = sector;\n    \n    // 计算扇形段在径向上的分解方向\n    // 由于连接是沿X轴的，我们需要在YZ平面上分解\n    const explodeDistance = this.config.explodeDistance;\n    \n    // 计算分解的方向向量（在YZ平面上）\n    const directionY = Math.sin(centerAngle) * explodeDistance;\n    const directionZ = Math.cos(centerAngle) * explodeDistance;\n    \n    // 计算新位置\n    const explodedPosition = originalPosition.clone();\n    explodedPosition.y += directionY;\n    explodedPosition.z += directionZ;\n    \n    return explodedPosition;\n  }\n  \n  /**\n   * 计算爆炸后的旋转\n   */\n  calculateExplodedRotation(sector) {\n    const { originalRotation, segmentIndex } = sector;\n    \n    // 添加90度旋转效果到分离的扇形段\n    const explodedRotation = originalRotation.clone();\n    \n    // 为每个扇形段添加90度旋转（π/2弧度）\n    // 围绕X轴旋转，使扇形段产生翻滚效果\n    explodedRotation.x += Math.PI / 2;\n    \n    // 可选：为不同扇形段添加轻微的旋转变化，增加动感\n    const rotationVariation = (segmentIndex * Math.PI / 8) * 0.3; // 每个段轻微不同的旋转偏移\n    explodedRotation.y += rotationVariation;\n    \n    return explodedRotation;\n  }\n  \n  /**\n   * 切换爆炸效果\n   */\n  toggle(explode = !this.exploded) {\n    this.exploded = explode;\n    \n    // 停止所有正在进行的动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    if (this.exploded) {\n      // 爆炸：隐藏原始网格，显示扇形段\n      this.originalMesh.visible = false;\n      this.explodeSectors();\n    } else {\n      // 合并：重新组装扇形段，显示原始网格\n      this.assembleSectors();\n    }\n    \n    return this.exploded;\n  }\n  \n  /**\n   * 分解扇形段\n   */\n  explodeSectors() {\n    this.sectors.forEach((sector, index) => {\n      // 显示扇形段\n      sector.mesh.visible = true;\n      \n      // 计算目标位置和旋转\n      const targetPosition = this.calculateExplodedPosition(sector);\n      const targetRotation = this.calculateExplodedRotation(sector);\n      \n      // 创建位置动画（带延迟以产生连锁效果）\n      const delay = index * 100; // 100ms的延迟间隔，让分解效果更明显，与Cylinder2ExplodeEffect保持一致\n      \n      const positionTween = new tween_esm/* Tween */.K(sector.mesh.position, tweenGroup)\n        .to({\n          x: targetPosition.x,\n          y: targetPosition.y,\n          z: targetPosition.z\n        }, this.config.animationDuration)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.Out)\n        .start();\n      \n      // 创建旋转动画\n      const rotationTween = new tween_esm/* Tween */.K(sector.mesh.rotation, tweenGroup)\n        .to({\n          x: targetRotation.x,\n          y: targetRotation.y,\n          z: targetRotation.z\n        }, this.config.animationDuration)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.Out)\n        .start();\n      \n      this.tweens.push(positionTween, rotationTween);\n    });\n  }\n  \n  /**\n   * 组装扇形段\n   */\n  assembleSectors() {\n    this.sectors.forEach((sector, index) => {\n      // 创建回归动画（反向延迟以产生重新组装效果）\n      const delay = (this.sectors.length - index - 1) * 80; // 反向延迟，与Cylinder2ExplodeEffect保持一致\n      \n      const positionTween = new tween_esm/* Tween */.K(sector.mesh.position, tweenGroup)\n        .to({\n          x: sector.originalPosition.x,\n          y: sector.originalPosition.y,\n          z: sector.originalPosition.z\n        }, this.config.animationDuration * 0.8)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.In)\n        .onComplete(() => {\n          // 最后一个扇形段组装完成后，隐藏所有扇形段并显示原始连接\n          if (index === this.sectors.length - 1) {\n            this.sectors.forEach(s => s.mesh.visible = false);\n            this.originalMesh.visible = this.originalVisible;\n          }\n        })\n        .start();\n      \n      const rotationTween = new tween_esm/* Tween */.K(sector.mesh.rotation, tweenGroup)\n        .to({\n          x: sector.originalRotation.x,\n          y: sector.originalRotation.y,\n          z: sector.originalRotation.z\n        }, this.config.animationDuration * 0.8)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.In)\n        .start();\n      \n      this.tweens.push(positionTween, rotationTween);\n    });\n  }\n  \n  /**\n   * 清理资源\n   */\n  dispose() {\n    // 停止所有动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    // 移除扇形段\n    this.sectors.forEach(sector => {\n      this.parentGroup.remove(sector.mesh);\n      sector.mesh.geometry.dispose();\n      sector.mesh.material.dispose();\n    });\n    \n    this.sectors = [];\n  }\n  \n  /**\n   * 获取爆炸状态\n   */\n  isExploded() {\n    return this.exploded;\n  }\n}\n\n;// ./src/utils/SuperellipsePositioner.js\n\r\n\r\n/**\r\n * 超椭圆子网格批量定位器\r\n * 专门用于将SuperellipseExplodeEffect分解后的子网格按给定坐标批量定位\r\n */\r\nclass SuperellipsePositioner {\r\n  /**\r\n   * 构造函数\r\n   * @param {SuperellipseExplodeEffect} explodeEffect - 超椭圆爆炸效果实例\r\n   */\r\n  constructor(explodeEffect) {\r\n    this.explodeEffect = explodeEffect;\r\n    this.originalPositions = new Map(); // 存储原始位置\r\n    this.isPositioned = false;\r\n    \r\n    this.saveOriginalPositions();\r\n  }\r\n  \r\n  /**\r\n   * 保存原始位置\r\n   */\r\n  saveOriginalPositions() {\r\n    this.explodeEffect.blocks.forEach((block, index) => {\r\n      this.originalPositions.set(index, {\r\n        x: block.mesh.position.x,\r\n        y: block.mesh.position.y,\r\n        z: block.mesh.position.z\r\n      });\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 批量设置子网格位置\r\n   * @param {Array} positions - 位置数组，每个元素包含 {x, y, z} 坐标\r\n   *                           数组长度应与子网格数量匹配\r\n   */\r\n  setPositions(positions) {\r\n    if (!Array.isArray(positions)) {\r\n      console.warn('SuperellipsePositioner: positions 必须是数组');\r\n      return;\r\n    }\r\n    \r\n    if (positions.length !== this.explodeEffect.blocks.length) {\r\n      console.warn(`SuperellipsePositioner: 位置数组长度 (${positions.length}) 与子网格数量 (${this.explodeEffect.blocks.length}) 不匹配`);\r\n      return;\r\n    }\r\n    \r\n    // 确保子网格处于分解状态并可见\r\n    if (!this.explodeEffect.exploded) {\r\n      this.explodeEffect.toggle(true);\r\n    }\r\n    \r\n    // 停止任何正在进行的动画\r\n    this.explodeEffect.tweens.forEach(tween => tween.stop());\r\n    this.explodeEffect.tweens = [];\r\n    \r\n    // 批量设置位置\r\n    positions.forEach((position, index) => {\r\n      if (index < this.explodeEffect.blocks.length) {\r\n        const block = this.explodeEffect.blocks[index];\r\n        \r\n        // 验证位置对象\r\n        if (typeof position === 'object' && position !== null) {\r\n          if (typeof position.x === 'number') block.mesh.position.x = position.x;\r\n          if (typeof position.y === 'number') block.mesh.position.y = position.y;\r\n          if (typeof position.z === 'number') block.mesh.position.z = position.z;\r\n        }\r\n      }\r\n    });\r\n    \r\n    this.isPositioned = true;\r\n  }\r\n  \r\n  /**\r\n   * 设置单个子网格位置\r\n   * @param {number} index - 子网格索引 (0-3)\r\n   * @param {Object} position - 位置对象 {x, y, z}\r\n   */\r\n  setPosition(index, position) {\r\n    if (index < 0 || index >= this.explodeEffect.blocks.length) {\r\n      console.warn(`SuperellipsePositioner: 索引 ${index} 超出范围 (0-${this.explodeEffect.blocks.length - 1})`);\r\n      return;\r\n    }\r\n    \r\n    if (typeof position !== 'object' || position === null) {\r\n      console.warn('SuperellipsePositioner: position 必须是对象');\r\n      return;\r\n    }\r\n    \r\n    // 确保子网格处于分解状态并可见\r\n    if (!this.explodeEffect.exploded) {\r\n      this.explodeEffect.toggle(true);\r\n    }\r\n    \r\n    const block = this.explodeEffect.blocks[index];\r\n    if (typeof position.x === 'number') block.mesh.position.x = position.x;\r\n    if (typeof position.y === 'number') block.mesh.position.y = position.y;\r\n    if (typeof position.z === 'number') block.mesh.position.z = position.z;\r\n    \r\n    this.isPositioned = true;\r\n  }\r\n  \r\n  /**\r\n   * 获取所有子网格的当前位置\r\n   * @returns {Array} 位置数组\r\n   */\r\n  getPositions() {\r\n    return this.explodeEffect.blocks.map(block => ({\r\n      x: block.mesh.position.x,\r\n      y: block.mesh.position.y,\r\n      z: block.mesh.position.z\r\n    }));\r\n  }\r\n  \r\n  /**\r\n   * 获取指定子网格的位置\r\n   * @param {number} index - 子网格索引\r\n   * @returns {Object|null} 位置对象或null\r\n   */\r\n  getPosition(index) {\r\n    if (index < 0 || index >= this.explodeEffect.blocks.length) {\r\n      console.warn(`SuperellipsePositioner: 索引 ${index} 超出范围`);\r\n      return null;\r\n    }\r\n    \r\n    const block = this.explodeEffect.blocks[index];\r\n    return {\r\n      x: block.mesh.position.x,\r\n      y: block.mesh.position.y,\r\n      z: block.mesh.position.z\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 恢复到原始位置\r\n   */\r\n  restoreOriginalPositions() {\r\n    this.explodeEffect.blocks.forEach((block, index) => {\r\n      const originalPos = this.originalPositions.get(index);\r\n      if (originalPos) {\r\n        block.mesh.position.set(originalPos.x, originalPos.y, originalPos.z);\r\n      }\r\n    });\r\n    \r\n    this.isPositioned = false;\r\n  }\r\n  \r\n  /**\r\n   * 应用位置偏移\r\n   * @param {Object} offset - 偏移量 {x, y, z}\r\n   */\r\n  applyOffset(offset) {\r\n    if (typeof offset !== 'object' || offset === null) {\r\n      console.warn('SuperellipsePositioner: offset 必须是对象');\r\n      return;\r\n    }\r\n    \r\n    const offsetX = typeof offset.x === 'number' ? offset.x : 0;\r\n    const offsetY = typeof offset.y === 'number' ? offset.y : 0;\r\n    const offsetZ = typeof offset.z === 'number' ? offset.z : 0;\r\n    \r\n    this.explodeEffect.blocks.forEach(block => {\r\n      block.mesh.position.x += offsetX;\r\n      block.mesh.position.y += offsetY;\r\n      block.mesh.position.z += offsetZ;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 重置所有子网格到爆炸效果的默认分解位置\r\n   */\r\n  resetToExplodedPositions() {\r\n    this.explodeEffect.blocks.forEach(block => {\r\n      const explodedPos = this.explodeEffect.calculateExplodedPosition(block);\r\n      block.mesh.position.copy(explodedPos);\r\n    });\r\n    \r\n    this.isPositioned = false;\r\n  }\r\n  \r\n  /**\r\n   * 获取子网格数量\r\n   * @returns {number} 子网格数量\r\n   */\r\n  getBlockCount() {\r\n    return this.explodeEffect.blocks.length;\r\n  }\r\n  \r\n  /**\r\n   * 检查是否已经应用了自定义定位\r\n   * @returns {boolean} 是否已定位\r\n   */\r\n  isCustomPositioned() {\r\n    return this.isPositioned;\r\n  }\r\n}\r\n\n;// ./src/components/SuperellipseExplodeEffect.js\n\n\n\n\n\n\n\n/**\n * 超椭圆爆炸分解效果类\n * 将超椭圆模型分解成4个象限分块，模拟积木组装/分解效果\n */\nclass SuperellipseExplodeEffect {\n  /**\n   * 构造函数\n   * @param {THREE.Mesh} superellipseMesh - 超椭圆网格对象\n   * @param {THREE.Group} parentGroup - 父级组对象\n   */\n  constructor(superellipseMesh, parentGroup) {\n    this.originalMesh = superellipseMesh;\n    this.parentGroup = parentGroup;\n    this.exploded = false;\n    this.blocks = [];\n    this.tweens = [];\n    this.originalVisible = superellipseMesh.visible;\n    \n    // 分解参数\n    this.config = {\n      // 分解距离系数\n      explodeDistance: 2.0,\n      // 动画持续时间 - 与其他组件保持一致\n      animationDuration: 1200\n    };\n    \n    this.createBlocks();\n    \n    // 初始化位置器\n    this.positioner = new SuperellipsePositioner(this);\n  }\n  \n  /**\n   * 创建分块\n   */\n  createBlocks() {\n    // 获取原始几何体\n    const originalGeometry = this.originalMesh.geometry;\n    \n    // 使用统一组件材质管理器获取爆炸材质\n    const blockMaterial = unifiedComponentMaterial.getMaterial('exploded');\n    \n    // 创建4个象限分块\n    for (let i = 0; i < 4; i++) {\n      const block = this.createQuadrantBlock(originalGeometry, blockMaterial, i);\n      \n      // 设置初始位置和旋转\n      block.position.copy(this.originalMesh.position);\n      block.rotation.copy(this.originalMesh.rotation);\n      \n      // 初始时隐藏积木块\n      block.visible = false;\n      \n      // 计算象限的中心角度（用于分解方向）\n      const centerAngle = i * Math.PI / 2 + Math.PI / 4; // 每个象限的中心角度\n      \n      this.blocks.push({\n        mesh: block,\n        originalPosition: block.position.clone(),\n        originalRotation: block.rotation.clone(),\n        quadrantIndex: i,\n        centerAngle: centerAngle\n      });\n      \n      this.parentGroup.add(block);\n    }\n  }\n  \n  /**\n   * 创建象限分块\n   * @param {THREE.BufferGeometry} originalGeometry - 原始几何体\n   * @param {THREE.Material} material - 材质\n   * @param {number} quadrantIndex - 象限索引 (0-3)\n   */\n  createQuadrantBlock(originalGeometry, material, quadrantIndex) {\n    // 获取原始几何体的顶点数据\n    const positions = originalGeometry.attributes.position.array;\n    const normals = originalGeometry.attributes.normal ? originalGeometry.attributes.normal.array : null;\n    const uvs = originalGeometry.attributes.uv ? originalGeometry.attributes.uv.array : null;\n    const indices = originalGeometry.index ? originalGeometry.index.array : null;\n    \n    // 创建新的几何体数据数组\n    const newVertices = [];\n    const newNormals = [];\n    const newUvs = [];\n    const newIndices = [];\n    const vertexMap = new Map(); // 用于映射旧顶点索引到新顶点索引\n    \n    // 计算实际几何体边界框\n    const boundingBox = this.calculateGeometryBoundingBox(originalGeometry);\n    \n    // 定义基于实际边界的象限边界\n    const quadrantBounds = this.getQuadrantBoundsWithGeometry(quadrantIndex, boundingBox);\n    \n    // 处理顶点数据\n    if (indices) {\n      // 有索引的几何体\n      for (let i = 0; i < indices.length; i += 3) {\n        const triangleVertices = [];\n        const triangleInQuadrant = [];\n        \n        // 检查三角形的每个顶点\n        for (let j = 0; j < 3; j++) {\n          const vertexIndex = indices[i + j];\n          const x = positions[vertexIndex * 3];\n          const y = positions[vertexIndex * 3 + 1];\n          \n          triangleVertices.push({ index: vertexIndex, x, y });\n          triangleInQuadrant.push(this.isPointInQuadrant(x, y, quadrantBounds));\n        }\n        \n        // 更智能的三角形分配：基于三角形重心来决定归属\n        const triangleCenter = this.calculateTriangleCenter(triangleVertices);\n        const triangleBelongsToQuadrant = this.isPointInQuadrant(\n          triangleCenter.x, \n          triangleCenter.y, \n          quadrantBounds\n        );\n        \n        // 如果三角形重心在当前象限，或者所有顶点都在象限边界上，则包含整个三角形\n        if (triangleBelongsToQuadrant || triangleInQuadrant.every(inQuadrant => inQuadrant)) {\n          for (let j = 0; j < 3; j++) {\n            const vertex = triangleVertices[j];\n            const oldIndex = vertex.index;\n            \n            if (!vertexMap.has(oldIndex)) {\n              // 添加新顶点\n              const newIndex = newVertices.length / 3;\n              vertexMap.set(oldIndex, newIndex);\n              \n              // 复制顶点位置\n              newVertices.push(\n                positions[oldIndex * 3],\n                positions[oldIndex * 3 + 1],\n                positions[oldIndex * 3 + 2]\n              );\n              \n              // 复制法向量\n              if (normals) {\n                newNormals.push(\n                  normals[oldIndex * 3],\n                  normals[oldIndex * 3 + 1],\n                  normals[oldIndex * 3 + 2]\n                );\n              }\n              \n              // 复制UV坐标\n              if (uvs) {\n                newUvs.push(\n                  uvs[oldIndex * 2],\n                  uvs[oldIndex * 2 + 1]\n                );\n              }\n            }\n            \n            newIndices.push(vertexMap.get(oldIndex));\n          }\n        }\n      }\n    } else {\n      // 无索引的几何体\n      for (let i = 0; i < positions.length; i += 9) { // 每个三角形3个顶点，每个顶点3个坐标\n        const triangleInQuadrant = [];\n        \n        // 检查三角形的每个顶点\n        for (let j = 0; j < 3; j++) {\n          const x = positions[i + j * 3];\n          const y = positions[i + j * 3 + 1];\n          triangleInQuadrant.push(this.isPointInQuadrant(x, y, quadrantBounds));\n        }\n        \n        // 如果三角形的任何顶点在当前象限，则包含整个三角形\n        if (triangleInQuadrant.some(inQuadrant => inQuadrant)) {\n          for (let j = 0; j < 3; j++) {\n            const baseIdx = i + j * 3;\n            \n            // 复制顶点位置\n            newVertices.push(\n              positions[baseIdx],\n              positions[baseIdx + 1],\n              positions[baseIdx + 2]\n            );\n            \n            // 复制法向量\n            if (normals) {\n              newNormals.push(\n                normals[baseIdx],\n                normals[baseIdx + 1],\n                normals[baseIdx + 2]\n              );\n            }\n            \n            // 复制UV坐标\n            if (uvs) {\n              const uvIdx = (i / 3) * 2 + j * 2; // UV索引计算\n              newUvs.push(\n                uvs[uvIdx],\n                uvs[uvIdx + 1]\n              );\n            }\n          }\n        }\n      }\n    }\n    \n    // 创建新的几何体\n    const blockGeometry = new three_module/* BufferGeometry */.LoY();\n    \n    if (newVertices.length > 0) {\n      blockGeometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(newVertices, 3));\n      \n      if (newNormals.length > 0) {\n        blockGeometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(newNormals, 3));\n      }\n      \n      if (newUvs.length > 0) {\n        blockGeometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(newUvs, 2));\n      }\n      \n      if (newIndices.length > 0) {\n        blockGeometry.setIndex(newIndices);\n      }\n      \n      // 计算边界盒和法向量\n      blockGeometry.computeBoundingBox();\n      if (newNormals.length === 0) {\n        blockGeometry.computeVertexNormals();\n      }\n    } else {\n      // 如果没有顶点，创建一个简单的占位几何体\n      console.warn(`Quadrant ${quadrantIndex} has no vertices, creating placeholder geometry`);\n      const planeGeometry = new three_module/* PlaneGeometry */.bdM(0.1, 0.1);\n      blockGeometry.copy(planeGeometry);\n    }\n    \n    // 创建网格\n    const mesh = new three_module/* Mesh */.eaF(blockGeometry, material);\n    \n    return mesh;\n  }\n  \n  /**\n   * 计算几何体边界框\n   * @param {THREE.BufferGeometry} geometry - 几何体\n   */\n  calculateGeometryBoundingBox(geometry) {\n    geometry.computeBoundingBox();\n    const box = geometry.boundingBox;\n    \n    return {\n      minX: box.min.x,\n      maxX: box.max.x,\n      minY: box.min.y,\n      maxY: box.max.y,\n      minZ: box.min.z,\n      maxZ: box.max.z,\n      centerX: (box.min.x + box.max.x) / 2,\n      centerY: (box.min.y + box.max.y) / 2,\n      centerZ: (box.min.z + box.max.z) / 2\n    };\n  }\n\n  /**\n   * 获取基于实际几何体的象限边界\n   * @param {number} quadrantIndex - 象限索引 (0-3)\n   * @param {Object} boundingBox - 几何体边界框\n   */\n  getQuadrantBoundsWithGeometry(quadrantIndex, boundingBox) {\n    const { centerX, centerY, minX, maxX, minY, maxY } = boundingBox;\n    \n    switch (quadrantIndex) {\n      case 0: // 第一象限 (+x, +y) - 右上\n        return { \n          minX: centerX, maxX: maxX, \n          minY: centerY, maxY: maxY \n        };\n      case 1: // 第二象限 (-x, +y) - 左上\n        return { \n          minX: minX, maxX: centerX, \n          minY: centerY, maxY: maxY \n        };\n      case 2: // 第三象限 (-x, -y) - 左下\n        return { \n          minX: minX, maxX: centerX, \n          minY: minY, maxY: centerY \n        };\n      case 3: // 第四象限 (+x, -y) - 右下\n        return { \n          minX: centerX, maxX: maxX, \n          minY: minY, maxY: centerY \n        };\n      default:\n        return { \n          minX: minX, maxX: maxX, \n          minY: minY, maxY: maxY \n        };\n    }\n  }\n\n  /**\n   * 获取象限边界（旧版本，保留用于兼容）\n   * @param {number} quadrantIndex - 象限索引 (0-3)\n   */\n  getQuadrantBounds(quadrantIndex) {\n    switch (quadrantIndex) {\n      case 0: // 第一象限 (+x, +y)\n        return { minX: 0, maxX: Infinity, minY: 0, maxY: Infinity };\n      case 1: // 第二象限 (-x, +y)\n        return { minX: -Infinity, maxX: 0, minY: 0, maxY: Infinity };\n      case 2: // 第三象限 (-x, -y)\n        return { minX: -Infinity, maxX: 0, minY: -Infinity, maxY: 0 };\n      case 3: // 第四象限 (+x, -y)\n        return { minX: 0, maxX: Infinity, minY: -Infinity, maxY: 0 };\n      default:\n        return { minX: -Infinity, maxX: Infinity, minY: -Infinity, maxY: Infinity };\n    }\n  }\n  \n  /**\n   * 计算三角形重心\n   * @param {Array} triangleVertices - 三角形顶点数组\n   */\n  calculateTriangleCenter(triangleVertices) {\n    const centerX = (triangleVertices[0].x + triangleVertices[1].x + triangleVertices[2].x) / 3;\n    const centerY = (triangleVertices[0].y + triangleVertices[1].y + triangleVertices[2].y) / 3;\n    \n    return { x: centerX, y: centerY };\n  }\n\n  /**\n   * 检查点是否在指定象限内\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {Object} bounds - 象限边界\n   */\n  isPointInQuadrant(x, y, bounds) {\n    return x >= bounds.minX && x <= bounds.maxX && \n           y >= bounds.minY && y <= bounds.maxY;\n  }\n  \n  /**\n   * 计算基于几何体尺寸的分解位置\n   */\n  calculateExplodedPosition(block) {\n    // 使用固定的分解位置坐标\n    const offsets = [\n      { x: 1, y: 1.5, z: 1 },    // 第一象限\n      { x: 1, y: -2.5, z: 1 },   // 第二象限\n      { x: 1, y: -2.5, z: -1 },  // 第三象限\n      { x: 1, y: 1.5, z: -1 }    // 第四象限\n    ];\n    \n    // 确保索引有效\n    if (block.quadrantIndex >= 0 && block.quadrantIndex < offsets.length) {\n      const offset = offsets[block.quadrantIndex];\n      return {\n        x: block.originalPosition.x + offset.x,\n        y: block.originalPosition.y + offset.y,\n        z: block.originalPosition.z + offset.z\n      };\n    }\n    \n    // 回退到原始位置\n    return block.originalPosition;\n  }\n  \n  /**\n   * 切换爆炸效果\n   */\n  toggle(explode = !this.exploded) {\n    this.exploded = explode;\n    \n    // 停止所有正在进行的动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    if (this.exploded) {\n      // 爆炸：隐藏原始网格，显示积木块\n      this.originalMesh.visible = false;\n      this.explodeBlocks();\n    } else {\n      // 合并：重新组装积木块，显示原始网格\n      this.assembleBlocks();\n    }\n    \n    return this.exploded;\n  }\n  \n  /**\n   * 分解积木块\n   */\n  explodeBlocks() {\n    this.animateBlocks(true); // true表示分解\n  }\n  \n  /**\n   * 组装积木块\n   */\n  assembleBlocks() {\n    this.animateBlocks(false); // false表示组装\n  }\n  \n  /**\n   * 统一的动画处理函数\n   * @param {boolean} explode - true为分解，false为组装\n   */\n  animateBlocks(explode) {\n    let completedAnimations = 0;\n    const totalAnimations = this.blocks.length;\n    \n    this.blocks.forEach((block, index) => {\n      // 显示或隐藏积木块的逻辑\n      if (explode) {\n        block.mesh.visible = true;\n      }\n      \n      // 计算目标位置和旋转\n      const targetPosition = explode \n        ? this.calculateExplodedPosition(block) \n        : block.originalPosition;\n      const targetRotation = block.originalRotation;\n      \n      // 统一延迟时间：分解使用100ms间隔\n      const delay = explode ? index * 100 : (this.blocks.length - index - 1) * 80;\n      \n      // 统一动画持续时间：合并动画更快\n      const duration = explode ? this.config.animationDuration : this.config.animationDuration * 0.8;\n      \n      // 统一缓动函数：分解用Back.Out，合并用Back.In\n      const easing = explode ? tween_esm/* Easing */.GS.Back.Out : tween_esm/* Easing */.GS.Back.In;\n      \n      // 创建位置动画\n      const positionTween = new tween_esm/* Tween */.K(block.mesh.position, tweenGroup)\n        .to({\n          x: targetPosition.x,\n          y: targetPosition.y,\n          z: targetPosition.z\n        }, duration)\n        .delay(delay)\n        .easing(easing)\n        .onComplete(() => {\n          if (!explode) {\n            completedAnimations++;\n            // 组装完成后的处理\n            if (completedAnimations === totalAnimations) {\n              this.blocks.forEach(b => b.mesh.visible = false);\n              this.originalMesh.visible = this.originalVisible;\n              console.log('超椭圆组装完成，显示原始网格');\n            }\n          }\n        })\n        .start();\n      \n      // 创建旋转动画\n      const rotationTween = new tween_esm/* Tween */.K(block.mesh.rotation, tweenGroup)\n        .to({\n          x: targetRotation.x,\n          y: targetRotation.y,\n          z: targetRotation.z\n        }, duration)\n        .delay(delay)\n        .easing(easing)\n        .start();\n      \n      this.tweens.push(positionTween, rotationTween);\n    });\n  }\n  \n  /**\n   * 清理资源\n   */\n  dispose() {\n    // 停止所有动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    // 移除积木块\n    this.blocks.forEach(block => {\n      this.parentGroup.remove(block.mesh);\n      block.mesh.geometry.dispose();\n      // 材质可能是共享的，不直接dispose\n      if (block.mesh.material !== this.originalMesh.material) {\n        block.mesh.material.dispose();\n      }\n    });\n    \n    this.blocks = [];\n  }\n  \n  /**\n   * 获取爆炸状态\n   */\n  isExploded() {\n    return this.exploded;\n  }\n}\n\n;// ./src/components/CRTShell.js\n\n\n\n\n\n\n\n\n/**\n * CRT正方形透明外壳组件\n * 用于包裹整个CRT模型的透明保护壳\n */\nclass CRTShell {\n  constructor() {\n    this.shellGroup = new three_module/* Group */.YJl();\n    this.shellGroup.name = 'CRTShell';\n    \n    // 创建两个圆柱体的材质\n    this.cylinder1Material = null;\n    this.cylinder2Material = null;\n    \n    // 旋转曲线连接\n    this.cylinderConnection = null;\n    \n    // 超椭圆形状渐变\n    this.superellipseTransition = null;\n    \n    // cylinder2爆炸效果\n    this.cylinder2ExplodeEffect = null;\n    \n    // 旋转曲线连接爆炸效果\n    this.rotationCurveExplodeEffect = null;\n    \n    // 超椭圆形状渐变爆炸效果\n    this.superellipseExplodeEffect = null;\n    \n    this.createShell();\n  }\n\n  /**\n   * 创建正方形透明外壳（删除靠近荧光屏的右侧面）\n   */\n  createShell() {\n    // 立方体外壳材质已删除，不再需要\n    // this.shellMaterial = new THREE.MeshPhongMaterial({\n    //   transparent: true,\n    //   opacity: CONFIG.shell.opacity,\n    //   side: THREE.DoubleSide,\n    //   depthWrite: false\n    // });\n\n    // 立方体外壳已被删除 - 只保留圆柱体和过渡效果\n    // const shellGeometry = this.createOpenBoxGeometry(\n    //   CONFIG.shell.size.width,\n    //   CONFIG.shell.size.height,\n    //   CONFIG.shell.size.depth\n    // );\n    // const shell = new THREE.Mesh(shellGeometry, this.shellMaterial);\n    // \n    // // 设置位置居中\n    // shell.position.set(4.5, 0, 0); // 稍微向前偏移以居中包裹CRT\n    // \n    // this.shellGroup.add(shell);\n    \n    // 创建两个独立的圆柱体\n    this.createCylinder1();\n    this.createCylinder2();\n    \n    // 创建旋转曲线连接\n    this.createRotationCurveConnection();\n    \n    // 创建超椭圆形状渐变\n    this.createSuperellipseTransition();\n    \n    // 设置初始可见性\n    this.shellGroup.visible = CONFIG.shell.visible;\n  }\n\n  /**\n   * 创建开放式盒子几何体（去掉右侧面，即X正方向的面）\n   * @param {number} width - 宽度\n   * @param {number} height - 高度 \n   * @param {number} depth - 深度\n   * @returns {THREE.BufferGeometry} 几何体\n   */\n  createOpenBoxGeometry(width, height, depth) {\n    const geometry = new three_module/* BufferGeometry */.LoY();\n    \n    const w = width / 2;\n    const h = height / 2;\n    const d = depth / 2;\n    \n    // 定义顶点位置 - 立方体的8个顶点\n    const vertices = [\n      // 左侧面 (X = -w)\n      -w, -h, -d,  -w, -h,  d,  -w,  h,  d,\n      -w, -h, -d,  -w,  h,  d,  -w,  h, -d,\n      \n      // 右侧面被删除 - 不添加这个面\n      \n      // 顶面 (Y = h)\n      -w,  h, -d,  -w,  h,  d,   w,  h,  d,\n      -w,  h, -d,   w,  h,  d,   w,  h, -d,\n      \n      // 底面 (Y = -h)\n      -w, -h, -d,   w, -h, -d,   w, -h,  d,\n      -w, -h, -d,   w, -h,  d,  -w, -h,  d,\n      \n      // 前面 (Z = d)\n      -w, -h,  d,   w, -h,  d,   w,  h,  d,\n      -w, -h,  d,   w,  h,  d,  -w,  h,  d,\n      \n      // 后面 (Z = -d)\n      -w, -h, -d,  -w,  h, -d,   w,  h, -d,\n      -w, -h, -d,   w,  h, -d,   w, -h, -d\n    ];\n    \n    // 定义法向量\n    const normals = [\n      // 左侧面\n      -1, 0, 0,  -1, 0, 0,  -1, 0, 0,\n      -1, 0, 0,  -1, 0, 0,  -1, 0, 0,\n      \n      // 顶面\n      0, 1, 0,  0, 1, 0,  0, 1, 0,\n      0, 1, 0,  0, 1, 0,  0, 1, 0,\n      \n      // 底面\n      0, -1, 0,  0, -1, 0,  0, -1, 0,\n      0, -1, 0,  0, -1, 0,  0, -1, 0,\n      \n      // 前面\n      0, 0, 1,  0, 0, 1,  0, 0, 1,\n      0, 0, 1,  0, 0, 1,  0, 0, 1,\n      \n      // 后面\n      0, 0, -1,  0, 0, -1,  0, 0, -1,\n      0, 0, -1,  0, 0, -1,  0, 0, -1\n    ];\n    \n    // 定义UV坐标\n    const uvs = [\n      // 左侧面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1,\n      \n      // 顶面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1,\n      \n      // 底面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1,\n      \n      // 前面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1,\n      \n      // 后面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1\n    ];\n    \n    geometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    geometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    geometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    \n    return geometry;\n  }\n\n  /**\n   * 创建开放式圆柱体几何体（沿X轴方向，去掉右端圆形面）\n   * @param {number} radius - 圆柱体半径\n   * @param {number} height - 圆柱体长度（沿X轴）\n   * @param {number} radialSegments - 径向分段数\n   * @returns {THREE.BufferGeometry} 几何体\n   */\n  createOpenCylinderGeometry(radius, height, radialSegments = 32) {\n    const geometry = new three_module/* BufferGeometry */.LoY();\n    \n    const halfHeight = height / 2;\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    \n    // 生成圆柱体侧面顶点（沿X轴方向）\n    for (let i = 0; i <= radialSegments; i++) {\n      const angle = (i / radialSegments) * Math.PI * 2;\n      const y = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      \n      // 左端顶点\n      vertices.push(-halfHeight, y, z);\n      normals.push(0, y / radius, z / radius); // 径向法向量\n      uvs.push(i / radialSegments, 0);\n      \n      // 右端顶点\n      vertices.push(halfHeight, y, z);\n      normals.push(0, y / radius, z / radius); // 径向法向量\n      uvs.push(i / radialSegments, 1);\n    }\n    \n    // 生成圆柱体侧面索引\n    for (let i = 0; i < radialSegments; i++) {\n      const left1 = i * 2;\n      const right1 = i * 2 + 1;\n      const left2 = (i + 1) * 2;\n      const right2 = (i + 1) * 2 + 1;\n      \n      // 每个面片由两个三角形组成\n      indices.push(left1, right1, left2);\n      indices.push(right1, right2, left2);\n    }\n    \n    // 只添加左端圆形面（X轴负方向），跳过右端圆形面\n    const centerLeftIndex = vertices.length / 3;\n    vertices.push(-halfHeight, 0, 0); // 左端中心点\n    normals.push(-1, 0, 0);\n    uvs.push(0.5, 0.5);\n    \n    // 生成左端圆形面的顶点和索引\n    for (let i = 0; i < radialSegments; i++) {\n      const angle = (i / radialSegments) * Math.PI * 2;\n      const y = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      \n      vertices.push(-halfHeight, y, z);\n      normals.push(-1, 0, 0);\n      uvs.push((y / radius + 1) * 0.5, (z / radius + 1) * 0.5);\n      \n      // 连接到中心点的三角形\n      const currentIndex = centerLeftIndex + 1 + i;\n      const nextIndex = centerLeftIndex + 1 + ((i + 1) % radialSegments);\n      indices.push(centerLeftIndex, currentIndex, nextIndex);\n    }\n    \n    // 注意：我们故意不添加右端圆形面，以实现开放式设计\n    \n    geometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    geometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    geometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    geometry.setIndex(indices);\n    \n    return geometry;\n  }\n\n  /**\n   * 创建第一个圆柱体组件\n   */\n  createCylinder1() {\n    const config = CONFIG.shell.cylinder1;\n    \n    // 创建第一个圆柱体的独立材质\n    this.cylinder1Material = new three_module/* MeshPhongMaterial */.tXL({\n      color: parseInt(config.color),\n      transparent: true,\n      opacity: config.opacity,\n      side: three_module/* DoubleSide */.$EB,\n      depthWrite: false\n    });\n    \n    // 创建圆柱体几何体（使用独立的半径参数）\n    const cylinder1Geometry = new three_module/* CylinderGeometry */.Ho_(config.radius, config.radius, config.height, 32);\n    const cylinder1 = new three_module/* Mesh */.eaF(cylinder1Geometry, this.cylinder1Material);\n    \n    // 设置圆柱体位置和旋转\n    cylinder1.position.set(config.position.x, config.position.y, config.position.z);\n    cylinder1.rotation.set(config.rotation.x, config.rotation.y, config.rotation.z);\n    \n    // 设置可见性\n    cylinder1.visible = config.visible;\n    \n    // 添加到组中\n    this.shellGroup.add(cylinder1);\n    \n    // 保存圆柱体引用以便后续操作\n    this.cylinder1 = cylinder1;\n  }\n\n  /**\n   * 创建第二个圆柱体组件（去掉右侧圆形面）\n   */\n  createCylinder2() {\n    const config = CONFIG.shell.cylinder2;\n    \n    // 使用统一组件材质以确保颜色一致性\n    this.cylinder2Material = new three_module/* MeshStandardMaterial */._4j({\n      color: parseInt(config.color),\n      transparent: true,\n      opacity: config.opacity,\n      side: three_module/* DoubleSide */.$EB,\n      depthWrite: false,\n      metalness: 0.6,\n      roughness: 0.3\n    });\n    \n    // 创建开放式圆柱体几何体（去掉右侧圆形面）\n    const cylinder2Geometry = this.createOpenCylinderGeometry(config.radius, config.height, 32);\n    const cylinder2 = new three_module/* Mesh */.eaF(cylinder2Geometry, this.cylinder2Material);\n    \n    // 设置圆柱体位置和旋转\n    cylinder2.position.set(config.position.x, config.position.y, config.position.z);\n    cylinder2.rotation.set(config.rotation.x, config.rotation.y, config.rotation.z);\n    \n    // 设置可见性\n    cylinder2.visible = config.visible;\n    \n    // 添加到组中\n    this.shellGroup.add(cylinder2);\n    \n    // 保存圆柱体引用以便后续操作\n    this.cylinder2 = cylinder2;\n    \n    // 创建cylinder2的爆炸效果\n    this.createCylinder2ExplodeEffect();\n  }\n\n  /**\n   * 创建旋转曲线连接\n   */\n  createRotationCurveConnection() {\n    const config = CONFIG.shell.rotationCurveConnection;\n    \n    if (!config || !config.visible) {\n      return;\n    }\n    \n    \n    // 创建圆柱体连接\n    this.cylinderConnection = new CylinderConnection(\n      CONFIG.shell.cylinder1,\n      CONFIG.shell.cylinder2,\n      config\n    );\n    \n    // 添加到组中\n    this.shellGroup.add(this.cylinderConnection.getConnection());\n    \n    // 创建旋转曲线连接爆炸效果\n    this.createConnectionExplodeEffect();\n  }\n\n  /**\n   * 创建超椭圆形状渐变\n   */\n  createSuperellipseTransition() {\n    const config = CONFIG.shell.superellipseTransition;\n    \n    if (!config || !config.visible) {\n      return;\n    }\n    \n    \n    // 准备起始配置（第一个圆柱体）\n    const startConfig = {\n      position: CONFIG.shell.cylinder1.position,\n      radius: CONFIG.shell.cylinder1.radius\n    };\n    \n    // 准备结束配置（适配荧光屏尺寸）\n    const endConfig = {\n      position: { x: 4.5, y: 0, z: 0 }, // 立方体中心位置\n      size: {\n        width: CONFIG.components.screen.width,   // 荧光屏宽度：4\n        height: CONFIG.components.screen.height, // 荧光屏高度：3\n        depth: CONFIG.shell.size.depth           // 保持原深度：4\n      }\n    };\n    \n    // 创建形状渐变\n    this.superellipseTransition = new SuperellipseTransition(\n      startConfig,\n      endConfig,\n      config\n    );\n    \n    // 添加到组中\n    this.shellGroup.add(this.superellipseTransition.getTransition());\n    \n    // 创建超椭圆形状渐变爆炸效果\n    this.createSuperellipseExplodeEffect();\n  }\n\n  /**\n   * 创建旋转曲线连接爆炸效果\n   */\n  createConnectionExplodeEffect() {\n    if (!this.cylinderConnection) {\n      console.warn('CylinderConnection not found, cannot create explode effect');\n      return;\n    }\n    \n    // 清理旧的爆炸效果实例\n    if (this.rotationCurveExplodeEffect) {\n      this.rotationCurveExplodeEffect.dispose();\n      this.rotationCurveExplodeEffect = null;\n    }\n    \n    // 获取连接网格（第一个连接网格）\n    const connectionMeshes = this.cylinderConnection.connectionMeshes;\n    if (!connectionMeshes || connectionMeshes.length === 0) {\n      console.warn('No connection meshes found');\n      return;\n    }\n    \n    // 创建爆炸效果实例\n    this.rotationCurveExplodeEffect = new RotationCurveExplodeEffect(\n      connectionMeshes[0], // 使用第一个连接网格\n      this.shellGroup\n    );\n  }\n\n  /**\n   * 创建cylinder2爆炸效果\n   */\n  createCylinder2ExplodeEffect() {\n    if (!this.cylinder2) {\n      console.warn('Cylinder2 not found, cannot create explode effect');\n      return;\n    }\n    \n    // 清理旧的爆炸效果实例\n    if (this.cylinder2ExplodeEffect) {\n      this.cylinder2ExplodeEffect.dispose();\n      this.cylinder2ExplodeEffect = null;\n    }\n    \n    // 创建爆炸效果实例\n    this.cylinder2ExplodeEffect = new Cylinder2ExplodeEffect(\n      this.cylinder2,\n      this.shellGroup\n    );\n  }\n\n  /**\n   * 创建超椭圆形状渐变爆炸效果\n   */\n  createSuperellipseExplodeEffect() {\n    if (!this.superellipseTransition) {\n      console.warn('SuperellipseTransition not found, cannot create explode effect');\n      return;\n    }\n    \n    // 清理旧的爆炸效果实例\n    if (this.superellipseExplodeEffect) {\n      this.superellipseExplodeEffect.dispose();\n      this.superellipseExplodeEffect = null;\n    }\n    \n    // 获取超椭圆的网格（第一个网格）\n    const transitionMeshes = this.superellipseTransition.meshes;\n    if (!transitionMeshes || transitionMeshes.length === 0) {\n      console.warn('No superellipse meshes found');\n      return;\n    }\n    \n    // 创建爆炸效果实例\n    this.superellipseExplodeEffect = new SuperellipseExplodeEffect(\n      transitionMeshes[0], // 使用第一个网格\n      this.shellGroup\n    );\n  }\n\n  /**\n   * 切换cylinder2爆炸效果\n   * @param {boolean} explode - 是否爆炸，默认为切换状态\n   * @returns {boolean} 当前爆炸状态\n   */\n  toggleCylinder2Explode(explode) {\n    if (!this.cylinder2ExplodeEffect) {\n      console.warn('Cylinder2 explode effect not initialized');\n      return false;\n    }\n    \n    return this.cylinder2ExplodeEffect.toggle(explode);\n  }\n\n  /**\n   * 获取cylinder2爆炸状态\n   * @returns {boolean} 是否处于爆炸状态\n   */\n  isCylinder2Exploded() {\n    return this.cylinder2ExplodeEffect ? this.cylinder2ExplodeEffect.isExploded() : false;\n  }\n\n  /**\n   * 切换旋转曲线连接爆炸效果\n   * @param {boolean} explode - 是否爆炸，默认为切换状态\n   * @returns {boolean} 当前爆炸状态\n   */\n  toggleConnectionExplode(explode) {\n    if (!this.rotationCurveExplodeEffect) {\n      console.warn('RotationCurve explode effect not initialized');\n      return false;\n    }\n    \n    return this.rotationCurveExplodeEffect.toggle(explode);\n  }\n\n  /**\n   * 获取旋转曲线连接爆炸状态\n   * @returns {boolean} 是否处于爆炸状态\n   */\n  isConnectionExploded() {\n    return this.rotationCurveExplodeEffect ? this.rotationCurveExplodeEffect.isExploded() : false;\n  }\n\n  /**\n   * 切换超椭圆形状渐变爆炸效果\n   * @param {boolean} explode - 是否爆炸，默认为切换状态\n   * @returns {boolean} 当前爆炸状态\n   */\n  toggleSuperellipseExplode(explode) {\n    if (!this.superellipseExplodeEffect) {\n      console.warn('Superellipse explode effect not initialized');\n      return false;\n    }\n    \n    return this.superellipseExplodeEffect.toggle(explode);\n  }\n\n  /**\n   * 获取超椭圆形状渐变爆炸状态\n   * @returns {boolean} 是否处于爆炸状态\n   */\n  isSuperellipseExploded() {\n    return this.superellipseExplodeEffect ? this.superellipseExplodeEffect.isExploded() : false;\n  }\n\n  /**\n   * 获取外壳组\n   */\n  getShell() {\n    return this.shellGroup;\n  }\n\n  /**\n   * 设置外壳可见性\n   */\n  setVisible(visible) {\n    this.shellGroup.visible = visible;\n  }\n\n  /**\n   * 设置外壳透明度\n   */\n  setOpacity(opacity) {\n    // 立方体外壳已删除，此方法不再有效\n    // this.shellMaterial.opacity = Math.max(0, Math.min(1, opacity));\n  }\n\n\n  /**\n   * 设置外壳位置\n   */\n  setPosition(x, y, z) {\n    this.shellGroup.position.set(x, y, z);\n  }\n\n  /**\n   * 设置第一个圆柱体位置\n   */\n  setCylinder1Position(x, y, z) {\n    if (this.cylinder1) {\n      this.cylinder1.position.set(x, y, z);\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体位置\n   */\n  setCylinder2Position(x, y, z) {\n    if (this.cylinder2) {\n      this.cylinder2.position.set(x, y, z);\n    }\n  }\n\n  /**\n   * 获取外壳当前位置\n   */\n  getPosition() {\n    return this.shellGroup.position.clone();\n  }\n\n  /**\n   * 更新动画 - 外壳设置为静态，无动画效果\n   */\n  update(deltaTime) {\n    // 外壳保持静态，不进行任何动画更新\n    // 如果需要动画效果，可以在这里添加\n  }\n\n  /**\n   * 更新配置 - 实现响应式配置更新\n   */\n  updateConfig() {\n    // 立方体外壳材质已删除，不再需要更新\n    // if (this.shellMaterial) {\n    //   this.shellMaterial.opacity = CONFIG.shell.opacity;\n    // }\n    \n    // 更新第一个圆柱体配置\n    if (this.cylinder1Material && CONFIG.shell.cylinder1) {\n      this.cylinder1Material.color.setHex(parseInt(CONFIG.shell.cylinder1.color));\n      this.cylinder1Material.opacity = CONFIG.shell.cylinder1.opacity;\n    }\n    if (this.cylinder1 && CONFIG.shell.cylinder1) {\n      this.cylinder1.visible = CONFIG.shell.cylinder1.visible;\n      this.cylinder1.position.set(\n        CONFIG.shell.cylinder1.position.x,\n        CONFIG.shell.cylinder1.position.y,\n        CONFIG.shell.cylinder1.position.z\n      );\n      this.cylinder1.rotation.set(\n        CONFIG.shell.cylinder1.rotation.x,\n        CONFIG.shell.cylinder1.rotation.y,\n        CONFIG.shell.cylinder1.rotation.z\n      );\n    }\n    \n    // 更新第二个圆柱体配置\n    if (this.cylinder2Material && CONFIG.shell.cylinder2) {\n      this.cylinder2Material.color.setHex(parseInt(CONFIG.shell.cylinder2.color));\n      this.cylinder2Material.opacity = CONFIG.shell.cylinder2.opacity;\n    }\n    if (this.cylinder2 && CONFIG.shell.cylinder2) {\n      this.cylinder2.visible = CONFIG.shell.cylinder2.visible;\n      this.cylinder2.position.set(\n        CONFIG.shell.cylinder2.position.x,\n        CONFIG.shell.cylinder2.position.y,\n        CONFIG.shell.cylinder2.position.z\n      );\n      this.cylinder2.rotation.set(\n        CONFIG.shell.cylinder2.rotation.x,\n        CONFIG.shell.cylinder2.rotation.y,\n        CONFIG.shell.cylinder2.rotation.z\n      );\n    }\n    \n    // 更新旋转曲线连接配置\n    if (this.cylinderConnection && CONFIG.shell.rotationCurveConnection) {\n      this.cylinderConnection.updateConfig(\n        CONFIG.shell.cylinder1,\n        CONFIG.shell.cylinder2,\n        CONFIG.shell.rotationCurveConnection\n      );\n    } else if (!this.cylinderConnection && CONFIG.shell.rotationCurveConnection?.visible) {\n      // 如果连接不存在但配置中要求显示，则创建连接\n      // 注意：这里不应该重复创建，因为可能导致重复模型\n      console.warn('CylinderConnection not found, but config requires it to be visible');\n    }\n    \n    // 更新超椭圆形状渐变配置\n    if (this.superellipseTransition && CONFIG.shell.superellipseTransition) {\n      const startConfig = {\n        position: CONFIG.shell.cylinder1.position,\n        radius: CONFIG.shell.cylinder1.radius\n      };\n      const endConfig = {\n        position: { x: 4.5, y: 0, z: 0 },\n        size: {\n          width: CONFIG.components.screen.width,   // 荧光屏宽度：4\n          height: CONFIG.components.screen.height, // 荧光屏高度：3\n          depth: CONFIG.shell.size.depth           // 保持原深度：4\n        }\n      };\n      this.superellipseTransition.updateConfig(\n        startConfig,\n        endConfig,\n        CONFIG.shell.superellipseTransition\n      );\n    } else if (!this.superellipseTransition && CONFIG.shell.superellipseTransition?.visible) {\n      // 如果形状渐变不存在但配置中要求显示，则创建渐变\n      // 注意：这里不应该重复创建，因为可能导致重复模型\n      console.warn('SuperellipseTransition not found, but config requires it to be visible');\n    }\n    \n    // 更新可见性\n    this.shellGroup.visible = CONFIG.shell.visible;\n  }\n\n  /**\n   * 设置第一个圆柱体旋转\n   */\n  setCylinder1Rotation(x, y, z) {\n    if (this.cylinder1) {\n      this.cylinder1.rotation.set(x, y, z);\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体旋转\n   */\n  setCylinder2Rotation(x, y, z) {\n    if (this.cylinder2) {\n      this.cylinder2.rotation.set(x, y, z);\n    }\n  }\n\n  /**\n   * 获取第一个圆柱体当前旋转\n   */\n  getCylinder1Rotation() {\n    return this.cylinder1 ? this.cylinder1.rotation.clone() : new three_module/* Euler */.O9p();\n  }\n\n  /**\n   * 获取第二个圆柱体当前旋转\n   */\n  getCylinder2Rotation() {\n    return this.cylinder2 ? this.cylinder2.rotation.clone() : new three_module/* Euler */.O9p();\n  }\n\n  /**\n   * 设置第一个圆柱体可见性\n   */\n  setCylinder1Visible(visible) {\n    if (this.cylinder1) {\n      this.cylinder1.visible = visible;\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体可见性\n   */\n  setCylinder2Visible(visible) {\n    if (this.cylinder2) {\n      this.cylinder2.visible = visible;\n    }\n  }\n\n  /**\n   * 设置第一个圆柱体颜色\n   */\n  setCylinder1Color(color) {\n    if (this.cylinder1Material) {\n      this.cylinder1Material.color.setHex(color);\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体颜色\n   */\n  setCylinder2Color(color) {\n    if (this.cylinder2Material) {\n      this.cylinder2Material.color.setHex(color);\n    }\n  }\n\n  /**\n   * 设置第一个圆柱体透明度\n   */\n  setCylinder1Opacity(opacity) {\n    if (this.cylinder1Material) {\n      this.cylinder1Material.opacity = Math.max(0, Math.min(1, opacity));\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体透明度\n   */\n  setCylinder2Opacity(opacity) {\n    if (this.cylinder2Material) {\n      this.cylinder2Material.opacity = Math.max(0, Math.min(1, opacity));\n    }\n  }\n\n  /**\n   * 设置旋转曲线连接的位置偏移\n   * @param {number} x - X轴偏移\n   * @param {number} y - Y轴偏移\n   * @param {number} z - Z轴偏移\n   */\n  setConnectionPositionOffset(x, y, z) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setPositionOffset(x, y, z);\n    }\n  }\n\n  /**\n   * 设置旋转曲线连接的旋转偏移\n   * @param {number} x - X轴旋转偏移（弧度）\n   * @param {number} y - Y轴旋转偏移（弧度）\n   * @param {number} z - Z轴旋转偏移（弧度）\n   */\n  setConnectionRotationOffset(x, y, z) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setRotationOffset(x, y, z);\n    }\n  }\n\n  /**\n   * 直接设置旋转曲线连接的位置\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {number} z - Z坐标\n   */\n  setConnectionPosition(x, y, z) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setPosition(x, y, z);\n    }\n  }\n\n  /**\n   * 直接设置旋转曲线连接的旋转\n   * @param {number} x - X轴旋转（弧度）\n   * @param {number} y - Y轴旋转（弧度）\n   * @param {number} z - Z轴旋转（弧度）\n   */\n  setConnectionRotation(x, y, z) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setRotation(x, y, z);\n    }\n  }\n\n  /**\n   * 获取旋转曲线连接的当前位置\n   */\n  getConnectionPosition() {\n    return this.cylinderConnection ? this.cylinderConnection.getPosition() : new three_module/* Vector3 */.Pq0();\n  }\n\n  /**\n   * 获取旋转曲线连接的当前旋转\n   */\n  getConnectionRotation() {\n    return this.cylinderConnection ? this.cylinderConnection.getRotation() : new three_module/* Euler */.O9p();\n  }\n\n  /**\n   * 获取旋转曲线连接的位置偏移\n   */\n  getConnectionPositionOffset() {\n    return this.cylinderConnection ? this.cylinderConnection.getPositionOffset() : { x: 0, y: 0, z: 0 };\n  }\n\n  /**\n   * 获取旋转曲线连接的旋转偏移\n   */\n  getConnectionRotationOffset() {\n    return this.cylinderConnection ? this.cylinderConnection.getRotationOffset() : { x: 0, y: 0, z: 0 };\n  }\n\n  /**\n   * 设置旋转曲线连接可见性\n   */\n  setConnectionVisible(visible) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setVisible(visible);\n    }\n  }\n\n  /**\n   * 设置旋转曲线连接颜色\n   */\n  setConnectionColor(color) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setColor(color);\n    }\n  }\n\n  /**\n   * 设置旋转曲线连接透明度\n   */\n  setConnectionOpacity(opacity) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setOpacity(opacity);\n    }\n  }\n\n  /**\n   * 设置超椭圆形状渐变的位置偏移\n   * @param {number} x - X轴偏移\n   * @param {number} y - Y轴偏移\n   * @param {number} z - Z轴偏移\n   */\n  setTransitionPositionOffset(x, y, z) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setPositionOffset(x, y, z);\n    }\n  }\n\n  /**\n   * 设置超椭圆形状渐变的旋转偏移\n   * @param {number} x - X轴旋转偏移（弧度）\n   * @param {number} y - Y轴旋转偏移（弧度）\n   * @param {number} z - Z轴旋转偏移（弧度）\n   */\n  setTransitionRotationOffset(x, y, z) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setRotationOffset(x, y, z);\n    }\n  }\n\n  /**\n   * 直接设置超椭圆形状渐变的位置\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {number} z - Z坐标\n   */\n  setTransitionPosition(x, y, z) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setPosition(x, y, z);\n    }\n  }\n\n  /**\n   * 直接设置超椭圆形状渐变的旋转\n   * @param {number} x - X轴旋转（弧度）\n   * @param {number} y - Y轴旋转（弧度）\n   * @param {number} z - Z轴旋转（弧度）\n   */\n  setTransitionRotation(x, y, z) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setRotation(x, y, z);\n    }\n  }\n\n  /**\n   * 获取超椭圆形状渐变的当前位置\n   */\n  getTransitionPosition() {\n    return this.superellipseTransition ? this.superellipseTransition.getPosition() : new three_module/* Vector3 */.Pq0();\n  }\n\n  /**\n   * 获取超椭圆形状渐变的当前旋转\n   */\n  getTransitionRotation() {\n    return this.superellipseTransition ? this.superellipseTransition.getRotation() : new three_module/* Euler */.O9p();\n  }\n\n  /**\n   * 获取超椭圆形状渐变的位置偏移\n   */\n  getTransitionPositionOffset() {\n    return this.superellipseTransition ? this.superellipseTransition.getPositionOffset() : { x: 0, y: 0, z: 0 };\n  }\n\n  /**\n   * 获取超椭圆形状渐变的旋转偏移\n   */\n  getTransitionRotationOffset() {\n    return this.superellipseTransition ? this.superellipseTransition.getRotationOffset() : { x: 0, y: 0, z: 0 };\n  }\n\n  /**\n   * 设置超椭圆形状渐变可见性\n   */\n  setTransitionVisible(visible) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setVisible(visible);\n    }\n  }\n\n  /**\n   * 设置超椭圆形状渐变颜色\n   */\n  setTransitionColor(color) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setColor(color);\n    }\n  }\n\n  /**\n   * 设置超椭圆形状渐变透明度\n   */\n  setTransitionOpacity(opacity) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setOpacity(opacity);\n    }\n  }\n\n  /**\n   * 动态更新超椭圆指数（用于动画效果）\n   * @param {number} startExponent - 起始指数（圆形：2.0）\n   * @param {number} endExponent - 结束指数（方形：8.0+）\n   */\n  updateTransitionExponents(startExponent, endExponent) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.updateExponents(startExponent, endExponent);\n    }\n  }\n\n  /**\n   * 销毁资源\n   */\n  dispose() {\n    // 立方体外壳材质已删除，不需要清理\n    // if (this.shellMaterial) {\n    //   this.shellMaterial.dispose();\n    // }\n    \n    if (this.cylinder1Material) {\n      this.cylinder1Material.dispose();\n    }\n    \n    if (this.cylinder2Material) {\n      this.cylinder2Material.dispose();\n    }\n    \n    // 清理旋转曲线连接\n    if (this.cylinderConnection) {\n      this.cylinderConnection.dispose();\n      this.cylinderConnection = null;\n    }\n    \n    // 清理超椭圆形状渐变\n    if (this.superellipseTransition) {\n      this.superellipseTransition.dispose();\n      this.superellipseTransition = null;\n    }\n    \n    // 清理cylinder2爆炸效果\n    if (this.cylinder2ExplodeEffect) {\n      this.cylinder2ExplodeEffect.dispose();\n      this.cylinder2ExplodeEffect = null;\n    }\n    \n    // 清理旋转曲线连接爆炸效果\n    if (this.rotationCurveExplodeEffect) {\n      this.rotationCurveExplodeEffect.dispose();\n      this.rotationCurveExplodeEffect = null;\n    }\n    \n    // 清理超椭圆形状渐变爆炸效果\n    if (this.superellipseExplodeEffect) {\n      this.superellipseExplodeEffect.dispose();\n      this.superellipseExplodeEffect = null;\n    }\n    \n    this.shellGroup.traverse((child) => {\n      if (child.geometry) child.geometry.dispose();\n      if (child.material) child.material.dispose();\n    });\n    \n    // 清理圆柱体引用\n    this.cylinder1 = null;\n    this.cylinder2 = null;\n  }\n}\n\n;// ./src/materials/MaterialManager.js\n\r\n\r\n\r\n/**\r\n * 材质管理器类\r\n * 负责创建和管理所有3D材质，包括贴图加载\r\n */\r\nclass MaterialManager {\r\n  constructor() {\r\n    this.textureLoader = new three_module/* TextureLoader */.Tap();\r\n    this.materials = {};\r\n    this.textures = {};\r\n  }\r\n\r\n  /**\r\n   * 初始化所有材质\r\n   * @returns {Promise} 返回Promise，在所有贴图加载完成后解析\r\n   */\r\n  async initializeMaterials() {\r\n    console.log('正在初始化材质...');\r\n    \r\n    try {\r\n      // 加载金属贴图\r\n      await this.loadMetalTextures();\r\n      \r\n      // 创建所有材质\r\n      this.createMetalMaterial();\r\n      this.createPlateMaterial();\r\n      this.createScreenMaterial();\r\n      this.createGlowPointMaterial();\r\n      \r\n      console.log('材质初始化完成');\r\n      return this.materials;\r\n    } catch (error) {\r\n      console.error('材质初始化失败:', error);\r\n      // 如果贴图加载失败，创建无贴图的材质\r\n      this.createFallbackMaterials();\r\n      return this.materials;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载金属贴图\r\n   * @returns {Promise} 贴图加载Promise\r\n   */\r\n  async loadMetalTextures() {\r\n    const loadPromises = [];\r\n    \r\n    // 加载电子枪金属贴图\r\n    const metalConfig = CONFIG.materials.metal;\r\n    if (metalConfig.textures) {\r\n      if (metalConfig.textures.map) {\r\n        loadPromises.push(this.loadTexture('metalMap', metalConfig.textures.map));\r\n      }\r\n      \r\n      if (metalConfig.textures.normalMap) {\r\n        loadPromises.push(this.loadTexture('metalNormal', metalConfig.textures.normalMap));\r\n      }\r\n      \r\n      if (metalConfig.textures.roughnessMap) {\r\n        loadPromises.push(this.loadTexture('metalRoughness', metalConfig.textures.roughnessMap));\r\n      }\r\n      \r\n      if (metalConfig.textures.metalnessMap) {\r\n        loadPromises.push(this.loadTexture('metalMetalness', metalConfig.textures.metalnessMap));\r\n      }\r\n    }\r\n    \r\n    // 加载偏转板贴图\r\n    const plateConfig = CONFIG.materials.plate;\r\n    if (plateConfig.textures) {\r\n      if (plateConfig.textures.map) {\r\n        loadPromises.push(this.loadTexture('plateMap', plateConfig.textures.map));\r\n      }\r\n      \r\n      if (plateConfig.textures.normalMap) {\r\n        loadPromises.push(this.loadTexture('plateNormal', plateConfig.textures.normalMap));\r\n      }\r\n      \r\n      if (plateConfig.textures.roughnessMap) {\r\n        loadPromises.push(this.loadTexture('plateRoughness', plateConfig.textures.roughnessMap));\r\n      }\r\n      \r\n      if (plateConfig.textures.metalnessMap) {\r\n        loadPromises.push(this.loadTexture('plateMetalness', plateConfig.textures.metalnessMap));\r\n      }\r\n    }\r\n    \r\n    await Promise.all(loadPromises);\r\n  }\r\n\r\n  /**\r\n   * 加载单个贴图\r\n   * @param {string} name - 贴图名称\r\n   * @param {string} path - 贴图路径\r\n   * @returns {Promise} 贴图加载Promise\r\n   */\r\n  loadTexture(name, path) {\r\n    return new Promise((resolve, reject) => {\r\n      this.textureLoader.load(\r\n        path,\r\n        (texture) => {\r\n          // 设置贴图参数\r\n          texture.wrapS = three_module/* RepeatWrapping */.GJx;\r\n          texture.wrapT = three_module/* RepeatWrapping */.GJx;\r\n          texture.flipY = false;\r\n          \r\n          this.textures[name] = texture;\r\n          console.log(`贴图加载成功: ${name} (${path})`);\r\n          resolve(texture);\r\n        },\r\n        (progress) => {\r\n          console.log(`贴图加载进度: ${name} - ${(progress.loaded / progress.total * 100)}%`);\r\n        },\r\n        (error) => {\r\n          console.warn(`贴图加载失败: ${name} (${path})`, error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建金属材质（电子枪）\r\n   */\r\n  createMetalMaterial() {\r\n    const metalConfig = CONFIG.materials.metal;\r\n    \r\n    const materialProps = {\r\n      color: new three_module/* Color */.Q1f(metalConfig.color),\r\n      metalness: metalConfig.metalness,\r\n      roughness: metalConfig.roughness,\r\n      envMapIntensity: 1.0\r\n    };\r\n\r\n    // 如果有贴图，添加到材质\r\n    if (this.textures.metalMap) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n    \r\n    if (this.textures.metalNormal) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n    \r\n    if (this.textures.metalRoughness) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n    \r\n    if (this.textures.metalMetalness) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    this.materials.metal = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n  }\r\n\r\n  /**\r\n   * 创建偏转板材质\r\n   */\r\n  createPlateMaterial() {\r\n    const plateConfig = CONFIG.materials.plate;\r\n    \r\n    const materialProps = {\r\n      color: new three_module/* Color */.Q1f(plateConfig.color),\r\n      metalness: plateConfig.metalness,\r\n      roughness: plateConfig.roughness,\r\n      envMapIntensity: 1.0  // 与电子枪保持一致\r\n    };\r\n\r\n    // 如果有贴图，添加到材质\r\n    if (this.textures.plateMap) {\r\n      materialProps.map = this.textures.plateMap;\r\n    }\r\n    \r\n    if (this.textures.plateNormal) {\r\n      materialProps.normalMap = this.textures.plateNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n    \r\n    if (this.textures.plateRoughness) {\r\n      materialProps.roughnessMap = this.textures.plateRoughness;\r\n    }\r\n    \r\n    if (this.textures.plateMetalness) {\r\n      materialProps.metalnessMap = this.textures.plateMetalness;\r\n    }\r\n\r\n    this.materials.plate = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n    \r\n    // 调试输出偏转板材质信息\r\n    console.log('🔧 偏转板材质创建完成:', {\r\n      hasMap: !!materialProps.map,\r\n      hasNormalMap: !!materialProps.normalMap,\r\n      color: materialProps.color.getHexString(),\r\n      metalness: materialProps.metalness,\r\n      roughness: materialProps.roughness,\r\n      envMapIntensity: materialProps.envMapIntensity\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建荧光屏材质\r\n   */\r\n  createScreenMaterial() {\r\n    const screenConfig = CONFIG.materials.screen;\r\n    \r\n    this.materials.screen = new three_module/* MeshStandardMaterial */._4j({\r\n      color: new three_module/* Color */.Q1f(screenConfig.color),\r\n      emissive: new three_module/* Color */.Q1f(CONFIG.screen.color),\r\n      emissiveIntensity: CONFIG.screen.intensity,\r\n      roughness: screenConfig.roughness,\r\n      side: three_module/* DoubleSide */.$EB\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建发光点材质\r\n   */\r\n  createGlowPointMaterial() {\r\n    this.materials.glowPoint = new three_module/* MeshBasicMaterial */.V9B({\r\n      color: new three_module/* Color */.Q1f(CONFIG.dotLight.color),\r\n      transparent: true,\r\n      opacity: CONFIG.materials.glow.opacity\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建备用材质（当贴图加载失败时使用）\r\n   */\r\n  createFallbackMaterials() {\r\n    console.log('创建备用材质（无贴图）');\r\n    \r\n    this.materials.metal = new three_module/* MeshStandardMaterial */._4j({\r\n      color: new three_module/* Color */.Q1f(CONFIG.materials.metal.color),\r\n      metalness: CONFIG.materials.metal.metalness,\r\n      roughness: CONFIG.materials.metal.roughness,\r\n      envMapIntensity: 1.0\r\n    });\r\n\r\n    this.materials.plate = new three_module/* MeshStandardMaterial */._4j({\r\n      color: new three_module/* Color */.Q1f(CONFIG.materials.plate.color),\r\n      metalness: CONFIG.materials.plate.metalness,\r\n      roughness: CONFIG.materials.plate.roughness,\r\n      envMapIntensity: 1.0  // 与电子枪保持一致\r\n    });\r\n\r\n    this.createScreenMaterial();\r\n    this.createGlowPointMaterial();\r\n  }\r\n\r\n  /**\r\n   * 获取指定材质\r\n   * @param {string} name - 材质名称\r\n   * @returns {THREE.Material} 材质对象\r\n   */\r\n  getMaterial(name) {\r\n    return this.materials[name];\r\n  }\r\n\r\n  /**\r\n   * 更新材质属性\r\n   * @param {string} materialName - 材质名称\r\n   * @param {Object} properties - 要更新的属性\r\n   */\r\n  updateMaterial(materialName, properties) {\r\n    const material = this.materials[materialName];\r\n    if (material) {\r\n      Object.assign(material, properties);\r\n      material.needsUpdate = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 释放所有材质和贴图资源\r\n   */\r\n  dispose() {\r\n    // 释放贴图\r\n    Object.values(this.textures).forEach(texture => {\r\n      texture.dispose();\r\n    });\r\n\r\n    // 释放材质\r\n    Object.values(this.materials).forEach(material => {\r\n      material.dispose();\r\n    });\r\n\r\n    this.textures = {};\r\n    this.materials = {};\r\n  }\r\n}\r\n\n;// ./src/main.js\n// ===== 基础导入 =====\n // 三维库\n // 轨道控制器\n // 动画库\n\n// ===== 导入 switcher 模块（ES6 导入，并在 DOM 就绪后初始化） =====\n\n\n\n// ===== 导入自定义模块 =====\n\n\n  // 配置文件\n  // GUI控制器\n  // UI控制器\n  // 波形生成器\n  // 电子束\n  // 荧光屏\n  // 标签系统\n  // 分解视图\n  // 演示动画\n  // CRT外壳\n  // 材质管理器\n  // 统一组件材质管理器\n\n// ===== 全局变量 =====\nlet scene, camera, renderer, controls;  // 场景、相机、渲染器、控制器\nlet electronBeam, waveformGenerator, screenController;  // 电子束、波形生成器、荧光屏控制器\nlet guiController, uiController;  // GUI控制器、UI控制器\nlet labelSystem, explodedView, demoAnimation;  // 标签系统、分解视图、演示动画\nlet crtShell;  // CRT外壳\nlet materialManager;  // 材质管理器\n\n// 创建 TWEEN Group 管理动画（解决 TWEEN.update() 弃用问题）\nconst tweenGroup = new tween_esm/* Group */.YJ();\n\n// ===== 热重载支持 =====\nif (false) // removed by dead control flow\n{}\n\n// ===== 场景对象引用 =====\nlet gun, gunHead, v1, v2, h1, h2, screen;  // 电子枪、电子枪头、垂直偏转板、水平偏转板、荧光屏    \n\n// ===== 工具函数 =====\n/**\n * 解析颜色值，支持多种格式\n * @param {string|number} color - 颜色值（可以是 \"#ffffff\", \"0xffffff\", RGB等格式）\n * @returns {number|null} - 解析后的十六进制数值，失败返回null\n */\nfunction parseColor(color) {\n  try {\n    if (typeof color === 'number') {\n      return color;\n    }\n    \n    if (typeof color === 'string') {\n      // 处理十六进制格式 \"0xffffff\"\n      if (color.startsWith('0x')) {\n        return parseInt(color, 16);\n      }\n      \n      // 处理CSS十六进制格式 \"#ffffff\"\n      if (color.startsWith('#')) {\n        return parseInt(color.replace('#', '0x'), 16);\n      }\n      \n      // 处理纯十六进制字符串 \"ffffff\"\n      if (/^[0-9a-fA-F]{6}$/.test(color)) {\n        return parseInt('0x' + color, 16);\n      }\n      \n      // 尝试直接解析\n      const parsed = parseInt(color, 16);\n      if (!isNaN(parsed)) {\n        return parsed;\n      }\n    }\n    \n    console.warn('无法解析颜色值:', color);\n    return null;\n  } catch (error) {\n    console.error('颜色解析错误:', error, '输入值:', color);\n    return null;\n  }\n}\n\n// ===== 初始化函数 =====\nasync function init() {\n  console.log('初始化应用...');\n  initScene(); // 初始化场景\n  initCamera(); // 初始化相机\n  initRenderer(); // 初始化渲染器\n  initControls(); // 初始化控制器\n  initLights(); // 初始化光源\n  initGrid(); // 初始化网格\n  await initMaterials(); // 初始化材质（异步）\n  initComponents(); // 初始化组件\n  console.log('初始化标签系统...');\n  initLabelSystem(); // 初始化标签系统\n  console.log('初始化分解视图...');\n  initExplodedView(); // 初始化分解视图\n  console.log('初始化GUI...');\n  initGui(); // 初始化GUI（需要在演示动画之前初始化）\n  console.log('初始化演示动画...');\n  initDemoAnimation(); // 初始化演示动画\n  console.log('初始化UI控制器...');\n  initUIController(); // 初始化UI控制器\n  \n  // 初始化波形显示\n  updateScreenWaveform();\n  \n  // 初始化电子束（确保启动时就有电子束显示）\n  updateElectronBeam();\n  \n  // 开始动画循环\n  animate(); // 开始动画循环\n  \n  // 窗口自适应\n  window.addEventListener('resize', onWindowResize);   // 窗口大小调整事件监听\n  \n  console.log('应用初始化完成');\n}\n\n// ===== 场景初始化 =====\nfunction initScene() {\n  scene = new three_module/* Scene */.Z58(); // 创建场景\n  scene.background = new three_module/* Color */.Q1f(CONFIG.scene.background); // 设置场景背景颜色\n}\n\n// ===== 相机初始化 =====\nfunction initCamera() {\n  camera = new three_module/* PerspectiveCamera */.ubm( // 透视相机\n    CONFIG.camera.fov, // 视角\n    window.innerWidth / window.innerHeight, // 宽高比\n    CONFIG.camera.near, // 近截面\n    CONFIG.camera.far // 远截面\n  );\n  camera.position.set(CONFIG.camera.position.x, CONFIG.camera.position.y, CONFIG.camera.position.z); // 设置相机位置\n}\n\n// ===== 渲染器初始化 =====\nfunction initRenderer() {\n  renderer = new three_module/* WebGLRenderer */.JeP({ antialias: true }); // 创建渲染器\n  \n  // 高DPI屏幕适配\n  const devicePixelRatio = window.devicePixelRatio || 1;\n  renderer.setPixelRatio(Math.min(devicePixelRatio, 2)); // 限制最大DPI比率为2\n  renderer.setSize(window.innerWidth, window.innerHeight); // 设置渲染器大小\n  \n  document.body.appendChild(renderer.domElement); // 将渲染器添加到文档中\n}\n\n// ===== 控制器初始化 =====\nfunction initControls() { \n  controls = new OrbitControls/* OrbitControls */.N(camera, renderer.domElement); // 创建控制器\n  controls.enableDamping = true; // 启用阻尼\n}\n\n// ===== 光源初始化 =====\nfunction initLights() { \n  // 环境光 - 为金属材质提供基础照明\n  scene.add(new three_module/* AmbientLight */.$p8(0xffffff, 0.4)); \n  \n  // 主要定向光 - 模拟太阳光，增强金属反射效果\n  const directionalLight = new three_module/* DirectionalLight */.ZyN(0xffffff, 0.8);\n  directionalLight.position.set(10, 10, 5);\n  directionalLight.castShadow = true;\n  scene.add(directionalLight);\n  \n  // 补充点光源 - 从不同角度照亮金属表面\n  const pointLight1 = new three_module/* PointLight */.HiM(0xffffff, 0.6);\n  pointLight1.position.set(-10, 8, 8);\n  scene.add(pointLight1);\n  \n  // 第二个点光源 - 增加金属材质的高光效果\n  const pointLight2 = new three_module/* PointLight */.HiM(0xf0f0f0, 0.4);\n  pointLight2.position.set(5, -5, 10);\n  scene.add(pointLight2);\n}\n\n// ===== 网格地面初始化 =====\nfunction initGrid() {\n  const grid = new three_module/* GridHelper */.fTw(\n    CONFIG.scene.grid.size, \n    CONFIG.scene.grid.divisions, \n    CONFIG.scene.grid.color1, \n    CONFIG.scene.grid.color2\n  ); // 创建网格\n  grid.position.set(\n    CONFIG.scene.grid.position.x, \n    CONFIG.scene.grid.position.y, \n    CONFIG.scene.grid.position.z\n  ); // 设置网格位置\n  scene.add(grid); // 将网格添加到场景中\n}\n\n// ===== 材质初始化 =====\nasync function initMaterials() {\n  console.log('初始化材质管理器...');\n  materialManager = new MaterialManager();\n  await materialManager.initializeMaterials();\n  \n  console.log('初始化统一组件材质管理器...');\n  await unifiedComponentMaterial.initialize();\n  \n  console.log('材质初始化完成');\n}\n\n// ===== 组件初始化 =====\nfunction initComponents() {\n  // 从材质管理器获取材质\n  const metalMat = materialManager.getMaterial('metal');\n  const plateMat = materialManager.getMaterial('plate');\n  const screenMat = materialManager.getMaterial('screen');\n  const glowPointMat = materialManager.getMaterial('glowPoint');\n\n  // 电子枪\n  gun = new three_module/* Mesh */.eaF(\n    new three_module/* CylinderGeometry */.Ho_(CONFIG.components.gun.radius, 0.3, CONFIG.components.gun.height, 32),\n    metalMat\n  );\n  gun.rotation.z = Math.PI / 2;\n  gun.position.set(CONFIG.components.gun.position.x, CONFIG.components.gun.position.y, CONFIG.components.gun.position.z);\n  scene.add(gun);\n\n  gunHead = new three_module/* Mesh */.eaF(\n    new three_module/* CylinderGeometry */.Ho_(CONFIG.components.gunHead.radius, CONFIG.components.gunHead.radius, CONFIG.components.gunHead.height, 32),\n    metalMat\n  );\n  gunHead.rotation.z = Math.PI / 2;\n  gunHead.position.set(CONFIG.components.gunHead.position.x, CONFIG.components.gunHead.position.y, CONFIG.components.gunHead.position.z);\n  scene.add(gunHead);\n\n  // 垂直偏转板\n  const vGeom = new three_module/* BoxGeometry */.iNn(CONFIG.components.verticalPlates.width, CONFIG.components.verticalPlates.height, CONFIG.components.verticalPlates.depth);\n  v1 = new three_module/* Mesh */.eaF(vGeom, plateMat);\n  v2 = v1.clone();\n\n  v1.rotation.x = Math.PI / 2;\n  v2.rotation.x = Math.PI / 2;\n  // 再绕 Z 轴 90°\n  v1.rotation.y += Math.PI / 2;\n  v2.rotation.y += Math.PI / 2;\n\n  v1.position.set(CONFIG.components.verticalPlates.positions[0].x, CONFIG.components.verticalPlates.positions[0].y, CONFIG.components.verticalPlates.positions[0].z);\n  v2.position.set(CONFIG.components.verticalPlates.positions[1].x, CONFIG.components.verticalPlates.positions[1].y, CONFIG.components.verticalPlates.positions[1].z);\n  scene.add(v1, v2);\n\n  // 水平偏转板\n  const hGeom = new three_module/* BoxGeometry */.iNn(CONFIG.components.horizontalPlates.width, CONFIG.components.horizontalPlates.height, CONFIG.components.horizontalPlates.depth);\n  h1 = new three_module/* Mesh */.eaF(hGeom, plateMat);\n  h2 = h1.clone();\n\n  h1.rotation.x = -Math.PI / 2;\n  h2.rotation.x = -Math.PI / 2;\n\n  h1.position.set(CONFIG.components.horizontalPlates.positions[0].x, CONFIG.components.horizontalPlates.positions[0].y, CONFIG.components.horizontalPlates.positions[0].z);\n  h2.position.set(CONFIG.components.horizontalPlates.positions[1].x, CONFIG.components.horizontalPlates.positions[1].y, CONFIG.components.horizontalPlates.positions[1].z);\n  scene.add(h1, h2);\n\n  // 荧光屏\n  screen = new three_module/* Mesh */.eaF(new three_module/* PlaneGeometry */.bdM(CONFIG.components.screen.width, CONFIG.components.screen.height), screenMat); // 创建荧光屏\n  screen.position.set(CONFIG.components.screen.position.x, CONFIG.components.screen.position.y, CONFIG.components.screen.position.z); // 设置荧光屏位置\n  screen.rotation.y = -Math.PI / 2; // 设置荧光屏旋转\n  scene.add(screen); // 将荧光屏添加到场景中\n   \n  \n  // 初始化电子束控制器\n  electronBeam = new ElectronBeam(scene);\n  \n  // 初始化波形生成器\n  waveformGenerator = new WaveformGenerator();\n  \n  // 设置波形重置回调，在新周期开始时清除回扫线\n  waveformGenerator.setWaveformResetCallback(() => {\n    if (electronBeam) {\n      electronBeam.startNewTraceSegment();\n    }\n  });\n  \n  // 初始化荧光屏控制器\n  screenController = new Screen(scene, screen);\n  \n  // 初始化CRT外壳\n  crtShell = new CRTShell();\n  scene.add(crtShell.getShell());\n  \n  // 初始化连接位置演示（使其在全局可用）\n  window.connectionDemo = new ConnectionPositionDemo(crtShell);\n  \n  // 初始化超椭圆形状渐变演示（使其在全局可用）\n  window.transitionDemo = new SuperellipseTransitionDemo(crtShell);\n}\n\n// ===== 标签系统初始化 =====\nfunction initLabelSystem() {\n  // 创建标签系统\n  labelSystem = new LabelSystem(scene, document.body);\n  \n  // 为各组件添加标签\n  const componentLabels = [\n    { id: 'gun', target: gun, text: CONFIG.descriptions.gun.name, offset: new three_module/* Vector3 */.Pq0(0, 0.5, 0), description: CONFIG.descriptions.gun.description },\n    { id: 'gunHead', target: gunHead, text: CONFIG.descriptions.gunHead.name, offset: new three_module/* Vector3 */.Pq0(0, 0.3, 0), description: CONFIG.descriptions.gunHead.description },\n    { id: 'v1', target: v1, text: CONFIG.descriptions.v1.name, offset: new three_module/* Vector3 */.Pq0(0, 0.3, 0), description: CONFIG.descriptions.v1.description },\n    { id: 'v2', target: v2, text: CONFIG.descriptions.v2.name, offset: new three_module/* Vector3 */.Pq0(0, -0.3, 0), description: CONFIG.descriptions.v2.description },\n    { id: 'h1', target: h1, text: CONFIG.descriptions.h1.name, offset: new three_module/* Vector3 */.Pq0(0, 0, 0.3), description: CONFIG.descriptions.h1.description },\n    { id: 'h2', target: h2, text: CONFIG.descriptions.h2.name, offset: new three_module/* Vector3 */.Pq0(0, 0, -0.3), description: CONFIG.descriptions.h2.description },\n    { id: 'screen', target: screen, text: CONFIG.descriptions.screen.name, offset: new three_module/* Vector3 */.Pq0(0.1, 0.5, 0), description: CONFIG.descriptions.screen.description }\n  ];\n  \n  // 创建标签\n  componentLabels.forEach(label => {\n    labelSystem.createLabel(label.id, label.text, label.target, label.offset, label.description);\n  });\n}\n\n// ===== 分解视图初始化 =====\nfunction initExplodedView() {\n  // 创建分解视图控制器\n  // 注意：这些组件不参与分解动画，但需要引用以支持相机聚焦功能\n  explodedView = new ExplodedView({\n    // 添加主要组件的引用，用于相机聚焦功能\n    // 这些组件不会有分解动画，但可以被聚焦\n    gun: gun,\n    gunHead: gunHead, \n    v1: v1,\n    v2: v2,\n    h1: h1,\n    h2: h2,\n    screen: screen\n    // CRT外壳(crtShell)有自己的内部分解机制，不在此处理\n  });\n}\n\n// ===== 演示动画初始化 =====\nfunction initDemoAnimation() {\n  // 创建演示动画控制器\n  demoAnimation = new DemoAnimation(\n    scene,\n    {\n      gun,\n      gunHead,\n      v1,\n      v2,\n      h1,\n      h2,\n      screen: screenController,  // 传递Screen类实例而不是THREE.js网格对象\n      electronBeam,\n      crtShell  // 添加crtShell组件\n    },\n    {\n      camera,\n      controls,\n      screenController,\n      guiController,  // 传递GUI控制器，用于演示时折叠面板\n      onDeflectionChange: (deflectionParams) => {\n        updateElectronBeam();\n      },\n      onWaveformChange: (waveformParams) => {\n        updateElectronBeam();\n        updateScreenWaveform();\n      }\n    }\n  );\n  \n  // 设置全局引用供波形生成器使用\n  window.demoAnimation = demoAnimation;\n  \n  // ===== 视角查看器 - 在控制台查看当前摄像头位置和目标 =====\n  window.getView = function() {\n    if (!camera || !controls) {\n      console.warn('⚠️ 摄像头或控制器未初始化');\n      return null;\n    }\n    \n    const viewInfo = {\n      position: { \n        x: Math.round(camera.position.x * 100) / 100,\n        y: Math.round(camera.position.y * 100) / 100, \n        z: Math.round(camera.position.z * 100) / 100 \n      },\n      target: { \n        x: Math.round(controls.target.x * 100) / 100,\n        y: Math.round(controls.target.y * 100) / 100, \n        z: Math.round(controls.target.z * 100) / 100 \n      }\n    };\n    \n    console.log('📷 当前视角信息:');\n    console.log('位置 (position):', viewInfo.position);\n    console.log('目标 (target):', viewInfo.target);\n    console.log('---');\n    console.log('复制用代码:');\n    console.log(`position: { x: ${viewInfo.position.x}, y: ${viewInfo.position.y}, z: ${viewInfo.position.z} }`);\n    console.log(`target: { x: ${viewInfo.target.x}, y: ${viewInfo.target.y}, z: ${viewInfo.target.z} }`);\n    \n    return viewInfo;\n  };\n}\n\n// ===== GUI初始化 =====\nfunction initGui() {\n  guiController = new GuiController({\n    onBeamChange: (beamParams) => {\n      electronBeam.updateMaterial();\n    },\n    onDeflectionChange: (deflectionParams) => {\n      updateElectronBeam();\n    },\n    onWaveformChange: (waveformParams) => {\n      // 波形参数变化时，需要更新电子束\n      updateElectronBeam();\n      // 同时更新荧光屏上的波形显示\n      updateScreenWaveform();\n    },\n    onScreenChange: (screenParams) => {\n      screenController.updateMaterial();\n    },\n    onShellChange: (shellParams) => {\n      if (crtShell) {\n        crtShell.setVisible(shellParams.visible);\n        crtShell.setOpacity(shellParams.opacity);\n        \n        \n        // 处理第一个圆柱体\n        if (shellParams.cylinder1) {\n          if (shellParams.cylinder1.hasOwnProperty('visible')) {\n            crtShell.setCylinder1Visible(shellParams.cylinder1.visible);\n          }\n          if (shellParams.cylinder1.hasOwnProperty('opacity')) {\n            crtShell.setCylinder1Opacity(shellParams.cylinder1.opacity);\n          }\n          if (shellParams.cylinder1.color) {\n            const cylinder1Color = parseColor(shellParams.cylinder1.color);\n            if (cylinder1Color !== null) {\n              crtShell.setCylinder1Color(cylinder1Color);\n            }\n          }\n          if (shellParams.cylinder1.position) {\n            crtShell.setCylinder1Position(\n              shellParams.cylinder1.position.x,\n              shellParams.cylinder1.position.y,\n              shellParams.cylinder1.position.z\n            );\n          }\n          if (shellParams.cylinder1.rotation) {\n            crtShell.setCylinder1Rotation(\n              shellParams.cylinder1.rotation.x,\n              shellParams.cylinder1.rotation.y,\n              shellParams.cylinder1.rotation.z\n            );\n          }\n        }\n        \n        // 处理第二个圆柱体\n        if (shellParams.cylinder2) {\n          if (shellParams.cylinder2.hasOwnProperty('visible')) {\n            crtShell.setCylinder2Visible(shellParams.cylinder2.visible);\n          }\n          if (shellParams.cylinder2.hasOwnProperty('opacity')) {\n            crtShell.setCylinder2Opacity(shellParams.cylinder2.opacity);\n          }\n          if (shellParams.cylinder2.color) {\n            const cylinder2Color = parseColor(shellParams.cylinder2.color);\n            if (cylinder2Color !== null) {\n              crtShell.setCylinder2Color(cylinder2Color);\n            }\n          }\n          if (shellParams.cylinder2.position) {\n            crtShell.setCylinder2Position(\n              shellParams.cylinder2.position.x,\n              shellParams.cylinder2.position.y,\n              shellParams.cylinder2.position.z\n            );\n          }\n          if (shellParams.cylinder2.rotation) {\n            crtShell.setCylinder2Rotation(\n              shellParams.cylinder2.rotation.x,\n              shellParams.cylinder2.rotation.y,\n              shellParams.cylinder2.rotation.z\n            );\n          }\n        }\n        \n        // 注意：这里不需要调用updateConfig()，因为上面的set方法已经更新了相应的状态\n        // 调用updateConfig()会导致重复创建组件，造成重复模型问题\n        // crtShell.updateConfig();\n      }\n    }\n  });\n}\n\n// ===== UI控制器初始化 =====\nfunction initUIController() {\n  // 创建UI控制器\n  uiController = new UIController({\n    components: {\n      gun,\n      gunHead,\n      v1,\n      v2,\n      h1,\n      h2,\n      screen,\n      crtShell\n    },\n    controllers: {\n      camera,\n      controls,\n      labelSystem,\n      explodedView,\n      demoAnimation,\n      screenController,\n      onDeflectionChange: (deflectionParams) => {\n        updateElectronBeam();\n      },\n      onWaveformChange: (waveformParams) => {\n        updateElectronBeam();\n        updateScreenWaveform();\n      }\n    }\n  });\n}\n\n// ===== 更新电子束 =====\nfunction updateElectronBeam() {\n  let deflectionParams;\n  \n  // 如果波形启用，计算波形产生的偏转电压\n  if (CONFIG.waveform.enabled) {\n    const deflectionVoltage = waveformGenerator.calculateDeflectionVoltage(\n      CONFIG.waveform,\n      CONFIG.deflection\n    );\n    deflectionParams = {\n      horizontal: { voltage: deflectionVoltage.horizontal },\n      vertical: { voltage: deflectionVoltage.vertical }\n    };\n  } else {\n    // 直接使用控制面板上的电压值\n    deflectionParams = CONFIG.deflection;\n  }\n  \n  // 更新电子束路径\n  electronBeam.updateBeamPath(deflectionParams);\n  \n  // 更新荧光屏和动态光点\n  updateScreenAndGlowPoint();\n}\n\n/**\n * 更新荧光屏波形显示\n * 在波形参数改变时清除旧的显示内容\n */\nfunction updateScreenWaveform() {\n  // 清除荧光屏上的所有荧光点\n  if (screenController) {\n    screenController.clearAllGlowPoints();\n  }\n  \n  // 清除电子束的轨迹点\n  if (electronBeam) {\n    electronBeam.clearAllTraces();\n  }\n  \n  // 重置波形生成器的时间，避免波形不连续\n  // 这确保新的波形参数能从干净的状态开始显示\n  if (waveformGenerator) {\n    waveformGenerator.resetTime();\n  }\n  \n  console.log('波形参数变化：已清除旧的波形显示，准备显示新波形');\n}\n\n/**\n * 更新荧光屏和动态光点\n */\nfunction updateScreenAndGlowPoint() {\n  const lastBeamPoint = electronBeam.beamPoints[electronBeam.beamPoints.length - 1];\n  \n  // 更新荧光屏上的点\n  screenController.addGlowPoint(lastBeamPoint);\n  \n}\n\n// ===== 窗口大小调整 =====\nfunction onWindowResize() {\n  // 获取实际显示尺寸，考虑DPI缩放\n  const devicePixelRatio = window.devicePixelRatio || 1;\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n  \n  // 设置渲染器尺寸，考虑高DPI\n  renderer.setSize(width, height);\n  renderer.setPixelRatio(Math.min(devicePixelRatio, 2)); // 限制最大DPI比率为2\n  \n  // 更新标签系统\n  if (labelSystem) {\n    labelSystem.resize(width, height);\n  }\n  \n  // 更新UI控制器\n  if (uiController) {\n    uiController.resize(width, height);\n  }\n}\n\n// ===== 动画循环 =====\nfunction animate(timestamp) {\n  requestAnimationFrame(animate);\n  \n  // 更新控制器\n  controls.update();\n  \n  // 更新波形生成器\n  waveformGenerator.update(timestamp);\n  \n  // 持续更新电子束（无论波形是否启用都要更新）\n  // 这确保了电子束始终可见并响应参数变化\n  updateElectronBeam();\n  \n  // 更新荧光屏效果\n  screenController.update();\n  \n  // 更新CRT外壳\n  if (crtShell) {\n    crtShell.update(timestamp);\n  }\n  \n  // 更新分解视图\n  if (explodedView) {\n    explodedView.update();\n  }\n  \n  // 更新演示动画\n  if (demoAnimation) {\n    demoAnimation.update();\n  }\n  \n  // 更新标签系统\n  if (labelSystem) {\n    labelSystem.update(camera);\n  }\n  \n  // 更新TWEEN（使用新的 Group API）\n  tweenGroup.update();\n  \n  // 渲染场景\n  renderer.render(scene, camera);\n}\n\n// ===== 启动应用 =====\ninit().catch(error => {\n  console.error('应用初始化失败:', error);\n});\n\n// ===== 初始化右上角切换控件（内部页） =====\nconst bootInternalSwitcher = () => {\n  if (typeof document !== 'undefined') {\n    renderSwitcher('internal');\n  }\n};\nif (typeof document !== 'undefined' && document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', bootInternalSwitcher);\n} else {\n  bootInternalSwitcher();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///297\n")},688:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.switcher{\r\n  position: fixed;\r\n  top: 12px;\r\n  right: 12px;\r\n  z-index: 9999;\r\n  display: grid;\r\n  grid-template-columns: var(--tile, 48px) var(--tile, 48px);\r\n  column-gap: var(--switcher-gap, 0px);\r\n  padding: 0 var(--switcher-extra, 0px);\r\n  --icon-active: #42B983;\r\n  --icon-inactive: #9aa3b2;\r\n}\r\n\r\n.switcher .tile{\r\n  all: unset;\r\n  cursor: pointer;\r\n  width: var(--tile, 48px);\r\n  height: var(--tile, 48px);\r\n  display: grid;\r\n  place-items: center;\r\n  position: relative;\r\n  background:\r\n    repeating-linear-gradient(0deg, #1c1e23 0 2px, #15171b 2px 4px),\r\n    repeating-linear-gradient(90deg, #14161a 0 8px, #121418 8px 16px);\r\n  box-shadow:\r\n    inset 0 0 0 1px rgba(255,255,255,.2),\r\n    inset 0 0 0 2px rgba(255,255,255,.06);\r\n}\r\n\r\n.switcher .tile.right{\r\n  box-shadow:\r\n    inset 1px 0 0 #00000090,\r\n    inset 2px 0 0 #ffffff10,\r\n    inset 0 0 0 1px rgba(255,255,255,.2),\r\n    inset 0 0 0 2px rgba(255,255,255,.06);\r\n}\r\n\r\n.switcher .tile:active{ transform: translateY(1px) }\r\n.switcher .tile[aria-selected="false"]{ filter: brightness(.78) contrast(1.05) }\r\n.switcher .tile[aria-selected="true"]{\r\n  box-shadow: inset 0 0 0 1px #e7e9ec, inset 0 0 0 2px rgba(255,255,255,.2), 0 0 0 1px #ffffff20;\r\n}\r\n\r\n.switcher svg{ width: var(--icon, 24px); height: var(--icon, 24px); display: block }\r\n.switcher .stroke{ stroke: var(--icon-inactive); stroke-width:1.8; fill:none; stroke-linecap:round; stroke-linejoin:round }\r\n.switcher .dot{ fill: var(--icon-inactive) }\r\n.switcher .tile[aria-selected="true"] .stroke{ stroke: var(--icon-active) }\r\n.switcher .tile[aria-selected="true"] .dot{ fill: var(--icon-active) }\r\n.switcher .tile:hover .stroke{ stroke: var(--icon-active) }\r\n.switcher .tile:hover .dot{ fill: var(--icon-active) }\r\n\r\n.sr-only{ position:absolute; width:1px; height:1px; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0 }\r\n\r\n\r\n\r\n\r\n`, "",{"version":3,"sources":["webpack://./src/controllers/switcher.css"],"names":[],"mappings":"AAAA;EACE,eAAe;EACf,SAAS;EACT,WAAW;EACX,aAAa;EACb,aAAa;EACb,0DAA0D;EAC1D,oCAAoC;EACpC,qCAAqC;EACrC,sBAAsB;EACtB,wBAAwB;AAC1B;;AAEA;EACE,UAAU;EACV,eAAe;EACf,wBAAwB;EACxB,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB;;qEAEmE;EACnE;;yCAEuC;AACzC;;AAEA;EACE;;;;yCAIuC;AACzC;;AAEA,wBAAwB,2BAA2B;AACnD,wCAAwC,uCAAuC;AAC/E;EACE,8FAA8F;AAChG;;AAEA,eAAe,wBAAwB,EAAE,yBAAyB,EAAE,eAAe;AACnF,mBAAmB,4BAA4B,EAAE,gBAAgB,EAAE,SAAS,EAAE,oBAAoB,EAAE,sBAAsB;AAC1H,gBAAgB,2BAA2B;AAC3C,+CAA+C,2BAA2B;AAC1E,4CAA4C,yBAAyB;AACrE,+BAA+B,2BAA2B;AAC1D,4BAA4B,yBAAyB;;AAErD,UAAU,iBAAiB,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,eAAe,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,SAAS","sourcesContent":[".switcher{\\r\\n  position: fixed;\\r\\n  top: 12px;\\r\\n  right: 12px;\\r\\n  z-index: 9999;\\r\\n  display: grid;\\r\\n  grid-template-columns: var(--tile, 48px) var(--tile, 48px);\\r\\n  column-gap: var(--switcher-gap, 0px);\\r\\n  padding: 0 var(--switcher-extra, 0px);\\r\\n  --icon-active: #42B983;\\r\\n  --icon-inactive: #9aa3b2;\\r\\n}\\r\\n\\r\\n.switcher .tile{\\r\\n  all: unset;\\r\\n  cursor: pointer;\\r\\n  width: var(--tile, 48px);\\r\\n  height: var(--tile, 48px);\\r\\n  display: grid;\\r\\n  place-items: center;\\r\\n  position: relative;\\r\\n  background:\\r\\n    repeating-linear-gradient(0deg, #1c1e23 0 2px, #15171b 2px 4px),\\r\\n    repeating-linear-gradient(90deg, #14161a 0 8px, #121418 8px 16px);\\r\\n  box-shadow:\\r\\n    inset 0 0 0 1px rgba(255,255,255,.2),\\r\\n    inset 0 0 0 2px rgba(255,255,255,.06);\\r\\n}\\r\\n\\r\\n.switcher .tile.right{\\r\\n  box-shadow:\\r\\n    inset 1px 0 0 #00000090,\\r\\n    inset 2px 0 0 #ffffff10,\\r\\n    inset 0 0 0 1px rgba(255,255,255,.2),\\r\\n    inset 0 0 0 2px rgba(255,255,255,.06);\\r\\n}\\r\\n\\r\\n.switcher .tile:active{ transform: translateY(1px) }\\r\\n.switcher .tile[aria-selected=\\"false\\"]{ filter: brightness(.78) contrast(1.05) }\\r\\n.switcher .tile[aria-selected=\\"true\\"]{\\r\\n  box-shadow: inset 0 0 0 1px #e7e9ec, inset 0 0 0 2px rgba(255,255,255,.2), 0 0 0 1px #ffffff20;\\r\\n}\\r\\n\\r\\n.switcher svg{ width: var(--icon, 24px); height: var(--icon, 24px); display: block }\\r\\n.switcher .stroke{ stroke: var(--icon-inactive); stroke-width:1.8; fill:none; stroke-linecap:round; stroke-linejoin:round }\\r\\n.switcher .dot{ fill: var(--icon-inactive) }\\r\\n.switcher .tile[aria-selected=\\"true\\"] .stroke{ stroke: var(--icon-active) }\\r\\n.switcher .tile[aria-selected=\\"true\\"] .dot{ fill: var(--icon-active) }\\r\\n.switcher .tile:hover .stroke{ stroke: var(--icon-active) }\\r\\n.switcher .tile:hover .dot{ fill: var(--icon-active) }\\r\\n\\r\\n.sr-only{ position:absolute; width:1px; height:1px; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0 }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvY29udHJvbGxlcnMvc3dpdGNoZXIuY3NzP2I2OGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zd2l0Y2hlcntcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAxMnB4O1xyXG4gIHJpZ2h0OiAxMnB4O1xyXG4gIHotaW5kZXg6IDk5OTk7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHZhcigtLXRpbGUsIDQ4cHgpIHZhcigtLXRpbGUsIDQ4cHgpO1xyXG4gIGNvbHVtbi1nYXA6IHZhcigtLXN3aXRjaGVyLWdhcCwgMHB4KTtcclxuICBwYWRkaW5nOiAwIHZhcigtLXN3aXRjaGVyLWV4dHJhLCAwcHgpO1xyXG4gIC0taWNvbi1hY3RpdmU6ICM0MkI5ODM7XHJcbiAgLS1pY29uLWluYWN0aXZlOiAjOWFhM2IyO1xyXG59XHJcblxyXG4uc3dpdGNoZXIgLnRpbGV7XHJcbiAgYWxsOiB1bnNldDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgd2lkdGg6IHZhcigtLXRpbGUsIDQ4cHgpO1xyXG4gIGhlaWdodDogdmFyKC0tdGlsZSwgNDhweCk7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBwbGFjZS1pdGVtczogY2VudGVyO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBiYWNrZ3JvdW5kOlxyXG4gICAgcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCgwZGVnLCAjMWMxZTIzIDAgMnB4LCAjMTUxNzFiIDJweCA0cHgpLFxyXG4gICAgcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg5MGRlZywgIzE0MTYxYSAwIDhweCwgIzEyMTQxOCA4cHggMTZweCk7XHJcbiAgYm94LXNoYWRvdzpcclxuICAgIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwyNTUsMjU1LC4yKSxcclxuICAgIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4wNik7XHJcbn1cclxuXHJcbi5zd2l0Y2hlciAudGlsZS5yaWdodHtcclxuICBib3gtc2hhZG93OlxyXG4gICAgaW5zZXQgMXB4IDAgMCAjMDAwMDAwOTAsXHJcbiAgICBpbnNldCAycHggMCAwICNmZmZmZmYxMCxcclxuICAgIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwyNTUsMjU1LC4yKSxcclxuICAgIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4wNik7XHJcbn1cclxuXHJcbi5zd2l0Y2hlciAudGlsZTphY3RpdmV7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxcHgpIH1cclxuLnN3aXRjaGVyIC50aWxlW2FyaWEtc2VsZWN0ZWQ9XCJmYWxzZVwiXXsgZmlsdGVyOiBicmlnaHRuZXNzKC43OCkgY29udHJhc3QoMS4wNSkgfVxyXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cInRydWVcIl17XHJcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICNlN2U5ZWMsIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4yKSwgMCAwIDAgMXB4ICNmZmZmZmYyMDtcclxufVxyXG5cclxuLnN3aXRjaGVyIHN2Z3sgd2lkdGg6IHZhcigtLWljb24sIDI0cHgpOyBoZWlnaHQ6IHZhcigtLWljb24sIDI0cHgpOyBkaXNwbGF5OiBibG9jayB9XHJcbi5zd2l0Y2hlciAuc3Ryb2tleyBzdHJva2U6IHZhcigtLWljb24taW5hY3RpdmUpOyBzdHJva2Utd2lkdGg6MS44OyBmaWxsOm5vbmU7IHN0cm9rZS1saW5lY2FwOnJvdW5kOyBzdHJva2UtbGluZWpvaW46cm91bmQgfVxyXG4uc3dpdGNoZXIgLmRvdHsgZmlsbDogdmFyKC0taWNvbi1pbmFjdGl2ZSkgfVxyXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0gLnN0cm9rZXsgc3Ryb2tlOiB2YXIoLS1pY29uLWFjdGl2ZSkgfVxyXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0gLmRvdHsgZmlsbDogdmFyKC0taWNvbi1hY3RpdmUpIH1cclxuLnN3aXRjaGVyIC50aWxlOmhvdmVyIC5zdHJva2V7IHN0cm9rZTogdmFyKC0taWNvbi1hY3RpdmUpIH1cclxuLnN3aXRjaGVyIC50aWxlOmhvdmVyIC5kb3R7IGZpbGw6IHZhcigtLWljb24tYWN0aXZlKSB9XHJcblxyXG4uc3Itb25seXsgcG9zaXRpb246YWJzb2x1dGU7IHdpZHRoOjFweDsgaGVpZ2h0OjFweDsgbWFyZ2luOi0xcHg7IG92ZXJmbG93OmhpZGRlbjsgY2xpcDpyZWN0KDAsMCwwLDApOyB3aGl0ZS1zcGFjZTpub3dyYXA7IGJvcmRlcjowIH1cclxuXHJcblxyXG5cclxuXHJcbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbnRyb2xsZXJzL3N3aXRjaGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGVBQWU7RUFDZixTQUFTO0VBQ1QsV0FBVztFQUNYLGFBQWE7RUFDYixhQUFhO0VBQ2IsMERBQTBEO0VBQzFELG9DQUFvQztFQUNwQyxxQ0FBcUM7RUFDckMsc0JBQXNCO0VBQ3RCLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLFVBQVU7RUFDVixlQUFlO0VBQ2Ysd0JBQXdCO0VBQ3hCLHlCQUF5QjtFQUN6QixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQjs7cUVBRW1FO0VBQ25FOzt5Q0FFdUM7QUFDekM7O0FBRUE7RUFDRTs7Ozt5Q0FJdUM7QUFDekM7O0FBRUEsd0JBQXdCLDJCQUEyQjtBQUNuRCx3Q0FBd0MsdUNBQXVDO0FBQy9FO0VBQ0UsOEZBQThGO0FBQ2hHOztBQUVBLGVBQWUsd0JBQXdCLEVBQUUseUJBQXlCLEVBQUUsZUFBZTtBQUNuRixtQkFBbUIsNEJBQTRCLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLHNCQUFzQjtBQUMxSCxnQkFBZ0IsMkJBQTJCO0FBQzNDLCtDQUErQywyQkFBMkI7QUFDMUUsNENBQTRDLHlCQUF5QjtBQUNyRSwrQkFBK0IsMkJBQTJCO0FBQzFELDRCQUE0Qix5QkFBeUI7O0FBRXJELFVBQVUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLFNBQVNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnN3aXRjaGVye1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgdG9wOiAxMnB4O1xcclxcbiAgcmlnaHQ6IDEycHg7XFxyXFxuICB6LWluZGV4OiA5OTk5O1xcclxcbiAgZGlzcGxheTogZ3JpZDtcXHJcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogdmFyKC0tdGlsZSwgNDhweCkgdmFyKC0tdGlsZSwgNDhweCk7XFxyXFxuICBjb2x1bW4tZ2FwOiB2YXIoLS1zd2l0Y2hlci1nYXAsIDBweCk7XFxyXFxuICBwYWRkaW5nOiAwIHZhcigtLXN3aXRjaGVyLWV4dHJhLCAwcHgpO1xcclxcbiAgLS1pY29uLWFjdGl2ZTogIzQyQjk4MztcXHJcXG4gIC0taWNvbi1pbmFjdGl2ZTogIzlhYTNiMjtcXHJcXG59XFxyXFxuXFxyXFxuLnN3aXRjaGVyIC50aWxle1xcclxcbiAgYWxsOiB1bnNldDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIHdpZHRoOiB2YXIoLS10aWxlLCA0OHB4KTtcXHJcXG4gIGhlaWdodDogdmFyKC0tdGlsZSwgNDhweCk7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgcGxhY2UtaXRlbXM6IGNlbnRlcjtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIGJhY2tncm91bmQ6XFxyXFxuICAgIHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoMGRlZywgIzFjMWUyMyAwIDJweCwgIzE1MTcxYiAycHggNHB4KSxcXHJcXG4gICAgcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg5MGRlZywgIzE0MTYxYSAwIDhweCwgIzEyMTQxOCA4cHggMTZweCk7XFxyXFxuICBib3gtc2hhZG93OlxcclxcbiAgICBpbnNldCAwIDAgMCAxcHggcmdiYSgyNTUsMjU1LDI1NSwuMiksXFxyXFxuICAgIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4wNik7XFxyXFxufVxcclxcblxcclxcbi5zd2l0Y2hlciAudGlsZS5yaWdodHtcXHJcXG4gIGJveC1zaGFkb3c6XFxyXFxuICAgIGluc2V0IDFweCAwIDAgIzAwMDAwMDkwLFxcclxcbiAgICBpbnNldCAycHggMCAwICNmZmZmZmYxMCxcXHJcXG4gICAgaW5zZXQgMCAwIDAgMXB4IHJnYmEoMjU1LDI1NSwyNTUsLjIpLFxcclxcbiAgICBpbnNldCAwIDAgMCAycHggcmdiYSgyNTUsMjU1LDI1NSwuMDYpO1xcclxcbn1cXHJcXG5cXHJcXG4uc3dpdGNoZXIgLnRpbGU6YWN0aXZleyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMXB4KSB9XFxyXFxuLnN3aXRjaGVyIC50aWxlW2FyaWEtc2VsZWN0ZWQ9XFxcImZhbHNlXFxcIl17IGZpbHRlcjogYnJpZ2h0bmVzcyguNzgpIGNvbnRyYXN0KDEuMDUpIH1cXHJcXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cXFwidHJ1ZVxcXCJde1xcclxcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICNlN2U5ZWMsIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4yKSwgMCAwIDAgMXB4ICNmZmZmZmYyMDtcXHJcXG59XFxyXFxuXFxyXFxuLnN3aXRjaGVyIHN2Z3sgd2lkdGg6IHZhcigtLWljb24sIDI0cHgpOyBoZWlnaHQ6IHZhcigtLWljb24sIDI0cHgpOyBkaXNwbGF5OiBibG9jayB9XFxyXFxuLnN3aXRjaGVyIC5zdHJva2V7IHN0cm9rZTogdmFyKC0taWNvbi1pbmFjdGl2ZSk7IHN0cm9rZS13aWR0aDoxLjg7IGZpbGw6bm9uZTsgc3Ryb2tlLWxpbmVjYXA6cm91bmQ7IHN0cm9rZS1saW5lam9pbjpyb3VuZCB9XFxyXFxuLnN3aXRjaGVyIC5kb3R7IGZpbGw6IHZhcigtLWljb24taW5hY3RpdmUpIH1cXHJcXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cXFwidHJ1ZVxcXCJdIC5zdHJva2V7IHN0cm9rZTogdmFyKC0taWNvbi1hY3RpdmUpIH1cXHJcXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cXFwidHJ1ZVxcXCJdIC5kb3R7IGZpbGw6IHZhcigtLWljb24tYWN0aXZlKSB9XFxyXFxuLnN3aXRjaGVyIC50aWxlOmhvdmVyIC5zdHJva2V7IHN0cm9rZTogdmFyKC0taWNvbi1hY3RpdmUpIH1cXHJcXG4uc3dpdGNoZXIgLnRpbGU6aG92ZXIgLmRvdHsgZmlsbDogdmFyKC0taWNvbi1hY3RpdmUpIH1cXHJcXG5cXHJcXG4uc3Itb25seXsgcG9zaXRpb246YWJzb2x1dGU7IHdpZHRoOjFweDsgaGVpZ2h0OjFweDsgbWFyZ2luOi0xcHg7IG92ZXJmbG93OmhpZGRlbjsgY2xpcDpyZWN0KDAsMCwwLDApOyB3aGl0ZS1zcGFjZTpub3dyYXA7IGJvcmRlcjowIH1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///688\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(n){var g=__webpack_module_cache__[n];if(void 0!==g)return g.exports;var I=__webpack_module_cache__[n]={id:n,exports:{}};return __webpack_modules__[n](I,I.exports,__webpack_require__),I.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(n,g,I,t)=>{if(!g){var e=1/0;for(C=0;C<deferred.length;C++){for(var[g,I,t]=deferred[C],l=!0,i=0;i<g.length;i++)(!1&t||e>=t)&&Object.keys(__webpack_require__.O).every((n=>__webpack_require__.O[n](g[i])))?g.splice(i--,1):(l=!1,t<e&&(e=t));if(l){deferred.splice(C--,1);var c=I();void 0!==c&&(n=c)}}return n}t=t||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>t;C--)deferred[C]=deferred[C-1];deferred[C]=[g,I,t]},__webpack_require__.n=n=>{var g=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=(n,g)=>{for(var I in g)__webpack_require__.o(g,I)&&!__webpack_require__.o(n,I)&&Object.defineProperty(n,I,{enumerable:!0,get:g[I]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),__webpack_require__.o=(n,g)=>Object.prototype.hasOwnProperty.call(n,g),(()=>{var n={456:0};__webpack_require__.O.j=g=>0===n[g];var g=(g,I)=>{var t,e,[l,i,c]=I,C=0;if(l.some((g=>0!==n[g]))){for(t in i)__webpack_require__.o(i,t)&&(__webpack_require__.m[t]=i[t]);if(c)var B=c(__webpack_require__)}for(g&&g(I);C<l.length;C++)e=l[C],__webpack_require__.o(n,e)&&n[e]&&n[e][0](),n[e]=0;return __webpack_require__.O(B)},I=self.webpackChunkoscilloscope_simulator=self.webpackChunkoscilloscope_simulator||[];I.forEach(g.bind(null,0)),I.push=g.bind(null,I.push.bind(I))})(),__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__.O(void 0,[233,96],(()=>__webpack_require__(297)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();