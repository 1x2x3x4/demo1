(()=>{"use strict";var __webpack_modules__={297:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  v: () => (/* binding */ tweenGroup)\n});\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js + 1 modules\nvar three_module = __webpack_require__(815);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(24);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(40);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/controllers/switcher.css\nvar switcher = __webpack_require__(688);\n;// ./src/controllers/switcher.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, \"head\");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(switcher/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const controllers_switcher = (switcher/* default */.A && switcher/* default */.A.locals ? switcher/* default */.A.locals : undefined);\n\n;// ./src/widgets/switcher.js\n\r\n// 渲染右上角切换控件\r\n// current: 'external' | 'internal'\r\n// options: { tile?: string, icon?: string, gap?: string, extra?: string }\r\nfunction renderSwitcher(current, options = {}){\r\n  const nav = document.createElement('nav');\r\n  nav.className = 'switcher';\r\n  nav.setAttribute('role', 'tablist');\r\n  nav.setAttribute('aria-label', '页面切换');\r\n\r\n  // 允许通过 CSS 变量自定义尺寸/间距\r\n  if (options.tile)  nav.style.setProperty('--tile', options.tile);\r\n  if (options.icon)  nav.style.setProperty('--icon', options.icon);\r\n  if (options.gap)   nav.style.setProperty('--switcher-gap', options.gap);\r\n  if (options.extra) nav.style.setProperty('--switcher-extra', options.extra);\r\n\r\n  const external = document.createElement('a');\r\n  external.className = 'tile left';\r\n  external.id = 'tab-external';\r\n  external.setAttribute('role', 'tab');\r\n  external.setAttribute('href', 'index.html');\r\n  external.setAttribute('title', '外部（面板/示波器）');\r\n  external.setAttribute('aria-selected', String(current === 'external'));\r\n  external.innerHTML = '<span class=\"sr-only\">外部</span>'+\r\n    '<svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">'+\r\n    '  <rect class=\"stroke\" x=\"3\" y=\"4\" width=\"18\" height=\"14\" rx=\"1.5\"/>'+\r\n    '  <rect class=\"stroke\" x=\"5\" y=\"6\" width=\"10\" height=\"8\" rx=\"0.5\"/>'+\r\n    '  <circle class=\"stroke\" cx=\"18\" cy=\"9\" r=\"1.3\"/>'+\r\n    '  <circle class=\"stroke\" cx=\"18\" cy=\"13\" r=\"1.3\"/>'+\r\n    '</svg>';\r\n\r\n  const internal = document.createElement('a');\r\n  internal.className = 'tile right';\r\n  internal.id = 'tab-internal';\r\n  internal.setAttribute('role', 'tab');\r\n  internal.setAttribute('href', 'internal.html');\r\n  internal.setAttribute('title', '内部原理（波形/电路）');\r\n  internal.setAttribute('aria-selected', String(current === 'internal'));\r\n  internal.innerHTML = '<span class=\"sr-only\">内部原理</span>'+\r\n    '<svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">'+\r\n    '  <path class=\"stroke\" d=\"M2 12c2-6 4 6 6 0s4 6 6 0 4 6 6 0\"/>'+\r\n    '  <circle class=\"dot\" cx=\"19\" cy=\"6\" r=\"1.1\"/>'+\r\n    '</svg>';\r\n\r\n  nav.appendChild(external);\r\n  nav.appendChild(internal);\r\n  document.body.appendChild(nav);\r\n}\r\n\r\n// 兼容：同时挂到 window 以避免历史调用报错\r\nif (typeof window !== 'undefined') {\r\n  window.renderSwitcher = renderSwitcher;\r\n}\r\n\r\n\r\n\r\n\r\n\n;// ./src/config.json\nconst config_namespaceObject = /*#__PURE__*/JSON.parse('{\"CONFIG\":{\"beam\":{\"intensity\":1,\"color\":\"0x00ff00\"},\"deflection\":{\"horizontal\":{\"voltage\":0,\"maxDeflection\":3},\"vertical\":{\"voltage\":0,\"maxDeflection\":2.5}},\"waveform\":{\"type\":\"sine\",\"frequency\":1,\"amplitude\":3,\"phase\":0,\"enabled\":false},\"screen\":{\"persistence\":0.95,\"color\":\"0x0\",\"intensity\":0.6,\"gridColor\":\"0x666666\",\"gridSpacing\":0.5,\"gridOpacity\":0.3},\"dotLight\":{\"color\":\"0xffff00\"},\"shell\":{\"visible\":true,\"opacity\":0.8,\"size\":{\"width\":3.75,\"height\":3.75,\"depth\":4},\"cylinder1\":{\"visible\":false,\"radius\":1.5,\"height\":3.5,\"position\":{\"x\":0,\"y\":0,\"z\":0},\"rotation\":{\"x\":0,\"y\":0,\"z\":-3.1416},\"color\":\"0x88ccff\",\"opacity\":0.6},\"cylinder2\":{\"visible\":true,\"radius\":1,\"height\":2,\"position\":{\"x\":-4.5,\"y\":0,\"z\":0},\"rotation\":{\"x\":0,\"y\":0,\"z\":0},\"color\":\"0xF0F0F0\",\"opacity\":0.7},\"rotationCurveConnection\":{\"visible\":true,\"curveType\":\"G2\",\"connectionLength\":4.65,\"segments\":50,\"radialSegments\":32,\"color\":\"0xF0F0F0\",\"opacity\":0.6,\"position\":{\"offset\":{\"x\":3.3,\"y\":0,\"z\":0},\"description\":\"连接相对于计算中心点的位置偏移\"},\"rotation\":{\"offset\":{\"x\":0,\"y\":0,\"z\":0},\"description\":\"连接相对于计算方向的旋转偏移（弧度）\"},\"description\":\"旋转曲线连接配置 - 用于创建圆柱体之间的平滑过渡\"},\"superellipseTransition\":{\"visible\":true,\"segments\":64,\"radialSegments\":32,\"transitionLength\":5,\"startExponent\":2,\"endExponent\":40,\"g2Smoothing\":true,\"color\":\"0xF0F0F0\",\"opacity\":0.8,\"position\":{\"offset\":{\"x\":1.25,\"y\":0,\"z\":0},\"description\":\"形状渐变相对于计算中心点的位置偏移\"},\"rotation\":{\"offset\":{\"x\":0,\"y\":0,\"z\":0},\"description\":\"形状渐变相对于计算方向的旋转偏移（弧度）\"},\"description\":\"超椭圆形状渐变配置 - 从圆形平滑过渡到矩形（基于|x/a|^m + |y/b|^m = 1，更高的endExponent创造更接近矩形的形状）\"}},\"camera\":{\"fov\":45,\"near\":0.1,\"far\":1000,\"position\":{\"x\":9,\"y\":6,\"z\":15},\"target\":{\"x\":0,\"y\":0,\"z\":0}},\"scene\":{\"background\":\"0x20232a\",\"grid\":{\"size\":20,\"divisions\":40,\"color1\":\"0x4a4a4a\",\"color2\":\"0x2f2f2f\",\"position\":{\"x\":0,\"y\":-1.6,\"z\":0}}},\"materials\":{\"metal\":{\"color\":\"0xF0F0F0\",\"metalness\":0.6,\"roughness\":0.3,\"textures\":{\"map\":\"textures/silver_metal_background_1.jpg\"}},\"plate\":{\"color\":\"0xF0F0F0\",\"metalness\":0.6,\"roughness\":0.3,\"textures\":{\"map\":\"textures/silver_metal_background_1.jpg\"}},\"screen\":{\"color\":\"0x001a00\",\"roughness\":0.4,\"side\":\"DoubleSide\"},\"glow\":{\"opacity\":0.8,\"size\":0.02}},\"components\":{\"gun\":{\"radius\":0.15,\"height\":2,\"position\":{\"x\":-4,\"y\":0,\"z\":0}},\"gunHead\":{\"radius\":0.1,\"height\":0.4,\"position\":{\"x\":-2.9,\"y\":0,\"z\":0}},\"verticalPlates\":{\"width\":0.05,\"height\":1.5,\"depth\":1,\"positions\":[{\"x\":-1.5,\"y\":0.8,\"z\":0},{\"x\":-1.5,\"y\":-0.8,\"z\":0}]},\"horizontalPlates\":{\"width\":1.5,\"height\":0.05,\"depth\":1,\"positions\":[{\"x\":-0.2,\"y\":0,\"z\":0.55},{\"x\":-0.2,\"y\":0,\"z\":-0.55}]},\"screen\":{\"width\":4,\"height\":3,\"position\":{\"x\":6,\"y\":0,\"z\":0}}},\"electronBeam\":{\"startPoint\":{\"x\":-3,\"y\":0,\"z\":0},\"endPoint\":{\"x\":6,\"y\":0,\"z\":0},\"pathPoints\":[{\"x\":-2.7,\"y\":0,\"z\":0},{\"x\":-1.5,\"y\":0,\"z\":0},{\"x\":-0.2,\"y\":0,\"z\":0},{\"x\":3,\"y\":0,\"z\":0}],\"trace\":{\"maxPoints\":100,\"opacity\":0.3},\"parabolicSegments\":15,\"trajectorySmoothing\":0.3,\"linearSegments\":{\"gunToVerticalPlate\":3,\"betweenPlates\":3,\"plateToScreen\":5},\"voltageScalingFactor\":1,\"zFightingOffset\":0.05,\"screenOffset\":0.01,\"enableParticleEffect\":false,\"physics\":{\"electronVelocity\":1,\"electricFieldStrength\":0.8,\"platePositions\":{\"verticalPlateStart\":-1.8,\"verticalPlateEnd\":-1.2,\"horizontalPlateStart\":-0.5,\"horizontalPlateEnd\":0.5}}},\"screenEffects\":{\"maxGlowPoints\":200,\"glowPointSize\":0.02,\"fadeRate\":10,\"minOpacity\":0.05},\"explodedView\":{\"explodeFactor\":1.5,\"animationDuration\":1000,\"cameraOffset\":{\"x\":3,\"y\":2,\"z\":3}},\"demoAnimation\":{\"electronParticle\":{\"size\":0.015,\"opacity\":0.8,\"emissionRate\":8},\"cameraOffset\":{\"x\":3,\"y\":2,\"z\":3},\"animationDuration\":1500},\"ui\":{\"controlPanel\":{\"position\":{\"bottom\":\"20px\",\"right\":\"20px\"},\"backgroundColor\":\"rgba(0, 0, 0, 0.7)\",\"borderRadius\":\"8px\",\"padding\":\"10px\",\"zIndex\":100},\"demoPanel\":{\"position\":{\"top\":\"20px\",\"left\":\"20px\"},\"backgroundColor\":\"rgba(0, 0, 0, 0.7)\",\"borderRadius\":\"8px\",\"padding\":\"15px\",\"maxWidth\":\"300px\",\"zIndex\":100},\"button\":{\"backgroundColor\":\"#2196F3\",\"hoverColor\":\"#0b7dda\",\"activeColor\":\"#4CAF50\",\"warningColor\":\"#f44336\",\"padding\":\"8px 12px\",\"borderRadius\":\"4px\"}},\"labelSystem\":{\"backgroundColor\":\"rgba(0, 0, 0, 0.6)\",\"color\":\"white\",\"padding\":\"2px 6px\",\"borderRadius\":\"3px\",\"fontSize\":\"12px\",\"descriptionPanel\":{\"position\":{\"bottom\":\"20px\",\"left\":\"20px\"},\"backgroundColor\":\"rgba(0, 0, 0, 0.8)\",\"maxWidth\":\"400px\",\"zIndex\":1000}},\"descriptions\":{\"gun\":{\"name\":\"电子枪\",\"description\":\"电子枪是阴极射线管的核心部件，负责产生并加速电子束。它由加热的阴极（负极）和带正电的阳极组成，电子从阴极释放后被阳极加速，形成高速电子束。\"},\"gunHead\":{\"name\":\"电子枪出口\",\"description\":\"电子枪出口是电子束离开电子枪进入偏转系统的位置。在这里，电子束被聚焦成一个细小的光点，准备接受后续的偏转控制。\"},\"v1\":{\"name\":\"垂直偏转板（上）\",\"description\":\"垂直偏转板是一对带电平行板，用于控制电子束在垂直方向上的偏转。当上下偏转板之间施加电压时，电子束会受到垂直方向的电场力，导致在垂直方向上偏转。\"},\"v2\":{\"name\":\"垂直偏转板（下）\",\"description\":\"垂直偏转板的下板，与上板形成电场。通过调整两板之间的电压，可以控制电子束向上或向下偏转的程度。\"},\"h1\":{\"name\":\"水平偏转板（左）\",\"description\":\"水平偏转板是一对带电平行板，用于控制电子束在水平方向上的偏转。当左右偏转板之间施加电压时，电子束会受到水平方向的电场力，导致在水平方向上偏转。\"},\"h2\":{\"name\":\"水平偏转板（右）\",\"description\":\"水平偏转板的右板，与左板形成电场。通过调整两板之间的电压，可以控制电子束向左或向右偏转的程度。\"},\"screen\":{\"name\":\"荧光屏\",\"description\":\"荧光屏是涂有荧光物质的平板，当高速电子束击中荧光屏时，荧光物质会发光，形成可见的光点。通过控制电子束的偏转，可以在荧光屏上绘制各种图形和波形。\"}}},\"WAVEFORM_TYPES\":{\"sine\":\"正弦波\",\"square\":\"方波\",\"sawtooth\":\"锯齿波\",\"triangle\":\"三角波\"}}');\n;// ./src/configLoader.js\n// 配置加载器 - 从JSON加载并处理配置\r\n\r\n\r\n// 递归处理对象，将字符串形式的十六进制颜色转换为数字\r\nfunction processConfig(obj) {\r\n  if (typeof obj === 'string' && obj.startsWith('0x')) {\r\n    // 转换十六进制字符串为数字\r\n    return parseInt(obj, 16);\r\n  } else if (Array.isArray(obj)) {\r\n    // 处理数组\r\n    return obj.map(processConfig);\r\n  } else if (obj && typeof obj === 'object') {\r\n    // 处理对象\r\n    const processed = {};\r\n    for (const [key, value] of Object.entries(obj)) {\r\n      processed[key] = processConfig(value);\r\n    }\r\n    return processed;\r\n  }\r\n  return obj;\r\n}\r\n\r\n// 处理配置数据\r\nconst processedConfig = processConfig(config_namespaceObject);\r\n\r\n// 导出处理后的配置\r\nconst CONFIG = processedConfig.CONFIG;\r\nconst WAVEFORM_TYPES = processedConfig.WAVEFORM_TYPES;\r\n\n;// ./src/examples/ConnectionPositionDemo.js\n/**\r\n * 旋转曲线连接位置控制演示\r\n * 展示如何在代码中动态移动和旋转连接\r\n */\r\n\r\nclass ConnectionPositionDemo {\r\n  constructor(crtShell) {\r\n    this.crtShell = crtShell;\r\n    this.animationId = null;\r\n    this.isAnimating = false;\r\n    \r\n    // 原始偏移量\r\n    this.originalPositionOffset = { x: 0, y: 0, z: 0 };\r\n    this.originalRotationOffset = { x: 0, y: 0, z: 0 };\r\n    \r\n    // 动画参数\r\n    this.time = 0;\r\n    this.animationSpeed = 0.01;\r\n  }\r\n\r\n  /**\r\n   * 开始位置动画演示\r\n   */\r\n  startPositionAnimation() {\r\n    if (this.isAnimating) return;\r\n    \r\n    this.isAnimating = true;\r\n    this.time = 0;\r\n    \r\n    // 保存原始偏移量\r\n    this.originalPositionOffset = this.crtShell.getConnectionPositionOffset();\r\n    this.originalRotationOffset = this.crtShell.getConnectionRotationOffset();\r\n    \r\n    console.log('🎬 开始旋转曲线连接位置动画演示');\r\n    this.animate();\r\n  }\r\n\r\n  /**\r\n   * 停止位置动画演示\r\n   */\r\n  stopPositionAnimation() {\r\n    if (!this.isAnimating) return;\r\n    \r\n    this.isAnimating = false;\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n    }\r\n    \r\n    // 恢复原始偏移量\r\n    this.crtShell.setConnectionPositionOffset(\r\n      this.originalPositionOffset.x,\r\n      this.originalPositionOffset.y,\r\n      this.originalPositionOffset.z\r\n    );\r\n    this.crtShell.setConnectionRotationOffset(\r\n      this.originalRotationOffset.x,\r\n      this.originalRotationOffset.y,\r\n      this.originalRotationOffset.z\r\n    );\r\n    \r\n    console.log('⏹️ 停止旋转曲线连接位置动画演示');\r\n  }\r\n\r\n  /**\r\n   * 动画循环\r\n   */\r\n  animate() {\r\n    if (!this.isAnimating) return;\r\n    \r\n    this.time += this.animationSpeed;\r\n    \r\n    // 计算动态位置偏移\r\n    const positionOffset = {\r\n      x: this.originalPositionOffset.x + Math.sin(this.time) * 0.5,\r\n      y: this.originalPositionOffset.y + Math.cos(this.time * 0.8) * 0.3,\r\n      z: this.originalPositionOffset.z + Math.sin(this.time * 1.2) * 0.2\r\n    };\r\n    \r\n    // 计算动态旋转偏移\r\n    const rotationOffset = {\r\n      x: this.originalRotationOffset.x + Math.sin(this.time * 0.7) * 0.2,\r\n      y: this.originalRotationOffset.y + Math.cos(this.time * 0.9) * 0.15,\r\n      z: this.originalRotationOffset.z + Math.sin(this.time * 1.1) * 0.1\r\n    };\r\n    \r\n    // 应用偏移\r\n    this.crtShell.setConnectionPositionOffset(\r\n      positionOffset.x,\r\n      positionOffset.y,\r\n      positionOffset.z\r\n    );\r\n    this.crtShell.setConnectionRotationOffset(\r\n      rotationOffset.x,\r\n      rotationOffset.y,\r\n      rotationOffset.z\r\n    );\r\n    \r\n    this.animationId = requestAnimationFrame(() => this.animate());\r\n  }\r\n\r\n  /**\r\n   * 演示不同的位置预设\r\n   */\r\n  demonstratePositionPresets() {\r\n    console.log('🎯 演示旋转曲线连接位置预设');\r\n    \r\n    const presets = [\r\n      {\r\n        name: '默认位置',\r\n        position: { x: 0, y: 0, z: 0 },\r\n        rotation: { x: 0, y: 0, z: 0 }\r\n      },\r\n      {\r\n        name: '向上偏移',\r\n        position: { x: 0, y: 0.5, z: 0 },\r\n        rotation: { x: 0, y: 0, z: 0 }\r\n      },\r\n      {\r\n        name: '向右偏移',\r\n        position: { x: 0.5, y: 0, z: 0 },\r\n        rotation: { x: 0, y: 0, z: 0 }\r\n      },\r\n      {\r\n        name: '向前偏移',\r\n        position: { x: 0, y: 0, z: 0.5 },\r\n        rotation: { x: 0, y: 0, z: 0 }\r\n      },\r\n      {\r\n        name: '旋转倾斜',\r\n        position: { x: 0, y: 0, z: 0 },\r\n        rotation: { x: 0.3, y: 0.2, z: 0.1 }\r\n      },\r\n      {\r\n        name: '复合变换',\r\n        position: { x: 0.3, y: 0.2, z: 0.1 },\r\n        rotation: { x: 0.2, y: 0.3, z: 0.1 }\r\n      }\r\n    ];\r\n    \r\n    let currentIndex = 0;\r\n    \r\n    const switchPreset = () => {\r\n      if (currentIndex >= presets.length) {\r\n        console.log('✅ 位置预设演示完成');\r\n        return;\r\n      }\r\n      \r\n      const preset = presets[currentIndex];\r\n      console.log(`📍 切换到预设: ${preset.name}`);\r\n      \r\n      this.crtShell.setConnectionPositionOffset(\r\n        preset.position.x,\r\n        preset.position.y,\r\n        preset.position.z\r\n      );\r\n      this.crtShell.setConnectionRotationOffset(\r\n        preset.rotation.x,\r\n        preset.rotation.y,\r\n        preset.rotation.z\r\n      );\r\n      \r\n      currentIndex++;\r\n      setTimeout(switchPreset, 2000); // 每2秒切换一个预设\r\n    };\r\n    \r\n    switchPreset();\r\n  }\r\n\r\n  /**\r\n   * 手动设置连接位置\r\n   */\r\n  setConnectionPosition(x, y, z) {\r\n    console.log(`🎯 手动设置连接位置: (${x}, ${y}, ${z})`);\r\n    this.crtShell.setConnectionPositionOffset(x, y, z);\r\n  }\r\n\r\n  /**\r\n   * 手动设置连接旋转\r\n   */\r\n  setConnectionRotation(x, y, z) {\r\n    console.log(`🔄 手动设置连接旋转: (${x}, ${y}, ${z}) 弧度`);\r\n    this.crtShell.setConnectionRotationOffset(x, y, z);\r\n  }\r\n\r\n  /**\r\n   * 获取当前连接变换信息\r\n   */\r\n  getConnectionTransform() {\r\n    const position = this.crtShell.getConnectionPositionOffset();\r\n    const rotation = this.crtShell.getConnectionRotationOffset();\r\n    const actualPosition = this.crtShell.getConnectionPosition();\r\n    const actualRotation = this.crtShell.getConnectionRotation();\r\n    \r\n    const info = {\r\n      positionOffset: position,\r\n      rotationOffset: rotation,\r\n      actualPosition: {\r\n        x: actualPosition.x,\r\n        y: actualPosition.y,\r\n        z: actualPosition.z\r\n      },\r\n      actualRotation: {\r\n        x: actualRotation.x,\r\n        y: actualRotation.y,\r\n        z: actualRotation.z\r\n      }\r\n    };\r\n    \r\n    console.log('📊 当前连接变换信息:', info);\r\n    return info;\r\n  }\r\n\r\n  /**\r\n   * 重置连接到默认位置\r\n   */\r\n  resetConnectionTransform() {\r\n    console.log('🔄 重置连接到默认位置');\r\n    this.crtShell.setConnectionPositionOffset(0, 0, 0);\r\n    this.crtShell.setConnectionRotationOffset(0, 0, 0);\r\n  }\r\n}\r\n\r\n// 使用示例（在浏览器控制台中）：\r\n/*\r\n// 假设你已经有了 crtShell 实例\r\nconst demo = new ConnectionPositionDemo(crtShell);\r\n\r\n// 开始动画演示\r\ndemo.startPositionAnimation();\r\n\r\n// 停止动画\r\ndemo.stopPositionAnimation();\r\n\r\n// 演示位置预设\r\ndemo.demonstratePositionPresets();\r\n\r\n// 手动设置位置\r\ndemo.setConnectionPosition(0.5, 0.3, 0.2);\r\n\r\n// 手动设置旋转\r\ndemo.setConnectionRotation(0.1, 0.2, 0.1);\r\n\r\n// 获取当前变换信息\r\ndemo.getConnectionTransform();\r\n\r\n// 重置到默认位置\r\ndemo.resetConnectionTransform();\r\n*/\r\n\n;// ./src/examples/SuperellipseTransitionDemo.js\n/**\r\n * 超椭圆形状渐变演示类\r\n * 提供形状渐变的交互控制和动画演示\r\n */\r\nclass SuperellipseTransitionDemo {\r\n  /**\r\n   * 构造函数\r\n   * @param {CRTShell} crtShell - CRT外壳实例\r\n   */\r\n  constructor(crtShell) {\r\n    this.crtShell = crtShell;\r\n    this.animationId = null;\r\n    this.animationStartTime = 0;\r\n    \r\n    console.log('🎨 超椭圆形状渐变演示已初始化');\r\n    console.log('📖 可用方法：');\r\n    console.log('  • startMorphAnimation() - 开始形状变形动画');\r\n    console.log('  • stopMorphAnimation() - 停止动画');\r\n    console.log('  • demonstrateExponents() - 演示不同指数效果');\r\n    console.log('  • setTransitionPosition(x,y,z) - 设置位置');\r\n    console.log('  • setTransitionExponents(start,end) - 设置指数范围');\r\n    console.log('  • resetTransition() - 重置到默认状态');\r\n  }\r\n\r\n  /**\r\n   * 开始形状变形动画\r\n   * 动态改变超椭圆指数，实现从圆形到方形的连续变形\r\n   */\r\n  startMorphAnimation() {\r\n    console.log('🎬 开始超椭圆形状变形动画...');\r\n    \r\n    this.stopMorphAnimation(); // 确保没有重复动画\r\n    this.animationStartTime = Date.now();\r\n    \r\n    const animate = () => {\r\n      const elapsed = (Date.now() - this.animationStartTime) / 1000;\r\n      const period = 6.0; // 动画周期（秒）\r\n      \r\n      // 使用正弦波创建平滑的指数变化\r\n      const t = (Math.sin(elapsed * 2 * Math.PI / period) + 1) / 2; // 0到1之间\r\n      \r\n      // 指数范围：2.0（圆形）到 12.0（尖锐方形）\r\n      const startExponent = 2.0 + t * 10.0;\r\n      const endExponent = 2.0 + (1 - t) * 10.0;\r\n      \r\n      // 更新形状渐变\r\n      this.crtShell.updateTransitionExponents(startExponent, endExponent);\r\n      \r\n      // 同时调整位置产生波动效果\r\n      const positionWave = Math.sin(elapsed * 4) * 0.2;\r\n      this.crtShell.setTransitionPositionOffset(1.2 + positionWave, 0, 0);\r\n      \r\n      this.animationId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    animate();\r\n  }\r\n\r\n  /**\r\n   * 停止形状变形动画\r\n   */\r\n  stopMorphAnimation() {\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n      console.log('⏹️ 形状变形动画已停止');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 演示不同的超椭圆指数效果\r\n   * 自动循环展示各种形状\r\n   */\r\n  demonstrateExponents() {\r\n    console.log('🎯 演示超椭圆指数效果...');\r\n    \r\n    const demonstrations = [\r\n      { name: '标准圆形', start: 2.0, end: 2.0, duration: 2000 },\r\n      { name: '椭圆形', start: 2.0, end: 2.5, duration: 2000 },\r\n      { name: '圆角方形', start: 2.0, end: 6.0, duration: 2000 },\r\n      { name: '方形', start: 2.0, end: 8.0, duration: 2000 },\r\n      { name: '尖锐方形', start: 2.0, end: 12.0, duration: 2000 },\r\n      { name: '超尖锐方形', start: 2.0, end: 20.0, duration: 2000 },\r\n      { name: '极端方形', start: 2.0, end: 50.0, duration: 2000 }\r\n    ];\r\n    \r\n    let currentIndex = 0;\r\n    \r\n    const showNext = () => {\r\n      if (currentIndex >= demonstrations.length) {\r\n        console.log('✅ 指数演示完成');\r\n        this.resetTransition();\r\n        return;\r\n      }\r\n      \r\n      const demo = demonstrations[currentIndex];\r\n      console.log(`📐 ${demo.name}: 起始指数=${demo.start}, 结束指数=${demo.end}`);\r\n      \r\n      this.crtShell.updateTransitionExponents(demo.start, demo.end);\r\n      \r\n      currentIndex++;\r\n      setTimeout(showNext, demo.duration);\r\n    };\r\n    \r\n    showNext();\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变位置\r\n   * @param {number} x - X坐标\r\n   * @param {number} y - Y坐标  \r\n   * @param {number} z - Z坐标\r\n   */\r\n  setTransitionPosition(x, y, z) {\r\n    this.crtShell.setTransitionPosition(x, y, z);\r\n    console.log(`📍 形状渐变位置设置为: (${x.toFixed(2)}, ${y.toFixed(2)}, ${z.toFixed(2)})`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变位置偏移\r\n   * @param {number} x - X轴偏移\r\n   * @param {number} y - Y轴偏移\r\n   * @param {number} z - Z轴偏移\r\n   */\r\n  setTransitionPositionOffset(x, y, z) {\r\n    this.crtShell.setTransitionPositionOffset(x, y, z);\r\n    console.log(`📍 形状渐变位置偏移设置为: (${x.toFixed(2)}, ${y.toFixed(2)}, ${z.toFixed(2)})`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变旋转偏移\r\n   * @param {number} x - X轴旋转偏移（弧度）\r\n   * @param {number} y - Y轴旋转偏移（弧度）\r\n   * @param {number} z - Z轴旋转偏移（弧度）\r\n   */\r\n  setTransitionRotationOffset(x, y, z) {\r\n    this.crtShell.setTransitionRotationOffset(x, y, z);\r\n    console.log(`🔄 形状渐变旋转偏移设置为: (${x.toFixed(3)}, ${y.toFixed(3)}, ${z.toFixed(3)}) 弧度`);\r\n  }\r\n\r\n  /**\r\n   * 设置超椭圆指数\r\n   * @param {number} startExponent - 起始指数（圆形：2.0）\r\n   * @param {number} endExponent - 结束指数（方形：8.0+）\r\n   */\r\n  setTransitionExponents(startExponent, endExponent) {\r\n    this.crtShell.updateTransitionExponents(startExponent, endExponent);\r\n    console.log(`📐 超椭圆指数设置为: 起始=${startExponent}, 结束=${endExponent}`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变可见性\r\n   * @param {boolean} visible - 是否可见\r\n   */\r\n  setTransitionVisible(visible) {\r\n    this.crtShell.setTransitionVisible(visible);\r\n    console.log(`👁️ 形状渐变可见性: ${visible ? '显示' : '隐藏'}`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变颜色\r\n   * @param {number} color - 颜色值（十六进制）\r\n   */\r\n  setTransitionColor(color) {\r\n    this.crtShell.setTransitionColor(color);\r\n    console.log(`🎨 形状渐变颜色设置为: 0x${color.toString(16)}`);\r\n  }\r\n\r\n  /**\r\n   * 设置形状渐变透明度\r\n   * @param {number} opacity - 透明度（0-1）\r\n   */\r\n  setTransitionOpacity(opacity) {\r\n    this.crtShell.setTransitionOpacity(opacity);\r\n    console.log(`🔍 形状渐变透明度设置为: ${opacity.toFixed(2)}`);\r\n  }\r\n\r\n  /**\r\n   * 获取当前形状渐变状态信息\r\n   */\r\n  getTransitionInfo() {\r\n    const position = this.crtShell.getTransitionPosition();\r\n    const rotation = this.crtShell.getTransitionRotation();\r\n    const posOffset = this.crtShell.getTransitionPositionOffset();\r\n    const rotOffset = this.crtShell.getTransitionRotationOffset();\r\n    \r\n    const info = {\r\n      position: { x: position.x, y: position.y, z: position.z },\r\n      rotation: { x: rotation.x, y: rotation.y, z: rotation.z },\r\n      positionOffset: posOffset,\r\n      rotationOffset: rotOffset\r\n    };\r\n    \r\n    console.log('📊 当前形状渐变状态:', info);\r\n    return info;\r\n  }\r\n\r\n  /**\r\n   * 重置形状渐变到默认状态\r\n   */\r\n  resetTransition() {\r\n    console.log('🔄 重置形状渐变到默认状态...');\r\n    \r\n    // 停止动画\r\n    this.stopMorphAnimation();\r\n    \r\n    // 重置指数\r\n    this.crtShell.updateTransitionExponents(2.0, 8.0);\r\n    \r\n    // 重置位置偏移\r\n    this.crtShell.setTransitionPositionOffset(1.2, 0, 0);\r\n    \r\n    // 重置旋转偏移\r\n    this.crtShell.setTransitionRotationOffset(0, 0, 0);\r\n    \r\n    // 重置可见性和样式\r\n    this.crtShell.setTransitionVisible(true);\r\n    this.crtShell.setTransitionColor(0x99ddff);\r\n    this.crtShell.setTransitionOpacity(0.8);\r\n    \r\n    console.log('✅ 形状渐变已重置');\r\n  }\r\n\r\n  /**\r\n   * 演示位置控制功能\r\n   */\r\n  demonstratePositionControl() {\r\n    console.log('🎯 演示位置控制功能...');\r\n    \r\n    const positions = [\r\n      { name: '默认位置', offset: { x: 1.2, y: 0, z: 0 } },\r\n      { name: '上移', offset: { x: 1.2, y: 0.5, z: 0 } },\r\n      { name: '下移', offset: { x: 1.2, y: -0.5, z: 0 } },\r\n      { name: '前移', offset: { x: 1.2, y: 0, z: 0.5 } },\r\n      { name: '后移', offset: { x: 1.2, y: 0, z: -0.5 } },\r\n      { name: '左移', offset: { x: 0.7, y: 0, z: 0 } },\r\n      { name: '右移', offset: { x: 1.7, y: 0, z: 0 } }\r\n    ];\r\n    \r\n    let currentIndex = 0;\r\n    \r\n    const showNext = () => {\r\n      if (currentIndex >= positions.length) {\r\n        console.log('✅ 位置控制演示完成');\r\n        this.resetTransition();\r\n        return;\r\n      }\r\n      \r\n      const pos = positions[currentIndex];\r\n      console.log(`📍 ${pos.name}: (${pos.offset.x}, ${pos.offset.y}, ${pos.offset.z})`);\r\n      \r\n      this.crtShell.setTransitionPositionOffset(pos.offset.x, pos.offset.y, pos.offset.z);\r\n      \r\n      currentIndex++;\r\n      setTimeout(showNext, 1500);\r\n    };\r\n    \r\n    showNext();\r\n  }\r\n\r\n  /**\r\n   * 开始螺旋位置动画\r\n   */\r\n  startSpiralAnimation() {\r\n    console.log('🌀 开始螺旋位置动画...');\r\n    \r\n    this.stopMorphAnimation(); // 停止其他动画\r\n    this.animationStartTime = Date.now();\r\n    \r\n    const animate = () => {\r\n      const elapsed = (Date.now() - this.animationStartTime) / 1000;\r\n      const frequency = 0.5; // 螺旋频率\r\n      \r\n      // 螺旋参数\r\n      const radius = 0.3;\r\n      const baseX = 1.2;\r\n      \r\n      const x = baseX + Math.cos(elapsed * frequency * 2 * Math.PI) * radius;\r\n      const y = Math.sin(elapsed * frequency * 2 * Math.PI) * radius;\r\n      const z = Math.sin(elapsed * frequency * Math.PI) * 0.2;\r\n      \r\n      this.crtShell.setTransitionPositionOffset(x, y, z);\r\n      \r\n      // 同时变化指数创建更复杂的效果\r\n      const expWave = (Math.sin(elapsed * 2) + 1) / 2;\r\n      const startExp = 2.0 + expWave * 6.0;\r\n      const endExp = 8.0 - expWave * 4.0;\r\n      this.crtShell.updateTransitionExponents(startExp, endExp);\r\n      \r\n      this.animationId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    animate();\r\n  }\r\n}\r\n\n// EXTERNAL MODULE: ./node_modules/dat.gui/build/dat.gui.module.js\nvar dat_gui_module = __webpack_require__(924);\n;// ./src/controllers/GuiController.js\n\n\n\nclass GuiController {\n  constructor(callbacks = {}) {\n    // 响应式宽度计算 - 基于2560*1440标准向下兼容\n    this.getResponsiveWidth = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      // 2K分辨率及以上 (2560*1440+)\n      if (width >= 2560 && height >= 1440) return 400;\n      // 标准FHD (1920*1080)\n      if (width >= 1920 && height >= 1080) return 350;\n      // 中等分辨率 (1366*768, 1600*900)\n      if (width >= 1366) return 300;\n      // 小屏幕 (1024*768)\n      if (width >= 1024) return 260;\n      // 平板 (768px-1023px)\n      if (width >= 768) return 240;\n      // 移动设备 (< 768px)\n      return 220;\n    };\n    \n    this.gui = new dat_gui_module/* GUI */.cL({ width: this.getResponsiveWidth() });\n    this.callbacks = callbacks;\n    \n    // 保存回调函数\n    this.onBeamChange = callbacks.onBeamChange || (() => {});\n    this.onDeflectionChange = callbacks.onDeflectionChange || (() => {});\n    this.onWaveformChange = callbacks.onWaveformChange || (() => {});\n    this.onScreenChange = callbacks.onScreenChange || (() => {});\n    this.onShellChange = callbacks.onShellChange || (() => {});\n    \n    this.initGui();\n    this.setupResponsiveHandlers();\n  }\n  \n  initGui() {\n    // 创建各个控制面板\n    this.initBeamControls();\n    this.initDeflectionControls();\n    this.initWaveformControls();\n    this.initScreenControls();\n    this.initShellControls();\n  }\n  \n  initBeamControls() {\n    const beamFolder = this.gui.addFolder('电子束参数');\n    \n    beamFolder.add(CONFIG.beam, 'intensity', 0, 1)\n      .name('强度')\n      .onChange(() => this.onBeamChange(CONFIG.beam));\n      \n    beamFolder.addColor({ color: CONFIG.beam.color }, 'color')\n      .name('颜色')\n      .onChange((value) => {\n        CONFIG.beam.color = value;\n        this.onBeamChange(CONFIG.beam);\n      });\n      \n    beamFolder.open();\n  }\n  \n  initDeflectionControls() {\n    const deflectionFolder = this.gui.addFolder('偏转板参数');\n    \n    deflectionFolder.add(CONFIG.deflection.horizontal, 'voltage', -5, 5, 0.1)\n      .name('水平电压 (V)')\n      .onChange(() => this.onDeflectionChange(CONFIG.deflection));\n      \n    deflectionFolder.add(CONFIG.deflection.vertical, 'voltage', -5, 5, 0.1)\n      .name('垂直电压 (V)')\n      .onChange(() => this.onDeflectionChange(CONFIG.deflection));\n      \n    deflectionFolder.open();\n  }\n  \n  initWaveformControls() {\n    const waveformFolder = this.gui.addFolder('波形参数');\n    \n    // 创建波形类型下拉菜单\n    const waveformOptions = {};\n    Object.entries(WAVEFORM_TYPES).forEach(([key, value]) => {\n      waveformOptions[value] = key;\n    });\n    \n    waveformFolder.add(CONFIG.waveform, 'enabled')\n      .name('启用波形')\n      .onChange(() => this.onWaveformChange(CONFIG.waveform));\n      \n    waveformFolder.add(CONFIG.waveform, 'type', Object.keys(WAVEFORM_TYPES))\n      .name('波形类型')\n      .onChange(() => this.onWaveformChange(CONFIG.waveform));\n      \n    waveformFolder.add(CONFIG.waveform, 'frequency', 0.1, 5, 0.1)\n      .name('频率 (Hz)')\n      .onChange(() => this.onWaveformChange(CONFIG.waveform));\n      \n    waveformFolder.add(CONFIG.waveform, 'amplitude', 0, 5, 0.1)\n      .name('振幅')\n      .onChange(() => this.onWaveformChange(CONFIG.waveform));\n      \n    waveformFolder.open();\n  }\n  \n  initScreenControls() {\n    const screenFolder = this.gui.addFolder('荧光屏参数');\n    \n    screenFolder.add(CONFIG.screen, 'persistence', 0, 1, 0.01)\n      .name('余辉持续')\n      .onChange(() => this.onScreenChange(CONFIG.screen));\n      \n    screenFolder.addColor({ color: CONFIG.screen.color }, 'color')\n      .name('荧光颜色')\n      .onChange((value) => {\n        CONFIG.screen.color = value;\n        this.onScreenChange(CONFIG.screen);\n      });\n      \n    screenFolder.add(CONFIG.screen, 'intensity', 0, 1, 0.1)\n      .name('发光强度')\n      .onChange(() => this.onScreenChange(CONFIG.screen));\n      \n    screenFolder.open();\n  }\n  \n  initShellControls() {\n    const shellFolder = this.gui.addFolder('外壳参数');\n    \n    shellFolder.add(CONFIG.shell, 'visible')\n      .name('显示外壳')\n      .onChange(() => this.onShellChange(CONFIG.shell));\n      \n    shellFolder.add(CONFIG.shell, 'opacity', 0, 1, 0.01)\n      .name('透明度')\n      .onChange(() => this.onShellChange(CONFIG.shell));\n      \n  \n    shellFolder.open();\n  }\n  \n  /**\n   * 设置响应式处理器\n   */\n  setupResponsiveHandlers() {\n    // 防抖函数\n    let resizeTimeout;\n    const debounce = (func, wait) => {\n      return function executedFunction(...args) {\n        const later = () => {\n          clearTimeout(resizeTimeout);\n          func(...args);\n        };\n        clearTimeout(resizeTimeout);\n        resizeTimeout = setTimeout(later, wait);\n      };\n    };\n    \n    // 窗口大小改变时调整GUI宽度\n    const handleResize = debounce(() => {\n      const newWidth = this.getResponsiveWidth();\n      if (this.gui && this.gui.domElement) {\n        this.gui.width = newWidth;\n        // 手动更新GUI的DOM样式\n        const guiElement = this.gui.domElement;\n        if (guiElement) {\n          guiElement.style.width = newWidth + 'px';\n        }\n      }\n    }, 250);\n    \n    // 监听窗口大小变化\n    window.addEventListener('resize', handleResize);\n    \n    // 存储清理函数\n    this.cleanup = () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }\n  \n  /**\n   * 销毁GUI控制器\n   */\n  destroy() {\n    if (this.cleanup) {\n      this.cleanup();\n    }\n    if (this.gui) {\n      this.gui.destroy();\n    }\n  }\n} \n;// ./src/controllers/UIController.js\n\n\n\n/**\n * UI控制器类\n * 负责管理界面元素和交互\n */\nclass UIController {\n  /**\n   * 构造函数\n   * @param {Object} options - 选项\n   * @param {Object} options.components - 组件对象\n   * @param {Object} options.controllers - 控制器对象\n   */\n  constructor(options = {}) {\n    this.components = options.components || {};\n    this.controllers = options.controllers || {};\n    \n    // 创建UI容器\n    this.container = document.createElement('div');\n    this.container.id = 'ui-container';\n    \n    // 确保DOM已加载\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        this.initializeUI();\n      });\n    } else {\n      this.initializeUI();\n    }\n  }\n  \n  /**\n   * 初始化UI（在DOM加载完成后调用）\n   */\n  initializeUI() {\n    console.log('初始化UI...');\n    document.body.appendChild(this.container);\n    \n    // 初始化UI\n    this.initStyles();\n    this.initUI();\n    \n    // 检查controllers是否正确传递\n    console.log('检查控制器:', {\n      labelSystem: !!this.controllers.labelSystem,\n      explodedView: !!this.controllers.explodedView,\n      demoAnimation: !!this.controllers.demoAnimation\n    });\n    \n    console.log('UI控制器初始化完成');\n  }\n  \n  /**\n   * 初始化样式\n   */\n  initStyles() {\n    const style = document.createElement('style');\n    style.textContent = `\n      #ui-container {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n      }\n      \n      .control-panel {\n        position: absolute;\n        bottom: ${CONFIG.ui.controlPanel.position.bottom};\n        right: ${CONFIG.ui.controlPanel.position.right};\n        background-color: ${CONFIG.ui.controlPanel.backgroundColor};\n        border-radius: ${CONFIG.ui.controlPanel.borderRadius};\n        padding: ${CONFIG.ui.controlPanel.padding};\n        color: white;\n        font-family: Arial, sans-serif;\n        pointer-events: auto;\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        z-index: ${CONFIG.ui.controlPanel.zIndex};\n      }\n      \n      .control-panel button {\n        background-color: ${CONFIG.ui.button.backgroundColor};\n        border: none;\n        color: white;\n        padding: ${CONFIG.ui.button.padding};\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 14px;\n        margin: 2px;\n        cursor: pointer;\n        border-radius: ${CONFIG.ui.button.borderRadius};\n        transition: background-color 0.3s;\n      }\n      \n      .control-panel button:hover {\n        background-color: ${CONFIG.ui.button.hoverColor};\n      }\n      \n      .control-panel button.active {\n        background-color: ${CONFIG.ui.button.activeColor};\n      }\n      \n      .control-panel button.warning {\n        background-color: ${CONFIG.ui.button.warningColor};\n      }\n      \n      .control-panel .button-group {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n      }\n      \n      .demo-panel {\n        position: absolute;\n        top: ${CONFIG.ui.demoPanel.position.top};\n        left: ${CONFIG.ui.demoPanel.position.left};\n        background-color: ${CONFIG.ui.demoPanel.backgroundColor};\n        border-radius: ${CONFIG.ui.demoPanel.borderRadius};\n        padding: ${CONFIG.ui.demoPanel.padding};\n        color: white;\n        font-family: Arial, sans-serif;\n        pointer-events: auto;\n        max-width: ${CONFIG.ui.demoPanel.maxWidth};\n        z-index: ${CONFIG.ui.demoPanel.zIndex};\n        transition: opacity 0.5s;\n      }\n      \n      .demo-panel h2 {\n        margin-top: 0;\n        margin-bottom: 10px;\n        font-size: 18px;\n      }\n      \n      .demo-panel p {\n        margin-bottom: 15px;\n        font-size: 14px;\n        line-height: 1.5;\n      }\n      \n      .demo-panel .progress {\n        width: 100%;\n        height: 4px;\n        background-color: #555;\n        margin-top: 10px;\n        border-radius: 2px;\n        overflow: hidden;\n      }\n      \n      .demo-panel .progress-bar {\n        height: 100%;\n        background-color: #4CAF50;\n        width: 0%;\n        transition: width 0.3s;\n      }\n      \n      .demo-panel .step-info {\n        display: flex;\n        justify-content: space-between;\n        font-size: 12px;\n        margin-top: 5px;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n  \n  /**\n   * 初始化UI\n   */\n  initUI() {\n    this.initControlPanel();\n    this.initDemoPanel();\n  }\n  \n  /**\n   * 初始化控制面板\n   */\n  initControlPanel() {\n    console.log('初始化控制面板...');\n    \n    // 创建控制面板\n    this.controlPanel = document.createElement('div');\n    this.controlPanel.className = 'control-panel';\n    this.container.appendChild(this.controlPanel);\n    \n    // 标签控制\n    const labelGroup = document.createElement('div');\n    labelGroup.className = 'button-group';\n    \n    const labelTitle = document.createElement('div');\n    labelTitle.textContent = '标签控制';\n    labelTitle.style.marginBottom = '5px';\n    labelGroup.appendChild(labelTitle);\n    \n    const toggleLabelsBtn = document.createElement('button');\n    toggleLabelsBtn.textContent = '显示标签';\n    toggleLabelsBtn.onclick = () => {\n      console.log('标签按钮被点击');\n      this.toggleLabels();\n    };\n    toggleLabelsBtn.id = 'toggle-labels-btn';\n    labelGroup.appendChild(toggleLabelsBtn);\n    \n    this.controlPanel.appendChild(labelGroup);\n    \n    // 分解视图控制\n    const explodeGroup = document.createElement('div');\n    explodeGroup.className = 'button-group';\n    \n    const explodeTitle = document.createElement('div');\n    explodeTitle.textContent = '分解视图';\n    explodeTitle.style.marginBottom = '5px';\n    explodeGroup.appendChild(explodeTitle);\n    \n    const toggleExplodeBtn = document.createElement('button');\n    toggleExplodeBtn.textContent = '分解视图';\n    toggleExplodeBtn.onclick = () => {\n      console.log('分解视图按钮被点击');\n      this.toggleExplodedView();\n    };\n    toggleExplodeBtn.id = 'toggle-explode-btn';\n    explodeGroup.appendChild(toggleExplodeBtn);\n    \n    const resetViewBtn = document.createElement('button');\n    resetViewBtn.textContent = '重置视图';\n    resetViewBtn.onclick = () => {\n      console.log('重置视图按钮被点击');\n      this.resetView();\n    };\n    explodeGroup.appendChild(resetViewBtn);\n    \n    this.controlPanel.appendChild(explodeGroup);\n    \n    // 组件聚焦控制\n    const focusGroup = document.createElement('div');\n    focusGroup.className = 'button-group';\n    \n    const focusTitle = document.createElement('div');\n    focusTitle.textContent = '聚焦组件';\n    focusTitle.style.marginBottom = '5px';\n    focusGroup.appendChild(focusTitle);\n    \n    // 为每个主要组件创建聚焦按钮\n    const components = [\n      { key: 'gun', name: '电子枪' },\n      { key: 'v1', name: '垂直偏转板' },\n      { key: 'h1', name: '水平偏转板' },\n      { key: 'screen', name: '荧光屏' }\n    ];\n    \n    components.forEach(comp => {\n      const btn = document.createElement('button');\n      btn.textContent = comp.name;\n      btn.onclick = () => {\n        console.log('聚焦到组件:', comp.key);\n        this.focusComponent(comp.key);\n      };\n      focusGroup.appendChild(btn);\n    });\n    \n    this.controlPanel.appendChild(focusGroup);\n    \n    // 演示动画控制\n    const demoGroup = document.createElement('div');\n    demoGroup.className = 'button-group';\n    \n    const demoTitle = document.createElement('div');\n    demoTitle.textContent = '工作原理演示';\n    demoTitle.style.marginBottom = '5px';\n    demoGroup.appendChild(demoTitle);\n    \n    const startDemoBtn = document.createElement('button');\n    startDemoBtn.textContent = '开始演示';\n    startDemoBtn.onclick = () => {\n      console.log('开始演示按钮被点击');\n      this.startDemoAnimation();\n    };\n    startDemoBtn.id = 'start-demo-btn';\n    demoGroup.appendChild(startDemoBtn);\n    \n    const stopDemoBtn = document.createElement('button');\n    stopDemoBtn.textContent = '停止演示';\n    stopDemoBtn.onclick = () => {\n      console.log('停止演示按钮被点击');\n      this.stopDemoAnimation();\n    };\n    stopDemoBtn.className = 'warning';\n    stopDemoBtn.style.display = 'none';\n    stopDemoBtn.id = 'stop-demo-btn';\n    demoGroup.appendChild(stopDemoBtn);\n    \n    this.controlPanel.appendChild(demoGroup);\n    \n    console.log('控制面板初始化完成');\n  }\n  \n  /**\n   * 初始化演示面板\n   */\n  initDemoPanel() {\n    this.demoPanel = document.createElement('div');\n    this.demoPanel.className = 'demo-panel';\n    this.demoPanel.style.opacity = '0';\n    this.demoPanel.style.display = 'none';\n    this.container.appendChild(this.demoPanel);\n    \n    // 标题\n    this.demoTitle = document.createElement('h2');\n    this.demoPanel.appendChild(this.demoTitle);\n    \n    // 描述\n    this.demoDescription = document.createElement('p');\n    this.demoPanel.appendChild(this.demoDescription);\n    \n    // 进度条\n    const progressContainer = document.createElement('div');\n    progressContainer.className = 'progress';\n    this.progressBar = document.createElement('div');\n    this.progressBar.className = 'progress-bar';\n    progressContainer.appendChild(this.progressBar);\n    this.demoPanel.appendChild(progressContainer);\n    \n    // 步骤信息\n    const stepInfo = document.createElement('div');\n    stepInfo.className = 'step-info';\n    this.stepCurrent = document.createElement('span');\n    this.stepTotal = document.createElement('span');\n    stepInfo.appendChild(this.stepCurrent);\n    stepInfo.appendChild(this.stepTotal);\n    this.demoPanel.appendChild(stepInfo);\n  }\n  \n  /**\n   * 切换标签显示\n   */\n  toggleLabels() {\n    console.log('切换标签显示', this.controllers.labelSystem);\n    if (!this.controllers.labelSystem) {\n      console.error('标签系统未初始化');\n      return;\n    }\n    \n    const visible = !this.controllers.labelSystem.visible;\n    console.log('设置标签可见性:', visible);\n    this.controllers.labelSystem.setVisible(visible);\n    \n    // 更新按钮文本\n    const btn = document.getElementById('toggle-labels-btn');\n    if (btn) {\n      btn.textContent = visible ? '隐藏标签' : '显示标签';\n      btn.classList.toggle('active', visible);\n      console.log('按钮状态已更新');\n    } else {\n      console.error('找不到标签按钮');\n    }\n  }\n  \n  /**\n   * 切换分解视图\n   */\n  toggleExplodedView() {\n    console.log('切换分解视图', this.controllers.explodedView);\n    console.log('当前components:', this.components);\n    console.log('crtShell存在?', !!this.components.crtShell);\n    \n    if (!this.controllers.explodedView) return;\n    \n    const exploded = this.controllers.explodedView.toggle();\n    console.log('分解视图状态:', exploded);\n    \n    // 同时切换cylinder2的爆炸效果\n    if (this.components.crtShell && this.components.crtShell.toggleCylinder2Explode) {\n      console.log('正在调用cylinder2爆炸效果...');\n      const cylinder2Exploded = this.components.crtShell.toggleCylinder2Explode(exploded);\n      console.log('Cylinder2爆炸状态:', cylinder2Exploded);\n    } else {\n      console.warn('无法调用cylinder2爆炸效果:', {\n        crtShell: !!this.components.crtShell,\n        toggleMethod: !!(this.components.crtShell && this.components.crtShell.toggleCylinder2Explode)\n      });\n    }\n    \n    // 同时切换旋转曲线连接的爆炸效果\n    if (this.components.crtShell && this.components.crtShell.toggleConnectionExplode) {\n      console.log('正在调用旋转曲线连接爆炸效果...');\n      const connectionExploded = this.components.crtShell.toggleConnectionExplode(exploded);\n      console.log('旋转曲线连接爆炸状态:', connectionExploded);\n    } else {\n      console.warn('无法调用旋转曲线连接爆炸效果:', {\n        crtShell: !!this.components.crtShell,\n        toggleMethod: !!(this.components.crtShell && this.components.crtShell.toggleConnectionExplode)\n      });\n    }\n    \n    // 同时切换超椭圆形状渐变的爆炸效果\n    if (this.components.crtShell && this.components.crtShell.toggleSuperellipseExplode) {\n      console.log('正在调用超椭圆形状渐变爆炸效果...');\n      const superellipseExploded = this.components.crtShell.toggleSuperellipseExplode(exploded);\n      console.log('超椭圆形状渐变爆炸状态:', superellipseExploded);\n    } else {\n      console.warn('无法调用超椭圆形状渐变爆炸效果:', {\n        crtShell: !!this.components.crtShell,\n        toggleMethod: !!(this.components.crtShell && this.components.crtShell.toggleSuperellipseExplode)\n      });\n    }\n    \n    // 更新按钮文本\n    const btn = document.getElementById('toggle-explode-btn');\n    if (btn) {\n      btn.textContent = exploded ? '合并视图' : '分解视图';\n      btn.classList.toggle('active', exploded);\n    }\n  }\n  \n  /**\n   * 重置视图\n   */\n  resetView() {\n    if (!this.controllers.explodedView) return;\n    \n    this.controllers.explodedView.resetView(\n      this.controllers.camera,\n      this.controllers.controls\n    );\n    \n    // 重置cylinder2爆炸状态\n    if (this.components.crtShell && this.components.crtShell.toggleCylinder2Explode) {\n      this.components.crtShell.toggleCylinder2Explode(false);\n      console.log('重置Cylinder2爆炸状态');\n    }\n    \n    // 重置旋转曲线连接爆炸状态\n    if (this.components.crtShell && this.components.crtShell.toggleConnectionExplode) {\n      this.components.crtShell.toggleConnectionExplode(false);\n      console.log('重置旋转曲线连接爆炸状态');\n    }\n    \n    // 重置超椭圆形状渐变爆炸状态\n    if (this.components.crtShell && this.components.crtShell.toggleSuperellipseExplode) {\n      this.components.crtShell.toggleSuperellipseExplode(false);\n      console.log('重置超椭圆形状渐变爆炸状态');\n    }\n    \n    // 更新分解视图按钮状态\n    const explodeBtn = document.getElementById('toggle-explode-btn');\n    if (explodeBtn) {\n      explodeBtn.textContent = '分解视图';\n      explodeBtn.classList.remove('active');\n    }\n  }\n  \n  /**\n   * 聚焦到组件\n   * @param {string} componentKey - 组件键名\n   */\n  focusComponent(componentKey) {\n    console.log('focusComponent被调用，componentKey:', componentKey);\n    console.log('this.controllers:', this.controllers);\n    console.log('this.controllers.explodedView:', this.controllers.explodedView);\n    console.log('this.controllers.camera:', this.controllers.camera);\n    console.log('this.controllers.controls:', this.controllers.controls);\n    \n    if (!this.controllers.explodedView) {\n      console.error('explodedView未初始化');\n      return;\n    }\n    \n    if (!this.controllers.camera) {\n      console.error('camera未初始化');\n      return;\n    }\n    \n    if (!this.controllers.controls) {\n      console.error('controls未初始化');\n      return;\n    }\n    \n    console.log('开始调用explodedView.focusComponent');\n    this.controllers.explodedView.focusComponent(\n      componentKey,\n      this.controllers.camera,\n      this.controllers.controls\n    );\n    console.log('explodedView.focusComponent调用完成');\n  }\n  \n  /**\n   * 开始演示动画\n   */\n  startDemoAnimation() {\n    console.log('startDemoAnimation被调用');\n    console.log('this.controllers.demoAnimation:', this.controllers.demoAnimation);\n    \n    if (!this.controllers.demoAnimation) {\n      console.error('demoAnimation未初始化');\n      return;\n    }\n    \n    console.log('显示演示面板');\n    // 显示演示面板\n    this.showDemoPanel();\n    \n    console.log('设置步骤回调');\n    // 设置步骤回调\n    this.controllers.demoAnimation.onStepStart = (stepIndex, step) => {\n      console.log('步骤回调被触发:', stepIndex, step);\n      this.updateDemoPanel(stepIndex, step);\n    };\n    \n    console.log('开始演示');\n    // 开始演示\n    this.controllers.demoAnimation.start();\n    \n    console.log('更新按钮状态');\n    // 更新按钮状态\n    document.getElementById('start-demo-btn').style.display = 'none';\n    document.getElementById('stop-demo-btn').style.display = 'inline-block';\n    \n    console.log('startDemoAnimation完成');\n  }\n  \n  /**\n   * 停止演示动画\n   */\n  stopDemoAnimation() {\n    if (!this.controllers.demoAnimation) return;\n    \n    // 停止演示\n    this.controllers.demoAnimation.stop();\n    \n    // 隐藏演示面板\n    this.hideDemoPanel();\n    \n    // 更新按钮状态\n    document.getElementById('start-demo-btn').style.display = 'inline-block';\n    document.getElementById('stop-demo-btn').style.display = 'none';\n  }\n  \n  /**\n   * 显示演示面板\n   */\n  showDemoPanel() {\n    this.demoPanel.style.display = 'block';\n    setTimeout(() => {\n      this.demoPanel.style.opacity = '1';\n    }, 10);\n  }\n  \n  /**\n   * 隐藏演示面板\n   */\n  hideDemoPanel() {\n    this.demoPanel.style.opacity = '0';\n    setTimeout(() => {\n      this.demoPanel.style.display = 'none';\n    }, 500);\n  }\n  \n  /**\n   * 更新演示面板\n   * @param {number} stepIndex - 当前步骤索引\n   * @param {Object} step - 当前步骤对象\n   */\n  updateDemoPanel(stepIndex, step) {\n    if (!this.controllers.demoAnimation) return;\n    \n    const totalSteps = this.controllers.demoAnimation.animationSteps.length;\n    const progress = ((stepIndex + 1) / totalSteps) * 100;\n    \n    // 更新标题和描述\n    this.demoTitle.textContent = step.title;\n    this.demoDescription.textContent = step.description;\n    \n    // 更新进度条\n    this.progressBar.style.width = `${progress}%`;\n    \n    // 更新步骤信息\n    this.stepCurrent.textContent = `步骤 ${stepIndex + 1}`;\n    this.stepTotal.textContent = `共 ${totalSteps} 步`;\n    \n    // 如果是最后一步，准备结束演示\n    if (stepIndex === totalSteps - 1) {\n      setTimeout(() => {\n        this.stopDemoAnimation();\n      }, step.duration);\n    }\n  }\n  \n  /**\n   * 调整UI大小\n   * @param {number} width - 宽度\n   * @param {number} height - 高度\n   */\n  resize(width, height) {\n    // 如果需要根据窗口大小调整UI，可以在这里实现\n  }\n}\n;// ./src/components/WaveformGenerator.js\n/**\n * 波形生成器类\n * 负责生成各种波形并计算偏转电压\n */\nclass WaveformGenerator {\n  constructor() {\n    this.time = 0;\n    this.lastTimestamp = 0;\n    this.lastHorizontalPosition = 0; // 记录上一次的水平位置\n    this.onWaveformReset = null; // 波形重置回调函数\n  }\n\n  /**\n   * 更新时间\n   * @param {number} timestamp - 当前时间戳\n   */\n  update(timestamp) {\n    // 添加防护检查\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      console.warn('波形生成器 - 无效的时间戳:', timestamp);\n      return;\n    }\n    \n    // 计算时间增量（秒）\n    if (this.lastTimestamp === 0) {\n      this.lastTimestamp = timestamp;\n      return;\n    }\n    \n    const deltaTime = (timestamp - this.lastTimestamp) / 1000;\n    \n    // 防护异常的 deltaTime\n    if (isNaN(deltaTime) || deltaTime < 0 || deltaTime > 1) {\n      console.warn('波形生成器 - 异常的时间增量:', deltaTime, '重置时间戳');\n      this.lastTimestamp = timestamp;\n      return;\n    }\n    \n    this.lastTimestamp = timestamp;\n    \n    // 更新内部时间（在演示动画期间减慢50%）\n    const timeScale = (window.demoAnimation && window.demoAnimation.isPlaying) ? 0.6 : 1.0;\n    this.time += deltaTime * timeScale;\n  }\n\n  /**\n   * 生成波形值\n   * @param {Object} params - 波形参数\n   * @returns {number} - 波形值 (-1 到 1 之间)\n   */\n  generateWaveform(params) {\n    if (!params.enabled) {\n      return 0;\n    }\n    \n    const { type, frequency, amplitude, phase } = params;\n    \n    // 添加防护检查\n    if (isNaN(this.time) || isNaN(frequency) || isNaN(amplitude) || isNaN(phase)) {\n      console.error('波形生成器 - 检测到 NaN 参数:', {\n        time: this.time,\n        frequency,\n        amplitude,\n        phase\n      });\n      return 0;\n    }\n    \n    const t = this.time * frequency * Math.PI * 2 + phase;\n    \n    // 检查计算结果\n    if (isNaN(t)) {\n      console.error('波形生成器 - 时间计算结果为 NaN:', t);\n      return 0;\n    }\n    \n    let result = 0;\n    switch (type) {\n      case 'sine':\n        result = Math.sin(t) * amplitude;\n        break;\n      case 'square':\n        result = (Math.sin(t) >= 0 ? 1 : -1) * amplitude;\n        break;\n      case 'sawtooth':\n        result = (((t / (Math.PI * 2)) % 1) * 2 - 1) * amplitude;\n        break;\n      case 'triangle':\n        result = (Math.abs(((t / Math.PI) % 2) - 1) * 2 - 1) * amplitude;\n        break;\n      default:\n        result = 0;\n    }\n    \n    // 最终检查结果\n    if (isNaN(result)) {\n      console.error('波形生成器 - 波形计算结果为 NaN:', { type, t, amplitude, result });\n      return 0;\n    }\n    \n    return result;\n  }\n  \n  /**\n   * 计算当前的偏转电压\n   * @param {Object} waveformParams - 波形参数\n   * @param {Object} deflectionParams - 偏转参数\n   * @returns {Object} - 包含水平和垂直偏转电压的对象\n   */\n  calculateDeflectionVoltage(waveformParams, deflectionParams) {\n    // 在演示动画期间，使用固定的原始电压值以保持波形位置不变\n    let baseHorizontal, baseVertical;\n    if (window.demoAnimation && window.demoAnimation.isPlaying && window.demoAnimation.originalVoltages) {\n      baseHorizontal = window.demoAnimation.originalVoltages.horizontal;\n      baseVertical = window.demoAnimation.originalVoltages.vertical;\n    } else {\n      // 获取基础电压值，添加防护\n      baseHorizontal = deflectionParams?.horizontal?.voltage ?? 0;\n      baseVertical = deflectionParams?.vertical?.voltage ?? 0;\n    }\n    \n    // 如果波形未启用，直接返回基础电压\n    if (!waveformParams.enabled) {\n      return {\n        horizontal: baseHorizontal,\n        vertical: baseVertical\n      };\n    }\n    \n    // 根据波形类型生成不同的扫描模式，使用偏转电压作为幅度调制因子\n    const scanPattern = this.generateScanPattern(waveformParams, deflectionParams);\n    \n    // 直接返回波形扫描模式产生的电压值（不再与基础电压相加）\n    // 这样偏转电压就控制波形幅度，而不是位置偏移\n    return {\n      horizontal: scanPattern.horizontal,\n      vertical: scanPattern.vertical\n    };\n  }\n  \n  /**\n   * 根据波形类型生成扫描模式\n   * @param {Object} params - 波形参数\n   * @param {Object} deflectionParams - 偏转参数，用于控制波形幅度\n   * @returns {Object} - 包含水平和垂直偏转值的对象\n   */\n  generateScanPattern(params, deflectionParams = null) {\n    const { type, frequency, amplitude, phase } = params;\n    \n    // 添加防护检查\n    if (isNaN(this.time) || isNaN(frequency) || isNaN(amplitude) || isNaN(phase)) {\n      console.error('波形生成器 - 检测到 NaN 参数:', {\n        time: this.time,\n        frequency,\n        amplitude,\n        phase\n      });\n      return { horizontal: 0, vertical: 0 };\n    }\n    \n    const t = this.time * frequency * Math.PI * 2 + phase;\n    \n    // 检查计算结果\n    if (isNaN(t)) {\n      console.error('波形生成器 - 时间计算结果为 NaN:', t);\n      return { horizontal: 0, vertical: 0 };\n    }\n    \n    // 获取偏转电压作为幅度调制因子\n    // 使用基础幅度 + 偏转电压调制，确保即使电压为0也有基本波形显示\n    const baseAmplitude = amplitude * 0.3; // 基础幅度（30%的原始幅度）\n    const horizontalVoltage = deflectionParams?.horizontal?.voltage ?? 0;\n    const verticalVoltage = deflectionParams?.vertical?.voltage ?? 0;\n    \n    // 幅度 = 基础幅度 + (电压调制 * 原始幅度)\n    const horizontalAmplitude = baseAmplitude + (Math.abs(horizontalVoltage) * amplitude * 0.2);\n    const verticalAmplitude = baseAmplitude + (Math.abs(verticalVoltage) * amplitude * 0.2);\n    \n    // 添加防护检查\n    if (isNaN(horizontalAmplitude) || isNaN(verticalAmplitude)) {\n      console.error('波形生成器 - 检测到 NaN 幅度参数:', {\n        horizontalAmplitude,\n        verticalAmplitude\n      });\n      return { horizontal: 0, vertical: 0 };\n    }\n    \n    let horizontal = 0;\n    let vertical = 0;\n    \n    // 使用频率参数来控制波形密集程度\n    const freqMultiplier = frequency * 2; // 频率倍数，用于控制波形密集度\n    \n    switch (type) {\n      case 'sine':\n        // 正弦波 - 水平锯齿扫描（从右向左）+ 垂直正弦波\n        // 水平扫描的幅度由水平偏转电压控制\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        // 垂直波形的幅度由垂直偏转电压控制\n        vertical = Math.sin(t * freqMultiplier) * Math.abs(verticalAmplitude) * 0.5;\n        break;\n        \n      case 'square':\n        // 方波 - 水平锯齿扫描（从右向左）+ 垂直方波\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        vertical = (Math.sin(t * freqMultiplier) >= 0 ? 1 : -1) * Math.abs(verticalAmplitude) * 0.5;\n        break;\n        \n      case 'triangle':\n        // 三角波 - 水平锯齿扫描（从右向左）+ 垂直三角波\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        vertical = (Math.abs(((t * freqMultiplier / Math.PI) % 2) - 1) * 2 - 1) * Math.abs(verticalAmplitude) * 0.5;\n        break;\n        \n      case 'sawtooth':\n        // 锯齿波 - 水平锯齿扫描（从右向左）+ 垂直锯齿波\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        vertical = (((t * freqMultiplier / (Math.PI * 2)) % 1) * 2 - 1) * Math.abs(verticalAmplitude) * 0.5;\n        break;\n        \n      default:\n        // 默认为简单的水平扫描（从右向左）\n        horizontal = ((1 - ((t / (Math.PI * 2)) % 1)) * 2 - 1) * Math.abs(horizontalAmplitude);\n        vertical = 0;\n    }\n    \n    // 最终检查结果\n    if (isNaN(horizontal) || isNaN(vertical)) {\n      console.error('波形生成器 - 扫描模式计算结果为 NaN:', { type, t, horizontalAmplitude, verticalAmplitude, horizontal, vertical });\n      return { horizontal: 0, vertical: 0 };\n    }\n    \n    // 检测波形重置（水平位置从左侧跳回右侧）\n    this.detectWaveformReset(horizontal);\n    \n    return { horizontal, vertical };\n  }\n\n\n  /**\n   * 检测波形重置（水平扫描从左端跳回右端）\n   * @param {number} currentHorizontal - 当前水平位置\n   */\n  detectWaveformReset(currentHorizontal) {\n    // 检测从负值（左侧）跳到正值（右侧）的情况\n    // 这表示开始了新的扫描周期（从右向左扫描完成后跳回右侧重新开始）\n    if (this.lastHorizontalPosition < -0.5 && currentHorizontal > 0.5) {\n      // 触发波形重置回调\n      if (this.onWaveformReset) {\n        this.onWaveformReset();\n      }\n    }\n    \n    // 更新上一次的水平位置\n    this.lastHorizontalPosition = currentHorizontal;\n  }\n\n  /**\n   * 设置波形重置回调函数\n   * @param {Function} callback - 回调函数\n   */\n  setWaveformResetCallback(callback) {\n    this.onWaveformReset = callback;\n  }\n\n  /**\n   * 重置时间和时间戳\n   * 在波形类型切换时调用，确保新波形从干净的状态开始\n   */\n  resetTime() {\n    this.time = 0;\n    this.lastTimestamp = 0;\n    this.lastHorizontalPosition = 0;\n    console.log('波形生成器时间已重置');\n  }\n} \n;// ./src/components/ElectronBeam.js\n\n\n\n/**\n * 电子束类\n * 负责处理电子束的路径和显示\n */\nclass ElectronBeam {\n  /**\n   * 构造函数\n   * @param {THREE.Scene} scene - Three.js场景\n   */\n  constructor(scene) {\n    this.scene = scene;\n    this.beamLine = null;\n    this.glowLine = null;\n    this.particleSystem = null;\n    this.beamPoints = [];\n    this.tracePoints = [];\n    this.traceLines = [];\n    this.traceSegments = []; // 存储轨迹段，避免回扫线\n    \n    // 电子束材质\n    this.beamMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.beam.intensity,\n      transparent: true\n    });\n    \n    // 轨迹材质（淡一些）\n    this.traceMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.electronBeam.trace.opacity,\n      transparent: true\n    });\n    \n    // 初始化电子束\n    this.initBeam();\n  }\n  \n  /**\n   * 初始化电子束\n   */\n  initBeam() {\n    // 默认电子束路径点\n    this.beamPoints = CONFIG.electronBeam.pathPoints.map(point => \n      new three_module/* Vector3 */.Pq0(point.x, point.y, point.z)\n    );\n    \n    // 创建增强的电子束材质\n    this.createEnhancedBeamMaterial();\n    \n    // 创建电子束几何体和线条\n    const beamGeometry = new three_module/* BufferGeometry */.LoY().setFromPoints(this.beamPoints);\n    this.beamLine = new three_module/* Line */.N1A(beamGeometry, this.beamMaterial);\n    \n    // 设置渲染顺序，确保电子束在透明极板之后渲染\n    this.beamLine.renderOrder = 5;\n    \n    this.scene.add(this.beamLine);\n  }\n\n  /**\n   * 创建增强的电子束材质，包含发光效果\n   */\n  createEnhancedBeamMaterial() {\n    // 主电子束材质（更亮更鲜艳）- 优化透明度渲染\n    this.beamMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.beam.intensity,\n      transparent: true,\n      linewidth: 3, // 增加线宽\n      depthTest: false, // 禁用深度测试，确保电子束总是可见\n      depthWrite: false // 禁用深度写入\n    });\n    \n    // 创建发光外围材质\n    this.glowMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.beam.intensity * 0.3,\n      transparent: true,\n      linewidth: 8, // 更宽的发光效果\n      depthTest: false, // 禁用深度测试\n      depthWrite: false // 禁用深度写入\n    });\n    \n    // 轨迹材质 - 优化透明度渲染\n    this.traceMaterial = new three_module/* LineBasicMaterial */.mrM({\n      color: CONFIG.beam.color,\n      opacity: CONFIG.electronBeam.trace.opacity,\n      transparent: true,\n      depthTest: false, // 禁用深度测试，确保轨迹可见\n      depthWrite: false // 禁用深度写入\n    });\n  }\n  \n  /**\n   * 更新电子束路径\n   * @param {Object} deflectionParams - 偏转参数对象\n   * @param {Object} deflectionParams.vertical - 垂直偏转参数\n   * @param {number} deflectionParams.vertical.voltage - 垂直偏转电压\n   * @param {Object} deflectionParams.horizontal - 水平偏转参数\n   * @param {number} deflectionParams.horizontal.voltage - 水平偏转电压\n   */\n  updateBeamPath(deflectionParams) {\n    // 计算偏转量，添加防护\n    const voltageScalingFactor = CONFIG.electronBeam.voltageScalingFactor;\n    const verticalVoltage = deflectionParams?.vertical?.voltage ?? 0;\n    const horizontalVoltage = deflectionParams?.horizontal?.voltage ?? 0;\n    \n    // 检查是否有 NaN 值\n    if (isNaN(verticalVoltage) || isNaN(horizontalVoltage)) {\n      console.error('电子束错误 - 检测到 NaN 值:', { verticalVoltage, horizontalVoltage });\n      return; // 直接返回，避免后续计算错误\n    }\n    \n    const verticalDeflection = verticalVoltage * (CONFIG.deflection.vertical.maxDeflection / voltageScalingFactor);\n    const horizontalDeflection = horizontalVoltage * (CONFIG.deflection.horizontal.maxDeflection / voltageScalingFactor);\n    \n    // 生成简单的直线电子束轨迹\n    this.beamPoints = this.generateSimpleBeamPath(verticalDeflection, horizontalDeflection);\n    \n    // 更新几何体\n    const beamGeometry = new three_module/* BufferGeometry */.LoY().setFromPoints(this.beamPoints);\n    \n    // 清除旧的电子束\n    this.clearBeamLines();\n    \n    // 创建多层电子束效果\n    this.createLayeredBeam(beamGeometry);\n    \n    // 可选：创建粒子效果（在配置中启用时）\n    if (CONFIG.electronBeam.enableParticleEffect) {\n      this.createParticleBeam(this.beamPoints);\n    }\n    \n    // 更新材质颜色和强度\n    this.updateBeamMaterials();\n    \n    // 记录轨迹点（只记录打在荧光屏上的点）\n    const lastBeamPoint = this.beamPoints[this.beamPoints.length - 1];\n    this.addTracePoint(lastBeamPoint.clone());\n  }\n  \n  /**\n   * 生成真实的电子束轨迹（考虑物理偏转效果）\n   * @param {number} verticalDeflection - 垂直偏转量\n   * @param {number} horizontalDeflection - 水平偏转量\n   * @returns {Array<THREE.Vector3>} 轨迹点数组\n   */\n  generateSimpleBeamPath(verticalDeflection, horizontalDeflection) {\n    return this.generateRealisticBeamPath(verticalDeflection, horizontalDeflection);\n  }\n\n  /**\n   * 生成真实的电子束轨迹，模拟物理偏转效果\n   * @param {number} verticalDeflection - 垂直偏转量\n   * @param {number} horizontalDeflection - 水平偏转量\n   * @returns {Array<THREE.Vector3>} 轨迹点数组\n   */\n  generateRealisticBeamPath(verticalDeflection, horizontalDeflection) {\n    const trajectoryPoints = [];\n    const totalSegments = 100; // 增加段数以获得更平滑的曲线，特别是对方波\n    \n    // 从配置文件获取关键位置点\n    const electronGun = new three_module/* Vector3 */.Pq0(\n      CONFIG.electronBeam.startPoint.x, \n      CONFIG.electronBeam.startPoint.y, \n      CONFIG.electronBeam.startPoint.z\n    );\n    const screenPosition = new three_module/* Vector3 */.Pq0(\n      CONFIG.electronBeam.endPoint.x, \n      CONFIG.electronBeam.endPoint.y, \n      CONFIG.electronBeam.endPoint.z\n    );\n    \n    // 从配置文件获取偏转板位置\n    const platePositions = CONFIG.electronBeam.physics.platePositions;\n    const verticalPlateStart = new three_module/* Vector3 */.Pq0(platePositions.verticalPlateStart, 0, 0);\n    const verticalPlateEnd = new three_module/* Vector3 */.Pq0(platePositions.verticalPlateEnd, 0, 0);\n    const horizontalPlateStart = new three_module/* Vector3 */.Pq0(platePositions.horizontalPlateStart, 0, 0);\n    const horizontalPlateEnd = new three_module/* Vector3 */.Pq0(platePositions.horizontalPlateEnd, 0, 0);\n    \n    // 从配置文件获取物理参数\n    const electronVelocity = CONFIG.electronBeam.physics.electronVelocity;\n    const electricFieldStrength = CONFIG.electronBeam.physics.electricFieldStrength;\n    \n    // 当前位置和速度\n    let currentPos = electronGun.clone();\n    let velocity = new three_module/* Vector3 */.Pq0(electronVelocity, 0, 0); // 初始水平向右\n    \n    for (let i = 0; i <= totalSegments; i++) {\n      const progress = i / totalSegments;\n      const x = electronGun.x + (screenPosition.x - electronGun.x) * progress;\n      \n      // 计算当前段的加速度\n      let acceleration = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      \n      // 在垂直偏转板区域内应用垂直电场\n      if (x >= verticalPlateStart.x && x <= verticalPlateEnd.x) {\n        const plateProgress = (x - verticalPlateStart.x) / (verticalPlateEnd.x - verticalPlateStart.x);\n        const fieldIntensity = Math.sin(plateProgress * Math.PI) * electricFieldStrength; // 平滑过渡\n        acceleration.y = verticalDeflection * fieldIntensity * 0.5;\n      }\n      \n      // 在水平偏转板区域内应用水平电场\n      if (x >= horizontalPlateStart.x && x <= horizontalPlateEnd.x) {\n        const plateProgress = (x - horizontalPlateStart.x) / (horizontalPlateEnd.x - horizontalPlateStart.x);\n        const fieldIntensity = Math.sin(plateProgress * Math.PI) * electricFieldStrength; // 平滑过渡\n        acceleration.z = horizontalDeflection * fieldIntensity * 0.5;\n      }\n      \n      // 更新速度和位置（简化的欧拉积分）\n      const dt = (screenPosition.x - electronGun.x) / totalSegments / electronVelocity;\n      velocity.add(acceleration.clone().multiplyScalar(dt));\n      \n      // 保持水平速度基本恒定（电子束的主要运动方向）\n      velocity.x = electronVelocity;\n      \n      // 计算新位置\n      currentPos.add(velocity.clone().multiplyScalar(dt * 0.1)); // 缩放因子调整轨迹平滑度\n      \n      // 确保 x 坐标按预期递增\n      currentPos.x = x;\n      \n      trajectoryPoints.push(currentPos.clone());\n    }\n    \n    // 应用轨迹平滑处理\n    return this.smoothTrajectory(trajectoryPoints);\n  }\n\n  /**\n   * 平滑轨迹点，使电子束看起来更自然\n   * @param {Array<THREE.Vector3>} points - 原始轨迹点\n   * @returns {Array<THREE.Vector3>} 平滑后的轨迹点\n   */\n  smoothTrajectory(points) {\n    if (points.length < 3) return points;\n    \n    const smoothed = [];\n    const smoothingFactor = CONFIG.electronBeam.trajectorySmoothing || 0.8;\n    \n    // 保持第一个点不变\n    smoothed.push(points[0].clone());\n    \n    // 对中间的点进行平滑处理\n    for (let i = 1; i < points.length - 1; i++) {\n      const prev = points[i - 1];\n      const current = points[i];\n      const next = points[i + 1];\n      \n      // 计算平滑后的位置（加权平均）\n      const smoothedPoint = new three_module/* Vector3 */.Pq0();\n      smoothedPoint.addScaledVector(prev, (1 - smoothingFactor) * 0.5);\n      smoothedPoint.addScaledVector(current, smoothingFactor);\n      smoothedPoint.addScaledVector(next, (1 - smoothingFactor) * 0.5);\n      \n      smoothed.push(smoothedPoint);\n    }\n    \n    // 保持最后一个点不变\n    smoothed.push(points[points.length - 1].clone());\n    \n    return smoothed;\n  }\n  \n  \n  /**\n   * 添加轨迹点\n   * @param {THREE.Vector3} point - 轨迹点\n   */\n  addTracePoint(point) {\n    // 如果没有当前段，创建一个新段\n    if (this.traceSegments.length === 0) {\n      this.traceSegments.push([]);\n    }\n    \n    // 获取当前段\n    const currentSegment = this.traceSegments[this.traceSegments.length - 1];\n    \n    // 添加点到当前段\n    currentSegment.push(point.clone());\n    \n    // 限制每个段的点数\n    if (currentSegment.length > CONFIG.electronBeam.trace.maxPoints / 2) {\n      // 保留最后几个点到新段，确保连续性\n      const newSegment = currentSegment.slice(-2);\n      this.traceSegments.push(newSegment);\n      \n      // 移除过多的段\n      if (this.traceSegments.length > 4) {\n        this.traceSegments.shift();\n      }\n    }\n    \n    // 重新绘制轨迹\n    this.redrawTraceSegments();\n  }\n\n  /**\n   * 重新绘制轨迹段\n   */\n  redrawTraceSegments() {\n    // 清除旧的轨迹线\n    this.clearTraceLines();\n    \n    // 为每个段创建单独的线条\n    this.traceSegments.forEach((segment, index) => {\n      if (segment.length > 1) {\n        const traceGeometry = new three_module/* BufferGeometry */.LoY().setFromPoints(segment);\n        \n        // 为不同段使用不同的透明度，最新的段最亮\n        const opacity = CONFIG.electronBeam.trace.opacity * (0.3 + 0.7 * (index + 1) / this.traceSegments.length);\n        const segmentMaterial = new three_module/* LineBasicMaterial */.mrM({\n          color: CONFIG.beam.color,\n          opacity: opacity,\n          transparent: true,\n          depthTest: false, // 禁用深度测试，确保轨迹可见\n          depthWrite: false // 禁用深度写入\n        });\n        \n        const traceLine = new three_module/* Line */.N1A(traceGeometry, segmentMaterial);\n        traceLine.renderOrder = 3; // 设置轨迹线的渲染顺序，在极板之后渲染\n        this.traceLines.push(traceLine);\n        this.scene.add(traceLine);\n      }\n    });\n  }\n\n  /**\n   * 开始新的轨迹段（用于避免回扫线）\n   */\n  startNewTraceSegment() {\n    // 如果当前段有点，创建新段\n    if (this.traceSegments.length > 0 && this.traceSegments[this.traceSegments.length - 1].length > 0) {\n      this.traceSegments.push([]);\n    }\n  }\n  \n  /**\n   * 清除轨迹线\n   */\n  clearTraceLines() {\n    this.traceLines.forEach(line => {\n      this.scene.remove(line);\n      line.geometry.dispose();\n    });\n    this.traceLines = [];\n  }\n  \n  /**\n   * 更新材质\n   */\n  updateMaterial() {\n    this.updateBeamMaterials();\n  }\n  \n  /**\n   * 清除所有轨迹\n   */\n  clearAllTraces() {\n    this.clearTraceLines();\n    this.tracePoints = [];\n    this.traceSegments = [];\n  }\n\n  /**\n   * 清除电子束线条\n   */\n  clearBeamLines() {\n    if (this.beamLine) {\n      this.scene.remove(this.beamLine);\n      this.beamLine.geometry.dispose();\n      this.beamLine = null;\n    }\n    if (this.glowLine) {\n      this.scene.remove(this.glowLine);\n      this.glowLine.geometry.dispose();\n      this.glowLine = null;\n    }\n    if (this.particleSystem) {\n      this.scene.remove(this.particleSystem);\n      this.particleSystem.geometry.dispose();\n      this.particleSystem.material.dispose();\n      this.particleSystem = null;\n    }\n  }\n\n  /**\n   * 创建分层电子束效果\n   * @param {THREE.BufferGeometry} geometry - 电子束几何体\n   */\n  createLayeredBeam(geometry) {\n    // 创建发光外围层（更宽，透明度更低）\n    this.glowLine = new three_module/* Line */.N1A(geometry.clone(), this.glowMaterial);\n    this.glowLine.renderOrder = 4; // 设置渲染顺序，在极板之后，主电子束之前\n    this.scene.add(this.glowLine);\n    \n    // 创建主电子束（较窄，亮度更高）\n    this.beamLine = new three_module/* Line */.N1A(geometry.clone(), this.beamMaterial);\n    this.beamLine.renderOrder = 5; // 设置渲染顺序，确保在透明极板之后渲染\n    this.scene.add(this.beamLine);\n  }\n\n  /**\n   * 更新电子束材质\n   */\n  updateBeamMaterials() {\n    // 更新主电子束材质\n    if (this.beamMaterial) {\n      this.beamMaterial.color.set(CONFIG.beam.color);\n      this.beamMaterial.opacity = CONFIG.beam.intensity;\n    }\n    \n    // 更新发光材质\n    if (this.glowMaterial) {\n      this.glowMaterial.color.set(CONFIG.beam.color);\n      this.glowMaterial.opacity = CONFIG.beam.intensity * 0.3;\n    }\n    \n    // 更新轨迹材质\n    if (this.traceMaterial) {\n      this.traceMaterial.color.set(CONFIG.beam.color);\n    }\n  }\n\n  /**\n   * 创建粒子电子束效果（可选的高级效果）\n   * @param {Array<THREE.Vector3>} points - 轨迹点\n   */\n  createParticleBeam(points) {\n    // 创建粒子系统来模拟电子流\n    const particleCount = points.length;\n    const particles = new three_module/* BufferGeometry */.LoY();\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const sizes = new Float32Array(particleCount);\n    \n    const color = new three_module/* Color */.Q1f(CONFIG.beam.color);\n    \n    for (let i = 0; i < particleCount; i++) {\n      const point = points[i];\n      const i3 = i * 3;\n      \n      // 位置\n      positions[i3] = point.x;\n      positions[i3 + 1] = point.y;\n      positions[i3 + 2] = point.z;\n      \n      // 颜色（沿着轨迹渐变）\n      const intensity = 1.0 - (i / particleCount) * 0.5; // 从前到后逐渐变暗\n      colors[i3] = color.r * intensity;\n      colors[i3 + 1] = color.g * intensity;\n      colors[i3 + 2] = color.b * intensity;\n      \n      // 大小（前面较小，后面较大）\n      sizes[i] = 0.02 + (i / particleCount) * 0.01;\n    }\n    \n    particles.setAttribute('position', new three_module/* BufferAttribute */.THS(positions, 3));\n    particles.setAttribute('color', new three_module/* BufferAttribute */.THS(colors, 3));\n    particles.setAttribute('size', new three_module/* BufferAttribute */.THS(sizes, 1));\n    \n    const particleMaterial = new three_module/* PointsMaterial */.BH$({\n      size: 0.03,\n      transparent: true,\n      opacity: CONFIG.beam.intensity * 0.8,\n      vertexColors: true,\n      blending: three_module/* AdditiveBlending */.EZo\n    });\n    \n    if (this.particleSystem) {\n      this.scene.remove(this.particleSystem);\n      this.particleSystem.geometry.dispose();\n      this.particleSystem.material.dispose();\n    }\n    \n    this.particleSystem = new three_module/* Points */.ONl(particles, particleMaterial);\n    this.scene.add(this.particleSystem);\n  }\n\n  /**\n   * 演示电子束效果的测试函数\n   * @param {number} testVoltage - 测试电压（可选，默认为1.0）\n   */\n  demonstrateBeamEffects(testVoltage = 1.0) {\n    console.log('🔬 演示新的电子束效果...');\n    \n    // 测试不同的偏转效果\n    const testDeflections = [\n      { v: 0, h: 0, name: '无偏转' },\n      { v: testVoltage, h: 0, name: '垂直偏转' },\n      { v: 0, h: testVoltage, name: '水平偏转' },\n      { v: testVoltage, h: testVoltage, name: '双向偏转' }\n    ];\n    \n    let testIndex = 0;\n    const testInterval = setInterval(() => {\n      if (testIndex >= testDeflections.length) {\n        clearInterval(testInterval);\n        console.log('✅ 电子束效果演示完成！');\n        return;\n      }\n      \n      const test = testDeflections[testIndex];\n      console.log(`📡 测试 ${testIndex + 1}/4: ${test.name} (V:${test.v}, H:${test.h})`);\n      \n      this.updateBeamPath({\n        vertical: { voltage: test.v },\n        horizontal: { voltage: test.h }\n      });\n      \n      testIndex++;\n    }, 2000); // 每2秒切换一次\n    \n    return testInterval;\n  }\n\n  /**\n   * 启用粒子效果\n   */\n  enableParticleEffect() {\n    // 临时修改配置以启用粒子效果\n    const originalConfig = CONFIG.electronBeam.enableParticleEffect;\n    CONFIG.electronBeam.enableParticleEffect = true;\n    \n    // 重新生成电子束以应用粒子效果\n    this.updateBeamPath({\n      vertical: { voltage: 0 },\n      horizontal: { voltage: 0 }\n    });\n    \n    console.log('✨ 粒子效果已启用');\n    \n    // 返回恢复函数\n    return () => {\n      CONFIG.electronBeam.enableParticleEffect = originalConfig;\n      this.updateBeamPath({\n        vertical: { voltage: 0 },\n        horizontal: { voltage: 0 }\n      });\n      console.log('🔄 粒子效果已恢复到原始设置');\n    };\n  }\n} \n;// ./src/components/Screen.js\n\r\n\r\n\r\n/**\r\n * 荧光屏类\r\n * 负责处理荧光屏效果和波形显示\r\n * 集成了ThreeWaveformRenderer的波形渲染功能\r\n */\r\nclass Screen {\r\n  /**\r\n   * 构造函数\r\n   * @param {THREE.Scene} scene - Three.js场景\r\n   * @param {THREE.Mesh} screenMesh - 荧光屏网格\r\n   */\r\n  constructor(scene, screenMesh) {\r\n    this.scene = scene;\r\n    this.screenMesh = screenMesh;\r\n    \r\n    // 创建荧光点集合\r\n    this.glowPoints = [];\r\n    this.glowMeshes = [];\r\n    this.maxGlowPoints = CONFIG.screenEffects.maxGlowPoints;\r\n    \r\n    // 为了兼容DemoAnimation的focusOnComponent方法，添加position属性\r\n    this.position = this.screenMesh.position;\r\n    \r\n    // 移除了静态波形相关属性，保留电子束轨迹波形\r\n    \r\n    // 初始化荧光材质\r\n    this.initGlowMaterial();\r\n    \r\n    // 创建荧光屏网格\r\n    this.createScreenGrid();\r\n    \r\n    // 移除了静态波形初始化\r\n  }\r\n  \r\n  /**\r\n   * 初始化荧光材质\r\n   */\r\n  initGlowMaterial() {\r\n    // 更新荧光屏材质\r\n    this.screenMesh.material.emissive.set(CONFIG.screen.color);\r\n    this.screenMesh.material.emissiveIntensity = CONFIG.screen.intensity;\r\n    \r\n    // 创建荧光点材质\r\n    this.glowMaterial = new three_module/* MeshBasicMaterial */.V9B({\r\n      color: CONFIG.beam.color, // 使用电子束的颜色（绿色）\r\n      transparent: true,\r\n      opacity: 0.8\r\n    });\r\n    \r\n    // 移除了静态波形材质\r\n  }\r\n  \r\n  /**\r\n   * 创建荧光屏网格\r\n   */\r\n  createScreenGrid() {\r\n    // 获取荧光屏的尺寸和位置\r\n    const screenWidth = CONFIG.components.screen.width;\r\n    const screenHeight = CONFIG.components.screen.height;\r\n    const screenPosition = CONFIG.components.screen.position;\r\n    \r\n    // 创建网格材质\r\n    const gridMaterial = new three_module/* LineBasicMaterial */.mrM({\r\n      color: CONFIG.screen.gridColor,\r\n      transparent: true,\r\n      opacity: CONFIG.screen.gridOpacity\r\n    });\r\n    \r\n    // 创建网格几何体\r\n    const gridGeometry = new three_module/* BufferGeometry */.LoY();\r\n    const gridPoints = [];\r\n    \r\n    // 计算网格线间距\r\n    const gridSpacing = CONFIG.screen.gridSpacing;\r\n    const halfWidth = screenWidth / 2;\r\n    const halfHeight = screenHeight / 2;\r\n    \r\n    // 添加垂直线\r\n    for (let x = -halfWidth; x <= halfWidth; x += gridSpacing) {\r\n      gridPoints.push(x, -halfHeight, 0);\r\n      gridPoints.push(x, halfHeight, 0);\r\n    }\r\n    \r\n    // 添加水平线\r\n    for (let y = -halfHeight; y <= halfHeight; y += gridSpacing) {\r\n      gridPoints.push(-halfWidth, y, 0);\r\n      gridPoints.push(halfWidth, y, 0);\r\n    }\r\n    \r\n    // 设置几何体属性\r\n    gridGeometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(gridPoints, 3));\r\n    \r\n    // 创建网格线\r\n    this.screenGrid = new three_module/* LineSegments */.DXC(gridGeometry, gridMaterial);\r\n    \r\n    // 设置网格位置（稍微偏移，避免z-fighting）\r\n    this.screenGrid.position.copy(screenPosition);\r\n    this.screenGrid.position.x += 0.01; // 在荧光屏前面一点点\r\n    this.screenGrid.rotation.y = -Math.PI / 2; // 与荧光屏相同的旋转\r\n    \r\n    // 添加到场景\r\n    this.scene.add(this.screenGrid);\r\n  }\r\n  \r\n  // 移除了initWaveform方法\r\n  \r\n  // 移除了createWaveform方法\r\n  \r\n  // 移除了createSingleWaveform方法\r\n  \r\n  /**\r\n   * 根据波形类型计算电压值\r\n   * @param {string} waveType - 波形类型\r\n   * @param {number} phaseVal - 相位值(弧度)\r\n   * @param {number} amplitude - 振幅\r\n   * @returns {number} 电压值\r\n   */\r\n  calculateVoltage(waveType, phaseVal, amplitude) {\r\n    switch (waveType) {\r\n      case 'sine':\r\n        return amplitude * Math.sin(phaseVal);\r\n      case 'square':\r\n        return amplitude * (Math.sin(phaseVal) >= 0 ? 1 : -1);\r\n      case 'triangle':\r\n        return amplitude * (2 * Math.abs((phaseVal % (2 * Math.PI)) / (2 * Math.PI) - 0.5) - 1);\r\n      case 'sawtooth':\r\n        return amplitude * (((phaseVal % (2 * Math.PI)) / (2 * Math.PI)) * 2 - 1);\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 添加荧光点\r\n   * @param {THREE.Vector3} position - 电子束击中荧光屏的位置\r\n   */\r\n  addGlowPoint(position) {\r\n    // 创建一个小球体代表荧光点\r\n    const glowGeometry = new three_module/* SphereGeometry */.Gu$(CONFIG.screenEffects.glowPointSize, 6, 6);\r\n    const glowMesh = new three_module/* Mesh */.eaF(glowGeometry, this.glowMaterial.clone());\r\n    \r\n    // 设置位置（稍微偏移，避免z-fighting）\r\n    glowMesh.position.copy(position);\r\n    const screenOffset = CONFIG.electronBeam.screenOffset;\r\n    glowMesh.position.x = CONFIG.components.screen.position.x - screenOffset; // 确保在荧光屏前面一点点\r\n    \r\n    // 添加到场景\r\n    this.scene.add(glowMesh);\r\n    \r\n    // 记录荧光点信息\r\n    this.glowPoints.push({\r\n      mesh: glowMesh,\r\n      createdAt: Date.now(),\r\n      initialOpacity: 0.8\r\n    });\r\n    \r\n    // 如果荧光点过多，移除最早的点\r\n    if (this.glowPoints.length > this.maxGlowPoints) {\r\n      const oldestPoint = this.glowPoints.shift();\r\n      this.scene.remove(oldestPoint.mesh);\r\n      oldestPoint.mesh.geometry.dispose();\r\n      oldestPoint.mesh.material.dispose();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 更新荧光点效果和波形动画\r\n   */\r\n  update() {\r\n    const now = Date.now();\r\n    const persistence = CONFIG.screen.persistence;\r\n    \r\n    // 更新荧光屏材质\r\n    this.screenMesh.material.emissive.set(CONFIG.screen.color);\r\n    this.screenMesh.material.emissiveIntensity = CONFIG.screen.intensity;\r\n    \r\n    // 更新每个荧光点的透明度（模拟余辉效果）\r\n    this.glowPoints.forEach((point, index) => {\r\n      const age = (now - point.createdAt) / 1000; // 年龄（秒）\r\n      const fadeRate = 1 - persistence; // 淡出速率\r\n      const opacity = point.initialOpacity * Math.pow(persistence, age * CONFIG.screenEffects.fadeRate);\r\n      \r\n      // 更新透明度\r\n      point.mesh.material.opacity = opacity;\r\n      \r\n      // 如果完全透明，移除这个点\r\n      if (opacity < CONFIG.screenEffects.minOpacity) {\r\n        this.scene.remove(point.mesh);\r\n        point.mesh.geometry.dispose();\r\n        point.mesh.material.dispose();\r\n        this.glowPoints.splice(index, 1);\r\n      }\r\n    });\r\n    \r\n    // 移除了静态波形动画逻辑\r\n  }\r\n  \r\n  /**\r\n   * 清除所有荧光点\r\n   */\r\n  clearAllGlowPoints() {\r\n    this.glowPoints.forEach(point => {\r\n      this.scene.remove(point.mesh);\r\n      point.mesh.geometry.dispose();\r\n      point.mesh.material.dispose();\r\n    });\r\n    this.glowPoints = [];\r\n  }\r\n  \r\n  /**\r\n   * 更新材质颜色\r\n   */\r\n  updateMaterial() {\r\n    // 更新荧光屏材质\r\n    this.screenMesh.material.emissive.set(CONFIG.screen.color);\r\n    this.screenMesh.material.emissiveIntensity = CONFIG.screen.intensity;\r\n    \r\n    // 更新所有荧光点的颜色\r\n    this.glowPoints.forEach(point => {\r\n      point.mesh.material.color.set(CONFIG.screen.color);\r\n    });\r\n  }\r\n  \r\n  // ========== 移除了所有静态波形控制方法 ==========\r\n  // 保留电子束轨迹波形，这些方法不再需要\r\n  \r\n  /**\r\n   * 显示/隐藏波形 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {boolean} show - 是否显示波形\r\n   */\r\n  showWaveform(show) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 设置波形类型 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {string} type - 波形类型\r\n   */\r\n  setWaveformType(type) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 设置频率 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {number} frequency - 频率值\r\n   */\r\n  setFrequency(frequency) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 设置振幅 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {number} amplitude - 振幅值\r\n   */\r\n  setAmplitude(amplitude) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 设置相位 - 保留此方法以避免调用错误，但不执行任何操作\r\n   * @param {number} phase - 相位值（弧度）\r\n   */\r\n  setPhase(phase) {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 开始波形动画 - 保留此方法以避免调用错误，但不执行任何操作\r\n   */\r\n  startWaveformAnimation() {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 停止波形动画 - 保留此方法以避免调用错误，但不执行任何操作\r\n   */\r\n  stopWaveformAnimation() {\r\n    // 静态波形已移除，此方法保留为空以避免调用错误\r\n    return this;\r\n  }\r\n} \n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\nvar CSS2DRenderer = __webpack_require__(74);\n;// ./src/components/LabelSystem.js\n\r\n\r\n\r\n\r\n/**\r\n * 标签系统类\r\n * 负责管理和渲染3D场景中的标签\r\n */\r\nclass LabelSystem {\r\n  /**\r\n   * 构造函数\r\n   * @param {THREE.Scene} scene - Three.js场景\r\n   * @param {HTMLElement} container - 容器元素\r\n   */\r\n  constructor(scene, container) {\r\n    this.scene = scene;\r\n    this.container = container;\r\n    this.labels = new Map(); // 存储标签对象\r\n    this.visible = false; // 默认隐藏标签\r\n    \r\n    // 初始化CSS2D渲染器\r\n    this.initRenderer();\r\n    \r\n    console.log('LabelSystem初始化完成');\r\n  }\r\n  \r\n  /**\r\n   * 初始化CSS2D渲染器\r\n   */\r\n  initRenderer() {\r\n    this.labelRenderer = new CSS2DRenderer/* CSS2DRenderer */.B();\r\n    this.labelRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.labelRenderer.domElement.style.position = 'absolute';\r\n    this.labelRenderer.domElement.style.top = '0';\r\n    this.labelRenderer.domElement.style.pointerEvents = 'none';\r\n    this.container.appendChild(this.labelRenderer.domElement);\r\n    \r\n    // 默认隐藏\r\n    this.labelRenderer.domElement.style.display = 'none';\r\n  }\r\n  \r\n  /**\r\n   * 创建标签\r\n   * @param {string} id - 标签ID\r\n   * @param {string} text - 标签文本\r\n   * @param {THREE.Object3D} target - 标签附加的目标对象\r\n   * @param {THREE.Vector3} offset - 标签相对于目标的偏移量\r\n   * @param {string} description - 标签描述（可选）\r\n   */\r\n  createLabel(id, text, target, offset = new three_module/* Vector3 */.Pq0(0, 0.5, 0), description = '') {\r\n    // 创建标签元素\r\n    const labelDiv = document.createElement('div');\r\n    labelDiv.className = 'label';\r\n    labelDiv.textContent = text;\r\n    labelDiv.style.backgroundColor = CONFIG.labelSystem.backgroundColor;\r\n    labelDiv.style.color = CONFIG.labelSystem.color;\r\n    labelDiv.style.padding = CONFIG.labelSystem.padding;\r\n    labelDiv.style.borderRadius = CONFIG.labelSystem.borderRadius;\r\n    labelDiv.style.fontSize = CONFIG.labelSystem.fontSize;\r\n    labelDiv.style.pointerEvents = 'auto';\r\n    labelDiv.style.cursor = 'pointer';\r\n    \r\n    // 创建CSS2D对象\r\n    const labelObject = new CSS2DRenderer/* CSS2DObject */.v(labelDiv);\r\n    labelObject.position.copy(offset);\r\n    \r\n    // 将标签添加到目标对象\r\n    target.add(labelObject);\r\n    \r\n    // 存储标签信息\r\n    this.labels.set(id, {\r\n      object: labelObject,\r\n      element: labelDiv,\r\n      target: target,\r\n      description: description\r\n    });\r\n    \r\n    // 添加点击事件\r\n    if (description) {\r\n      labelDiv.addEventListener('click', () => {\r\n        this.showDescription(id);\r\n      });\r\n      \r\n      // 添加提示\r\n      labelDiv.title = '点击查看详情';\r\n    }\r\n    \r\n    return labelObject;\r\n  }\r\n  \r\n  /**\r\n   * 显示标签描述\r\n   * @param {string} id - 标签ID\r\n   */\r\n  showDescription(id) {\r\n    const label = this.labels.get(id);\r\n    if (!label || !label.description) return;\r\n    \r\n    // 创建或更新描述面板\r\n    let descPanel = document.getElementById('label-description-panel');\r\n    if (!descPanel) {\r\n      descPanel = document.createElement('div');\r\n      descPanel.id = 'label-description-panel';\r\n      descPanel.style.position = 'absolute';\r\n      descPanel.style.bottom = CONFIG.labelSystem.descriptionPanel.position.bottom;\r\n      descPanel.style.left = CONFIG.labelSystem.descriptionPanel.position.left;\r\n      descPanel.style.backgroundColor = CONFIG.labelSystem.descriptionPanel.backgroundColor;\r\n      descPanel.style.color = 'white';\r\n      descPanel.style.padding = '15px';\r\n      descPanel.style.borderRadius = '5px';\r\n      descPanel.style.maxWidth = CONFIG.labelSystem.descriptionPanel.maxWidth;\r\n      descPanel.style.zIndex = CONFIG.labelSystem.descriptionPanel.zIndex;\r\n      descPanel.style.transition = 'opacity 0.3s';\r\n      descPanel.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.5)';\r\n      \r\n      // 添加关闭按钮\r\n      const closeBtn = document.createElement('button');\r\n      closeBtn.textContent = '×';\r\n      closeBtn.style.position = 'absolute';\r\n      closeBtn.style.top = '5px';\r\n      closeBtn.style.right = '5px';\r\n      closeBtn.style.background = 'none';\r\n      closeBtn.style.border = 'none';\r\n      closeBtn.style.color = 'white';\r\n      closeBtn.style.fontSize = '20px';\r\n      closeBtn.style.cursor = 'pointer';\r\n      closeBtn.onclick = () => {\r\n        descPanel.style.opacity = '0';\r\n        setTimeout(() => {\r\n          if (descPanel.parentNode) {\r\n            descPanel.parentNode.removeChild(descPanel);\r\n          }\r\n        }, 300);\r\n      };\r\n      \r\n      descPanel.appendChild(closeBtn);\r\n      this.container.appendChild(descPanel);\r\n    }\r\n    \r\n    // 设置标题和描述\r\n    const title = document.createElement('h3');\r\n    title.textContent = label.element.textContent;\r\n    title.style.margin = '0 0 10px 0';\r\n    \r\n    const description = document.createElement('div');\r\n    description.innerHTML = label.description;\r\n    \r\n    // 清除旧内容\r\n    while (descPanel.firstChild) {\r\n      if (descPanel.firstChild.tagName !== 'BUTTON') {\r\n        descPanel.removeChild(descPanel.firstChild);\r\n      }\r\n    }\r\n    \r\n    descPanel.appendChild(title);\r\n    descPanel.appendChild(description);\r\n    descPanel.style.opacity = '1';\r\n  }\r\n  \r\n  /**\r\n   * 设置标签可见性\r\n   * @param {boolean} visible - 是否可见\r\n   */\r\n  setVisible(visible) {\r\n    this.visible = visible;\r\n    this.labelRenderer.domElement.style.display = visible ? 'block' : 'none';\r\n  }\r\n  \r\n  /**\r\n   * 更新标签位置和大小\r\n   * @param {THREE.Camera} camera - 相机\r\n   */\r\n  update(camera) {\r\n    if (this.visible) {\r\n      this.labelRenderer.render(this.scene, camera);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 调整标签渲染器大小\r\n   * @param {number} width - 宽度\r\n   * @param {number} height - 高度\r\n   */\r\n  resize(width, height) {\r\n    this.labelRenderer.setSize(width, height);\r\n  }\r\n  \r\n  /**\r\n   * 移除标签\r\n   * @param {string} id - 标签ID\r\n   */\r\n  removeLabel(id) {\r\n    const label = this.labels.get(id);\r\n    if (label) {\r\n      label.target.remove(label.object);\r\n      this.labels.delete(id);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 移除所有标签\r\n   */\r\n  removeAllLabels() {\r\n    this.labels.forEach((label, id) => {\r\n      label.target.remove(label.object);\r\n    });\r\n    this.labels.clear();\r\n  }\r\n} \n;// ./src/components/ExplodedView.js\n\n\n\n\n\n/**\n * 分解视图类\n * 负责处理模型的分解视图效果\n */\nclass ExplodedView {\n  /**\n   * 构造函数\n   * @param {Object} components - 组件对象集合\n   */\n  constructor(components) {\n    this.components = components;\n    this.originalPositions = new Map();\n    this.exploded = false;\n    this.explodeFactor = CONFIG.explodedView.explodeFactor;\n    this.tweens = [];\n    \n    // 主要组件列表（仅用于聚焦，不参与分解动画）\n    this.focusOnlyComponents = ['gun', 'gunHead', 'v1', 'v2', 'h1', 'h2', 'screen'];\n    \n    // 保存原始位置\n    this.saveOriginalPositions();\n  }\n  \n  /**\n   * 保存所有组件的原始位置\n   */\n  saveOriginalPositions() {\n    Object.entries(this.components).forEach(([key, object]) => {\n      // 跳过仅用于聚焦的组件\n      if (this.focusOnlyComponents.includes(key)) {\n        return;\n      }\n      \n      if (object && object.position) {\n        this.originalPositions.set(key, object.position.clone());\n      }\n    });\n  }\n  \n  /**\n   * 添加组件\n   * @param {string} key - 组件键名\n   * @param {THREE.Object3D} object - 组件对象\n   */\n  addComponent(key, object) {\n    this.components[key] = object;\n    \n    // 跳过仅用于聚焦的组件，不保存其原始位置\n    if (!this.focusOnlyComponents.includes(key) && object && object.position) {\n      this.originalPositions.set(key, object.position.clone());\n    }\n  }\n  \n  /**\n   * 计算组件的分解位置\n   * @param {THREE.Vector3} originalPosition - 原始位置\n   * @param {string} componentKey - 组件键名\n   * @returns {THREE.Vector3} 分解后的位置\n   */\n  calculateExplodedPosition(originalPosition, componentKey) {\n    // 定义各组件的分解方向\n    const directions = {\n      'gun': new three_module/* Vector3 */.Pq0(-1, 0, 0),\n      'gunHead': new three_module/* Vector3 */.Pq0(-1, 0, 0),\n      'v1': new three_module/* Vector3 */.Pq0(0, 1, 0),\n      'v2': new three_module/* Vector3 */.Pq0(0, -1, 0),\n      'h1': new three_module/* Vector3 */.Pq0(0, 0, 1),\n      'h2': new three_module/* Vector3 */.Pq0(0, 0, -1),\n      'screen': new three_module/* Vector3 */.Pq0(1, 0, 0)\n    };\n    \n    // 获取分解方向，如果没有定义则使用默认方向（向外）\n    let direction;\n    if (directions[componentKey]) {\n      direction = directions[componentKey];\n    } else {\n      // 默认方向：从原点到组件的方向\n      direction = originalPosition.clone().normalize();\n      if (direction.length() === 0) {\n        direction.set(1, 0, 0); // 默认X轴方向\n      }\n    }\n    \n    // 计算分解后的位置\n    return originalPosition.clone().add(\n      direction.multiplyScalar(this.explodeFactor)\n    );\n  }\n  \n  /**\n   * 切换分解视图\n   * @param {boolean} explode - 是否分解\n   * @param {number} duration - 动画持续时间（毫秒）\n   */\n  toggle(explode = !this.exploded, duration = CONFIG.explodedView.animationDuration) {\n    this.exploded = explode;\n    \n    // 停止所有正在进行的动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    // 为每个组件创建动画\n    Object.entries(this.components).forEach(([key, object]) => {\n      // 跳过仅用于聚焦的组件\n      if (this.focusOnlyComponents.includes(key)) return;\n      \n      if (!object || !object.position) return;\n      \n      const originalPosition = this.originalPositions.get(key);\n      if (!originalPosition) return;\n      \n      const targetPosition = explode \n        ? this.calculateExplodedPosition(originalPosition, key)\n        : originalPosition.clone();\n      \n      // 创建位置动画\n      const tween = new tween_esm/* Tween */.K(object.position, tweenGroup)\n        .to({\n          x: targetPosition.x,\n          y: targetPosition.y,\n          z: targetPosition.z\n        }, duration)\n        .easing(tween_esm/* Easing */.GS.Quadratic.InOut)\n        .start();\n      \n      this.tweens.push(tween);\n    });\n    \n    return this.exploded;\n  }\n  \n  /**\n   * 聚焦到特定组件\n   * @param {string} componentKey - 组件键名\n   * @param {THREE.Camera} camera - 相机\n   * @param {THREE.Controls} controls - 控制器\n   * @param {number} duration - 动画持续时间（毫秒）\n   */\n  focusComponent(componentKey, camera, controls, duration = 1000) {\n    console.log('ExplodedView.focusComponent被调用');\n    console.log('componentKey:', componentKey);\n    console.log('this.components:', this.components);\n    console.log('camera:', camera);\n    console.log('controls:', controls);\n    \n    const component = this.components[componentKey];\n    console.log('找到的组件:', component);\n    \n    if (!component) {\n      console.error('组件未找到:', componentKey);\n      return;\n    }\n    \n    // 计算目标位置（组件位置 + 偏移）\n    const targetPosition = component.position.clone();\n    const offset = new three_module/* Vector3 */.Pq0(\n      CONFIG.explodedView.cameraOffset.x,\n      CONFIG.explodedView.cameraOffset.y,\n      CONFIG.explodedView.cameraOffset.z\n    );\n    \n    console.log('组件位置:', targetPosition);\n    console.log('相机偏移:', offset);\n    console.log('目标相机位置:', {\n      x: targetPosition.x + offset.x,\n      y: targetPosition.y + offset.y,\n      z: targetPosition.z + offset.z\n    });\n    \n    // 创建相机位置动画\n    const posTween = new tween_esm/* Tween */.K(camera.position, tweenGroup)\n      .to({\n        x: targetPosition.x + offset.x,\n        y: targetPosition.y + offset.y,\n        z: targetPosition.z + offset.z\n      }, duration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n    \n    // 创建控制器目标点动画\n    const targetTween = new tween_esm/* Tween */.K(controls.target, tweenGroup)\n      .to({\n        x: targetPosition.x,\n        y: targetPosition.y,\n        z: targetPosition.z\n      }, duration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n    \n    this.tweens.push(posTween, targetTween);\n    console.log('动画已创建并添加到tweens数组，当前tweens数量:', this.tweens.length);\n    \n    // 如果动画没有立即开始，强制移动相机\n    setTimeout(() => {\n      if (camera.position.distanceTo(new three_module/* Vector3 */.Pq0(\n        targetPosition.x + offset.x,\n        targetPosition.y + offset.y,\n        targetPosition.z + offset.z\n      )) > 0.1) {\n        console.log('动画可能没有正常工作，强制移动相机');\n        this.forceMoveCamera(camera, controls, targetPosition, offset);\n      }\n    }, 100);\n  }\n  \n  /**\n   * 强制移动相机（备选方案）\n   */\n  forceMoveCamera(camera, controls, targetPosition, offset) {\n    console.log('执行强制移动');\n    \n    // 直接设置相机位置\n    camera.position.set(\n      targetPosition.x + offset.x,\n      targetPosition.y + offset.y,\n      targetPosition.z + offset.z\n    );\n    \n    // 直接设置控制器目标点\n    controls.target.set(\n      targetPosition.x,\n      targetPosition.y,\n      targetPosition.z\n    );\n    \n    // 更新控制器\n    controls.update();\n    \n    console.log('强制移动完成，相机位置:', camera.position);\n    console.log('控制器目标点:', controls.target);\n  }\n  \n  /**\n   * 重置视图\n   * @param {THREE.Camera} camera - 相机\n   * @param {THREE.Controls} controls - 控制器\n   * @param {number} duration - 动画持续时间（毫秒）\n   */\n  resetView(camera, controls, duration = CONFIG.explodedView.animationDuration) {\n    // 重置相机位置\n    const posTween = new tween_esm/* Tween */.K(camera.position, tweenGroup)\n      .to({ \n        x: CONFIG.camera.position.x, \n        y: CONFIG.camera.position.y, \n        z: CONFIG.camera.position.z \n      }, duration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n    \n    // 重置控制器目标点\n    const targetTween = new tween_esm/* Tween */.K(controls.target, tweenGroup)\n      .to({ \n        x: CONFIG.camera.target.x, \n        y: CONFIG.camera.target.y, \n        z: CONFIG.camera.target.z \n      }, duration)\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\n      .start();\n    \n    this.tweens.push(posTween, targetTween);\n    \n    // 如果处于分解状态，重置组件位置\n    if (this.exploded) {\n      this.toggle(false, duration);\n    }\n  }\n  \n  /**\n   * 更新动画\n   */\n  update() {\n    // 更新所有tweens\n    this.tweens.forEach(tween => {\n      if (tween && tween.isPlaying) {\n        tween.update();\n      }\n    });\n    \n    // 清理已完成的tweens\n    this.tweens = this.tweens.filter(tween => tween && tween.isPlaying);\n  }\n} \n;// ./src/utils/ParticlePool.js\n\r\n\r\n\r\n/**\r\n * 粒子对象池类\r\n * 用于管理电子粒子的创建、复用和回收，避免频繁的内存分配和垃圾回收\r\n * 显著提升动画性能，特别是在大量粒子场景下\r\n */\r\nclass ParticlePool {\r\n  /**\r\n   * 构造函数\r\n   * @param {number} maxSize - 对象池最大容量\r\n   * @param {number} preCreateCount - 预创建的粒子数量\r\n   */\r\n  constructor(maxSize = 100, preCreateCount = 20) {\r\n    this.pool = [];                    // 可用粒子池\r\n    this.activeParticles = [];         // 正在使用的粒子\r\n    this.maxSize = maxSize;           // 最大容量\r\n    this.preCreateCount = preCreateCount;\r\n    \r\n    // 性能统计\r\n    this.stats = {\r\n      created: 0,        // 总创建数\r\n      reused: 0,         // 重用次数\r\n      released: 0,       // 释放次数\r\n      maxActive: 0       // 最大同时活跃数\r\n    };\r\n    \r\n    console.log(`ParticlePool: 初始化，最大容量=${maxSize}，预创建=${preCreateCount}`);\r\n    \r\n    // 预创建粒子对象\r\n    this.preCreateParticles();\r\n  }\r\n  \r\n  /**\r\n   * 预创建粒子对象\r\n   * 在初始化时创建一批粒子，避免运行时创建的性能开销\r\n   */\r\n  preCreateParticles() {\r\n    console.log(`ParticlePool: 开始预创建 ${this.preCreateCount} 个粒子`);\r\n    \r\n    for (let i = 0; i < this.preCreateCount; i++) {\r\n      const particle = this.createNewParticle();\r\n      particle.visible = false;  // 初始状态不可见\r\n      this.pool.push(particle);\r\n      this.stats.created++;\r\n    }\r\n    \r\n    console.log(`ParticlePool: 预创建完成，池中可用粒子数: ${this.pool.length}`);\r\n  }\r\n  \r\n  /**\r\n   * 创建新的粒子对象\r\n   * @returns {THREE.Mesh} 新创建的粒子网格对象\r\n   */\r\n  createNewParticle() {\r\n    // 创建球体几何体 - 使用较低的细分级别以提升性能\r\n    const geometry = new three_module/* SphereGeometry */.Gu$(\r\n      CONFIG.demoAnimation?.electronParticle?.radius || 0.02,  // 半径\r\n      8,   // 水平分段数（较低以提升性能）\r\n      6    // 垂直分段数（较低以提升性能）\r\n    );\r\n    \r\n    // 创建材质 - 优化透明度渲染\r\n    const material = new three_module/* MeshBasicMaterial */.V9B({\r\n      color: CONFIG.beam?.color || 0x00ffff,\r\n      transparent: true,\r\n      opacity: CONFIG.demoAnimation?.electronParticle?.opacity || 0.8,\r\n      depthTest: false,  // 禁用深度测试，确保粒子总是可见\r\n      depthWrite: false, // 禁用深度写入以避免透明度问题\r\n      blending: three_module/* AdditiveBlending */.EZo // 使用加法混合，增强发光效果\r\n    });\r\n    \r\n    // 创建网格对象\r\n    const particle = new three_module/* Mesh */.eaF(geometry, material);\r\n    \r\n    // 设置渲染顺序，确保粒子在透明极板之后渲染\r\n    particle.renderOrder = 10;\r\n    \r\n    // 添加自定义属性用于追踪\r\n    particle.userData = {\r\n      poolId: Math.random().toString(36).substr(2, 9),  // 唯一ID\r\n      createdAt: Date.now(),                            // 创建时间\r\n      reuseCount: 0                                     // 重用次数\r\n    };\r\n    \r\n    return particle;\r\n  }\r\n  \r\n  /**\r\n   * 从对象池获取一个粒子\r\n   * @returns {THREE.Mesh} 可用的粒子对象\r\n   */\r\n  getParticle() {\r\n    let particle;\r\n    \r\n    if (this.pool.length > 0) {\r\n      // 从池中取出一个现成的粒子（最佳情况）\r\n      particle = this.pool.pop();\r\n      particle.userData.reuseCount++;\r\n      this.stats.reused++;\r\n      \r\n    } else if (this.activeParticles.length < this.maxSize) {\r\n      // 池空了但还没达到最大限制，创建新的粒子\r\n      particle = this.createNewParticle();\r\n      this.stats.created++;\r\n      console.log(`ParticlePool: 池已空，创建新粒子 (总创建数: ${this.stats.created})`);\r\n      \r\n    } else {\r\n      // 达到最大限制，强制回收最老的粒子\r\n      particle = this.activeParticles.shift();\r\n      console.warn(`ParticlePool: 达到最大容量 ${this.maxSize}，强制回收最老粒子`);\r\n    }\r\n    \r\n    // 重置粒子状态\r\n    this.resetParticle(particle);\r\n    \r\n    // 设置为可见并加入活跃列表\r\n    particle.visible = true;\r\n    this.activeParticles.push(particle);\r\n    \r\n    // 更新统计\r\n    this.stats.maxActive = Math.max(this.stats.maxActive, this.activeParticles.length);\r\n    \r\n    return particle;\r\n  }\r\n  \r\n  /**\r\n   * 将粒子归还到对象池\r\n   * @param {THREE.Mesh} particle - 要归还的粒子对象\r\n   */\r\n  releaseParticle(particle) {\r\n    if (!particle) return;\r\n    \r\n    const index = this.activeParticles.indexOf(particle);\r\n    if (index === -1) {\r\n      console.warn('ParticlePool: 尝试释放未在活跃列表中的粒子');\r\n      return;\r\n    }\r\n    \r\n    // 从活跃列表中移除\r\n    this.activeParticles.splice(index, 1);\r\n    \r\n    // 重置粒子状态\r\n    this.resetParticle(particle);\r\n    particle.visible = false;\r\n    \r\n    // 归还到池中\r\n    this.pool.push(particle);\r\n    this.stats.released++;\r\n  }\r\n  \r\n  /**\r\n   * 重置粒子状态\r\n   * @param {THREE.Mesh} particle - 要重置的粒子\r\n   */\r\n  resetParticle(particle) {\r\n    // 重置位置\r\n    particle.position.set(0, 0, 0);\r\n    \r\n    // 重置旋转\r\n    particle.rotation.set(0, 0, 0);\r\n    \r\n    // 重置缩放\r\n    particle.scale.set(1, 1, 1);\r\n    \r\n    // 重置材质属性\r\n    if (particle.material) {\r\n      particle.material.opacity = CONFIG.demoAnimation?.electronParticle?.opacity || 0.8;\r\n      particle.material.color.setHex(CONFIG.beam?.color || 0x00ffff);\r\n    }\r\n    \r\n    // 停止所有正在进行的动画\r\n    if (particle.userData.currentTween) {\r\n      particle.userData.currentTween.stop();\r\n      delete particle.userData.currentTween;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 批量获取多个粒子\r\n   * @param {number} count - 需要的粒子数量\r\n   * @returns {THREE.Mesh[]} 粒子数组\r\n   */\r\n  getParticles(count) {\r\n    const particles = [];\r\n    for (let i = 0; i < count; i++) {\r\n      particles.push(this.getParticle());\r\n    }\r\n    return particles;\r\n  }\r\n  \r\n  /**\r\n   * 批量释放多个粒子\r\n   * @param {THREE.Mesh[]} particles - 要释放的粒子数组\r\n   */\r\n  releaseParticles(particles) {\r\n    particles.forEach(particle => this.releaseParticle(particle));\r\n  }\r\n  \r\n  /**\r\n   * 清理所有活跃粒子\r\n   */\r\n  clearAll() {\r\n    console.log(`ParticlePool: 清理所有活跃粒子，数量: ${this.activeParticles.length}`);\r\n    \r\n    // 停止所有粒子的动画\r\n    this.activeParticles.forEach(particle => {\r\n      if (particle.userData.currentTween) {\r\n        particle.userData.currentTween.stop();\r\n        delete particle.userData.currentTween;\r\n      }\r\n      particle.visible = false;\r\n    });\r\n    \r\n    // 将所有活跃粒子归还到池中\r\n    this.pool.push(...this.activeParticles);\r\n    this.activeParticles = [];\r\n  }\r\n  \r\n  /**\r\n   * 获取对象池状态信息\r\n   * @returns {Object} 状态信息对象\r\n   */\r\n  getStatus() {\r\n    return {\r\n      poolSize: this.pool.length,           // 池中可用粒子数\r\n      activeCount: this.activeParticles.length,  // 活跃粒子数\r\n      maxSize: this.maxSize,                // 最大容量\r\n      stats: { ...this.stats }             // 性能统计（复制）\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 打印详细状态信息\r\n   */\r\n  printStatus() {\r\n    const status = this.getStatus();\r\n    console.log('=== ParticlePool 状态报告 ===');\r\n    console.log(`池中可用: ${status.poolSize}`);\r\n    console.log(`正在使用: ${status.activeCount}`);\r\n    console.log(`最大容量: ${status.maxSize}`);\r\n    console.log(`总创建数: ${status.stats.created}`);\r\n    console.log(`重用次数: ${status.stats.reused}`);\r\n    console.log(`释放次数: ${status.stats.released}`);\r\n    console.log(`最大同时活跃: ${status.stats.maxActive}`);\r\n    console.log(`重用率: ${status.stats.reused > 0 ? (status.stats.reused / (status.stats.created + status.stats.reused) * 100).toFixed(1) : 0}%`);\r\n    console.log('========================');\r\n  }\r\n  \r\n  /**\r\n   * 销毁对象池，释放所有资源\r\n   */\r\n  dispose() {\r\n    console.log('ParticlePool: 开始销毁，释放所有资源');\r\n    \r\n    // 清理所有粒子\r\n    this.clearAll();\r\n    \r\n    // 释放几何体和材质资源\r\n    const allParticles = [...this.pool, ...this.activeParticles];\r\n    allParticles.forEach(particle => {\r\n      if (particle.geometry) {\r\n        particle.geometry.dispose();\r\n      }\r\n      if (particle.material) {\r\n        particle.material.dispose();\r\n      }\r\n    });\r\n    \r\n    // 清空数组\r\n    this.pool = [];\r\n    this.activeParticles = [];\r\n    \r\n    // 重置统计\r\n    this.stats = {\r\n      created: 0,\r\n      reused: 0,\r\n      released: 0,\r\n      maxActive: 0\r\n    };\r\n    \r\n    console.log('ParticlePool: 销毁完成');\r\n  }\r\n}\r\n\r\n// 导出默认实例（单例模式）\r\nconst defaultParticlePool = new ParticlePool(100, 30);\r\n\n;// ./src/components/DemoAnimation.js\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 演示动画类\r\n * 负责创建和控制阴极射线管工作原理的演示动画\r\n */\r\nclass DemoAnimation {\r\n  /**\r\n   * 构造函数\r\n   * @param {THREE.Scene} scene - Three.js场景\r\n   * @param {Object} components - 组件对象集合\r\n   * @param {Object} controllers - 控制器对象集合\r\n   */\r\n  constructor(scene, components, controllers) {\r\n    console.log('DemoAnimation构造函数被调用');\r\n    console.log('scene:', scene);\r\n    console.log('components:', components);\r\n    console.log('controllers:', controllers);\r\n    \r\n    this.scene = scene;\r\n    this.components = components;\r\n    this.controllers = controllers;\r\n    \r\n    this.isPlaying = false;\r\n    this.currentStep = 0;\r\n    this.animationSteps = [];\r\n    this.particles = [];\r\n    this.tweens = [];\r\n    this.stepCallbacks = [];\r\n    this.continuousBeamInterval = null; // 连续电子束的定时器\r\n    this.originalVoltages = null; // 保存原始偏转电压值，用于波形显示\r\n    this.originalPlateOpacities = null; // 保存极板原始不透明度\r\n    this.originalGuiState = null; // 保存GUI面板的原始状态\r\n    \r\n    // 初始化粒子对象池\r\n    this.particlePool = new ParticlePool(80, 25); // 最大80个粒子，预创建25个\r\n    \r\n    console.log('初始化动画步骤');\r\n    // 初始化动画步骤\r\n    this.initAnimationSteps();\r\n    \r\n    console.log('创建电子粒子材质');\r\n    // 创建电子粒子材质 - 优化透明度渲染\r\n    this.particleMaterial = new three_module/* MeshBasicMaterial */.V9B({\r\n      color: CONFIG.beam.color,\r\n      transparent: true,\r\n      opacity: CONFIG.demoAnimation.electronParticle.opacity,\r\n      depthTest: false,  // 禁用深度测试，确保粒子总是可见\r\n      depthWrite: false, // 禁用深度写入，避免影响其他透明物体\r\n      blending: three_module/* AdditiveBlending */.EZo // 使用加法混合，增强发光效果\r\n    });\r\n    \r\n    console.log('DemoAnimation构造函数完成');\r\n    console.log('粒子对象池状态:', this.particlePool.getStatus());\r\n  }\r\n  \r\n  /**\r\n   * 初始化动画步骤\r\n   */\r\n  initAnimationSteps() {\r\n    // 步骤1: 介绍阴极射线管\r\n    this.animationSteps.push({\r\n      title: '阴极射线管简介',\r\n      description: '阴极射线管是一种真空电子管，利用电场控制电子束的偏转来显示图像。',\r\n      duration: 6000,  // 增加持续时间到6秒\r\n      setup: () => {\r\n        // 使用自定义视角展示整个阴极射线管的全貌\r\n        const viewPromise = this.setCustomView({\r\n          position: { x: 8, y: 5, z: 12 },  // 稍微远一点的俯视角度\r\n          target: { x: 0, y: 0, z: 0 }      // 观察整个设备中心\r\n        });\r\n        \r\n        // 在一半时间（3秒）时点击分解视图按钮和关闭外壳\r\n        setTimeout(() => {\r\n          console.log('演示动画：触发分解视图');\r\n          // 点击分解视图按钮\r\n          const explodeBtn = document.getElementById('toggle-explode-btn');\r\n          if (explodeBtn) {\r\n            explodeBtn.click();\r\n          }\r\n          \r\n          // 稍等一下再关闭外壳\r\n          setTimeout(() => {\r\n            console.log('演示动画：关闭外壳');\r\n            // 查找\"显示外壳\"的复选框并设置为false\r\n            const shellCheckboxes = document.querySelectorAll('input[type=\"checkbox\"]');\r\n            let shellCheckbox = null;\r\n            \r\n            // 查找对应的复选框\r\n            shellCheckboxes.forEach(checkbox => {\r\n              const label = checkbox.closest('li')?.querySelector('.property-name');\r\n              if (label && label.textContent.includes('显示外壳')) {\r\n                shellCheckbox = checkbox;\r\n              }\r\n            });\r\n            \r\n            if (shellCheckbox && shellCheckbox.checked) {\r\n              console.log('演示动画：通过复选框关闭外壳');\r\n              shellCheckbox.click();\r\n            } else {\r\n              // 如果找不到复选框，直接通过CONFIG修改\r\n              console.log('演示动画：直接通过CONFIG关闭外壳');\r\n              if (window.CONFIG) {\r\n                window.CONFIG.shell.visible = false;\r\n                // 触发外壳更新\r\n                if (this.controllers && this.controllers.onShellChange) {\r\n                  this.controllers.onShellChange(window.CONFIG.shell);\r\n                }\r\n              }\r\n            }\r\n          }, 500);\r\n          \r\n        }, 3000);  // 在持续时间的一半（3秒）时执行\r\n        \r\n        return viewPromise;\r\n      }\r\n    });\r\n    \r\n    // 步骤2: 电子枪发射电子\r\n    this.animationSteps.push({\r\n      title: '电子枪发射电子',\r\n      description: '电子枪加热阴极，释放电子并加速形成电子束。',\r\n      duration: 4000,\r\n      setup: () => {\r\n        // 聚焦到电子枪\r\n        const focusPromise = this.focusOnComponent('gun');\r\n        \r\n        // 创建连续电子束流\r\n        setTimeout(() => {\r\n          this.startContinuousElectronBeam(\r\n            new three_module/* Vector3 */.Pq0(-3, 0, 0),\r\n            new three_module/* Vector3 */.Pq0(-2.7, 0, 0)\r\n          );\r\n        }, 1000);\r\n        \r\n        return focusPromise;\r\n      }\r\n    });\r\n    \r\n    // 步骤3: 垂直偏转板\r\n    this.animationSteps.push({\r\n      title: '垂直偏转板',\r\n      description: '垂直偏转板通过电压控制电子束在垂直方向上的偏转。',\r\n      duration: 5000,\r\n      setup: () => {\r\n        // 聚焦到垂直偏转板\r\n        const focusPromise = this.focusOnComponent('v1');\r\n        \r\n        // 模拟电压变化\r\n        setTimeout(() => {\r\n          // 设置垂直电压\r\n          this.simulateVoltageChange('vertical', 3, 2000);\r\n          \r\n          // 创建连续电子束流（从电子枪到偏转板）\r\n          this.startContinuousElectronBeam(\r\n            new three_module/* Vector3 */.Pq0(-2.7, 0, 0),\r\n            new three_module/* Vector3 */.Pq0(-1.5, 0.6, 0)\r\n          );\r\n        }, 1000);\r\n        \r\n        return focusPromise;\r\n      }\r\n    });\r\n    \r\n    // 步骤4: 水平偏转板\r\n    this.animationSteps.push({\r\n      title: '水平偏转板',\r\n      description: '水平偏转板通过电压控制电子束在水平方向上的偏转。',\r\n      duration: 5000,\r\n      setup: () => {\r\n        // 聚焦到水平偏转板\r\n        const focusPromise = this.focusOnComponent('h1');\r\n        \r\n        // 模拟电压变化\r\n        setTimeout(() => {\r\n          // 设置水平电压\r\n          this.simulateVoltageChange('horizontal', 2, 2000);\r\n          \r\n          // 创建连续电子束流（从垂直偏转板到水平偏转板）\r\n          this.startContinuousElectronBeam(\r\n            new three_module/* Vector3 */.Pq0(-1.5, 0.6, 0),\r\n            new three_module/* Vector3 */.Pq0(-0.2, 0.6, 0.4)\r\n          );\r\n        }, 1000);\r\n        \r\n        return focusPromise;\r\n      }\r\n    });\r\n    \r\n    // 步骤5: 荧光屏显示\r\n    this.animationSteps.push({\r\n      title: '荧光屏显示',\r\n      description: '电子束击中荧光屏上的荧光物质，产生可见光，形成图像。',\r\n      duration: 5000,\r\n      setup: () => {\r\n        // 聚焦到荧光屏\r\n        const focusPromise = this.focusOnComponent('screen');\r\n        \r\n        // 创建连续电子束流（从水平偏转板到荧光屏）\r\n        setTimeout(() => {\r\n          this.startContinuousElectronBeam(\r\n            new three_module/* Vector3 */.Pq0(-0.2, 0.6, 0.4),\r\n            new three_module/* Vector3 */.Pq0(3, 0.6, 0.4)\r\n          );\r\n        }, 1000);\r\n        \r\n        return focusPromise;\r\n      }\r\n    });\r\n    \r\n    // 步骤6: 波形显示\r\n    this.animationSteps.push({\r\n      title: '波形显示',\r\n      description: '通过改变偏转电压，可以在荧光屏上绘制各种波形。',\r\n      duration: 10000,  // 增加持续时间以展示两种波形\r\n      setup: () => {\r\n        // 使用自定义视角，从左前方、上方观察整个阴极射线管和波形显示\r\n        const resetPromise = this.setCustomView({\r\n          position: { x: 14, y: 1, z: -2.5 },       \r\n          target: { x: 0, y: 0, z: 0 }         // 聚焦到整个装置的中心\r\n        });\r\n        \r\n        // 启用波形和电子束\r\n        setTimeout(() => {\r\n          // 清除之前的粒子和荧光点\r\n          this.clearAllParticles();\r\n          if (this.components && this.components.screen) {\r\n            this.components.screen.clearAllGlowPoints();\r\n          }\r\n          \r\n          // 第一阶段：显示正弦波（前4秒）\r\n          this.setWaveformParams({\r\n            type: 'sine',\r\n            frequency: 1.2,\r\n            amplitude: 2.5,\r\n            enabled: true\r\n          });\r\n          \r\n          // 启动连续电子束流 - 从电子枪到荧光屏的完整路径\r\n          this.startContinuousElectronBeam(\r\n            new three_module/* Vector3 */.Pq0(-3, 0, 0),     // 从电子枪开始\r\n            new three_module/* Vector3 */.Pq0(3, 0, 0)       // 到荧光屏结束\r\n          );\r\n          \r\n          // 4秒后切换到方波\r\n          const waveformSwitchCallback = setTimeout(() => {\r\n            // 清除荧光屏，准备显示新波形\r\n            if (this.components && this.components.screen) {\r\n              this.components.screen.clearAllGlowPoints();\r\n            }\r\n            \r\n            // 切换到方波\r\n            this.setWaveformParams({\r\n              type: 'square',\r\n              frequency: 0.8,\r\n              amplitude: 3,\r\n              enabled: true\r\n            });\r\n          }, 4000);\r\n          \r\n          this.stepCallbacks.push(waveformSwitchCallback);\r\n          \r\n        }, 1000);\r\n        \r\n        return resetPromise;\r\n      }\r\n    });\r\n    \r\n    // 步骤7: 演示结束\r\n    this.animationSteps.push({\r\n      title: '演示结束',\r\n      description: '阴极射线管是早期显示器的基础技术，为现代显示技术奠定了基础。',\r\n      duration: 3000,\r\n      setup: () => {\r\n        // 设置自定义视角，展示整个阴极射线管的完整视图\r\n        const viewPromise = this.setCustomView({\r\n          position: { x: 6, y: 4, z: 10 },\r\n          target: { x: 0, y: 0, z: 0 }\r\n        });\r\n        \r\n        // 还原分解视图状态\r\n        setTimeout(() => {\r\n          console.log('演示动画结束：还原分解视图状态');\r\n          const explodeBtn = document.getElementById('toggle-explode-btn');\r\n          if (explodeBtn && explodeBtn.textContent === '合并视图') {\r\n            explodeBtn.click();\r\n          }\r\n        }, 500);\r\n        \r\n        // 还原外壳显示状态\r\n        setTimeout(() => {\r\n          console.log('演示动画结束：还原外壳显示状态');\r\n          if (this.originalShellVisible !== undefined) {\r\n            // 查找\"显示外壳\"的复选框\r\n            const shellCheckboxes = document.querySelectorAll('input[type=\"checkbox\"]');\r\n            let shellCheckbox = null;\r\n            \r\n            // 查找对应的复选框\r\n            shellCheckboxes.forEach(checkbox => {\r\n              const label = checkbox.closest('li')?.querySelector('.property-name');\r\n              if (label && label.textContent.includes('显示外壳')) {\r\n                shellCheckbox = checkbox;\r\n              }\r\n            });\r\n            \r\n            if (shellCheckbox) {\r\n              // 如果原始状态和当前状态不同，点击复选框\r\n              if (shellCheckbox.checked !== this.originalShellVisible) {\r\n                console.log('演示动画结束：通过复选框还原外壳状态');\r\n                shellCheckbox.click();\r\n              }\r\n            } else {\r\n              // 直接通过CONFIG还原\r\n              console.log('演示动画结束：直接通过CONFIG还原外壳状态');\r\n              if (window.CONFIG) {\r\n                window.CONFIG.shell.visible = this.originalShellVisible;\r\n                // 触发外壳更新\r\n                if (this.controllers && this.controllers.onShellChange) {\r\n                  this.controllers.onShellChange(window.CONFIG.shell);\r\n                }\r\n              }\r\n            }\r\n          }\r\n          \r\n          // 重置所有参数\r\n          this.resetAllParams();\r\n        }, 1000);\r\n        \r\n        return viewPromise;\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 开始演示动画\r\n   */\r\n  start() {\r\n    console.log('DemoAnimation.start被调用');\r\n    console.log('this.isPlaying:', this.isPlaying);\r\n    \r\n    if (this.isPlaying) {\r\n      console.log('演示已在播放中，返回');\r\n      return;\r\n    }\r\n    \r\n    // 保存原始偏转电压值，用于波形显示时保持固定位置\r\n    this.originalVoltages = {\r\n      horizontal: CONFIG.deflection.horizontal.voltage,\r\n      vertical: CONFIG.deflection.vertical.voltage\r\n    };\r\n    \r\n    // 保存原始外壳显示状态\r\n    this.originalShellVisible = CONFIG.shell ? CONFIG.shell.visible : true;\r\n    console.log('保存原始外壳状态:', this.originalShellVisible);\r\n    \r\n    // 保存极板原始不透明度并设置为50%，提高透明度以便更好地观察电子束\r\n    this.setPlateOpacity(0.5);\r\n    \r\n    // 折叠GUI面板，避免演示时界面干扰\r\n    this.collapseGuiFolders();\r\n    \r\n    this.isPlaying = true;\r\n    this.currentStep = 0;\r\n    \r\n    console.log('保存原始参数');\r\n    // 保存原始参数\r\n    this.saveOriginalParams();\r\n    \r\n    // 在动画开始时启用电子束（设置适当的强度）\r\n    CONFIG.beam.intensity = 0.9;\r\n    if (this.controllers.onBeamChange) {\r\n      this.controllers.onBeamChange(CONFIG.beam);\r\n    }\r\n    \r\n    console.log('开始第一步，调用playCurrentStep');\r\n    // 开始第一步\r\n    this.playCurrentStep();\r\n  }\r\n  \r\n  /**\r\n   * 停止演示动画\r\n   */\r\n  stop() {\r\n    this.isPlaying = false;\r\n    \r\n    // 停止连续电子束\r\n    this.stopContinuousElectronBeam();\r\n    \r\n    // 停止所有动画\r\n    this.tweens.forEach(tween => {\r\n      if (tween && typeof tween.stop === 'function') {\r\n        tween.stop();\r\n      }\r\n    });\r\n    this.tweens = [];\r\n    \r\n    // 清除所有粒子（使用对象池优化）\r\n    this.clearAllParticles();\r\n    \r\n    // 清理对象池中的所有活跃粒子\r\n    if (this.particlePool) {\r\n      this.particlePool.clearAll();\r\n    }\r\n    \r\n    // 恢复原始偏转电压值\r\n    if (this.originalVoltages) {\r\n      CONFIG.deflection.horizontal.voltage = this.originalVoltages.horizontal;\r\n      CONFIG.deflection.vertical.voltage = this.originalVoltages.vertical;\r\n      this.originalVoltages = null;\r\n    }\r\n    \r\n    // 清理保存的外壳状态\r\n    this.originalShellVisible = undefined;\r\n    \r\n    // 恢复极板原始不透明度\r\n    this.restorePlateOpacity();\r\n    \r\n    // 恢复GUI面板状态\r\n    this.restoreGuiFolders();\r\n    \r\n    // 重置所有参数\r\n    this.resetAllParams();\r\n    \r\n    // 清除所有回调和定时器\r\n    this.stepCallbacks.forEach(callback => {\r\n      if (typeof callback === 'number') {\r\n        clearTimeout(callback);\r\n      }\r\n    });\r\n    this.stepCallbacks = [];\r\n  }\r\n  \r\n  /**\r\n   * 播放当前步骤\r\n   */\r\n  playCurrentStep() {\r\n    console.log('playCurrentStep被调用');\r\n    console.log('this.isPlaying:', this.isPlaying);\r\n    console.log('this.currentStep:', this.currentStep);\r\n    console.log('this.animationSteps.length:', this.animationSteps.length);\r\n    \r\n    if (!this.isPlaying || this.currentStep >= this.animationSteps.length) {\r\n      console.log('演示结束或已停止，调用stop');\r\n      this.stop();\r\n      return;\r\n    }\r\n    \r\n    // 停止之前的连续电子束\r\n    this.stopContinuousElectronBeam();\r\n    \r\n    const step = this.animationSteps[this.currentStep];\r\n    console.log('当前步骤:', step);\r\n    \r\n    // 触发步骤开始事件\r\n    if (this.onStepStart) {\r\n      console.log('触发步骤开始事件');\r\n      this.onStepStart(this.currentStep, step);\r\n    } else {\r\n      console.log('onStepStart未设置');\r\n    }\r\n    \r\n    // 设置步骤\r\n    console.log('执行步骤setup');\r\n    const setupPromise = step.setup ? step.setup() : Promise.resolve();\r\n    \r\n    // 步骤完成后，继续下一步\r\n    setupPromise.then(() => {\r\n      console.log('步骤setup完成，设置下一步定时器，持续时间:', step.duration);\r\n      const callback = setTimeout(() => {\r\n        console.log('定时器触发，进入下一步');\r\n        this.currentStep++;\r\n        this.playCurrentStep();\r\n      }, step.duration);\r\n      \r\n      this.stepCallbacks.push(callback);\r\n      console.log('定时器已添加到stepCallbacks');\r\n    }).catch(error => {\r\n      console.error('步骤setup出错:', error);\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 聚焦到组件\r\n   * @param {string} componentKey - 组件键名\r\n   * @returns {Promise} 动画完成的Promise\r\n   */\r\n  focusOnComponent(componentKey) {\r\n    return new Promise(resolve => {\r\n      const component = this.components[componentKey];\r\n      if (!component) {\r\n        resolve();\r\n        return;\r\n      }\r\n      \r\n      // 计算目标位置\r\n      const targetPosition = component.position.clone();\r\n      const offset = new three_module/* Vector3 */.Pq0(\r\n        CONFIG.demoAnimation.cameraOffset.x,\r\n        CONFIG.demoAnimation.cameraOffset.y,\r\n        CONFIG.demoAnimation.cameraOffset.z\r\n      );\r\n      \r\n      // 创建相机位置动画\r\n      const posTween = new tween_esm/* Tween */.K(this.controllers.camera.position, tweenGroup)\r\n        .to({\r\n          x: targetPosition.x + offset.x,\r\n          y: targetPosition.y + offset.y,\r\n          z: targetPosition.z + offset.z\r\n        }, CONFIG.demoAnimation.animationDuration)\r\n        .easing(tween_esm/* Easing */.GS.Cubic.InOut)\r\n        .onComplete(resolve)\r\n        .start();\r\n      \r\n      // 创建控制器目标点动画\r\n      const targetTween = new tween_esm/* Tween */.K(this.controllers.controls.target, tweenGroup)\r\n        .to({\r\n          x: targetPosition.x,\r\n          y: targetPosition.y,\r\n          z: targetPosition.z\r\n        }, CONFIG.demoAnimation.animationDuration)\r\n        .easing(tween_esm/* Easing */.GS.Cubic.InOut)\r\n        .start();\r\n      \r\n      this.tweens.push(posTween, targetTween);\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 重置视图\r\n   * @returns {Promise} 动画完成的Promise\r\n   */\r\n  resetView() {\r\n    return new Promise(resolve => {\r\n          // 重置相机位置\r\n    const posTween = new tween_esm/* Tween */.K(this.controllers.camera.position, tweenGroup)\r\n      .to({ \r\n        x: CONFIG.camera.position.x, \r\n        y: CONFIG.camera.position.y, \r\n        z: CONFIG.camera.position.z \r\n      }, CONFIG.demoAnimation.animationDuration)\r\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\r\n      .onComplete(resolve)\r\n      .start();\r\n      \r\n          // 重置控制器目标点\r\n    const targetTween = new tween_esm/* Tween */.K(this.controllers.controls.target, tweenGroup)\r\n      .to({ \r\n        x: CONFIG.camera.target.x, \r\n        y: CONFIG.camera.target.y, \r\n        z: CONFIG.camera.target.z \r\n      }, CONFIG.demoAnimation.animationDuration)\r\n      .easing(tween_esm/* Easing */.GS.Cubic.InOut)\r\n      .start();\r\n      \r\n      this.tweens.push(posTween, targetTween);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 设置自定义视图\r\n   * @param {Object} viewConfig - 视图配置\r\n   * @param {Object} viewConfig.position - 摄像头位置 {x, y, z}\r\n   * @param {Object} viewConfig.target - 观察目标 {x, y, z}\r\n   * @param {number} duration - 动画持续时间（可选）\r\n   * @returns {Promise} 动画完成的Promise\r\n   */\r\n  setCustomView(viewConfig, duration = CONFIG.demoAnimation.animationDuration) {\r\n    return new Promise(resolve => {\r\n      // 设置相机位置\r\n      const posTween = new tween_esm/* Tween */.K(this.controllers.camera.position, tweenGroup)\r\n        .to({ \r\n          x: viewConfig.position.x, \r\n          y: viewConfig.position.y, \r\n          z: viewConfig.position.z \r\n        }, duration)\r\n        .easing(tween_esm/* Easing */.GS.Cubic.InOut)\r\n        .onComplete(resolve)\r\n        .start();\r\n        \r\n      // 设置控制器目标点\r\n      const targetTween = new tween_esm/* Tween */.K(this.controllers.controls.target, tweenGroup)\r\n        .to({ \r\n          x: viewConfig.target.x, \r\n          y: viewConfig.target.y, \r\n          z: viewConfig.target.z \r\n        }, duration)\r\n        .easing(tween_esm/* Easing */.GS.Cubic.InOut)\r\n        .start();\r\n        \r\n      this.tweens.push(posTween, targetTween);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建连续电子束流\r\n   * @param {THREE.Vector3} startPos - 起始位置\r\n   * @param {THREE.Vector3} endPos - 结束位置\r\n   * @param {number} count - 粒子数量\r\n   * @param {number} duration - 动画持续时间\r\n   * @param {Function} onComplete - 完成回调\r\n   */\r\n  createElectronParticles(startPos, endPos, count = 10, duration = 2000, onComplete = null) {\r\n    // 使用配置中的发射频率，如果没有则使用默认值\r\n    const emissionRate = CONFIG.demoAnimation.electronParticle.emissionRate || 8;\r\n    const particleInterval = 1000 / emissionRate; // 根据发射频率计算间隔时间（毫秒）\r\n    \r\n    // 计算电子束的总路径长度，用于确定粒子的生命周期\r\n    const beamDistance = startPos.distanceTo(endPos);\r\n    const particleSpeed = beamDistance / 1500; // 粒子移动速度（单位/毫秒）\r\n    const particleLifetime = beamDistance / particleSpeed + 500; // 粒子生命周期稍长一些\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      // 使用 setTimeout 来实现真正的实时发射\r\n      const timeout = setTimeout(() => {\r\n        // 从对象池获取粒子，而不是创建新的 (性能优化)\r\n        const particle = this.particlePool.getParticle();\r\n        \r\n        // 设置初始位置\r\n        particle.position.copy(startPos);\r\n        \r\n        // 添加发射效果：粒子从小到正常大小\r\n        particle.scale.setScalar(0.1);\r\n        \r\n        // 添加到场景\r\n        this.scene.add(particle);\r\n        this.particles.push(particle);\r\n        \r\n        // 创建粒子出现动画\r\n        const appearTween = new tween_esm/* Tween */.K(particle.scale, tweenGroup)\r\n          .to({ x: 1, y: 1, z: 1 }, 200)\r\n          .easing(tween_esm/* Easing */.GS.Back.Out)\r\n          .start();\r\n        \r\n        this.tweens.push(appearTween);\r\n        \r\n        // 创建连续移动动画 - 粒子会继续向前运动而不是在endPos停止\r\n        const extendedEndPos = this.calculateExtendedEndPosition(startPos, endPos);\r\n        const moveDuration = particleLifetime;\r\n        \r\n        const tween = new tween_esm/* Tween */.K(particle.position, tweenGroup)\r\n          .to({\r\n            x: extendedEndPos.x,\r\n            y: extendedEndPos.y,\r\n            z: extendedEndPos.z\r\n          }, moveDuration)\r\n          .easing(tween_esm/* Easing */.GS.Linear.None)\r\n          .onUpdate(() => {\r\n            // 当粒子接近荧光屏时，添加发光效果\r\n            const distanceToScreen = particle.position.distanceTo(endPos);\r\n            if (distanceToScreen < 0.1) {\r\n              // 在荧光屏上添加发光点\r\n              if (this.components && this.components.screen) {\r\n                this.components.screen.addGlowPoint(particle.position.clone());\r\n              }\r\n            }\r\n          })\r\n          .onComplete(() => {\r\n            // 最后一个粒子完成时触发回调\r\n            if (i === count - 1 && onComplete) {\r\n              onComplete();\r\n            }\r\n            \r\n            // 从场景中移除粒子\r\n            this.scene.remove(particle);\r\n            const index = this.particles.indexOf(particle);\r\n            if (index !== -1) {\r\n              this.particles.splice(index, 1);\r\n            }\r\n            \r\n            // 归还粒子到对象池，而不是销毁 (性能优化)\r\n            this.particlePool.releaseParticle(particle);\r\n          })\r\n          .start();\r\n        \r\n        this.tweens.push(tween);\r\n      }, i * particleInterval);\r\n      \r\n      // 保存timeout以便在停止动画时可以清除\r\n      this.stepCallbacks.push(timeout);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 计算延伸的结束位置，让电子粒子看起来继续运动\r\n   * @param {THREE.Vector3} startPos - 起始位置\r\n   * @param {THREE.Vector3} endPos - 原始结束位置\r\n   * @returns {THREE.Vector3} 延伸的结束位置\r\n   */\r\n  calculateExtendedEndPosition(startPos, endPos) {\r\n    // 计算运动方向向量\r\n    const direction = new three_module/* Vector3 */.Pq0().subVectors(endPos, startPos).normalize();\r\n    \r\n    // 将结束位置向前延伸，让粒子看起来继续运动\r\n    const extensionDistance = 2.0; // 延伸距离\r\n    const extendedEndPos = endPos.clone().add(direction.multiplyScalar(extensionDistance));\r\n    \r\n    return extendedEndPos;\r\n  }\r\n  \r\n  /**\r\n   * 创建连续电子束流（无限循环直到停止）\r\n   * @param {THREE.Vector3} startPos - 起始位置\r\n   * @param {THREE.Vector3} endPos - 结束位置\r\n   */\r\n  startContinuousElectronBeam(startPos, endPos) {\r\n    // 如果已经有连续电子束在运行，先停止它\r\n    this.stopContinuousElectronBeam();\r\n    \r\n    const emissionRate = CONFIG.demoAnimation.electronParticle.emissionRate || 8;\r\n    const particleInterval = 1000 / emissionRate;\r\n    \r\n    // 计算电子束参数\r\n    const beamDistance = startPos.distanceTo(endPos);\r\n    const particleSpeed = beamDistance / 1500; // 粒子移动速度\r\n    const particleLifetime = beamDistance / particleSpeed + 1000; // 延长生命周期\r\n    \r\n    // 创建连续发射的定时器\r\n    this.continuousBeamInterval = setInterval(() => {\r\n      if (!this.isPlaying) return; // 如果动画已停止，不再发射新粒子\r\n      \r\n      // 创建单个电子粒子 - 使用优化的材质\r\n      const geometry = new three_module/* SphereGeometry */.Gu$(CONFIG.demoAnimation.electronParticle.size, 6, 6);\r\n      const particleMat = this.particleMaterial.clone();\r\n      \r\n      // 确保粒子材质具有最佳可见性\r\n      particleMat.depthTest = false;\r\n      particleMat.depthWrite = false;\r\n      particleMat.blending = three_module/* AdditiveBlending */.EZo;\r\n      \r\n      const particle = new three_module/* Mesh */.eaF(geometry, particleMat);\r\n      \r\n      // 设置粒子的渲染顺序，确保在极板之后渲染\r\n      particle.renderOrder = 10;\r\n      \r\n      // 设置初始位置\r\n      particle.position.copy(startPos);\r\n      particle.scale.setScalar(0.1);\r\n      \r\n      // 添加到场景\r\n      this.scene.add(particle);\r\n      this.particles.push(particle);\r\n      \r\n      // 粒子出现动画\r\n      const appearTween = new tween_esm/* Tween */.K(particle.scale, tweenGroup)\r\n        .to({ x: 1, y: 1, z: 1 }, 200)\r\n        .easing(tween_esm/* Easing */.GS.Back.Out)\r\n        .start();\r\n      \r\n      this.tweens.push(appearTween);\r\n      \r\n      // 获取当前电子束轨迹路径\r\n      const beamPath = this.getCurrentBeamPath(startPos, endPos);\r\n      const extendedEndPos = this.calculateExtendedEndPosition(startPos, endPos);\r\n      \r\n      // 粒子沿着电子束轨迹移动动画\r\n      const moveTween = new tween_esm/* Tween */.K({ progress: 0 }, tweenGroup)\r\n        .to({ progress: 1 }, particleLifetime)\r\n        .easing(tween_esm/* Easing */.GS.Linear.None)\r\n        .onUpdate((obj) => {\r\n          // 根据进度沿着电子束路径移动粒子\r\n          const position = this.getPositionAlongBeamPath(beamPath, obj.progress, extendedEndPos);\r\n          particle.position.copy(position);\r\n          \r\n          // 当粒子接近荧光屏时，添加发光效果\r\n          const distanceToScreen = particle.position.distanceTo(endPos);\r\n          if (distanceToScreen < 0.1 && !particle.hasHitScreen) {\r\n            particle.hasHitScreen = true; // 防止重复触发\r\n            if (this.components && this.components.screen) {\r\n              this.components.screen.addGlowPoint(particle.position.clone());\r\n            }\r\n          }\r\n        })\r\n        .onComplete(() => {\r\n          // 移除粒子\r\n          this.scene.remove(particle);\r\n          const index = this.particles.indexOf(particle);\r\n          if (index !== -1) {\r\n            this.particles.splice(index, 1);\r\n          }\r\n          geometry.dispose();\r\n          particle.material.dispose();\r\n        })\r\n        .start();\r\n      \r\n      this.tweens.push(moveTween);\r\n      \r\n    }, particleInterval);\r\n  }\r\n  \r\n  /**\r\n   * 获取当前电子束路径\r\n   * @param {THREE.Vector3} startPos - 起始位置\r\n   * @param {THREE.Vector3} endPos - 结束位置\r\n   * @returns {Array<THREE.Vector3>} 电子束路径点数组\r\n   */\r\n  getCurrentBeamPath(startPos, endPos) {\r\n    // 如果有电子束组件且有当前路径，使用实际的电子束路径\r\n    if (this.components && this.components.electronBeam && this.components.electronBeam.beamPoints && this.components.electronBeam.beamPoints.length > 0) {\r\n      return this.components.electronBeam.beamPoints;\r\n    }\r\n    \r\n    // 否则生成简单的直线路径\r\n    const pathPoints = [];\r\n    const numSegments = 20;\r\n    \r\n    for (let i = 0; i <= numSegments; i++) {\r\n      const t = i / numSegments;\r\n      const point = new three_module/* Vector3 */.Pq0().lerpVectors(startPos, endPos, t);\r\n      pathPoints.push(point);\r\n    }\r\n    \r\n    return pathPoints;\r\n  }\r\n  \r\n  /**\r\n   * 根据进度获取沿电子束路径的位置\r\n   * @param {Array<THREE.Vector3>} beamPath - 电子束路径点数组\r\n   * @param {number} progress - 进度 (0-1)\r\n   * @param {THREE.Vector3} extendedEndPos - 延伸的结束位置\r\n   * @returns {THREE.Vector3} 当前位置\r\n   */\r\n  getPositionAlongBeamPath(beamPath, progress, extendedEndPos) {\r\n    if (!beamPath || beamPath.length === 0) {\r\n      // 如果没有路径，返回起始位置\r\n      return new three_module/* Vector3 */.Pq0();\r\n    }\r\n    \r\n    if (beamPath.length === 1) {\r\n      return beamPath[0].clone();\r\n    }\r\n    \r\n    // 如果进度超过1，继续向延伸位置移动\r\n    if (progress > 1) {\r\n      const lastPoint = beamPath[beamPath.length - 1];\r\n      const overProgress = progress - 1;\r\n      return lastPoint.clone().lerp(extendedEndPos, overProgress);\r\n    }\r\n    \r\n    // 在路径上插值\r\n    const scaledProgress = progress * (beamPath.length - 1);\r\n    const segmentIndex = Math.floor(scaledProgress);\r\n    const segmentProgress = scaledProgress - segmentIndex;\r\n    \r\n    if (segmentIndex >= beamPath.length - 1) {\r\n      return beamPath[beamPath.length - 1].clone();\r\n    }\r\n    \r\n    const startPoint = beamPath[segmentIndex];\r\n    const endPoint = beamPath[segmentIndex + 1];\r\n    \r\n    return startPoint.clone().lerp(endPoint, segmentProgress);\r\n  }\r\n  \r\n  /**\r\n   * 停止连续电子束流\r\n   */\r\n  stopContinuousElectronBeam() {\r\n    if (this.continuousBeamInterval) {\r\n      clearInterval(this.continuousBeamInterval);\r\n      this.continuousBeamInterval = null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 模拟电压变化\r\n   * @param {string} direction - 方向（'horizontal' 或 'vertical'）\r\n   * @param {number} targetVoltage - 目标电压\r\n   * @param {number} duration - 动画持续时间\r\n   */\r\n  simulateVoltageChange(direction, targetVoltage, duration = 1000) {\r\n    const deflection = CONFIG.deflection[direction];\r\n    if (!deflection) return;\r\n    \r\n    // 创建电压变化动画\r\n    const tween = new tween_esm/* Tween */.K({ voltage: deflection.voltage }, tweenGroup)\r\n      .to({ voltage: targetVoltage }, duration)\r\n      .easing(tween_esm/* Easing */.GS.Quadratic.InOut)\r\n      .onUpdate(obj => {\r\n        // 更新电压值\r\n        deflection.voltage = obj.voltage;\r\n        \r\n        // 更新电子束\r\n        if (this.controllers.onDeflectionChange) {\r\n          this.controllers.onDeflectionChange(CONFIG.deflection);\r\n        }\r\n      })\r\n      .start();\r\n    \r\n    this.tweens.push(tween);\r\n  }\r\n  \r\n  /**\r\n   * 设置波形参数\r\n   * @param {Object} params - 波形参数\r\n   */\r\n  setWaveformParams(params) {\r\n    Object.assign(CONFIG.waveform, params);\r\n    \r\n    // 更新波形\r\n    if (this.controllers.onWaveformChange) {\r\n      this.controllers.onWaveformChange(CONFIG.waveform);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 保存原始参数\r\n   */\r\n  saveOriginalParams() {\r\n    this.originalParams = {\r\n      deflection: {\r\n        horizontal: { voltage: CONFIG.deflection.horizontal.voltage },\r\n        vertical: { voltage: CONFIG.deflection.vertical.voltage }\r\n      },\r\n      waveform: { ...CONFIG.waveform },\r\n      beam: {\r\n        intensity: CONFIG.beam.intensity\r\n      }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 保存GUI面板状态并折叠所有面板\r\n   */\r\n  collapseGuiFolders() {\r\n    // 获取GUI控制器\r\n    const guiController = this.controllers.guiController;\r\n    if (!guiController || !guiController.gui) {\r\n      return;\r\n    }\r\n    \r\n    // 保存原始状态\r\n    this.originalGuiState = {};\r\n    \r\n    // 遍历所有文件夹并保存其展开状态，然后折叠\r\n    guiController.gui.__folders && Object.keys(guiController.gui.__folders).forEach(folderName => {\r\n      const folder = guiController.gui.__folders[folderName];\r\n      if (folder) {\r\n        // 保存原始展开状态\r\n        this.originalGuiState[folderName] = folder.closed;\r\n        // 折叠面板\r\n        folder.close();\r\n      }\r\n    });\r\n    \r\n    console.log('GUI面板已折叠，保存的原始状态:', this.originalGuiState);\r\n  }\r\n  \r\n  /**\r\n   * 恢复GUI面板状态\r\n   */\r\n  restoreGuiFolders() {\r\n    // 获取GUI控制器\r\n    const guiController = this.controllers.guiController;\r\n    if (!guiController || !guiController.gui || !this.originalGuiState) {\r\n      return;\r\n    }\r\n    \r\n    // 恢复所有文件夹的原始展开状态\r\n    Object.keys(this.originalGuiState).forEach(folderName => {\r\n      const folder = guiController.gui.__folders[folderName];\r\n      if (folder) {\r\n        if (this.originalGuiState[folderName]) {\r\n          folder.close();\r\n        } else {\r\n          folder.open();\r\n        }\r\n      }\r\n    });\r\n    \r\n    console.log('GUI面板状态已恢复');\r\n    this.originalGuiState = null;\r\n  }\r\n  \r\n  /**\r\n   * 重置所有参数\r\n   */\r\n  resetAllParams() {\r\n    if (!this.originalParams) return;\r\n    \r\n    // 恢复偏转参数\r\n    CONFIG.deflection.horizontal.voltage = this.originalParams.deflection.horizontal.voltage;\r\n    CONFIG.deflection.vertical.voltage = this.originalParams.deflection.vertical.voltage;\r\n    \r\n    // 恢复波形参数\r\n    Object.assign(CONFIG.waveform, this.originalParams.waveform);\r\n    \r\n    // 恢复电子束参数\r\n    CONFIG.beam.intensity = this.originalParams.beam.intensity;\r\n    \r\n    // 更新控制器\r\n    if (this.controllers.onDeflectionChange) {\r\n      this.controllers.onDeflectionChange(CONFIG.deflection);\r\n    }\r\n    \r\n    if (this.controllers.onWaveformChange) {\r\n      this.controllers.onWaveformChange(CONFIG.waveform);\r\n    }\r\n    \r\n    if (this.controllers.onBeamChange) {\r\n      this.controllers.onBeamChange(CONFIG.beam);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清除所有粒子\r\n   */\r\n  clearAllParticles() {\r\n    this.particles.forEach(particle => {\r\n      this.scene.remove(particle);\r\n      particle.geometry.dispose();\r\n      particle.material.dispose();\r\n    });\r\n    this.particles = [];\r\n  }\r\n  \r\n  /**\r\n   * 设置极板不透明度\r\n   * @param {number} opacity - 不透明度值 (0-1)\r\n   */\r\n  setPlateOpacity(opacity) {\r\n    // 如果还没有保存原始不透明度，先保存\r\n    if (!this.originalPlateOpacities) {\r\n      this.originalPlateOpacities = {};\r\n      \r\n      // 保存垂直偏转板的原始不透明度\r\n      if (this.components.v1 && this.components.v1.material) {\r\n        this.originalPlateOpacities.v1 = this.components.v1.material.opacity || 1.0;\r\n      }\r\n      if (this.components.v2 && this.components.v2.material) {\r\n        this.originalPlateOpacities.v2 = this.components.v2.material.opacity || 1.0;\r\n      }\r\n      \r\n      // 保存水平偏转板的原始不透明度\r\n      if (this.components.h1 && this.components.h1.material) {\r\n        this.originalPlateOpacities.h1 = this.components.h1.material.opacity || 1.0;\r\n      }\r\n      if (this.components.h2 && this.components.h2.material) {\r\n        this.originalPlateOpacities.h2 = this.components.h2.material.opacity || 1.0;\r\n      }\r\n    }\r\n    \r\n    // 设置极板的新不透明度 - 优化透明度渲染\r\n    const plates = [this.components.v1, this.components.v2, this.components.h1, this.components.h2];\r\n    plates.forEach(plate => {\r\n      if (plate && plate.material) {\r\n        plate.material.transparent = true;\r\n        plate.material.opacity = opacity;\r\n        plate.material.depthWrite = false; // 禁用深度写入，避免遮挡电子束\r\n        plate.material.side = three_module/* DoubleSide */.$EB; // 双面渲染，确保各个角度都能看到\r\n        plate.material.needsUpdate = true;\r\n        \r\n        // 调整渲染顺序，让极板在电子束之前渲染\r\n        plate.renderOrder = -1;\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 恢复极板原始不透明度\r\n   */\r\n  restorePlateOpacity() {\r\n    if (!this.originalPlateOpacities) {\r\n      return;\r\n    }\r\n    \r\n    // 恢复所有极板的原始不透明度和渲染属性\r\n    const plates = [\r\n      { component: this.components.v1, key: 'v1' },\r\n      { component: this.components.v2, key: 'v2' },\r\n      { component: this.components.h1, key: 'h1' },\r\n      { component: this.components.h2, key: 'h2' }\r\n    ];\r\n    \r\n    plates.forEach(({ component, key }) => {\r\n      if (component && component.material) {\r\n        component.material.opacity = this.originalPlateOpacities[key];\r\n        component.material.transparent = this.originalPlateOpacities[key] < 1.0;\r\n        component.material.depthWrite = true; // 恢复深度写入\r\n        component.material.side = three_module/* FrontSide */.hB5; // 恢复单面渲染\r\n        component.material.needsUpdate = true;\r\n        \r\n        // 恢复渲染顺序\r\n        component.renderOrder = 0;\r\n      }\r\n    });\r\n    \r\n    // 清除保存的原始值\r\n    this.originalPlateOpacities = null;\r\n  }\r\n\r\n  /**\r\n   * 更新动画\r\n   */\r\n  update() {\r\n    // 更新所有tweens\r\n    this.tweens.forEach(tween => {\r\n      if (tween && tween.isPlaying) {\r\n        tween.update();\r\n      }\r\n    });\r\n    \r\n    // 清理已完成的tweens\r\n    this.tweens = this.tweens.filter(tween => tween && tween.isPlaying);\r\n    \r\n    // 更新TWEEN（使用新的 Group API）\r\n    tweenGroup.update();\r\n  }\r\n  \r\n  /**\r\n   * 获取对象池性能统计信息\r\n   * @returns {Object} 对象池状态和性能统计\r\n   */\r\n  getParticlePoolStatus() {\r\n    if (!this.particlePool) {\r\n      return null;\r\n    }\r\n    return this.particlePool.getStatus();\r\n  }\r\n  \r\n  /**\r\n   * 打印对象池详细状态（调试用）\r\n   */\r\n  printParticlePoolStatus() {\r\n    if (this.particlePool) {\r\n      this.particlePool.printStatus();\r\n    }\r\n  }\r\n} \n;// ./src/geometry/RotationCurveGeometry.js\n\n\n/**\n * 旋转曲线几何体生成器\n * 基于数学公式生成平滑连接的旋转曲面\n * 支持G1和G2连续性\n */\nclass RotationCurveGeometry {\n  \n  /**\n   * 构造函数\n   * @param {number} r1 - 小半径\n   * @param {number} r2 - 大半径  \n   * @param {number} length - 过渡长度\n   * @param {string} curveType - 曲线类型 ('G1' 或 'G2')\n   * @param {number} segments - 分段数量\n   * @param {number} radialSegments - 径向分段数\n   */\n  constructor(r1, r2, length, curveType = 'G2', segments = 50, radialSegments = 32) {\n    this.r1 = r1;\n    this.r2 = r2;\n    this.length = length;\n    this.curveType = curveType;\n    this.segments = segments;\n    this.radialSegments = radialSegments;\n    \n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.generateGeometry();\n  }\n  \n  /**\n   * G1连续性曲线 (零斜率端点，够顺滑)\n   * r(z) = r1 + (r2 - r1) * (3s² - 2s³)\n   * 其中 s = z/L ∈ [0,1]\n   */\n  calculateG1Radius(s) {\n    const t = 3 * s * s - 2 * s * s * s;\n    return this.r1 + (this.r2 - this.r1) * t;\n  }\n  \n  /**\n   * G2连续性曲线 (连曲率也连续，更像\"银白金属\"般丝滑)\n   * r(z) = r1 + (r2 - r1) * (10s³ - 15s⁴ + 6s⁵)\n   * 其中 s = z/L ∈ [0,1]\n   */\n  calculateG2Radius(s) {\n    const s3 = s * s * s;\n    const s4 = s3 * s;\n    const s5 = s4 * s;\n    const t = 10 * s3 - 15 * s4 + 6 * s5;\n    return this.r1 + (this.r2 - this.r1) * t;\n  }\n  \n  /**\n   * 根据曲线类型计算半径\n   */\n  calculateRadius(s) {\n    switch (this.curveType) {\n      case 'G1':\n        return this.calculateG1Radius(s);\n      case 'G2':\n        return this.calculateG2Radius(s);\n      default:\n        return this.calculateG2Radius(s); // 默认使用G2\n    }\n  }\n  \n  /**\n   * 生成旋转曲面几何体\n   */\n  generateGeometry() {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    \n    // 生成顶点\n    for (let i = 0; i <= this.segments; i++) {\n      const s = i / this.segments; // 参数 s ∈ [0,1]\n      const z = s * this.length;   // Z坐标\n      const radius = this.calculateRadius(s);\n      \n      // 计算法向量需要的导数\n      const deltaS = 0.001;\n      const r_next = this.calculateRadius(Math.min(1, s + deltaS));\n      const r_prev = this.calculateRadius(Math.max(0, s - deltaS));\n      const dr_ds = (r_next - r_prev) / (2 * deltaS);\n      const dr_dz = dr_ds / this.length;\n      \n      for (let j = 0; j <= this.radialSegments; j++) {\n        const angle = (j / this.radialSegments) * Math.PI * 2;\n        \n        // 计算顶点位置\n        const x = Math.cos(angle) * radius;\n        const y = Math.sin(angle) * radius;\n        \n        vertices.push(x, y, z);\n        \n        // 计算法向量\n        // 对于旋转曲面，法向量 = (-dr/dz * cos(θ), -dr/dz * sin(θ), 1) 归一化\n        const nx = -dr_dz * Math.cos(angle);\n        const ny = -dr_dz * Math.sin(angle);\n        const nz = 1;\n        const length_n = Math.sqrt(nx * nx + ny * ny + nz * nz);\n        \n        normals.push(nx / length_n, ny / length_n, nz / length_n);\n        \n        // UV坐标\n        uvs.push(j / this.radialSegments, s);\n      }\n    }\n    \n    // 生成索引\n    for (let i = 0; i < this.segments; i++) {\n      for (let j = 0; j < this.radialSegments; j++) {\n        const a = i * (this.radialSegments + 1) + j;\n        const b = a + this.radialSegments + 1;\n        const c = a + 1;\n        const d = b + 1;\n        \n        // 两个三角形组成一个四边形\n        indices.push(a, b, c);\n        indices.push(b, d, c);\n      }\n    }\n    \n    // 设置几何体属性\n    this.geometry.setIndex(indices);\n    this.geometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    this.geometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    this.geometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    \n    // 计算边界球和边界框\n    this.geometry.computeBoundingSphere();\n    this.geometry.computeBoundingBox();\n  }\n  \n  /**\n   * 获取生成的几何体\n   */\n  getGeometry() {\n    return this.geometry;\n  }\n  \n  /**\n   * 创建扇形片段几何体\n   * @param {number} segmentIndex - 扇形索引 (0-3)\n   * @param {number} sectorCount - 总扇形数量 (通常是4)\n   * @returns {THREE.BufferGeometry} 扇形片段几何体\n   */\n  createSectorGeometry(segmentIndex, sectorCount = 4) {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    \n    // 计算角度范围\n    const anglePerSector = (Math.PI * 2) / sectorCount;\n    const startAngle = segmentIndex * anglePerSector;\n    const endAngle = (segmentIndex + 1) * anglePerSector;\n    \n    // 计算每个扇形的径向分段数\n    const radialSegmentsPerSector = Math.max(8, Math.floor(this.radialSegments / sectorCount));\n    \n    // 生成扇形顶点\n    for (let i = 0; i <= this.segments; i++) {\n      const s = i / this.segments; // 参数 s ∈ [0,1]\n      const z = s * this.length;   // Z坐标\n      const radius = this.calculateRadius(s);\n      \n      // 计算法向量需要的导数\n      const deltaS = 0.001;\n      const r_next = this.calculateRadius(Math.min(1, s + deltaS));\n      const r_prev = this.calculateRadius(Math.max(0, s - deltaS));\n      const dr_ds = (r_next - r_prev) / (2 * deltaS);\n      const dr_dz = dr_ds / this.length;\n      \n      for (let j = 0; j <= radialSegmentsPerSector; j++) {\n        // 在扇形角度范围内分布\n        const t = j / radialSegmentsPerSector;\n        const angle = startAngle + t * (endAngle - startAngle);\n        \n        // 计算顶点位置\n        const x = Math.cos(angle) * radius;\n        const y = Math.sin(angle) * radius;\n        \n        vertices.push(x, y, z);\n        \n        // 计算法向量\n        const nx = -dr_dz * Math.cos(angle);\n        const ny = -dr_dz * Math.sin(angle);\n        const nz = 1;\n        const length_n = Math.sqrt(nx * nx + ny * ny + nz * nz);\n        \n        normals.push(nx / length_n, ny / length_n, nz / length_n);\n        \n        // UV坐标\n        uvs.push(t, s);\n      }\n    }\n    \n    // 生成索引\n    for (let i = 0; i < this.segments; i++) {\n      for (let j = 0; j < radialSegmentsPerSector; j++) {\n        const a = i * (radialSegmentsPerSector + 1) + j;\n        const b = a + radialSegmentsPerSector + 1;\n        const c = a + 1;\n        const d = b + 1;\n        \n        // 两个三角形组成一个四边形\n        indices.push(a, b, c);\n        indices.push(b, d, c);\n      }\n    }\n    \n    // 创建新的几何体\n    const sectorGeometry = new three_module/* BufferGeometry */.LoY();\n    sectorGeometry.setIndex(indices);\n    sectorGeometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    sectorGeometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    sectorGeometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    \n    // 计算边界球和边界框\n    sectorGeometry.computeBoundingSphere();\n    sectorGeometry.computeBoundingBox();\n    \n    return sectorGeometry;\n  }\n\n  /**\n   * 销毁几何体资源\n   */\n  dispose() {\n    if (this.geometry) {\n      this.geometry.dispose();\n    }\n  }\n}\n\n/**\n * 便捷函数：创建旋转曲线几何体\n */\nfunction createRotationCurveGeometry(r1, r2, length, curveType = 'G2', segments = 50, radialSegments = 32) {\n  const generator = new RotationCurveGeometry(r1, r2, length, curveType, segments, radialSegments);\n  return generator.getGeometry();\n}\n\n;// ./src/components/CylinderConnection.js\n\n\n\n/**\n * 圆柱体连接组件\n * 使用旋转曲线生成两个圆柱体之间的平滑连接\n */\nclass CylinderConnection {\n  \n  /**\n   * 构造函数\n   * @param {Object} cylinder1Config - 第一个圆柱体配置\n   * @param {Object} cylinder2Config - 第二个圆柱体配置\n   * @param {Object} connectionConfig - 连接配置\n   */\n  constructor(cylinder1Config, cylinder2Config, connectionConfig = {}) {\n    this.cylinder1Config = cylinder1Config;\n    this.cylinder2Config = cylinder2Config;\n    this.connectionConfig = {\n      curveType: connectionConfig.curveType || 'G2',\n      segments: connectionConfig.segments || 50,\n      radialSegments: connectionConfig.radialSegments || 32,\n      visible: connectionConfig.visible !== false,\n      color: connectionConfig.color || '0x66aaff',\n      opacity: connectionConfig.opacity || 0.7,\n      connectionLength: connectionConfig.connectionLength || 1.0, // 连接区域长度\n      position: {\n        offset: connectionConfig.position?.offset || { x: 0, y: 0, z: 0 }\n      },\n      rotation: {\n        offset: connectionConfig.rotation?.offset || { x: 0, y: 0, z: 0 }\n      },\n      ...connectionConfig\n    };\n    \n    this.connectionGroup = new three_module/* Group */.YJl();\n    this.connectionGroup.name = 'CylinderConnection';\n    \n    this.connectionMeshes = [];\n    this.materials = [];\n    \n    this.createConnections();\n  }\n  \n  /**\n   * 创建连接\n   */\n  createConnections() {\n    // 计算两个圆柱体之间的连接参数\n    const connectionInfo = this.calculateConnectionParameters();\n    \n    if (connectionInfo.needsConnection) {\n      this.createConnectionMesh(connectionInfo);\n    }\n  }\n  \n  /**\n   * 计算连接参数\n   */\n  calculateConnectionParameters() {\n    const pos1 = this.cylinder1Config.position;\n    const pos2 = this.cylinder2Config.position;\n    const r1 = this.cylinder1Config.radius;\n    const r2 = this.cylinder2Config.radius;\n    \n    // 计算两个圆柱体中心之间的距离和方向\n    const distance = Math.sqrt(\n      Math.pow(pos2.x - pos1.x, 2) + \n      Math.pow(pos2.y - pos1.y, 2) + \n      Math.pow(pos2.z - pos1.z, 2)\n    );\n    \n    // 计算连接向量\n    const direction = new three_module/* Vector3 */.Pq0(\n      pos2.x - pos1.x,\n      pos2.y - pos1.y,\n      pos2.z - pos1.z\n    ).normalize();\n    \n    // 判断是否需要连接（圆柱体之间有间隙）\n    const cylinderLength1 = this.cylinder1Config.height;\n    const cylinderLength2 = this.cylinder2Config.height;\n    \n    // 计算圆柱体端点位置（考虑旋转）\n    const rot1 = new three_module/* Euler */.O9p(\n      this.cylinder1Config.rotation.x,\n      this.cylinder1Config.rotation.y,\n      this.cylinder1Config.rotation.z\n    );\n    const rot2 = new three_module/* Euler */.O9p(\n      this.cylinder2Config.rotation.x,\n      this.cylinder2Config.rotation.y,\n      this.cylinder2Config.rotation.z\n    );\n    \n    // 简化处理：假设圆柱体都是水平放置的（绕Z轴旋转90度）\n    // 在这种情况下，圆柱体的\"长度\"实际上是在X方向上\n    \n    const gap = Math.abs(distance - cylinderLength1/2 - cylinderLength2/2);\n    const needsConnection = gap > 0.1; // 如果间隙大于0.1，则需要连接\n    \n    return {\n      needsConnection,\n      distance,\n      direction,\n      gap,\n      startPos: new three_module/* Vector3 */.Pq0(pos1.x, pos1.y, pos1.z),\n      endPos: new three_module/* Vector3 */.Pq0(pos2.x, pos2.y, pos2.z),\n      startRadius: r1,\n      endRadius: r2,\n      connectionLength: this.connectionConfig.connectionLength\n    };\n  }\n  \n  /**\n   * 创建连接网格\n   */\n  createConnectionMesh(connectionInfo) {\n    // 创建连接材质 - 使用StandardMaterial以确保颜色一致性\n    const material = new three_module/* MeshStandardMaterial */._4j({\n      color: parseInt(this.connectionConfig.color),\n      transparent: true,\n      opacity: this.connectionConfig.opacity,\n      side: three_module/* DoubleSide */.$EB,\n      depthWrite: false,\n      metalness: 0.6,\n      roughness: 0.3\n    });\n    \n    this.materials.push(material);\n    \n    // 创建旋转曲线几何体\n    const curveGeometry = new RotationCurveGeometry(\n      connectionInfo.startRadius,\n      connectionInfo.endRadius,\n      connectionInfo.connectionLength,\n      this.connectionConfig.curveType,\n      this.connectionConfig.segments,\n      this.connectionConfig.radialSegments\n    );\n    \n    // 创建网格\n    const connectionMesh = new three_module/* Mesh */.eaF(curveGeometry.getGeometry(), material);\n    \n    // 设置位置和旋转\n    this.positionConnectionMesh(connectionMesh, connectionInfo);\n    \n    // 设置可见性\n    connectionMesh.visible = this.connectionConfig.visible;\n    \n    // 添加到组中\n    this.connectionGroup.add(connectionMesh);\n    this.connectionMeshes.push(connectionMesh);\n  }\n  \n  /**\n   * 定位连接网格\n   */\n  positionConnectionMesh(mesh, connectionInfo) {\n    // 计算连接中心点\n    const centerX = (connectionInfo.startPos.x + connectionInfo.endPos.x) / 2;\n    const centerY = (connectionInfo.startPos.y + connectionInfo.endPos.y) / 2;\n    const centerZ = (connectionInfo.startPos.z + connectionInfo.endPos.z) / 2;\n    \n    // 应用位置偏移\n    const posOffset = this.connectionConfig.position.offset;\n    mesh.position.set(\n      centerX + posOffset.x, \n      centerY + posOffset.y, \n      centerZ + posOffset.z\n    );\n    \n    // 计算旋转以对齐连接方向\n    // 默认几何体是沿Z轴方向的，需要旋转以对齐实际连接方向\n    const targetDirection = connectionInfo.direction;\n    const defaultDirection = new three_module/* Vector3 */.Pq0(0, 0, 1);\n    \n    // 计算旋转四元数\n    const quaternion = new three_module/* Quaternion */.PTz();\n    quaternion.setFromUnitVectors(defaultDirection, targetDirection);\n    mesh.setRotationFromQuaternion(quaternion);\n    \n    // 由于圆柱体是水平的（绕Z轴旋转90度），连接也需要相应调整\n    mesh.rotateZ(Math.PI / 2);\n    \n    // 应用旋转偏移\n    const rotOffset = this.connectionConfig.rotation.offset;\n    mesh.rotateX(rotOffset.x);\n    mesh.rotateY(rotOffset.y);\n    mesh.rotateZ(rotOffset.z);\n  }\n  \n  /**\n   * 获取连接组\n   */\n  getConnection() {\n    return this.connectionGroup;\n  }\n  \n  /**\n   * 设置可见性\n   */\n  setVisible(visible) {\n    this.connectionGroup.visible = visible;\n    this.connectionMeshes.forEach(mesh => {\n      mesh.visible = visible;\n    });\n  }\n  \n  /**\n   * 设置颜色\n   */\n  setColor(color) {\n    this.materials.forEach(material => {\n      material.color.setHex(color);\n    });\n  }\n  \n  /**\n   * 设置透明度\n   */\n  setOpacity(opacity) {\n    this.materials.forEach(material => {\n      material.opacity = Math.max(0, Math.min(1, opacity));\n    });\n  }\n  \n  /**\n   * 设置位置偏移\n   * @param {number} x - X轴偏移\n   * @param {number} y - Y轴偏移  \n   * @param {number} z - Z轴偏移\n   */\n  setPositionOffset(x, y, z) {\n    this.connectionConfig.position.offset = { x, y, z };\n    this.recreateConnections();\n  }\n  \n  /**\n   * 设置旋转偏移\n   * @param {number} x - X轴旋转偏移（弧度）\n   * @param {number} y - Y轴旋转偏移（弧度）\n   * @param {number} z - Z轴旋转偏移（弧度）\n   */\n  setRotationOffset(x, y, z) {\n    this.connectionConfig.rotation.offset = { x, y, z };\n    this.recreateConnections();\n  }\n  \n  /**\n   * 获取当前位置偏移\n   */\n  getPositionOffset() {\n    return { ...this.connectionConfig.position.offset };\n  }\n  \n  /**\n   * 获取当前旋转偏移\n   */\n  getRotationOffset() {\n    return { ...this.connectionConfig.rotation.offset };\n  }\n  \n  /**\n   * 直接设置连接组的位置（不改变配置，只是临时移动）\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {number} z - Z坐标\n   */\n  setPosition(x, y, z) {\n    this.connectionGroup.position.set(x, y, z);\n  }\n  \n  /**\n   * 直接设置连接组的旋转（不改变配置，只是临时旋转）\n   * @param {number} x - X轴旋转（弧度）\n   * @param {number} y - Y轴旋转（弧度）\n   * @param {number} z - Z轴旋转（弧度）\n   */\n  setRotation(x, y, z) {\n    this.connectionGroup.rotation.set(x, y, z);\n  }\n  \n  /**\n   * 获取连接组的当前位置\n   */\n  getPosition() {\n    return this.connectionGroup.position.clone();\n  }\n  \n  /**\n   * 获取连接组的当前旋转\n   */\n  getRotation() {\n    return this.connectionGroup.rotation.clone();\n  }\n  \n  /**\n   * 设置曲线类型\n   */\n  setCurveType(curveType) {\n    this.connectionConfig.curveType = curveType;\n    this.recreateConnections();\n  }\n  \n  /**\n   * 重新创建连接\n   */\n  recreateConnections() {\n    // 清理现有连接\n    this.dispose();\n    \n    // 重置数组\n    this.connectionMeshes = [];\n    this.materials = [];\n    \n    // 重新创建\n    this.createConnections();\n  }\n  \n  /**\n   * 更新配置\n   */\n  updateConfig(cylinder1Config, cylinder2Config, connectionConfig) {\n    this.cylinder1Config = cylinder1Config;\n    this.cylinder2Config = cylinder2Config;\n    \n    if (connectionConfig) {\n      this.connectionConfig = { ...this.connectionConfig, ...connectionConfig };\n    }\n    \n    this.recreateConnections();\n  }\n  \n  /**\n   * 销毁资源\n   */\n  dispose() {\n    // 销毁材质\n    this.materials.forEach(material => {\n      material.dispose();\n    });\n    \n    // 销毁几何体\n    this.connectionGroup.traverse((child) => {\n      if (child.geometry) {\n        child.geometry.dispose();\n      }\n      if (child.material) {\n        child.material.dispose();\n      }\n    });\n    \n    // 清理组\n    this.connectionGroup.clear();\n    \n    // 重置数组\n    this.connectionMeshes = [];\n    this.materials = [];\n  }\n}\n\n;// ./src/materials/UnifiedComponentMaterial.js\n\r\n\r\n\r\n/**\r\n * 统一组件材质管理器\r\n * 为cylinder2、rotationCurveConnection和superellipseTransition提供统一的材质管理\r\n * 使其颜色和材质符合示波器内部的金属材质风格\r\n */\r\nclass UnifiedComponentMaterial {\r\n  constructor() {\r\n    this.textureLoader = new three_module/* TextureLoader */.Tap();\r\n    this.materialCache = new Map();\r\n    this.textures = {};\r\n    \r\n    // 统一的材质配置（基于示波器内部金属材质）\r\n    this.unifiedConfig = {\r\n      color: 0xF0F0F0,        // 银白色金属色\r\n      metalness: 0.6,         // 金属度\r\n      roughness: 0.3,         // 粗糙度\r\n      opacity: 0.7,           // 透明度\r\n      envMapIntensity: 1.0,   // 环境贴图强度\r\n      side: three_module/* DoubleSide */.$EB, // 双面渲染\r\n      depthWrite: false,      // 关闭深度写入（透明物体）\r\n      transparent: true       // 启用透明\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 初始化统一材质系统\r\n   * @returns {Promise} 返回Promise，在初始化完成后解析\r\n   */\r\n  async initialize() {\r\n    console.log('🎨 正在初始化统一组件材质系统...');\r\n    \r\n    try {\r\n      // 加载金属贴图\r\n      await this.loadMetalTextures();\r\n      \r\n      // 预创建常用材质\r\n      this.createStandardMaterial();\r\n      this.createExplodedMaterial();\r\n      this.createTransitionMaterial();\r\n      \r\n      console.log('✅ 统一组件材质系统初始化完成');\r\n      return true;\r\n    } catch (error) {\r\n      console.warn('⚠️ 统一材质系统初始化失败，使用无贴图材质:', error);\r\n      this.createFallbackMaterials();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载金属贴图\r\n   * @returns {Promise} 贴图加载Promise\r\n   */\r\n  async loadMetalTextures() {\r\n    const metalConfig = CONFIG.materials.metal;\r\n    const loadPromises = [];\r\n\r\n    if (metalConfig.textures && metalConfig.textures.map) {\r\n      loadPromises.push(this.loadTexture('metalMap', metalConfig.textures.map));\r\n    }\r\n\r\n    if (metalConfig.textures && metalConfig.textures.normalMap) {\r\n      loadPromises.push(this.loadTexture('metalNormal', metalConfig.textures.normalMap));\r\n    }\r\n\r\n    if (metalConfig.textures && metalConfig.textures.roughnessMap) {\r\n      loadPromises.push(this.loadTexture('metalRoughness', metalConfig.textures.roughnessMap));\r\n    }\r\n\r\n    if (metalConfig.textures && metalConfig.textures.metalnessMap) {\r\n      loadPromises.push(this.loadTexture('metalMetalness', metalConfig.textures.metalnessMap));\r\n    }\r\n\r\n    await Promise.all(loadPromises);\r\n  }\r\n\r\n  /**\r\n   * 加载单个贴图\r\n   * @param {string} name - 贴图名称\r\n   * @param {string} path - 贴图路径\r\n   * @returns {Promise} 贴图加载Promise\r\n   */\r\n  loadTexture(name, path) {\r\n    return new Promise((resolve, reject) => {\r\n      this.textureLoader.load(\r\n        path,\r\n        (texture) => {\r\n          // 设置贴图参数\r\n          texture.wrapS = three_module/* RepeatWrapping */.GJx;\r\n          texture.wrapT = three_module/* RepeatWrapping */.GJx;\r\n          texture.flipY = false;\r\n          \r\n          this.textures[name] = texture;\r\n          console.log(`📸 贴图加载成功: ${name}`);\r\n          resolve(texture);\r\n        },\r\n        undefined,\r\n        (error) => {\r\n          console.warn(`❌ 贴图加载失败: ${name}`, error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建标准统一材质\r\n   */\r\n  createStandardMaterial() {\r\n    const materialProps = {\r\n      ...this.unifiedConfig\r\n    };\r\n\r\n    // 添加贴图（如果有）\r\n    if (this.textures.metalMap) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n\r\n    if (this.textures.metalNormal) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n\r\n    if (this.textures.metalRoughness) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n\r\n    if (this.textures.metalMetalness) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    const material = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n    this.materialCache.set('standard', material);\r\n    \r\n    console.log('🔧 标准统一材质创建完成');\r\n  }\r\n\r\n  /**\r\n   * 创建爆炸分解效果材质（稍微透明一些）\r\n   */\r\n  createExplodedMaterial() {\r\n    const materialProps = {\r\n      ...this.unifiedConfig,\r\n      opacity: 0.6  // 爆炸状态时更透明\r\n    };\r\n\r\n    // 添加贴图（如果有）\r\n    if (this.textures.metalMap) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n\r\n    if (this.textures.metalNormal) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n\r\n    if (this.textures.metalRoughness) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n\r\n    if (this.textures.metalMetalness) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    const material = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n    this.materialCache.set('exploded', material);\r\n    \r\n    console.log('💥 爆炸材质创建完成');\r\n  }\r\n\r\n  /**\r\n   * 创建过渡材质（用于SuperellipseTransition）\r\n   */\r\n  createTransitionMaterial() {\r\n    const materialProps = {\r\n      ...this.unifiedConfig,\r\n      opacity: 0.8  // 过渡材质稍微不透明一些\r\n    };\r\n\r\n    // 添加贴图（如果有）\r\n    if (this.textures.metalMap) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n\r\n    if (this.textures.metalNormal) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n\r\n    if (this.textures.metalRoughness) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n\r\n    if (this.textures.metalMetalness) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    const material = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n    this.materialCache.set('transition', material);\r\n    \r\n    console.log('🔄 过渡材质创建完成');\r\n  }\r\n\r\n  /**\r\n   * 创建备用材质（无贴图版本）\r\n   */\r\n  createFallbackMaterials() {\r\n    console.log('🚧 创建备用统一材质（无贴图）');\r\n    \r\n    // 标准材质\r\n    const standardMaterial = new three_module/* MeshStandardMaterial */._4j(this.unifiedConfig);\r\n    this.materialCache.set('standard', standardMaterial);\r\n    \r\n    // 爆炸材质\r\n    const explodedMaterial = new three_module/* MeshStandardMaterial */._4j({\r\n      ...this.unifiedConfig,\r\n      opacity: 0.6\r\n    });\r\n    this.materialCache.set('exploded', explodedMaterial);\r\n    \r\n    // 过渡材质\r\n    const transitionMaterial = new three_module/* MeshStandardMaterial */._4j({\r\n      ...this.unifiedConfig,\r\n      opacity: 0.8\r\n    });\r\n    this.materialCache.set('transition', transitionMaterial);\r\n  }\r\n\r\n  /**\r\n   * 获取指定类型的材质\r\n   * @param {string} type - 材质类型 ('standard', 'exploded', 'transition')\r\n   * @returns {THREE.Material} 材质对象\r\n   */\r\n  getMaterial(type = 'standard') {\r\n    if (!this.materialCache.has(type)) {\r\n      console.warn(`⚠️ 未找到材质类型: ${type}，返回标准材质`);\r\n      return this.materialCache.get('standard');\r\n    }\r\n    return this.materialCache.get(type);\r\n  }\r\n\r\n  /**\r\n   * 创建自定义材质（基于统一配置）\r\n   * @param {Object} customProps - 自定义属性\r\n   * @returns {THREE.Material} 自定义材质\r\n   */\r\n  createCustomMaterial(customProps = {}) {\r\n    const materialProps = {\r\n      ...this.unifiedConfig,\r\n      ...customProps\r\n    };\r\n\r\n    // 添加贴图（如果有且用户没有覆盖）\r\n    if (this.textures.metalMap && !customProps.map) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n\r\n    if (this.textures.metalNormal && !customProps.normalMap) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n\r\n    if (this.textures.metalRoughness && !customProps.roughnessMap) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n\r\n    if (this.textures.metalMetalness && !customProps.metalnessMap) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    return new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n  }\r\n\r\n  /**\r\n   * 获取统一的颜色值\r\n   * @returns {number} 16进制颜色值\r\n   */\r\n  getUnifiedColor() {\r\n    return this.unifiedConfig.color;\r\n  }\r\n\r\n  /**\r\n   * 获取统一的透明度值\r\n   * @param {string} type - 材质类型\r\n   * @returns {number} 透明度值\r\n   */\r\n  getUnifiedOpacity(type = 'standard') {\r\n    switch (type) {\r\n      case 'exploded':\r\n        return 0.6;\r\n      case 'transition':\r\n        return 0.8;\r\n      default:\r\n        return this.unifiedConfig.opacity;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新统一配置\r\n   * @param {Object} newConfig - 新的配置\r\n   */\r\n  updateUnifiedConfig(newConfig) {\r\n    this.unifiedConfig = { ...this.unifiedConfig, ...newConfig };\r\n    \r\n    // 重新创建所有材质\r\n    this.materialCache.clear();\r\n    if (Object.keys(this.textures).length > 0) {\r\n      this.createStandardMaterial();\r\n      this.createExplodedMaterial();\r\n      this.createTransitionMaterial();\r\n    } else {\r\n      this.createFallbackMaterials();\r\n    }\r\n    \r\n    console.log('🔄 统一材质配置已更新');\r\n  }\r\n\r\n  /**\r\n   * 释放所有资源\r\n   */\r\n  dispose() {\r\n    // 释放贴图\r\n    Object.values(this.textures).forEach(texture => {\r\n      texture.dispose();\r\n    });\r\n\r\n    // 释放材质\r\n    this.materialCache.forEach(material => {\r\n      material.dispose();\r\n    });\r\n\r\n    this.textures = {};\r\n    this.materialCache.clear();\r\n    \r\n    console.log('🗑️ 统一组件材质资源已释放');\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst unifiedComponentMaterial = new UnifiedComponentMaterial();\r\n\n;// ./src/components/SuperellipseTransition.js\n\n\n\n/**\n * 超椭圆形状渐变组件\n * 实现从圆形到方形的平滑几何过渡，基于超椭圆公式：|x/a|^m + |y/b|^m = 1\n * \n * 参数说明：\n * - m = 2: 椭圆/圆形\n * - m → ∞: 趋近方形  \n * - m = 6~12: 圆角方形效果\n * \n * 支持G2五次缓动确保曲率连续性\n */\nclass SuperellipseTransition {\n  /**\n   * 构造函数\n   * @param {Object} startConfig - 起始几何配置（圆形）\n   * @param {Object} endConfig - 结束几何配置（方形）\n   * @param {Object} transitionConfig - 过渡配置\n   */\n  constructor(startConfig, endConfig, transitionConfig) {\n    this.startConfig = startConfig;\n    this.endConfig = endConfig; \n    this.transitionConfig = {\n      // 默认配置\n      segments: 64,              // 长度分段数（影响过渡平滑度）\n      radialSegments: 32,        // 径向分段数\n      transitionLength: 2.0,     // 过渡长度\n      startExponent: 2.0,        // 起始指数（圆形）\n      endExponent: 100.0,        // 结束指数（完全直角矩形）\n      g2Smoothing: true,         // 启用G2五次缓动\n      color: 0x66aaff,\n      opacity: 0.7,\n      position: { offset: { x: 0, y: 0, z: 0 } },\n      rotation: { offset: { x: 0, y: 0, z: 0 } },\n      // 覆盖默认配置\n      ...transitionConfig\n    };\n    \n    this.transitionGroup = new three_module/* Group */.YJl();\n    this.transitionGroup.name = 'SuperellipseTransition';\n    \n    // 材质\n    this.material = null;\n    this.meshes = [];\n    \n    this.createTransition();\n  }\n\n  /**\n   * 创建形状渐变过渡\n   */\n  createTransition() {\n    // 使用统一组件材质（示波器内部金属材质）\n    this.material = unifiedComponentMaterial.getMaterial('transition');\n\n    // 计算过渡参数\n    const transitionInfo = this.calculateTransitionParams();\n    \n    // 创建过渡几何体\n    const geometry = this.createSuperellipseGeometry(transitionInfo);\n    \n    // 创建网格\n    const mesh = new three_module/* Mesh */.eaF(geometry, this.material);\n    \n    // 定位网格\n    this.positionTransitionMesh(mesh, transitionInfo);\n    \n    // 添加到组\n    this.transitionGroup.add(mesh);\n    this.meshes.push(mesh);\n  }\n\n  /**\n   * 计算过渡参数\n   */\n  calculateTransitionParams() {\n    // 计算起始和结束位置\n    const startPos = new three_module/* Vector3 */.Pq0(\n      this.startConfig.position.x,\n      this.startConfig.position.y, \n      this.startConfig.position.z\n    );\n    \n    const endPos = new three_module/* Vector3 */.Pq0(\n      this.endConfig.position.x,\n      this.endConfig.position.y,\n      this.endConfig.position.z\n    );\n    \n    // 计算过渡方向和距离\n    const direction = new three_module/* Vector3 */.Pq0().subVectors(endPos, startPos).normalize();\n    const distance = startPos.distanceTo(endPos);\n    \n    // 计算过渡中心点\n    const center = new three_module/* Vector3 */.Pq0().addVectors(startPos, endPos).multiplyScalar(0.5);\n    \n    // 使用用户配置的过渡长度（移除距离限制，让用户自由控制）\n    const adjustedLength = this.transitionConfig.transitionLength;\n    \n    return {\n      startPos,\n      endPos,\n      center,\n      direction,\n      distance,\n      transitionLength: adjustedLength,\n      startRadius: this.startConfig.radius,\n      endSize: this.endConfig.size // 立方体尺寸\n    };\n  }\n\n  /**\n   * 创建超椭圆过渡几何体\n   * @param {Object} transitionInfo - 过渡信息\n   */\n  createSuperellipseGeometry(transitionInfo) {\n    const segments = this.transitionConfig.segments;\n    const radialSegments = this.transitionConfig.radialSegments;\n    const length = transitionInfo.transitionLength;\n    \n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    \n    // 沿长度方向创建截面\n    for (let i = 0; i <= segments; i++) {\n      const t = i / segments; // 0 到 1\n      const z = -length / 2 + t * length; // 沿Z轴分布\n      \n      // 应用G2五次缓动进行平滑插值\n      const smoothT = this.transitionConfig.g2Smoothing ? this.g2Smoothing(t) : t;\n      \n      // 插值计算当前截面的超椭圆参数\n      const currentExponent = three_module/* MathUtils */.cj9.lerp(\n        this.transitionConfig.startExponent, \n        this.transitionConfig.endExponent, \n        smoothT\n      );\n      \n      // 插值计算当前截面的尺寸\n      // 注意：由于超椭圆会绕Z轴旋转90度，需要交换width和height的映射\n      // X轴（旋转后变成垂直方向）对应荧光屏的height\n      // Y轴（旋转后变成水平方向）对应荧光屏的width\n      const currentRadiusX = three_module/* MathUtils */.cj9.lerp(\n        transitionInfo.startRadius,\n        transitionInfo.endSize.height / 2,  // 高度映射到X轴\n        smoothT\n      );\n      const currentRadiusY = three_module/* MathUtils */.cj9.lerp(\n        transitionInfo.startRadius,\n        transitionInfo.endSize.width / 2,   // 宽度映射到Y轴\n        smoothT\n      );\n      \n      // 创建当前截面的超椭圆轮廓\n      const crossSection = this.generateSuperellipseCrossSection(\n        currentRadiusX,\n        currentRadiusY,\n        currentExponent,\n        radialSegments\n      );\n      \n      // 添加顶点到几何体\n      for (let j = 0; j < crossSection.length; j++) {\n        const point = crossSection[j];\n        vertices.push(point.x, point.y, z);\n        \n        // 计算法向量（简化版，可进一步优化）\n        const normal = new three_module/* Vector3 */.Pq0(point.x, point.y, 0).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        \n        // UV坐标\n        uvs.push(j / radialSegments, t);\n      }\n    }\n    \n    // 生成索引（连接相邻截面）\n    for (let i = 0; i < segments; i++) {\n      for (let j = 0; j < radialSegments; j++) {\n        const current = i * radialSegments + j;\n        const next = i * radialSegments + ((j + 1) % radialSegments);\n        const currentNext = (i + 1) * radialSegments + j;\n        const nextNext = (i + 1) * radialSegments + ((j + 1) % radialSegments);\n        \n        // 两个三角形组成一个四边形\n        indices.push(current, next, currentNext);\n        indices.push(next, nextNext, currentNext);\n      }\n    }\n    \n    // 创建几何体\n    const geometry = new three_module/* BufferGeometry */.LoY();\n    geometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    geometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    geometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    geometry.setIndex(indices);\n    \n    // 计算正确的法向量\n    geometry.computeVertexNormals();\n    \n    return geometry;\n  }\n\n  /**\n   * 生成超椭圆截面轮廓\n   * 使用公式：|x/a|^m + |y/b|^m = 1\n   * @param {number} radiusX - X轴半径\n   * @param {number} radiusY - Y轴半径  \n   * @param {number} exponent - 超椭圆指数\n   * @param {number} segments - 分段数\n   */\n  generateSuperellipseCrossSection(radiusX, radiusY, exponent, segments) {\n    const points = [];\n    \n    // 当指数非常大时，直接生成矩形\n    if (exponent >= 50) {\n      return this.generateRectangleCrossSection(radiusX, radiusY, segments);\n    }\n    \n    for (let i = 0; i < segments; i++) {\n      const angle = (i / segments) * Math.PI * 2;\n      \n      // 参数方程生成超椭圆点\n      // x = a * sign(cos(θ)) * |cos(θ)|^(2/m)\n      // y = b * sign(sin(θ)) * |sin(θ)|^(2/m)\n      const cosTheta = Math.cos(angle);\n      const sinTheta = Math.sin(angle);\n      \n      const signCos = Math.sign(cosTheta);\n      const signSin = Math.sign(sinTheta);\n      \n      // 避免数值问题：当指数很大时，限制最小值\n      const minValue = 1e-12;\n      const absCos = Math.max(Math.abs(cosTheta), minValue);\n      const absSin = Math.max(Math.abs(sinTheta), minValue);\n      \n      const powCos = Math.pow(absCos, 2 / exponent);\n      const powSin = Math.pow(absSin, 2 / exponent);\n      \n      const x = radiusX * signCos * powCos;\n      const y = radiusY * signSin * powSin;\n      \n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    return points;\n  }\n\n  /**\n   * 生成完全直角的矩形截面轮廓\n   * @param {number} radiusX - X轴半径\n   * @param {number} radiusY - Y轴半径  \n   * @param {number} segments - 分段数\n   */\n  generateRectangleCrossSection(radiusX, radiusY, segments) {\n    const points = [];\n    const segmentsPerSide = Math.floor(segments / 4);\n    \n    // 右边（从右下到右上）\n    for (let i = 0; i <= segmentsPerSide; i++) {\n      const t = i / segmentsPerSide;\n      const x = radiusX;\n      const y = radiusY * (2 * t - 1); // -radiusY 到 radiusY\n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    // 上边（从右上到左上）\n    for (let i = 1; i <= segmentsPerSide; i++) {\n      const t = i / segmentsPerSide;\n      const x = radiusX * (1 - 2 * t); // radiusX 到 -radiusX\n      const y = radiusY;\n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    // 左边（从左上到左下）\n    for (let i = 1; i <= segmentsPerSide; i++) {\n      const t = i / segmentsPerSide;\n      const x = -radiusX;\n      const y = radiusY * (1 - 2 * t); // radiusY 到 -radiusY\n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    // 下边（从左下到右下）\n    for (let i = 1; i < segmentsPerSide; i++) {\n      const t = i / segmentsPerSide;\n      const x = radiusX * (2 * t - 1); // -radiusX 到 radiusX\n      const y = -radiusY;\n      points.push(new three_module/* Vector2 */.I9Y(x, y));\n    }\n    \n    return points;\n  }\n\n  /**\n   * G2五次缓动函数\n   * 保证位置、速度和加速度连续性\n   * 公式：f(t) = 10t³ - 15t⁴ + 6t⁵\n   * @param {number} t - 输入参数 [0,1]\n   */\n  g2Smoothing(t) {\n    // 限制输入范围\n    t = Math.max(0, Math.min(1, t));\n    \n    // G2五次缓动\n    return 10 * Math.pow(t, 3) - 15 * Math.pow(t, 4) + 6 * Math.pow(t, 5);\n  }\n\n  /**\n   * 定位过渡网格\n   * @param {THREE.Mesh} mesh - 网格对象\n   * @param {Object} transitionInfo - 过渡信息\n   */\n  positionTransitionMesh(mesh, transitionInfo) {\n    // 设置基础位置（过渡中心点）\n    const center = transitionInfo.center;\n    const posOffset = this.transitionConfig.position.offset;\n    \n    mesh.position.set(\n      center.x + posOffset.x,\n      center.y + posOffset.y, \n      center.z + posOffset.z\n    );\n    \n    // 计算旋转以对齐过渡方向\n    const targetDirection = transitionInfo.direction;\n    const defaultDirection = new three_module/* Vector3 */.Pq0(0, 0, 1);\n    \n    // 计算旋转四元数\n    const quaternion = new three_module/* Quaternion */.PTz();\n    quaternion.setFromUnitVectors(defaultDirection, targetDirection);\n    mesh.setRotationFromQuaternion(quaternion);\n    \n    // 由于圆柱体是水平的（绕Z轴旋转90度），过渡也需要相应调整\n    mesh.rotateZ(Math.PI / 2);\n    \n    // 应用旋转偏移\n    const rotOffset = this.transitionConfig.rotation.offset;\n    mesh.rotateX(rotOffset.x);\n    mesh.rotateY(rotOffset.y);\n    mesh.rotateZ(rotOffset.z);\n  }\n\n  /**\n   * 获取过渡组\n   */\n  getTransition() {\n    return this.transitionGroup;\n  }\n\n  /**\n   * 设置可见性\n   */\n  setVisible(visible) {\n    this.transitionGroup.visible = visible;\n  }\n\n  /**\n   * 设置颜色\n   */\n  setColor(color) {\n    if (this.material) {\n      this.material.color.setHex(color);\n    }\n  }\n\n  /**\n   * 设置透明度\n   */\n  setOpacity(opacity) {\n    if (this.material) {\n      this.material.opacity = Math.max(0, Math.min(1, opacity));\n    }\n  }\n\n  /**\n   * 设置位置偏移\n   */\n  setPositionOffset(x, y, z) {\n    this.transitionConfig.position.offset = { x, y, z };\n    this.updatePosition();\n  }\n\n  /**\n   * 设置旋转偏移  \n   */\n  setRotationOffset(x, y, z) {\n    this.transitionConfig.rotation.offset = { x, y, z };\n    this.updateRotation();\n  }\n\n  /**\n   * 直接设置位置\n   */\n  setPosition(x, y, z) {\n    this.transitionGroup.position.set(x, y, z);\n  }\n\n  /**\n   * 直接设置旋转\n   */\n  setRotation(x, y, z) {\n    this.transitionGroup.rotation.set(x, y, z);\n  }\n\n  /**\n   * 获取当前位置\n   */\n  getPosition() {\n    return this.transitionGroup.position.clone();\n  }\n\n  /**\n   * 获取当前旋转\n   */\n  getRotation() {\n    return this.transitionGroup.rotation.clone();\n  }\n\n  /**\n   * 获取位置偏移\n   */\n  getPositionOffset() {\n    return { ...this.transitionConfig.position.offset };\n  }\n\n  /**\n   * 获取旋转偏移\n   */\n  getRotationOffset() {\n    return { ...this.transitionConfig.rotation.offset };\n  }\n\n  /**\n   * 更新位置（重新计算基于偏移）\n   */\n  updatePosition() {\n    // 重新计算过渡参数\n    const transitionInfo = this.calculateTransitionParams();\n    \n    // 更新所有网格位置\n    this.meshes.forEach(mesh => {\n      this.positionTransitionMesh(mesh, transitionInfo);\n    });\n  }\n\n  /**\n   * 更新旋转（重新计算基于偏移）\n   */\n  updateRotation() {\n    this.updatePosition(); // 旋转偏移需要重新定位\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfig(startConfig, endConfig, transitionConfig) {\n    this.startConfig = startConfig;\n    this.endConfig = endConfig;\n    this.transitionConfig = { ...this.transitionConfig, ...transitionConfig };\n    \n    // 重新创建过渡\n    this.dispose();\n    this.createTransition();\n  }\n\n  /**\n   * 动态更新超椭圆指数（用于动画效果）\n   * @param {number} startExponent - 起始指数\n   * @param {number} endExponent - 结束指数\n   */\n  updateExponents(startExponent, endExponent) {\n    this.transitionConfig.startExponent = startExponent;\n    this.transitionConfig.endExponent = endExponent;\n    \n    // 重新创建几何体\n    this.dispose();\n    this.createTransition();\n  }\n\n  /**\n   * 销毁资源\n   */\n  dispose() {\n    if (this.material) {\n      this.material.dispose();\n    }\n    \n    this.meshes.forEach(mesh => {\n      if (mesh.geometry) mesh.geometry.dispose();\n      this.transitionGroup.remove(mesh);\n    });\n    \n    this.meshes = [];\n  }\n}\n\n;// ./src/components/Cylinder2ExplodeEffect.js\n\n\n\n\n\n\n/**\n * Cylinder2爆炸分解效果类\n * 将cylinder2模型分解成积木块状组件，模拟积木组装/分解效果\n */\nclass Cylinder2ExplodeEffect {\n  /**\n   * 构造函数\n   * @param {THREE.Mesh} cylinder2Mesh - cylinder2网格对象\n   * @param {THREE.Group} parentGroup - 父级组对象\n   */\n  constructor(cylinder2Mesh, parentGroup) {\n    this.originalMesh = cylinder2Mesh;\n    this.parentGroup = parentGroup;\n    this.exploded = false;\n    this.blocks = [];\n    this.tweens = [];\n    this.originalVisible = cylinder2Mesh.visible;\n    \n    // 分解参数\n    this.config = {\n      // 分解距离系数\n      explodeDistance: 1.5,\n      // 动画持续时间\n      animationDuration: 1200\n    };\n    \n    this.createBlocks();\n  }\n  \n  /**\n   * 创建积木块\n   */\n  createBlocks() {\n    const config = CONFIG.shell.cylinder2;\n    const radius = config.radius;\n    const height = config.height;\n    \n    // 使用统一组件材质（示波器内部金属材质）\n    const blockMaterial = unifiedComponentMaterial.getMaterial('exploded');\n    \n    // 创建4个扇形分块（四分之一圆）\n    for (let i = 0; i < 4; i++) {\n      const block = this.createQuarterBlock(radius, height, blockMaterial, i);\n      \n      // 设置初始位置\n      block.position.copy(this.originalMesh.position);\n      \n      // 保存扇形的基础旋转\n      const baseRotation = block.rotation.clone();\n      \n      // 应用cylinder2的旋转（组合旋转）\n      block.rotation.copy(this.originalMesh.rotation);\n      // 在原始旋转基础上添加扇形的基础旋转\n      block.rotation.z += baseRotation.z;\n      \n      // 初始时隐藏积木块\n      block.visible = false;\n      \n      // 计算扇形的中心角度（用于分解方向）\n      const centerAngle = i * Math.PI / 2 + Math.PI / 4; // 每个扇形的中心角度\n      \n      this.blocks.push({\n        mesh: block,\n        originalPosition: block.position.clone(),\n        originalRotation: block.rotation.clone(),\n        segmentIndex: i,\n        centerAngle: centerAngle\n      });\n      \n      this.parentGroup.add(block);\n    }\n  }\n  \n  /**\n   * 创建四分之一圆扇形积木块\n   */\n  createQuarterBlock(radius, height, material, segmentIndex) {\n    // 创建扇形几何体（四分之一圆）\n    const geometry = new three_module/* CylinderGeometry */.Ho_(\n      radius, \n      radius, \n      height, \n      8, // 每个扇形的径向段数\n      1, // 高度分段数\n      false, // 不封闭\n      segmentIndex * Math.PI / 2, // 起始角度\n      Math.PI / 2 // 扇形角度（90度）\n    );\n    \n    // 创建网格\n    const mesh = new three_module/* Mesh */.eaF(geometry, material);\n    \n    // 调整方向以匹配cylinder2的方向（沿X轴）\n    mesh.rotation.z = Math.PI / 2;\n    \n    return mesh;\n  }\n  \n  /**\n   * 计算爆炸后的位置\n   */\n  calculateExplodedPosition(block) {\n    const { centerAngle, originalPosition } = block;\n    \n    // 计算扇形在径向上的分解方向\n    // 由于cylinder2是沿X轴的，我们需要在YZ平面上分解\n    const explodeDistance = this.config.explodeDistance;\n    \n    // 计算分解的方向向量（在YZ平面上）\n    const directionY = Math.sin(centerAngle) * explodeDistance;\n    const directionZ = Math.cos(centerAngle) * explodeDistance;\n    \n    // 计算新位置\n    const explodedPosition = originalPosition.clone();\n    explodedPosition.y += directionY;\n    explodedPosition.z += directionZ;\n    \n    return explodedPosition;\n  }\n  \n  /**\n   * 切换爆炸效果\n   */\n  toggle(explode = !this.exploded) {\n    this.exploded = explode;\n    \n    // 停止所有正在进行的动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    if (this.exploded) {\n      // 爆炸：隐藏原始网格，显示积木块\n      this.originalMesh.visible = false;\n      this.explodeBlocks();\n    } else {\n      // 合并：重新组装积木块，显示原始网格\n      this.assembleBlocks();\n    }\n    \n    return this.exploded;\n  }\n  \n  /**\n   * 分解积木块\n   */\n  explodeBlocks() {\n    this.blocks.forEach((block, index) => {\n      // 显示积木块\n      block.mesh.visible = true;\n      \n      // 计算目标位置\n      const targetPosition = this.calculateExplodedPosition(block);\n      \n      // 创建位置动画（带延迟以产生连锁效果）\n      const delay = index * 100; // 100ms的延迟间隔，让分解效果更明显\n      \n      const positionTween = new tween_esm/* Tween */.K(block.mesh.position, tweenGroup)\n        .to({\n          x: targetPosition.x,\n          y: targetPosition.y,\n          z: targetPosition.z\n        }, this.config.animationDuration)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.Out)\n        .start();\n      \n      this.tweens.push(positionTween);\n    });\n  }\n  \n  /**\n   * 组装积木块\n   */\n  assembleBlocks() {\n    this.blocks.forEach((block, index) => {\n      // 创建回归动画（反向延迟以产生重新组装效果）\n      const delay = (this.blocks.length - index - 1) * 80; // 反向延迟\n      \n      const positionTween = new tween_esm/* Tween */.K(block.mesh.position, tweenGroup)\n        .to({\n          x: block.originalPosition.x,\n          y: block.originalPosition.y,\n          z: block.originalPosition.z\n        }, this.config.animationDuration * 0.8)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.In)\n        .onComplete(() => {\n          // 最后一个块组装完成后，隐藏所有积木块并显示原始网格\n          if (index === this.blocks.length - 1) {\n            this.blocks.forEach(b => b.mesh.visible = false);\n            this.originalMesh.visible = this.originalVisible;\n          }\n        })\n        .start();\n      \n      this.tweens.push(positionTween);\n    });\n  }\n  \n  /**\n   * 清理资源\n   */\n  dispose() {\n    // 停止所有动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    // 移除积木块\n    this.blocks.forEach(block => {\n      this.parentGroup.remove(block.mesh);\n      block.mesh.geometry.dispose();\n      block.mesh.material.dispose();\n    });\n    \n    this.blocks = [];\n  }\n  \n  /**\n   * 获取爆炸状态\n   */\n  isExploded() {\n    return this.exploded;\n  }\n}\n\n;// ./src/components/RotationCurveExplodeEffect.js\n\n\n\n\n\n\n\n/**\n * 旋转曲线连接爆炸分解效果类\n * 将旋转曲线连接分解成扇形段，模拟积木组装/分解效果\n */\nclass RotationCurveExplodeEffect {\n  /**\n   * 构造函数\n   * @param {THREE.Mesh} connectionMesh - 旋转曲线连接网格对象\n   * @param {THREE.Group} parentGroup - 父级组对象\n   */\n  constructor(connectionMesh, parentGroup) {\n    this.originalMesh = connectionMesh;\n    this.parentGroup = parentGroup;\n    this.exploded = false;\n    this.sectors = [];\n    this.tweens = [];\n    this.originalVisible = connectionMesh.visible;\n    \n    // 分解参数\n    this.config = {\n      // 分解距离系数 - 与Cylinder2ExplodeEffect保持一致\n      explodeDistance: 1.5,\n      // 动画持续时间 - 与Cylinder2ExplodeEffect保持一致\n      animationDuration: 1200,\n      // 扇形段数量\n      sectorCount: 4\n    };\n    \n    this.createSectors();\n  }\n  \n  /**\n   * 创建扇形段\n   */\n  createSectors() {\n    const config = CONFIG.shell.rotationCurveConnection;\n    if (!config) return;\n    \n    // 获取连接的基本参数\n    const segments = config.segments || 50;\n    const radialSegments = config.radialSegments || 32;\n    const connectionLength = config.connectionLength || 4.8;\n    \n    // 使用统一组件材质（示波器内部金属材质）\n    const ringMaterial = unifiedComponentMaterial.getMaterial('exploded');\n    \n    // 创建4个扇形段（每个90度）\n    for (let i = 0; i < this.config.sectorCount; i++) {\n      const sector = this.createSectorSegment(connectionLength, radialSegments, ringMaterial, i);\n      \n      // 设置初始位置\n      sector.position.copy(this.originalMesh.position);\n      \n      // 保存扇形的基础旋转\n      const baseRotation = sector.rotation.clone();\n      \n      // 应用原始连接的旋转（复合旋转）\n      sector.rotation.copy(this.originalMesh.rotation);\n      // 在原始旋转基础上添加扇形的基础旋转\n      sector.rotation.z += baseRotation.z;\n      \n      // 初始时隐藏扇形段\n      sector.visible = false;\n      \n      // 计算扇形段的中心角度（用于分解方向）\n      const centerAngle = i * Math.PI / 2 + Math.PI / 4; // 每个扇形的中心角度（45°, 135°, 225°, 315°）\n      \n      this.sectors.push({\n        mesh: sector,\n        originalPosition: sector.position.clone(),\n        originalRotation: sector.rotation.clone(),\n        segmentIndex: i,\n        centerAngle: centerAngle\n      });\n      \n      this.parentGroup.add(sector);\n    }\n  }\n  \n  /**\n   * 创建单个扇形段\n   */\n  createSectorSegment(length, radialSegments, material, segmentIndex) {\n    // 获取原始连接的参数\n    const connectionParams = this.getConnectionParameters();\n    \n    // 创建旋转曲线几何体生成器\n    const curveGeometry = new RotationCurveGeometry(\n      connectionParams.startRadius,\n      connectionParams.endRadius,\n      connectionParams.connectionLength,\n      connectionParams.curveType,\n      connectionParams.segments,\n      connectionParams.radialSegments\n    );\n    \n    // 创建扇形片段几何体\n    const sectorGeometry = curveGeometry.createSectorGeometry(segmentIndex, this.config.sectorCount);\n    \n    // 创建网格\n    const mesh = new three_module/* Mesh */.eaF(sectorGeometry, material);\n    \n    // 调整方向以匹配旋转曲线连接的方向（沿X轴）\n    mesh.rotation.z = Math.PI / 2;\n    \n    return mesh;\n  }\n  \n  /**\n   * 获取原始连接的参数\n   */\n  getConnectionParameters() {\n    // 从配置中获取连接参数\n    const config = CONFIG.shell.rotationCurveConnection;\n    const cylinder1Config = CONFIG.shell.cylinder1;\n    const cylinder2Config = CONFIG.shell.cylinder2;\n    \n    return {\n      startRadius: cylinder1Config.radius,\n      endRadius: cylinder2Config.radius,\n      connectionLength: config.connectionLength,\n      curveType: config.curveType || 'G2',\n      segments: config.segments || 50,\n      radialSegments: config.radialSegments || 32\n    };\n  }\n\n  /**\n   * 估算连接的半径\n   */\n  estimateConnectionRadius() {\n    // 基于配置估算半径，或者使用默认值\n    const cylinder1Radius = CONFIG.shell.cylinder1?.radius || 1.5;\n    const cylinder2Radius = CONFIG.shell.cylinder2?.radius || 1.0;\n    \n    // 使用两个圆柱体半径的平均值作为连接半径\n    return (cylinder1Radius + cylinder2Radius) / 2;\n  }\n  \n  /**\n   * 计算爆炸后的位置\n   */\n  calculateExplodedPosition(sector) {\n    const { centerAngle, originalPosition } = sector;\n    \n    // 计算扇形段在径向上的分解方向\n    // 由于连接是沿X轴的，我们需要在YZ平面上分解\n    const explodeDistance = this.config.explodeDistance;\n    \n    // 计算分解的方向向量（在YZ平面上）\n    const directionY = Math.sin(centerAngle) * explodeDistance;\n    const directionZ = Math.cos(centerAngle) * explodeDistance;\n    \n    // 计算新位置\n    const explodedPosition = originalPosition.clone();\n    explodedPosition.y += directionY;\n    explodedPosition.z += directionZ;\n    \n    return explodedPosition;\n  }\n  \n  /**\n   * 计算爆炸后的旋转\n   */\n  calculateExplodedRotation(sector) {\n    const { originalRotation, segmentIndex } = sector;\n    \n    // 添加90度旋转效果到分离的扇形段\n    const explodedRotation = originalRotation.clone();\n    \n    // 为每个扇形段添加90度旋转（π/2弧度）\n    // 围绕X轴旋转，使扇形段产生翻滚效果\n    explodedRotation.x += Math.PI / 2;\n    \n    // 可选：为不同扇形段添加轻微的旋转变化，增加动感\n    const rotationVariation = (segmentIndex * Math.PI / 8) * 0.3; // 每个段轻微不同的旋转偏移\n    explodedRotation.y += rotationVariation;\n    \n    return explodedRotation;\n  }\n  \n  /**\n   * 切换爆炸效果\n   */\n  toggle(explode = !this.exploded) {\n    this.exploded = explode;\n    \n    // 停止所有正在进行的动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    if (this.exploded) {\n      // 爆炸：隐藏原始网格，显示扇形段\n      this.originalMesh.visible = false;\n      this.explodeSectors();\n    } else {\n      // 合并：重新组装扇形段，显示原始网格\n      this.assembleSectors();\n    }\n    \n    return this.exploded;\n  }\n  \n  /**\n   * 分解扇形段\n   */\n  explodeSectors() {\n    this.sectors.forEach((sector, index) => {\n      // 显示扇形段\n      sector.mesh.visible = true;\n      \n      // 计算目标位置和旋转\n      const targetPosition = this.calculateExplodedPosition(sector);\n      const targetRotation = this.calculateExplodedRotation(sector);\n      \n      // 创建位置动画（带延迟以产生连锁效果）\n      const delay = index * 100; // 100ms的延迟间隔，让分解效果更明显，与Cylinder2ExplodeEffect保持一致\n      \n      const positionTween = new tween_esm/* Tween */.K(sector.mesh.position, tweenGroup)\n        .to({\n          x: targetPosition.x,\n          y: targetPosition.y,\n          z: targetPosition.z\n        }, this.config.animationDuration)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.Out)\n        .start();\n      \n      // 创建旋转动画\n      const rotationTween = new tween_esm/* Tween */.K(sector.mesh.rotation, tweenGroup)\n        .to({\n          x: targetRotation.x,\n          y: targetRotation.y,\n          z: targetRotation.z\n        }, this.config.animationDuration)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.Out)\n        .start();\n      \n      this.tweens.push(positionTween, rotationTween);\n    });\n  }\n  \n  /**\n   * 组装扇形段\n   */\n  assembleSectors() {\n    this.sectors.forEach((sector, index) => {\n      // 创建回归动画（反向延迟以产生重新组装效果）\n      const delay = (this.sectors.length - index - 1) * 80; // 反向延迟，与Cylinder2ExplodeEffect保持一致\n      \n      const positionTween = new tween_esm/* Tween */.K(sector.mesh.position, tweenGroup)\n        .to({\n          x: sector.originalPosition.x,\n          y: sector.originalPosition.y,\n          z: sector.originalPosition.z\n        }, this.config.animationDuration * 0.8)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.In)\n        .onComplete(() => {\n          // 最后一个扇形段组装完成后，隐藏所有扇形段并显示原始连接\n          if (index === this.sectors.length - 1) {\n            this.sectors.forEach(s => s.mesh.visible = false);\n            this.originalMesh.visible = this.originalVisible;\n          }\n        })\n        .start();\n      \n      const rotationTween = new tween_esm/* Tween */.K(sector.mesh.rotation, tweenGroup)\n        .to({\n          x: sector.originalRotation.x,\n          y: sector.originalRotation.y,\n          z: sector.originalRotation.z\n        }, this.config.animationDuration * 0.8)\n        .delay(delay)\n        .easing(tween_esm/* Easing */.GS.Back.In)\n        .start();\n      \n      this.tweens.push(positionTween, rotationTween);\n    });\n  }\n  \n  /**\n   * 清理资源\n   */\n  dispose() {\n    // 停止所有动画\n    this.tweens.forEach(tween => tween.stop());\n    this.tweens = [];\n    \n    // 移除扇形段\n    this.sectors.forEach(sector => {\n      this.parentGroup.remove(sector.mesh);\n      sector.mesh.geometry.dispose();\n      sector.mesh.material.dispose();\n    });\n    \n    this.sectors = [];\n  }\n  \n  /**\n   * 获取爆炸状态\n   */\n  isExploded() {\n    return this.exploded;\n  }\n}\n\n;// ./src/utils/SuperellipsePositioner.js\n\r\n\r\n/**\r\n * 超椭圆子网格批量定位器\r\n * 专门用于将SuperellipseExplodeEffect分解后的子网格按给定坐标批量定位\r\n */\r\nclass SuperellipsePositioner {\r\n  /**\r\n   * 构造函数\r\n   * @param {SuperellipseExplodeEffect} explodeEffect - 超椭圆爆炸效果实例\r\n   */\r\n  constructor(explodeEffect) {\r\n    this.explodeEffect = explodeEffect;\r\n    this.originalPositions = new Map(); // 存储原始位置\r\n    this.isPositioned = false;\r\n    \r\n    this.saveOriginalPositions();\r\n  }\r\n  \r\n  /**\r\n   * 保存原始位置\r\n   */\r\n  saveOriginalPositions() {\r\n    this.explodeEffect.blocks.forEach((block, index) => {\r\n      this.originalPositions.set(index, {\r\n        x: block.mesh.position.x,\r\n        y: block.mesh.position.y,\r\n        z: block.mesh.position.z\r\n      });\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 批量设置子网格位置\r\n   * @param {Array} positions - 位置数组，每个元素包含 {x, y, z} 坐标\r\n   *                           数组长度应与子网格数量匹配\r\n   */\r\n  setPositions(positions) {\r\n    if (!Array.isArray(positions)) {\r\n      console.warn('SuperellipsePositioner: positions 必须是数组');\r\n      return;\r\n    }\r\n    \r\n    if (positions.length !== this.explodeEffect.blocks.length) {\r\n      console.warn(`SuperellipsePositioner: 位置数组长度 (${positions.length}) 与子网格数量 (${this.explodeEffect.blocks.length}) 不匹配`);\r\n      return;\r\n    }\r\n    \r\n    // 确保子网格处于分解状态并可见\r\n    if (!this.explodeEffect.exploded) {\r\n      this.explodeEffect.toggle(true);\r\n    }\r\n    \r\n    // 停止任何正在进行的动画\r\n    this.explodeEffect.tweens.forEach(tween => tween.stop());\r\n    this.explodeEffect.tweens = [];\r\n    \r\n    // 批量设置位置\r\n    positions.forEach((position, index) => {\r\n      if (index < this.explodeEffect.blocks.length) {\r\n        const block = this.explodeEffect.blocks[index];\r\n        \r\n        // 验证位置对象\r\n        if (typeof position === 'object' && position !== null) {\r\n          if (typeof position.x === 'number') block.mesh.position.x = position.x;\r\n          if (typeof position.y === 'number') block.mesh.position.y = position.y;\r\n          if (typeof position.z === 'number') block.mesh.position.z = position.z;\r\n        }\r\n      }\r\n    });\r\n    \r\n    this.isPositioned = true;\r\n  }\r\n  \r\n  /**\r\n   * 设置单个子网格位置\r\n   * @param {number} index - 子网格索引 (0-3)\r\n   * @param {Object} position - 位置对象 {x, y, z}\r\n   */\r\n  setPosition(index, position) {\r\n    if (index < 0 || index >= this.explodeEffect.blocks.length) {\r\n      console.warn(`SuperellipsePositioner: 索引 ${index} 超出范围 (0-${this.explodeEffect.blocks.length - 1})`);\r\n      return;\r\n    }\r\n    \r\n    if (typeof position !== 'object' || position === null) {\r\n      console.warn('SuperellipsePositioner: position 必须是对象');\r\n      return;\r\n    }\r\n    \r\n    // 确保子网格处于分解状态并可见\r\n    if (!this.explodeEffect.exploded) {\r\n      this.explodeEffect.toggle(true);\r\n    }\r\n    \r\n    const block = this.explodeEffect.blocks[index];\r\n    if (typeof position.x === 'number') block.mesh.position.x = position.x;\r\n    if (typeof position.y === 'number') block.mesh.position.y = position.y;\r\n    if (typeof position.z === 'number') block.mesh.position.z = position.z;\r\n    \r\n    this.isPositioned = true;\r\n  }\r\n  \r\n  /**\r\n   * 获取所有子网格的当前位置\r\n   * @returns {Array} 位置数组\r\n   */\r\n  getPositions() {\r\n    return this.explodeEffect.blocks.map(block => ({\r\n      x: block.mesh.position.x,\r\n      y: block.mesh.position.y,\r\n      z: block.mesh.position.z\r\n    }));\r\n  }\r\n  \r\n  /**\r\n   * 获取指定子网格的位置\r\n   * @param {number} index - 子网格索引\r\n   * @returns {Object|null} 位置对象或null\r\n   */\r\n  getPosition(index) {\r\n    if (index < 0 || index >= this.explodeEffect.blocks.length) {\r\n      console.warn(`SuperellipsePositioner: 索引 ${index} 超出范围`);\r\n      return null;\r\n    }\r\n    \r\n    const block = this.explodeEffect.blocks[index];\r\n    return {\r\n      x: block.mesh.position.x,\r\n      y: block.mesh.position.y,\r\n      z: block.mesh.position.z\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 恢复到原始位置\r\n   */\r\n  restoreOriginalPositions() {\r\n    this.explodeEffect.blocks.forEach((block, index) => {\r\n      const originalPos = this.originalPositions.get(index);\r\n      if (originalPos) {\r\n        block.mesh.position.set(originalPos.x, originalPos.y, originalPos.z);\r\n      }\r\n    });\r\n    \r\n    this.isPositioned = false;\r\n  }\r\n  \r\n  /**\r\n   * 应用位置偏移\r\n   * @param {Object} offset - 偏移量 {x, y, z}\r\n   */\r\n  applyOffset(offset) {\r\n    if (typeof offset !== 'object' || offset === null) {\r\n      console.warn('SuperellipsePositioner: offset 必须是对象');\r\n      return;\r\n    }\r\n    \r\n    const offsetX = typeof offset.x === 'number' ? offset.x : 0;\r\n    const offsetY = typeof offset.y === 'number' ? offset.y : 0;\r\n    const offsetZ = typeof offset.z === 'number' ? offset.z : 0;\r\n    \r\n    this.explodeEffect.blocks.forEach(block => {\r\n      block.mesh.position.x += offsetX;\r\n      block.mesh.position.y += offsetY;\r\n      block.mesh.position.z += offsetZ;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 重置所有子网格到爆炸效果的默认分解位置\r\n   */\r\n  resetToExplodedPositions() {\r\n    this.explodeEffect.blocks.forEach(block => {\r\n      const explodedPos = this.explodeEffect.calculateExplodedPosition(block);\r\n      block.mesh.position.copy(explodedPos);\r\n    });\r\n    \r\n    this.isPositioned = false;\r\n  }\r\n  \r\n  /**\r\n   * 获取子网格数量\r\n   * @returns {number} 子网格数量\r\n   */\r\n  getBlockCount() {\r\n    return this.explodeEffect.blocks.length;\r\n  }\r\n  \r\n  /**\r\n   * 检查是否已经应用了自定义定位\r\n   * @returns {boolean} 是否已定位\r\n   */\r\n  isCustomPositioned() {\r\n    return this.isPositioned;\r\n  }\r\n}\r\n\n;// ./src/components/SuperellipseExplodeEffect.js\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 超椭圆爆炸分解效果类\r\n * 将超椭圆模型分解成4个象限分块，模拟积木组装/分解效果\r\n */\r\nclass SuperellipseExplodeEffect {\r\n  /**\r\n   * 构造函数\r\n   * @param {THREE.Mesh} superellipseMesh - 超椭圆网格对象\r\n   * @param {THREE.Group} parentGroup - 父级组对象\r\n   */\r\n  constructor(superellipseMesh, parentGroup) {\r\n    this.originalMesh = superellipseMesh;\r\n    this.parentGroup = parentGroup;\r\n    this.exploded = false;\r\n    this.blocks = [];\r\n    this.tweens = [];\r\n    this.originalVisible = superellipseMesh.visible;\r\n    \r\n    // 分解参数\r\n    this.config = {\r\n      // 分解距离系数\r\n      explodeDistance: 2.0,\r\n      // 动画持续时间\r\n      animationDuration: 1500\r\n    };\r\n    \r\n    this.createBlocks();\r\n    \r\n    // 初始化位置器\r\n    this.positioner = new SuperellipsePositioner(this);\r\n  }\r\n  \r\n  /**\r\n   * 创建分块\r\n   */\r\n  createBlocks() {\r\n    // 获取原始几何体\r\n    const originalGeometry = this.originalMesh.geometry;\r\n    \r\n    // 创建统一的材质\r\n    const blockMaterial = new three_module/* MeshPhongMaterial */.tXL({\r\n      color: this.originalMesh.material.color.getHex(),\r\n      transparent: true,\r\n      opacity: this.originalMesh.material.opacity,\r\n      side: three_module/* DoubleSide */.$EB,\r\n      depthWrite: false\r\n    });\r\n    \r\n    // 创建4个象限分块\r\n    for (let i = 0; i < 4; i++) {\r\n      const block = this.createQuadrantBlock(originalGeometry, blockMaterial, i);\r\n      \r\n      // 设置初始位置和旋转\r\n      block.position.copy(this.originalMesh.position);\r\n      block.rotation.copy(this.originalMesh.rotation);\r\n      \r\n      // 初始时隐藏积木块\r\n      block.visible = false;\r\n      \r\n      // 计算象限的中心角度（用于分解方向）\r\n      const centerAngle = i * Math.PI / 2 + Math.PI / 4; // 每个象限的中心角度\r\n      \r\n      this.blocks.push({\r\n        mesh: block,\r\n        originalPosition: block.position.clone(),\r\n        originalRotation: block.rotation.clone(),\r\n        quadrantIndex: i,\r\n        centerAngle: centerAngle\r\n      });\r\n      \r\n      this.parentGroup.add(block);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 创建象限分块\r\n   * @param {THREE.BufferGeometry} originalGeometry - 原始几何体\r\n   * @param {THREE.Material} material - 材质\r\n   * @param {number} quadrantIndex - 象限索引 (0-3)\r\n   */\r\n  createQuadrantBlock(originalGeometry, material, quadrantIndex) {\r\n    // 获取原始几何体的顶点数据\r\n    const positions = originalGeometry.attributes.position.array;\r\n    const normals = originalGeometry.attributes.normal ? originalGeometry.attributes.normal.array : null;\r\n    const uvs = originalGeometry.attributes.uv ? originalGeometry.attributes.uv.array : null;\r\n    const indices = originalGeometry.index ? originalGeometry.index.array : null;\r\n    \r\n    // 创建新的几何体数据数组\r\n    const newVertices = [];\r\n    const newNormals = [];\r\n    const newUvs = [];\r\n    const newIndices = [];\r\n    const vertexMap = new Map(); // 用于映射旧顶点索引到新顶点索引\r\n    \r\n    // 定义象限边界（基于XY平面）\r\n    const quadrantBounds = this.getQuadrantBounds(quadrantIndex);\r\n    \r\n    // 处理顶点数据\r\n    if (indices) {\r\n      // 有索引的几何体\r\n      for (let i = 0; i < indices.length; i += 3) {\r\n        const triangleVertices = [];\r\n        const triangleInQuadrant = [];\r\n        \r\n        // 检查三角形的每个顶点\r\n        for (let j = 0; j < 3; j++) {\r\n          const vertexIndex = indices[i + j];\r\n          const x = positions[vertexIndex * 3];\r\n          const y = positions[vertexIndex * 3 + 1];\r\n          \r\n          triangleVertices.push({ index: vertexIndex, x, y });\r\n          triangleInQuadrant.push(this.isPointInQuadrant(x, y, quadrantBounds));\r\n        }\r\n        \r\n        // 如果三角形的任何顶点在当前象限，则包含整个三角形\r\n        if (triangleInQuadrant.some(inQuadrant => inQuadrant)) {\r\n          for (let j = 0; j < 3; j++) {\r\n            const vertex = triangleVertices[j];\r\n            const oldIndex = vertex.index;\r\n            \r\n            if (!vertexMap.has(oldIndex)) {\r\n              // 添加新顶点\r\n              const newIndex = newVertices.length / 3;\r\n              vertexMap.set(oldIndex, newIndex);\r\n              \r\n              // 复制顶点位置\r\n              newVertices.push(\r\n                positions[oldIndex * 3],\r\n                positions[oldIndex * 3 + 1],\r\n                positions[oldIndex * 3 + 2]\r\n              );\r\n              \r\n              // 复制法向量\r\n              if (normals) {\r\n                newNormals.push(\r\n                  normals[oldIndex * 3],\r\n                  normals[oldIndex * 3 + 1],\r\n                  normals[oldIndex * 3 + 2]\r\n                );\r\n              }\r\n              \r\n              // 复制UV坐标\r\n              if (uvs) {\r\n                newUvs.push(\r\n                  uvs[oldIndex * 2],\r\n                  uvs[oldIndex * 2 + 1]\r\n                );\r\n              }\r\n            }\r\n            \r\n            newIndices.push(vertexMap.get(oldIndex));\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // 无索引的几何体\r\n      for (let i = 0; i < positions.length; i += 9) { // 每个三角形3个顶点，每个顶点3个坐标\r\n        const triangleInQuadrant = [];\r\n        \r\n        // 检查三角形的每个顶点\r\n        for (let j = 0; j < 3; j++) {\r\n          const x = positions[i + j * 3];\r\n          const y = positions[i + j * 3 + 1];\r\n          triangleInQuadrant.push(this.isPointInQuadrant(x, y, quadrantBounds));\r\n        }\r\n        \r\n        // 如果三角形的任何顶点在当前象限，则包含整个三角形\r\n        if (triangleInQuadrant.some(inQuadrant => inQuadrant)) {\r\n          for (let j = 0; j < 3; j++) {\r\n            const baseIdx = i + j * 3;\r\n            \r\n            // 复制顶点位置\r\n            newVertices.push(\r\n              positions[baseIdx],\r\n              positions[baseIdx + 1],\r\n              positions[baseIdx + 2]\r\n            );\r\n            \r\n            // 复制法向量\r\n            if (normals) {\r\n              newNormals.push(\r\n                normals[baseIdx],\r\n                normals[baseIdx + 1],\r\n                normals[baseIdx + 2]\r\n              );\r\n            }\r\n            \r\n            // 复制UV坐标\r\n            if (uvs) {\r\n              const uvIdx = (i / 3) * 2 + j * 2; // UV索引计算\r\n              newUvs.push(\r\n                uvs[uvIdx],\r\n                uvs[uvIdx + 1]\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 创建新的几何体\r\n    const blockGeometry = new three_module/* BufferGeometry */.LoY();\r\n    \r\n    if (newVertices.length > 0) {\r\n      blockGeometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(newVertices, 3));\r\n      \r\n      if (newNormals.length > 0) {\r\n        blockGeometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(newNormals, 3));\r\n      }\r\n      \r\n      if (newUvs.length > 0) {\r\n        blockGeometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(newUvs, 2));\r\n      }\r\n      \r\n      if (newIndices.length > 0) {\r\n        blockGeometry.setIndex(newIndices);\r\n      }\r\n      \r\n      // 计算边界盒和法向量\r\n      blockGeometry.computeBoundingBox();\r\n      if (newNormals.length === 0) {\r\n        blockGeometry.computeVertexNormals();\r\n      }\r\n    } else {\r\n      // 如果没有顶点，创建一个简单的占位几何体\r\n      console.warn(`Quadrant ${quadrantIndex} has no vertices, creating placeholder geometry`);\r\n      const planeGeometry = new three_module/* PlaneGeometry */.bdM(0.1, 0.1);\r\n      blockGeometry.copy(planeGeometry);\r\n    }\r\n    \r\n    // 创建网格\r\n    const mesh = new three_module/* Mesh */.eaF(blockGeometry, material);\r\n    \r\n    return mesh;\r\n  }\r\n  \r\n  /**\r\n   * 获取象限边界\r\n   * @param {number} quadrantIndex - 象限索引 (0-3)\r\n   */\r\n  getQuadrantBounds(quadrantIndex) {\r\n    switch (quadrantIndex) {\r\n      case 0: // 第一象限 (+x, +y)\r\n        return { minX: 0, maxX: Infinity, minY: 0, maxY: Infinity };\r\n      case 1: // 第二象限 (-x, +y)\r\n        return { minX: -Infinity, maxX: 0, minY: 0, maxY: Infinity };\r\n      case 2: // 第三象限 (-x, -y)\r\n        return { minX: -Infinity, maxX: 0, minY: -Infinity, maxY: 0 };\r\n      case 3: // 第四象限 (+x, -y)\r\n        return { minX: 0, maxX: Infinity, minY: -Infinity, maxY: 0 };\r\n      default:\r\n        return { minX: -Infinity, maxX: Infinity, minY: -Infinity, maxY: Infinity };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查点是否在指定象限内\r\n   * @param {number} x - X坐标\r\n   * @param {number} y - Y坐标\r\n   * @param {Object} bounds - 象限边界\r\n   */\r\n  isPointInQuadrant(x, y, bounds) {\r\n    return x >= bounds.minX && x <= bounds.maxX && \r\n           y >= bounds.minY && y <= bounds.maxY;\r\n  }\r\n  \r\n  /**\r\n   * 使用SuperellipsePositioner批量设置位置\r\n   */\r\n  calculateExplodedPosition(block) {\r\n    // 使用SuperellipsePositioner进行位置管理\r\n    \r\n    // 批量设置位置（4个象限子网格）\r\n    const newPositions = [\r\n      { x: 4, y: 1.5, z: 1 },    // 第一象限\r\n      { x: 4, y: -2.5, z: 1 },   // 第二象限\r\n      { x: 4, y: -2.5, z: -1 },  // 第三象限\r\n      { x: 4, y: 1.5, z: -1 }    // 第四象限\r\n    ];\r\n    this.positioner.setPositions(newPositions);\r\n\r\n    // 单独设置某个子网格位置\r\n    // this.positioner.setPosition(0, { x: 5, y: 5, z: 1 });\r\n\r\n    // 获取当前所有位置\r\n    const currentPositions = this.positioner.getPositions();\r\n    \r\n    // 返回指定块的位置\r\n    return this.positioner.getPosition(block.quadrantIndex) || block.originalPosition;\r\n  }\r\n  \r\n  /**\r\n   * 切换爆炸效果\r\n   */\r\n  toggle(explode = !this.exploded) {\r\n    this.exploded = explode;\r\n    \r\n    // 停止所有正在进行的动画\r\n    this.tweens.forEach(tween => tween.stop());\r\n    this.tweens = [];\r\n    \r\n    if (this.exploded) {\r\n      // 爆炸：隐藏原始网格，显示积木块\r\n      this.originalMesh.visible = false;\r\n      this.explodeBlocks();\r\n    } else {\r\n      // 合并：重新组装积木块，显示原始网格\r\n      this.assembleBlocks();\r\n    }\r\n    \r\n    return this.exploded;\r\n  }\r\n  \r\n  /**\r\n   * 分解积木块\r\n   */\r\n  explodeBlocks() {\r\n    this.animateBlocks(true); // true表示分解\r\n  }\r\n  \r\n  /**\r\n   * 组装积木块\r\n   */\r\n  assembleBlocks() {\r\n    this.animateBlocks(false); // false表示组装\r\n  }\r\n  \r\n  /**\r\n   * 统一的动画处理函数\r\n   * @param {boolean} explode - true为分解，false为组装\r\n   */\r\n  animateBlocks(explode) {\r\n    let completedAnimations = 0;\r\n    const totalAnimations = this.blocks.length;\r\n    \r\n    this.blocks.forEach((block, index) => {\r\n      // 显示或隐藏积木块的逻辑\r\n      if (explode) {\r\n        block.mesh.visible = true;\r\n      }\r\n      \r\n      // 计算目标位置和旋转\r\n      const targetPosition = explode \r\n        ? this.calculateExplodedPosition(block) \r\n        : block.originalPosition;\r\n      const targetRotation = block.originalRotation;\r\n      \r\n      // 统一延迟时间：都使用120ms间隔\r\n      const delay = index * 120;\r\n      \r\n      // 统一动画持续时间\r\n      const duration = this.config.animationDuration;\r\n      \r\n      // 统一缓动函数：都使用Back.Out\r\n      const easing = tween_esm/* Easing */.GS.Back.Out;\r\n      \r\n      // 创建位置动画\r\n      const positionTween = new tween_esm/* Tween */.K(block.mesh.position, tweenGroup)\r\n        .to({\r\n          x: targetPosition.x,\r\n          y: targetPosition.y,\r\n          z: targetPosition.z\r\n        }, duration)\r\n        .delay(delay)\r\n        .easing(easing)\r\n        .onComplete(() => {\r\n          if (!explode) {\r\n            completedAnimations++;\r\n            // 组装完成后的处理\r\n            if (completedAnimations === totalAnimations) {\r\n              this.blocks.forEach(b => b.mesh.visible = false);\r\n              this.originalMesh.visible = this.originalVisible;\r\n              console.log('超椭圆组装完成，显示原始网格');\r\n            }\r\n          }\r\n        })\r\n        .start();\r\n      \r\n      // 创建旋转动画\r\n      const rotationTween = new tween_esm/* Tween */.K(block.mesh.rotation, tweenGroup)\r\n        .to({\r\n          x: targetRotation.x,\r\n          y: targetRotation.y,\r\n          z: targetRotation.z\r\n        }, duration)\r\n        .delay(delay)\r\n        .easing(easing)\r\n        .start();\r\n      \r\n      this.tweens.push(positionTween, rotationTween);\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 清理资源\r\n   */\r\n  dispose() {\r\n    // 停止所有动画\r\n    this.tweens.forEach(tween => tween.stop());\r\n    this.tweens = [];\r\n    \r\n    // 移除积木块\r\n    this.blocks.forEach(block => {\r\n      this.parentGroup.remove(block.mesh);\r\n      block.mesh.geometry.dispose();\r\n      // 材质可能是共享的，不直接dispose\r\n      if (block.mesh.material !== this.originalMesh.material) {\r\n        block.mesh.material.dispose();\r\n      }\r\n    });\r\n    \r\n    this.blocks = [];\r\n  }\r\n  \r\n  /**\r\n   * 获取爆炸状态\r\n   */\r\n  isExploded() {\r\n    return this.exploded;\r\n  }\r\n}\r\n\n;// ./src/components/CRTShell.js\n\n\n\n\n\n\n\n\n/**\n * CRT正方形透明外壳组件\n * 用于包裹整个CRT模型的透明保护壳\n */\nclass CRTShell {\n  constructor() {\n    this.shellGroup = new three_module/* Group */.YJl();\n    this.shellGroup.name = 'CRTShell';\n    \n    // 创建两个圆柱体的材质\n    this.cylinder1Material = null;\n    this.cylinder2Material = null;\n    \n    // 旋转曲线连接\n    this.cylinderConnection = null;\n    \n    // 超椭圆形状渐变\n    this.superellipseTransition = null;\n    \n    // cylinder2爆炸效果\n    this.cylinder2ExplodeEffect = null;\n    \n    // 旋转曲线连接爆炸效果\n    this.rotationCurveExplodeEffect = null;\n    \n    // 超椭圆形状渐变爆炸效果\n    this.superellipseExplodeEffect = null;\n    \n    this.createShell();\n  }\n\n  /**\n   * 创建正方形透明外壳（删除靠近荧光屏的右侧面）\n   */\n  createShell() {\n    // 立方体外壳材质已删除，不再需要\n    // this.shellMaterial = new THREE.MeshPhongMaterial({\n    //   transparent: true,\n    //   opacity: CONFIG.shell.opacity,\n    //   side: THREE.DoubleSide,\n    //   depthWrite: false\n    // });\n\n    // 立方体外壳已被删除 - 只保留圆柱体和过渡效果\n    // const shellGeometry = this.createOpenBoxGeometry(\n    //   CONFIG.shell.size.width,\n    //   CONFIG.shell.size.height,\n    //   CONFIG.shell.size.depth\n    // );\n    // const shell = new THREE.Mesh(shellGeometry, this.shellMaterial);\n    // \n    // // 设置位置居中\n    // shell.position.set(4.5, 0, 0); // 稍微向前偏移以居中包裹CRT\n    // \n    // this.shellGroup.add(shell);\n    \n    // 创建两个独立的圆柱体\n    this.createCylinder1();\n    this.createCylinder2();\n    \n    // 创建旋转曲线连接\n    this.createRotationCurveConnection();\n    \n    // 创建超椭圆形状渐变\n    this.createSuperellipseTransition();\n    \n    // 设置初始可见性\n    this.shellGroup.visible = CONFIG.shell.visible;\n  }\n\n  /**\n   * 创建开放式盒子几何体（去掉右侧面，即X正方向的面）\n   * @param {number} width - 宽度\n   * @param {number} height - 高度 \n   * @param {number} depth - 深度\n   * @returns {THREE.BufferGeometry} 几何体\n   */\n  createOpenBoxGeometry(width, height, depth) {\n    const geometry = new three_module/* BufferGeometry */.LoY();\n    \n    const w = width / 2;\n    const h = height / 2;\n    const d = depth / 2;\n    \n    // 定义顶点位置 - 立方体的8个顶点\n    const vertices = [\n      // 左侧面 (X = -w)\n      -w, -h, -d,  -w, -h,  d,  -w,  h,  d,\n      -w, -h, -d,  -w,  h,  d,  -w,  h, -d,\n      \n      // 右侧面被删除 - 不添加这个面\n      \n      // 顶面 (Y = h)\n      -w,  h, -d,  -w,  h,  d,   w,  h,  d,\n      -w,  h, -d,   w,  h,  d,   w,  h, -d,\n      \n      // 底面 (Y = -h)\n      -w, -h, -d,   w, -h, -d,   w, -h,  d,\n      -w, -h, -d,   w, -h,  d,  -w, -h,  d,\n      \n      // 前面 (Z = d)\n      -w, -h,  d,   w, -h,  d,   w,  h,  d,\n      -w, -h,  d,   w,  h,  d,  -w,  h,  d,\n      \n      // 后面 (Z = -d)\n      -w, -h, -d,  -w,  h, -d,   w,  h, -d,\n      -w, -h, -d,   w,  h, -d,   w, -h, -d\n    ];\n    \n    // 定义法向量\n    const normals = [\n      // 左侧面\n      -1, 0, 0,  -1, 0, 0,  -1, 0, 0,\n      -1, 0, 0,  -1, 0, 0,  -1, 0, 0,\n      \n      // 顶面\n      0, 1, 0,  0, 1, 0,  0, 1, 0,\n      0, 1, 0,  0, 1, 0,  0, 1, 0,\n      \n      // 底面\n      0, -1, 0,  0, -1, 0,  0, -1, 0,\n      0, -1, 0,  0, -1, 0,  0, -1, 0,\n      \n      // 前面\n      0, 0, 1,  0, 0, 1,  0, 0, 1,\n      0, 0, 1,  0, 0, 1,  0, 0, 1,\n      \n      // 后面\n      0, 0, -1,  0, 0, -1,  0, 0, -1,\n      0, 0, -1,  0, 0, -1,  0, 0, -1\n    ];\n    \n    // 定义UV坐标\n    const uvs = [\n      // 左侧面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1,\n      \n      // 顶面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1,\n      \n      // 底面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1,\n      \n      // 前面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1,\n      \n      // 后面\n      0, 0,  1, 0,  1, 1,\n      0, 0,  1, 1,  0, 1\n    ];\n    \n    geometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    geometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    geometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    \n    return geometry;\n  }\n\n  /**\n   * 创建开放式圆柱体几何体（沿X轴方向，去掉右端圆形面）\n   * @param {number} radius - 圆柱体半径\n   * @param {number} height - 圆柱体长度（沿X轴）\n   * @param {number} radialSegments - 径向分段数\n   * @returns {THREE.BufferGeometry} 几何体\n   */\n  createOpenCylinderGeometry(radius, height, radialSegments = 32) {\n    const geometry = new three_module/* BufferGeometry */.LoY();\n    \n    const halfHeight = height / 2;\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n    \n    // 生成圆柱体侧面顶点（沿X轴方向）\n    for (let i = 0; i <= radialSegments; i++) {\n      const angle = (i / radialSegments) * Math.PI * 2;\n      const y = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      \n      // 左端顶点\n      vertices.push(-halfHeight, y, z);\n      normals.push(0, y / radius, z / radius); // 径向法向量\n      uvs.push(i / radialSegments, 0);\n      \n      // 右端顶点\n      vertices.push(halfHeight, y, z);\n      normals.push(0, y / radius, z / radius); // 径向法向量\n      uvs.push(i / radialSegments, 1);\n    }\n    \n    // 生成圆柱体侧面索引\n    for (let i = 0; i < radialSegments; i++) {\n      const left1 = i * 2;\n      const right1 = i * 2 + 1;\n      const left2 = (i + 1) * 2;\n      const right2 = (i + 1) * 2 + 1;\n      \n      // 每个面片由两个三角形组成\n      indices.push(left1, right1, left2);\n      indices.push(right1, right2, left2);\n    }\n    \n    // 只添加左端圆形面（X轴负方向），跳过右端圆形面\n    const centerLeftIndex = vertices.length / 3;\n    vertices.push(-halfHeight, 0, 0); // 左端中心点\n    normals.push(-1, 0, 0);\n    uvs.push(0.5, 0.5);\n    \n    // 生成左端圆形面的顶点和索引\n    for (let i = 0; i < radialSegments; i++) {\n      const angle = (i / radialSegments) * Math.PI * 2;\n      const y = Math.cos(angle) * radius;\n      const z = Math.sin(angle) * radius;\n      \n      vertices.push(-halfHeight, y, z);\n      normals.push(-1, 0, 0);\n      uvs.push((y / radius + 1) * 0.5, (z / radius + 1) * 0.5);\n      \n      // 连接到中心点的三角形\n      const currentIndex = centerLeftIndex + 1 + i;\n      const nextIndex = centerLeftIndex + 1 + ((i + 1) % radialSegments);\n      indices.push(centerLeftIndex, currentIndex, nextIndex);\n    }\n    \n    // 注意：我们故意不添加右端圆形面，以实现开放式设计\n    \n    geometry.setAttribute('position', new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n    geometry.setAttribute('normal', new three_module/* Float32BufferAttribute */.qtW(normals, 3));\n    geometry.setAttribute('uv', new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n    geometry.setIndex(indices);\n    \n    return geometry;\n  }\n\n  /**\n   * 创建第一个圆柱体组件\n   */\n  createCylinder1() {\n    const config = CONFIG.shell.cylinder1;\n    \n    // 创建第一个圆柱体的独立材质\n    this.cylinder1Material = new three_module/* MeshPhongMaterial */.tXL({\n      color: parseInt(config.color),\n      transparent: true,\n      opacity: config.opacity,\n      side: three_module/* DoubleSide */.$EB,\n      depthWrite: false\n    });\n    \n    // 创建圆柱体几何体（使用独立的半径参数）\n    const cylinder1Geometry = new three_module/* CylinderGeometry */.Ho_(config.radius, config.radius, config.height, 32);\n    const cylinder1 = new three_module/* Mesh */.eaF(cylinder1Geometry, this.cylinder1Material);\n    \n    // 设置圆柱体位置和旋转\n    cylinder1.position.set(config.position.x, config.position.y, config.position.z);\n    cylinder1.rotation.set(config.rotation.x, config.rotation.y, config.rotation.z);\n    \n    // 设置可见性\n    cylinder1.visible = config.visible;\n    \n    // 添加到组中\n    this.shellGroup.add(cylinder1);\n    \n    // 保存圆柱体引用以便后续操作\n    this.cylinder1 = cylinder1;\n  }\n\n  /**\n   * 创建第二个圆柱体组件（去掉右侧圆形面）\n   */\n  createCylinder2() {\n    const config = CONFIG.shell.cylinder2;\n    \n    // 使用统一组件材质以确保颜色一致性\n    this.cylinder2Material = new three_module/* MeshStandardMaterial */._4j({\n      color: parseInt(config.color),\n      transparent: true,\n      opacity: config.opacity,\n      side: three_module/* DoubleSide */.$EB,\n      depthWrite: false,\n      metalness: 0.6,\n      roughness: 0.3\n    });\n    \n    // 创建开放式圆柱体几何体（去掉右侧圆形面）\n    const cylinder2Geometry = this.createOpenCylinderGeometry(config.radius, config.height, 32);\n    const cylinder2 = new three_module/* Mesh */.eaF(cylinder2Geometry, this.cylinder2Material);\n    \n    // 设置圆柱体位置和旋转\n    cylinder2.position.set(config.position.x, config.position.y, config.position.z);\n    cylinder2.rotation.set(config.rotation.x, config.rotation.y, config.rotation.z);\n    \n    // 设置可见性\n    cylinder2.visible = config.visible;\n    \n    // 添加到组中\n    this.shellGroup.add(cylinder2);\n    \n    // 保存圆柱体引用以便后续操作\n    this.cylinder2 = cylinder2;\n    \n    // 创建cylinder2的爆炸效果\n    this.createCylinder2ExplodeEffect();\n  }\n\n  /**\n   * 创建旋转曲线连接\n   */\n  createRotationCurveConnection() {\n    const config = CONFIG.shell.rotationCurveConnection;\n    \n    if (!config || !config.visible) {\n      return;\n    }\n    \n    // 创建圆柱体连接\n    this.cylinderConnection = new CylinderConnection(\n      CONFIG.shell.cylinder1,\n      CONFIG.shell.cylinder2,\n      config\n    );\n    \n    // 添加到组中\n    this.shellGroup.add(this.cylinderConnection.getConnection());\n    \n    // 创建旋转曲线连接爆炸效果\n    this.createConnectionExplodeEffect();\n  }\n\n  /**\n   * 创建超椭圆形状渐变\n   */\n  createSuperellipseTransition() {\n    const config = CONFIG.shell.superellipseTransition;\n    \n    if (!config || !config.visible) {\n      return;\n    }\n    \n    // 准备起始配置（第一个圆柱体）\n    const startConfig = {\n      position: CONFIG.shell.cylinder1.position,\n      radius: CONFIG.shell.cylinder1.radius\n    };\n    \n    // 准备结束配置（适配荧光屏尺寸）\n    const endConfig = {\n      position: { x: 4.5, y: 0, z: 0 }, // 立方体中心位置\n      size: {\n        width: CONFIG.components.screen.width,   // 荧光屏宽度：4\n        height: CONFIG.components.screen.height, // 荧光屏高度：3\n        depth: CONFIG.shell.size.depth           // 保持原深度：4\n      }\n    };\n    \n    // 创建形状渐变\n    this.superellipseTransition = new SuperellipseTransition(\n      startConfig,\n      endConfig,\n      config\n    );\n    \n    // 添加到组中\n    this.shellGroup.add(this.superellipseTransition.getTransition());\n    \n    // 创建超椭圆形状渐变爆炸效果\n    this.createSuperellipseExplodeEffect();\n  }\n\n  /**\n   * 创建旋转曲线连接爆炸效果\n   */\n  createConnectionExplodeEffect() {\n    if (!this.cylinderConnection) {\n      console.warn('CylinderConnection not found, cannot create explode effect');\n      return;\n    }\n    \n    // 获取连接网格（第一个连接网格）\n    const connectionMeshes = this.cylinderConnection.connectionMeshes;\n    if (!connectionMeshes || connectionMeshes.length === 0) {\n      console.warn('No connection meshes found');\n      return;\n    }\n    \n    // 创建爆炸效果实例\n    this.rotationCurveExplodeEffect = new RotationCurveExplodeEffect(\n      connectionMeshes[0], // 使用第一个连接网格\n      this.shellGroup\n    );\n  }\n\n  /**\n   * 创建cylinder2爆炸效果\n   */\n  createCylinder2ExplodeEffect() {\n    if (!this.cylinder2) {\n      console.warn('Cylinder2 not found, cannot create explode effect');\n      return;\n    }\n    \n    // 创建爆炸效果实例\n    this.cylinder2ExplodeEffect = new Cylinder2ExplodeEffect(\n      this.cylinder2,\n      this.shellGroup\n    );\n  }\n\n  /**\n   * 创建超椭圆形状渐变爆炸效果\n   */\n  createSuperellipseExplodeEffect() {\n    if (!this.superellipseTransition) {\n      console.warn('SuperellipseTransition not found, cannot create explode effect');\n      return;\n    }\n    \n    // 获取超椭圆的网格（第一个网格）\n    const transitionMeshes = this.superellipseTransition.meshes;\n    if (!transitionMeshes || transitionMeshes.length === 0) {\n      console.warn('No superellipse meshes found');\n      return;\n    }\n    \n    // 创建爆炸效果实例\n    this.superellipseExplodeEffect = new SuperellipseExplodeEffect(\n      transitionMeshes[0], // 使用第一个网格\n      this.shellGroup\n    );\n  }\n\n  /**\n   * 切换cylinder2爆炸效果\n   * @param {boolean} explode - 是否爆炸，默认为切换状态\n   * @returns {boolean} 当前爆炸状态\n   */\n  toggleCylinder2Explode(explode) {\n    if (!this.cylinder2ExplodeEffect) {\n      console.warn('Cylinder2 explode effect not initialized');\n      return false;\n    }\n    \n    return this.cylinder2ExplodeEffect.toggle(explode);\n  }\n\n  /**\n   * 获取cylinder2爆炸状态\n   * @returns {boolean} 是否处于爆炸状态\n   */\n  isCylinder2Exploded() {\n    return this.cylinder2ExplodeEffect ? this.cylinder2ExplodeEffect.isExploded() : false;\n  }\n\n  /**\n   * 切换旋转曲线连接爆炸效果\n   * @param {boolean} explode - 是否爆炸，默认为切换状态\n   * @returns {boolean} 当前爆炸状态\n   */\n  toggleConnectionExplode(explode) {\n    if (!this.rotationCurveExplodeEffect) {\n      console.warn('RotationCurve explode effect not initialized');\n      return false;\n    }\n    \n    return this.rotationCurveExplodeEffect.toggle(explode);\n  }\n\n  /**\n   * 获取旋转曲线连接爆炸状态\n   * @returns {boolean} 是否处于爆炸状态\n   */\n  isConnectionExploded() {\n    return this.rotationCurveExplodeEffect ? this.rotationCurveExplodeEffect.isExploded() : false;\n  }\n\n  /**\n   * 切换超椭圆形状渐变爆炸效果\n   * @param {boolean} explode - 是否爆炸，默认为切换状态\n   * @returns {boolean} 当前爆炸状态\n   */\n  toggleSuperellipseExplode(explode) {\n    if (!this.superellipseExplodeEffect) {\n      console.warn('Superellipse explode effect not initialized');\n      return false;\n    }\n    \n    return this.superellipseExplodeEffect.toggle(explode);\n  }\n\n  /**\n   * 获取超椭圆形状渐变爆炸状态\n   * @returns {boolean} 是否处于爆炸状态\n   */\n  isSuperellipseExploded() {\n    return this.superellipseExplodeEffect ? this.superellipseExplodeEffect.isExploded() : false;\n  }\n\n  /**\n   * 获取外壳组\n   */\n  getShell() {\n    return this.shellGroup;\n  }\n\n  /**\n   * 设置外壳可见性\n   */\n  setVisible(visible) {\n    this.shellGroup.visible = visible;\n  }\n\n  /**\n   * 设置外壳透明度\n   */\n  setOpacity(opacity) {\n    // 立方体外壳已删除，此方法不再有效\n    // this.shellMaterial.opacity = Math.max(0, Math.min(1, opacity));\n  }\n\n\n  /**\n   * 设置外壳位置\n   */\n  setPosition(x, y, z) {\n    this.shellGroup.position.set(x, y, z);\n  }\n\n  /**\n   * 设置第一个圆柱体位置\n   */\n  setCylinder1Position(x, y, z) {\n    if (this.cylinder1) {\n      this.cylinder1.position.set(x, y, z);\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体位置\n   */\n  setCylinder2Position(x, y, z) {\n    if (this.cylinder2) {\n      this.cylinder2.position.set(x, y, z);\n    }\n  }\n\n  /**\n   * 获取外壳当前位置\n   */\n  getPosition() {\n    return this.shellGroup.position.clone();\n  }\n\n  /**\n   * 更新动画 - 外壳设置为静态，无动画效果\n   */\n  update(deltaTime) {\n    // 外壳保持静态，不进行任何动画更新\n    // 如果需要动画效果，可以在这里添加\n  }\n\n  /**\n   * 更新配置 - 实现响应式配置更新\n   */\n  updateConfig() {\n    // 立方体外壳材质已删除，不再需要更新\n    // if (this.shellMaterial) {\n    //   this.shellMaterial.opacity = CONFIG.shell.opacity;\n    // }\n    \n    // 更新第一个圆柱体配置\n    if (this.cylinder1Material && CONFIG.shell.cylinder1) {\n      this.cylinder1Material.color.setHex(parseInt(CONFIG.shell.cylinder1.color));\n      this.cylinder1Material.opacity = CONFIG.shell.cylinder1.opacity;\n    }\n    if (this.cylinder1 && CONFIG.shell.cylinder1) {\n      this.cylinder1.visible = CONFIG.shell.cylinder1.visible;\n      this.cylinder1.position.set(\n        CONFIG.shell.cylinder1.position.x,\n        CONFIG.shell.cylinder1.position.y,\n        CONFIG.shell.cylinder1.position.z\n      );\n      this.cylinder1.rotation.set(\n        CONFIG.shell.cylinder1.rotation.x,\n        CONFIG.shell.cylinder1.rotation.y,\n        CONFIG.shell.cylinder1.rotation.z\n      );\n    }\n    \n    // 更新第二个圆柱体配置\n    if (this.cylinder2Material && CONFIG.shell.cylinder2) {\n      this.cylinder2Material.color.setHex(parseInt(CONFIG.shell.cylinder2.color));\n      this.cylinder2Material.opacity = CONFIG.shell.cylinder2.opacity;\n    }\n    if (this.cylinder2 && CONFIG.shell.cylinder2) {\n      this.cylinder2.visible = CONFIG.shell.cylinder2.visible;\n      this.cylinder2.position.set(\n        CONFIG.shell.cylinder2.position.x,\n        CONFIG.shell.cylinder2.position.y,\n        CONFIG.shell.cylinder2.position.z\n      );\n      this.cylinder2.rotation.set(\n        CONFIG.shell.cylinder2.rotation.x,\n        CONFIG.shell.cylinder2.rotation.y,\n        CONFIG.shell.cylinder2.rotation.z\n      );\n    }\n    \n    // 更新旋转曲线连接配置\n    if (this.cylinderConnection && CONFIG.shell.rotationCurveConnection) {\n      this.cylinderConnection.updateConfig(\n        CONFIG.shell.cylinder1,\n        CONFIG.shell.cylinder2,\n        CONFIG.shell.rotationCurveConnection\n      );\n    } else if (!this.cylinderConnection && CONFIG.shell.rotationCurveConnection?.visible) {\n      // 如果连接不存在但配置中要求显示，则创建连接\n      this.createRotationCurveConnection();\n    }\n    \n    // 更新超椭圆形状渐变配置\n    if (this.superellipseTransition && CONFIG.shell.superellipseTransition) {\n      const startConfig = {\n        position: CONFIG.shell.cylinder1.position,\n        radius: CONFIG.shell.cylinder1.radius\n      };\n      const endConfig = {\n        position: { x: 4.5, y: 0, z: 0 },\n        size: {\n          width: CONFIG.components.screen.width,   // 荧光屏宽度：4\n          height: CONFIG.components.screen.height, // 荧光屏高度：3\n          depth: CONFIG.shell.size.depth           // 保持原深度：4\n        }\n      };\n      this.superellipseTransition.updateConfig(\n        startConfig,\n        endConfig,\n        CONFIG.shell.superellipseTransition\n      );\n    } else if (!this.superellipseTransition && CONFIG.shell.superellipseTransition?.visible) {\n      // 如果形状渐变不存在但配置中要求显示，则创建渐变\n      this.createSuperellipseTransition();\n    }\n    \n    // 更新可见性\n    this.shellGroup.visible = CONFIG.shell.visible;\n  }\n\n  /**\n   * 设置第一个圆柱体旋转\n   */\n  setCylinder1Rotation(x, y, z) {\n    if (this.cylinder1) {\n      this.cylinder1.rotation.set(x, y, z);\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体旋转\n   */\n  setCylinder2Rotation(x, y, z) {\n    if (this.cylinder2) {\n      this.cylinder2.rotation.set(x, y, z);\n    }\n  }\n\n  /**\n   * 获取第一个圆柱体当前旋转\n   */\n  getCylinder1Rotation() {\n    return this.cylinder1 ? this.cylinder1.rotation.clone() : new three_module/* Euler */.O9p();\n  }\n\n  /**\n   * 获取第二个圆柱体当前旋转\n   */\n  getCylinder2Rotation() {\n    return this.cylinder2 ? this.cylinder2.rotation.clone() : new three_module/* Euler */.O9p();\n  }\n\n  /**\n   * 设置第一个圆柱体可见性\n   */\n  setCylinder1Visible(visible) {\n    if (this.cylinder1) {\n      this.cylinder1.visible = visible;\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体可见性\n   */\n  setCylinder2Visible(visible) {\n    if (this.cylinder2) {\n      this.cylinder2.visible = visible;\n    }\n  }\n\n  /**\n   * 设置第一个圆柱体颜色\n   */\n  setCylinder1Color(color) {\n    if (this.cylinder1Material) {\n      this.cylinder1Material.color.setHex(color);\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体颜色\n   */\n  setCylinder2Color(color) {\n    if (this.cylinder2Material) {\n      this.cylinder2Material.color.setHex(color);\n    }\n  }\n\n  /**\n   * 设置第一个圆柱体透明度\n   */\n  setCylinder1Opacity(opacity) {\n    if (this.cylinder1Material) {\n      this.cylinder1Material.opacity = Math.max(0, Math.min(1, opacity));\n    }\n  }\n\n  /**\n   * 设置第二个圆柱体透明度\n   */\n  setCylinder2Opacity(opacity) {\n    if (this.cylinder2Material) {\n      this.cylinder2Material.opacity = Math.max(0, Math.min(1, opacity));\n    }\n  }\n\n  /**\n   * 设置旋转曲线连接的位置偏移\n   * @param {number} x - X轴偏移\n   * @param {number} y - Y轴偏移\n   * @param {number} z - Z轴偏移\n   */\n  setConnectionPositionOffset(x, y, z) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setPositionOffset(x, y, z);\n    }\n  }\n\n  /**\n   * 设置旋转曲线连接的旋转偏移\n   * @param {number} x - X轴旋转偏移（弧度）\n   * @param {number} y - Y轴旋转偏移（弧度）\n   * @param {number} z - Z轴旋转偏移（弧度）\n   */\n  setConnectionRotationOffset(x, y, z) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setRotationOffset(x, y, z);\n    }\n  }\n\n  /**\n   * 直接设置旋转曲线连接的位置\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {number} z - Z坐标\n   */\n  setConnectionPosition(x, y, z) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setPosition(x, y, z);\n    }\n  }\n\n  /**\n   * 直接设置旋转曲线连接的旋转\n   * @param {number} x - X轴旋转（弧度）\n   * @param {number} y - Y轴旋转（弧度）\n   * @param {number} z - Z轴旋转（弧度）\n   */\n  setConnectionRotation(x, y, z) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setRotation(x, y, z);\n    }\n  }\n\n  /**\n   * 获取旋转曲线连接的当前位置\n   */\n  getConnectionPosition() {\n    return this.cylinderConnection ? this.cylinderConnection.getPosition() : new three_module/* Vector3 */.Pq0();\n  }\n\n  /**\n   * 获取旋转曲线连接的当前旋转\n   */\n  getConnectionRotation() {\n    return this.cylinderConnection ? this.cylinderConnection.getRotation() : new three_module/* Euler */.O9p();\n  }\n\n  /**\n   * 获取旋转曲线连接的位置偏移\n   */\n  getConnectionPositionOffset() {\n    return this.cylinderConnection ? this.cylinderConnection.getPositionOffset() : { x: 0, y: 0, z: 0 };\n  }\n\n  /**\n   * 获取旋转曲线连接的旋转偏移\n   */\n  getConnectionRotationOffset() {\n    return this.cylinderConnection ? this.cylinderConnection.getRotationOffset() : { x: 0, y: 0, z: 0 };\n  }\n\n  /**\n   * 设置旋转曲线连接可见性\n   */\n  setConnectionVisible(visible) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setVisible(visible);\n    }\n  }\n\n  /**\n   * 设置旋转曲线连接颜色\n   */\n  setConnectionColor(color) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setColor(color);\n    }\n  }\n\n  /**\n   * 设置旋转曲线连接透明度\n   */\n  setConnectionOpacity(opacity) {\n    if (this.cylinderConnection) {\n      this.cylinderConnection.setOpacity(opacity);\n    }\n  }\n\n  /**\n   * 设置超椭圆形状渐变的位置偏移\n   * @param {number} x - X轴偏移\n   * @param {number} y - Y轴偏移\n   * @param {number} z - Z轴偏移\n   */\n  setTransitionPositionOffset(x, y, z) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setPositionOffset(x, y, z);\n    }\n  }\n\n  /**\n   * 设置超椭圆形状渐变的旋转偏移\n   * @param {number} x - X轴旋转偏移（弧度）\n   * @param {number} y - Y轴旋转偏移（弧度）\n   * @param {number} z - Z轴旋转偏移（弧度）\n   */\n  setTransitionRotationOffset(x, y, z) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setRotationOffset(x, y, z);\n    }\n  }\n\n  /**\n   * 直接设置超椭圆形状渐变的位置\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {number} z - Z坐标\n   */\n  setTransitionPosition(x, y, z) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setPosition(x, y, z);\n    }\n  }\n\n  /**\n   * 直接设置超椭圆形状渐变的旋转\n   * @param {number} x - X轴旋转（弧度）\n   * @param {number} y - Y轴旋转（弧度）\n   * @param {number} z - Z轴旋转（弧度）\n   */\n  setTransitionRotation(x, y, z) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setRotation(x, y, z);\n    }\n  }\n\n  /**\n   * 获取超椭圆形状渐变的当前位置\n   */\n  getTransitionPosition() {\n    return this.superellipseTransition ? this.superellipseTransition.getPosition() : new three_module/* Vector3 */.Pq0();\n  }\n\n  /**\n   * 获取超椭圆形状渐变的当前旋转\n   */\n  getTransitionRotation() {\n    return this.superellipseTransition ? this.superellipseTransition.getRotation() : new three_module/* Euler */.O9p();\n  }\n\n  /**\n   * 获取超椭圆形状渐变的位置偏移\n   */\n  getTransitionPositionOffset() {\n    return this.superellipseTransition ? this.superellipseTransition.getPositionOffset() : { x: 0, y: 0, z: 0 };\n  }\n\n  /**\n   * 获取超椭圆形状渐变的旋转偏移\n   */\n  getTransitionRotationOffset() {\n    return this.superellipseTransition ? this.superellipseTransition.getRotationOffset() : { x: 0, y: 0, z: 0 };\n  }\n\n  /**\n   * 设置超椭圆形状渐变可见性\n   */\n  setTransitionVisible(visible) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setVisible(visible);\n    }\n  }\n\n  /**\n   * 设置超椭圆形状渐变颜色\n   */\n  setTransitionColor(color) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setColor(color);\n    }\n  }\n\n  /**\n   * 设置超椭圆形状渐变透明度\n   */\n  setTransitionOpacity(opacity) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.setOpacity(opacity);\n    }\n  }\n\n  /**\n   * 动态更新超椭圆指数（用于动画效果）\n   * @param {number} startExponent - 起始指数（圆形：2.0）\n   * @param {number} endExponent - 结束指数（方形：8.0+）\n   */\n  updateTransitionExponents(startExponent, endExponent) {\n    if (this.superellipseTransition) {\n      this.superellipseTransition.updateExponents(startExponent, endExponent);\n    }\n  }\n\n  /**\n   * 销毁资源\n   */\n  dispose() {\n    // 立方体外壳材质已删除，不需要清理\n    // if (this.shellMaterial) {\n    //   this.shellMaterial.dispose();\n    // }\n    \n    if (this.cylinder1Material) {\n      this.cylinder1Material.dispose();\n    }\n    \n    if (this.cylinder2Material) {\n      this.cylinder2Material.dispose();\n    }\n    \n    // 清理旋转曲线连接\n    if (this.cylinderConnection) {\n      this.cylinderConnection.dispose();\n      this.cylinderConnection = null;\n    }\n    \n    // 清理超椭圆形状渐变\n    if (this.superellipseTransition) {\n      this.superellipseTransition.dispose();\n      this.superellipseTransition = null;\n    }\n    \n    // 清理cylinder2爆炸效果\n    if (this.cylinder2ExplodeEffect) {\n      this.cylinder2ExplodeEffect.dispose();\n      this.cylinder2ExplodeEffect = null;\n    }\n    \n    // 清理旋转曲线连接爆炸效果\n    if (this.rotationCurveExplodeEffect) {\n      this.rotationCurveExplodeEffect.dispose();\n      this.rotationCurveExplodeEffect = null;\n    }\n    \n    // 清理超椭圆形状渐变爆炸效果\n    if (this.superellipseExplodeEffect) {\n      this.superellipseExplodeEffect.dispose();\n      this.superellipseExplodeEffect = null;\n    }\n    \n    this.shellGroup.traverse((child) => {\n      if (child.geometry) child.geometry.dispose();\n      if (child.material) child.material.dispose();\n    });\n    \n    // 清理圆柱体引用\n    this.cylinder1 = null;\n    this.cylinder2 = null;\n  }\n}\n\n;// ./src/materials/MaterialManager.js\n\r\n\r\n\r\n/**\r\n * 材质管理器类\r\n * 负责创建和管理所有3D材质，包括贴图加载\r\n */\r\nclass MaterialManager {\r\n  constructor() {\r\n    this.textureLoader = new three_module/* TextureLoader */.Tap();\r\n    this.materials = {};\r\n    this.textures = {};\r\n  }\r\n\r\n  /**\r\n   * 初始化所有材质\r\n   * @returns {Promise} 返回Promise，在所有贴图加载完成后解析\r\n   */\r\n  async initializeMaterials() {\r\n    console.log('正在初始化材质...');\r\n    \r\n    try {\r\n      // 加载金属贴图\r\n      await this.loadMetalTextures();\r\n      \r\n      // 创建所有材质\r\n      this.createMetalMaterial();\r\n      this.createPlateMaterial();\r\n      this.createScreenMaterial();\r\n      this.createGlowPointMaterial();\r\n      \r\n      console.log('材质初始化完成');\r\n      return this.materials;\r\n    } catch (error) {\r\n      console.error('材质初始化失败:', error);\r\n      // 如果贴图加载失败，创建无贴图的材质\r\n      this.createFallbackMaterials();\r\n      return this.materials;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载金属贴图\r\n   * @returns {Promise} 贴图加载Promise\r\n   */\r\n  async loadMetalTextures() {\r\n    const loadPromises = [];\r\n    \r\n    // 加载电子枪金属贴图\r\n    const metalConfig = CONFIG.materials.metal;\r\n    if (metalConfig.textures) {\r\n      if (metalConfig.textures.map) {\r\n        loadPromises.push(this.loadTexture('metalMap', metalConfig.textures.map));\r\n      }\r\n      \r\n      if (metalConfig.textures.normalMap) {\r\n        loadPromises.push(this.loadTexture('metalNormal', metalConfig.textures.normalMap));\r\n      }\r\n      \r\n      if (metalConfig.textures.roughnessMap) {\r\n        loadPromises.push(this.loadTexture('metalRoughness', metalConfig.textures.roughnessMap));\r\n      }\r\n      \r\n      if (metalConfig.textures.metalnessMap) {\r\n        loadPromises.push(this.loadTexture('metalMetalness', metalConfig.textures.metalnessMap));\r\n      }\r\n    }\r\n    \r\n    // 加载偏转板贴图\r\n    const plateConfig = CONFIG.materials.plate;\r\n    if (plateConfig.textures) {\r\n      if (plateConfig.textures.map) {\r\n        loadPromises.push(this.loadTexture('plateMap', plateConfig.textures.map));\r\n      }\r\n      \r\n      if (plateConfig.textures.normalMap) {\r\n        loadPromises.push(this.loadTexture('plateNormal', plateConfig.textures.normalMap));\r\n      }\r\n      \r\n      if (plateConfig.textures.roughnessMap) {\r\n        loadPromises.push(this.loadTexture('plateRoughness', plateConfig.textures.roughnessMap));\r\n      }\r\n      \r\n      if (plateConfig.textures.metalnessMap) {\r\n        loadPromises.push(this.loadTexture('plateMetalness', plateConfig.textures.metalnessMap));\r\n      }\r\n    }\r\n    \r\n    await Promise.all(loadPromises);\r\n  }\r\n\r\n  /**\r\n   * 加载单个贴图\r\n   * @param {string} name - 贴图名称\r\n   * @param {string} path - 贴图路径\r\n   * @returns {Promise} 贴图加载Promise\r\n   */\r\n  loadTexture(name, path) {\r\n    return new Promise((resolve, reject) => {\r\n      this.textureLoader.load(\r\n        path,\r\n        (texture) => {\r\n          // 设置贴图参数\r\n          texture.wrapS = three_module/* RepeatWrapping */.GJx;\r\n          texture.wrapT = three_module/* RepeatWrapping */.GJx;\r\n          texture.flipY = false;\r\n          \r\n          this.textures[name] = texture;\r\n          console.log(`贴图加载成功: ${name} (${path})`);\r\n          resolve(texture);\r\n        },\r\n        (progress) => {\r\n          console.log(`贴图加载进度: ${name} - ${(progress.loaded / progress.total * 100)}%`);\r\n        },\r\n        (error) => {\r\n          console.warn(`贴图加载失败: ${name} (${path})`, error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建金属材质（电子枪）\r\n   */\r\n  createMetalMaterial() {\r\n    const metalConfig = CONFIG.materials.metal;\r\n    \r\n    const materialProps = {\r\n      color: new three_module/* Color */.Q1f(metalConfig.color),\r\n      metalness: metalConfig.metalness,\r\n      roughness: metalConfig.roughness,\r\n      envMapIntensity: 1.0\r\n    };\r\n\r\n    // 如果有贴图，添加到材质\r\n    if (this.textures.metalMap) {\r\n      materialProps.map = this.textures.metalMap;\r\n    }\r\n    \r\n    if (this.textures.metalNormal) {\r\n      materialProps.normalMap = this.textures.metalNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n    \r\n    if (this.textures.metalRoughness) {\r\n      materialProps.roughnessMap = this.textures.metalRoughness;\r\n    }\r\n    \r\n    if (this.textures.metalMetalness) {\r\n      materialProps.metalnessMap = this.textures.metalMetalness;\r\n    }\r\n\r\n    this.materials.metal = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n  }\r\n\r\n  /**\r\n   * 创建偏转板材质\r\n   */\r\n  createPlateMaterial() {\r\n    const plateConfig = CONFIG.materials.plate;\r\n    \r\n    const materialProps = {\r\n      color: new three_module/* Color */.Q1f(plateConfig.color),\r\n      metalness: plateConfig.metalness,\r\n      roughness: plateConfig.roughness,\r\n      envMapIntensity: 1.0  // 与电子枪保持一致\r\n    };\r\n\r\n    // 如果有贴图，添加到材质\r\n    if (this.textures.plateMap) {\r\n      materialProps.map = this.textures.plateMap;\r\n    }\r\n    \r\n    if (this.textures.plateNormal) {\r\n      materialProps.normalMap = this.textures.plateNormal;\r\n      materialProps.normalScale = new three_module/* Vector2 */.I9Y(1, 1);\r\n    }\r\n    \r\n    if (this.textures.plateRoughness) {\r\n      materialProps.roughnessMap = this.textures.plateRoughness;\r\n    }\r\n    \r\n    if (this.textures.plateMetalness) {\r\n      materialProps.metalnessMap = this.textures.plateMetalness;\r\n    }\r\n\r\n    this.materials.plate = new three_module/* MeshStandardMaterial */._4j(materialProps);\r\n    \r\n    // 调试输出偏转板材质信息\r\n    console.log('🔧 偏转板材质创建完成:', {\r\n      hasMap: !!materialProps.map,\r\n      hasNormalMap: !!materialProps.normalMap,\r\n      color: materialProps.color.getHexString(),\r\n      metalness: materialProps.metalness,\r\n      roughness: materialProps.roughness,\r\n      envMapIntensity: materialProps.envMapIntensity\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建荧光屏材质\r\n   */\r\n  createScreenMaterial() {\r\n    const screenConfig = CONFIG.materials.screen;\r\n    \r\n    this.materials.screen = new three_module/* MeshStandardMaterial */._4j({\r\n      color: new three_module/* Color */.Q1f(screenConfig.color),\r\n      emissive: new three_module/* Color */.Q1f(CONFIG.screen.color),\r\n      emissiveIntensity: CONFIG.screen.intensity,\r\n      roughness: screenConfig.roughness,\r\n      side: three_module/* DoubleSide */.$EB\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建发光点材质\r\n   */\r\n  createGlowPointMaterial() {\r\n    this.materials.glowPoint = new three_module/* MeshBasicMaterial */.V9B({\r\n      color: new three_module/* Color */.Q1f(CONFIG.dotLight.color),\r\n      transparent: true,\r\n      opacity: CONFIG.materials.glow.opacity\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建备用材质（当贴图加载失败时使用）\r\n   */\r\n  createFallbackMaterials() {\r\n    console.log('创建备用材质（无贴图）');\r\n    \r\n    this.materials.metal = new three_module/* MeshStandardMaterial */._4j({\r\n      color: new three_module/* Color */.Q1f(CONFIG.materials.metal.color),\r\n      metalness: CONFIG.materials.metal.metalness,\r\n      roughness: CONFIG.materials.metal.roughness,\r\n      envMapIntensity: 1.0\r\n    });\r\n\r\n    this.materials.plate = new three_module/* MeshStandardMaterial */._4j({\r\n      color: new three_module/* Color */.Q1f(CONFIG.materials.plate.color),\r\n      metalness: CONFIG.materials.plate.metalness,\r\n      roughness: CONFIG.materials.plate.roughness,\r\n      envMapIntensity: 1.0  // 与电子枪保持一致\r\n    });\r\n\r\n    this.createScreenMaterial();\r\n    this.createGlowPointMaterial();\r\n  }\r\n\r\n  /**\r\n   * 获取指定材质\r\n   * @param {string} name - 材质名称\r\n   * @returns {THREE.Material} 材质对象\r\n   */\r\n  getMaterial(name) {\r\n    return this.materials[name];\r\n  }\r\n\r\n  /**\r\n   * 更新材质属性\r\n   * @param {string} materialName - 材质名称\r\n   * @param {Object} properties - 要更新的属性\r\n   */\r\n  updateMaterial(materialName, properties) {\r\n    const material = this.materials[materialName];\r\n    if (material) {\r\n      Object.assign(material, properties);\r\n      material.needsUpdate = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 释放所有材质和贴图资源\r\n   */\r\n  dispose() {\r\n    // 释放贴图\r\n    Object.values(this.textures).forEach(texture => {\r\n      texture.dispose();\r\n    });\r\n\r\n    // 释放材质\r\n    Object.values(this.materials).forEach(material => {\r\n      material.dispose();\r\n    });\r\n\r\n    this.textures = {};\r\n    this.materials = {};\r\n  }\r\n}\r\n\n;// ./src/main.js\n// ===== 基础导入 =====\n // 三维库\n // 轨道控制器\n // 动画库\n\n// ===== 导入 switcher 模块（ES6 导入，并在 DOM 就绪后初始化） =====\n\n\n\n// ===== 导入自定义模块 =====\n\n\n  // 配置文件\n  // GUI控制器\n  // UI控制器\n  // 波形生成器\n  // 电子束\n  // 荧光屏\n  // 标签系统\n  // 分解视图\n  // 演示动画\n  // CRT外壳\n  // 材质管理器\n  // 统一组件材质管理器\n\n// ===== 全局变量 =====\nlet scene, camera, renderer, controls;  // 场景、相机、渲染器、控制器\nlet electronBeam, waveformGenerator, screenController;  // 电子束、波形生成器、荧光屏控制器\nlet guiController, uiController;  // GUI控制器、UI控制器\nlet labelSystem, explodedView, demoAnimation;  // 标签系统、分解视图、演示动画\nlet crtShell;  // CRT外壳\nlet materialManager;  // 材质管理器\n\n// 创建 TWEEN Group 管理动画（解决 TWEEN.update() 弃用问题）\nconst tweenGroup = new tween_esm/* Group */.YJ();\n\n// ===== 热重载支持 =====\nif (false) // removed by dead control flow\n{}\n\n// ===== 场景对象引用 =====\nlet gun, gunHead, v1, v2, h1, h2, screen;  // 电子枪、电子枪头、垂直偏转板、水平偏转板、荧光屏    \n\n// ===== 工具函数 =====\n/**\n * 解析颜色值，支持多种格式\n * @param {string|number} color - 颜色值（可以是 \"#ffffff\", \"0xffffff\", RGB等格式）\n * @returns {number|null} - 解析后的十六进制数值，失败返回null\n */\nfunction parseColor(color) {\n  try {\n    if (typeof color === 'number') {\n      return color;\n    }\n    \n    if (typeof color === 'string') {\n      // 处理十六进制格式 \"0xffffff\"\n      if (color.startsWith('0x')) {\n        return parseInt(color, 16);\n      }\n      \n      // 处理CSS十六进制格式 \"#ffffff\"\n      if (color.startsWith('#')) {\n        return parseInt(color.replace('#', '0x'), 16);\n      }\n      \n      // 处理纯十六进制字符串 \"ffffff\"\n      if (/^[0-9a-fA-F]{6}$/.test(color)) {\n        return parseInt('0x' + color, 16);\n      }\n      \n      // 尝试直接解析\n      const parsed = parseInt(color, 16);\n      if (!isNaN(parsed)) {\n        return parsed;\n      }\n    }\n    \n    console.warn('无法解析颜色值:', color);\n    return null;\n  } catch (error) {\n    console.error('颜色解析错误:', error, '输入值:', color);\n    return null;\n  }\n}\n\n// ===== 初始化函数 =====\nasync function init() {\n  console.log('初始化应用...');\n  initScene(); // 初始化场景\n  initCamera(); // 初始化相机\n  initRenderer(); // 初始化渲染器\n  initControls(); // 初始化控制器\n  initLights(); // 初始化光源\n  initGrid(); // 初始化网格\n  await initMaterials(); // 初始化材质（异步）\n  initComponents(); // 初始化组件\n  console.log('初始化标签系统...');\n  initLabelSystem(); // 初始化标签系统\n  console.log('初始化分解视图...');\n  initExplodedView(); // 初始化分解视图\n  console.log('初始化GUI...');\n  initGui(); // 初始化GUI（需要在演示动画之前初始化）\n  console.log('初始化演示动画...');\n  initDemoAnimation(); // 初始化演示动画\n  console.log('初始化UI控制器...');\n  initUIController(); // 初始化UI控制器\n  \n  // 初始化波形显示\n  updateScreenWaveform();\n  \n  // 初始化电子束（确保启动时就有电子束显示）\n  updateElectronBeam();\n  \n  // 开始动画循环\n  animate(); // 开始动画循环\n  \n  // 窗口自适应\n  window.addEventListener('resize', onWindowResize);   // 窗口大小调整事件监听\n  \n  console.log('应用初始化完成');\n}\n\n// ===== 场景初始化 =====\nfunction initScene() {\n  scene = new three_module/* Scene */.Z58(); // 创建场景\n  scene.background = new three_module/* Color */.Q1f(CONFIG.scene.background); // 设置场景背景颜色\n}\n\n// ===== 相机初始化 =====\nfunction initCamera() {\n  camera = new three_module/* PerspectiveCamera */.ubm( // 透视相机\n    CONFIG.camera.fov, // 视角\n    window.innerWidth / window.innerHeight, // 宽高比\n    CONFIG.camera.near, // 近截面\n    CONFIG.camera.far // 远截面\n  );\n  camera.position.set(CONFIG.camera.position.x, CONFIG.camera.position.y, CONFIG.camera.position.z); // 设置相机位置\n}\n\n// ===== 渲染器初始化 =====\nfunction initRenderer() {\n  renderer = new three_module/* WebGLRenderer */.JeP({ antialias: true }); // 创建渲染器\n  \n  // 高DPI屏幕适配\n  const devicePixelRatio = window.devicePixelRatio || 1;\n  renderer.setPixelRatio(Math.min(devicePixelRatio, 2)); // 限制最大DPI比率为2\n  renderer.setSize(window.innerWidth, window.innerHeight); // 设置渲染器大小\n  \n  document.body.appendChild(renderer.domElement); // 将渲染器添加到文档中\n}\n\n// ===== 控制器初始化 =====\nfunction initControls() { \n  controls = new OrbitControls/* OrbitControls */.N(camera, renderer.domElement); // 创建控制器\n  controls.enableDamping = true; // 启用阻尼\n}\n\n// ===== 光源初始化 =====\nfunction initLights() { \n  // 环境光 - 为金属材质提供基础照明\n  scene.add(new three_module/* AmbientLight */.$p8(0xffffff, 0.4)); \n  \n  // 主要定向光 - 模拟太阳光，增强金属反射效果\n  const directionalLight = new three_module/* DirectionalLight */.ZyN(0xffffff, 0.8);\n  directionalLight.position.set(10, 10, 5);\n  directionalLight.castShadow = true;\n  scene.add(directionalLight);\n  \n  // 补充点光源 - 从不同角度照亮金属表面\n  const pointLight1 = new three_module/* PointLight */.HiM(0xffffff, 0.6);\n  pointLight1.position.set(-10, 8, 8);\n  scene.add(pointLight1);\n  \n  // 第二个点光源 - 增加金属材质的高光效果\n  const pointLight2 = new three_module/* PointLight */.HiM(0xf0f0f0, 0.4);\n  pointLight2.position.set(5, -5, 10);\n  scene.add(pointLight2);\n}\n\n// ===== 网格地面初始化 =====\nfunction initGrid() {\n  const grid = new three_module/* GridHelper */.fTw(\n    CONFIG.scene.grid.size, \n    CONFIG.scene.grid.divisions, \n    CONFIG.scene.grid.color1, \n    CONFIG.scene.grid.color2\n  ); // 创建网格\n  grid.position.set(\n    CONFIG.scene.grid.position.x, \n    CONFIG.scene.grid.position.y, \n    CONFIG.scene.grid.position.z\n  ); // 设置网格位置\n  scene.add(grid); // 将网格添加到场景中\n}\n\n// ===== 材质初始化 =====\nasync function initMaterials() {\n  console.log('初始化材质管理器...');\n  materialManager = new MaterialManager();\n  await materialManager.initializeMaterials();\n  \n  console.log('初始化统一组件材质管理器...');\n  await unifiedComponentMaterial.initialize();\n  \n  console.log('材质初始化完成');\n}\n\n// ===== 组件初始化 =====\nfunction initComponents() {\n  // 从材质管理器获取材质\n  const metalMat = materialManager.getMaterial('metal');\n  const plateMat = materialManager.getMaterial('plate');\n  const screenMat = materialManager.getMaterial('screen');\n  const glowPointMat = materialManager.getMaterial('glowPoint');\n\n  // 电子枪\n  gun = new three_module/* Mesh */.eaF(\n    new three_module/* CylinderGeometry */.Ho_(CONFIG.components.gun.radius, 0.3, CONFIG.components.gun.height, 32),\n    metalMat\n  );\n  gun.rotation.z = Math.PI / 2;\n  gun.position.set(CONFIG.components.gun.position.x, CONFIG.components.gun.position.y, CONFIG.components.gun.position.z);\n  scene.add(gun);\n\n  gunHead = new three_module/* Mesh */.eaF(\n    new three_module/* CylinderGeometry */.Ho_(CONFIG.components.gunHead.radius, CONFIG.components.gunHead.radius, CONFIG.components.gunHead.height, 32),\n    metalMat\n  );\n  gunHead.rotation.z = Math.PI / 2;\n  gunHead.position.set(CONFIG.components.gunHead.position.x, CONFIG.components.gunHead.position.y, CONFIG.components.gunHead.position.z);\n  scene.add(gunHead);\n\n  // 垂直偏转板\n  const vGeom = new three_module/* BoxGeometry */.iNn(CONFIG.components.verticalPlates.width, CONFIG.components.verticalPlates.height, CONFIG.components.verticalPlates.depth);\n  v1 = new three_module/* Mesh */.eaF(vGeom, plateMat);\n  v2 = v1.clone();\n\n  v1.rotation.x = Math.PI / 2;\n  v2.rotation.x = Math.PI / 2;\n  // 再绕 Z 轴 90°\n  v1.rotation.y += Math.PI / 2;\n  v2.rotation.y += Math.PI / 2;\n\n  v1.position.set(CONFIG.components.verticalPlates.positions[0].x, CONFIG.components.verticalPlates.positions[0].y, CONFIG.components.verticalPlates.positions[0].z);\n  v2.position.set(CONFIG.components.verticalPlates.positions[1].x, CONFIG.components.verticalPlates.positions[1].y, CONFIG.components.verticalPlates.positions[1].z);\n  scene.add(v1, v2);\n\n  // 水平偏转板\n  const hGeom = new three_module/* BoxGeometry */.iNn(CONFIG.components.horizontalPlates.width, CONFIG.components.horizontalPlates.height, CONFIG.components.horizontalPlates.depth);\n  h1 = new three_module/* Mesh */.eaF(hGeom, plateMat);\n  h2 = h1.clone();\n\n  h1.rotation.x = -Math.PI / 2;\n  h2.rotation.x = -Math.PI / 2;\n\n  h1.position.set(CONFIG.components.horizontalPlates.positions[0].x, CONFIG.components.horizontalPlates.positions[0].y, CONFIG.components.horizontalPlates.positions[0].z);\n  h2.position.set(CONFIG.components.horizontalPlates.positions[1].x, CONFIG.components.horizontalPlates.positions[1].y, CONFIG.components.horizontalPlates.positions[1].z);\n  scene.add(h1, h2);\n\n  // 荧光屏\n  screen = new three_module/* Mesh */.eaF(new three_module/* PlaneGeometry */.bdM(CONFIG.components.screen.width, CONFIG.components.screen.height), screenMat); // 创建荧光屏\n  screen.position.set(CONFIG.components.screen.position.x, CONFIG.components.screen.position.y, CONFIG.components.screen.position.z); // 设置荧光屏位置\n  screen.rotation.y = -Math.PI / 2; // 设置荧光屏旋转\n  scene.add(screen); // 将荧光屏添加到场景中\n   \n  \n  // 初始化电子束控制器\n  electronBeam = new ElectronBeam(scene);\n  \n  // 初始化波形生成器\n  waveformGenerator = new WaveformGenerator();\n  \n  // 设置波形重置回调，在新周期开始时清除回扫线\n  waveformGenerator.setWaveformResetCallback(() => {\n    if (electronBeam) {\n      electronBeam.startNewTraceSegment();\n    }\n  });\n  \n  // 初始化荧光屏控制器\n  screenController = new Screen(scene, screen);\n  \n  // 初始化CRT外壳\n  crtShell = new CRTShell();\n  scene.add(crtShell.getShell());\n  \n  // 初始化连接位置演示（使其在全局可用）\n  window.connectionDemo = new ConnectionPositionDemo(crtShell);\n  \n  // 初始化超椭圆形状渐变演示（使其在全局可用）\n  window.transitionDemo = new SuperellipseTransitionDemo(crtShell);\n}\n\n// ===== 标签系统初始化 =====\nfunction initLabelSystem() {\n  // 创建标签系统\n  labelSystem = new LabelSystem(scene, document.body);\n  \n  // 为各组件添加标签\n  const componentLabels = [\n    { id: 'gun', target: gun, text: CONFIG.descriptions.gun.name, offset: new three_module/* Vector3 */.Pq0(0, 0.5, 0), description: CONFIG.descriptions.gun.description },\n    { id: 'gunHead', target: gunHead, text: CONFIG.descriptions.gunHead.name, offset: new three_module/* Vector3 */.Pq0(0, 0.3, 0), description: CONFIG.descriptions.gunHead.description },\n    { id: 'v1', target: v1, text: CONFIG.descriptions.v1.name, offset: new three_module/* Vector3 */.Pq0(0, 0.3, 0), description: CONFIG.descriptions.v1.description },\n    { id: 'v2', target: v2, text: CONFIG.descriptions.v2.name, offset: new three_module/* Vector3 */.Pq0(0, -0.3, 0), description: CONFIG.descriptions.v2.description },\n    { id: 'h1', target: h1, text: CONFIG.descriptions.h1.name, offset: new three_module/* Vector3 */.Pq0(0, 0, 0.3), description: CONFIG.descriptions.h1.description },\n    { id: 'h2', target: h2, text: CONFIG.descriptions.h2.name, offset: new three_module/* Vector3 */.Pq0(0, 0, -0.3), description: CONFIG.descriptions.h2.description },\n    { id: 'screen', target: screen, text: CONFIG.descriptions.screen.name, offset: new three_module/* Vector3 */.Pq0(0.1, 0.5, 0), description: CONFIG.descriptions.screen.description }\n  ];\n  \n  // 创建标签\n  componentLabels.forEach(label => {\n    labelSystem.createLabel(label.id, label.text, label.target, label.offset, label.description);\n  });\n}\n\n// ===== 分解视图初始化 =====\nfunction initExplodedView() {\n  // 创建分解视图控制器\n  // 注意：这些组件不参与分解动画，但需要引用以支持相机聚焦功能\n  explodedView = new ExplodedView({\n    // 添加主要组件的引用，用于相机聚焦功能\n    // 这些组件不会有分解动画，但可以被聚焦\n    gun: gun,\n    gunHead: gunHead, \n    v1: v1,\n    v2: v2,\n    h1: h1,\n    h2: h2,\n    screen: screen\n    // CRT外壳(crtShell)有自己的内部分解机制，不在此处理\n  });\n}\n\n// ===== 演示动画初始化 =====\nfunction initDemoAnimation() {\n  // 创建演示动画控制器\n  demoAnimation = new DemoAnimation(\n    scene,\n    {\n      gun,\n      gunHead,\n      v1,\n      v2,\n      h1,\n      h2,\n      screen: screenController,  // 传递Screen类实例而不是THREE.js网格对象\n      electronBeam\n    },\n    {\n      camera,\n      controls,\n      screenController,\n      guiController,  // 传递GUI控制器，用于演示时折叠面板\n      onDeflectionChange: (deflectionParams) => {\n        updateElectronBeam();\n      },\n      onWaveformChange: (waveformParams) => {\n        updateElectronBeam();\n        updateScreenWaveform();\n      }\n    }\n  );\n  \n  // 设置全局引用供波形生成器使用\n  window.demoAnimation = demoAnimation;\n  \n  // ===== 视角查看器 - 在控制台查看当前摄像头位置和目标 =====\n  window.getView = function() {\n    if (!camera || !controls) {\n      console.warn('⚠️ 摄像头或控制器未初始化');\n      return null;\n    }\n    \n    const viewInfo = {\n      position: { \n        x: Math.round(camera.position.x * 100) / 100,\n        y: Math.round(camera.position.y * 100) / 100, \n        z: Math.round(camera.position.z * 100) / 100 \n      },\n      target: { \n        x: Math.round(controls.target.x * 100) / 100,\n        y: Math.round(controls.target.y * 100) / 100, \n        z: Math.round(controls.target.z * 100) / 100 \n      }\n    };\n    \n    console.log('📷 当前视角信息:');\n    console.log('位置 (position):', viewInfo.position);\n    console.log('目标 (target):', viewInfo.target);\n    console.log('---');\n    console.log('复制用代码:');\n    console.log(`position: { x: ${viewInfo.position.x}, y: ${viewInfo.position.y}, z: ${viewInfo.position.z} }`);\n    console.log(`target: { x: ${viewInfo.target.x}, y: ${viewInfo.target.y}, z: ${viewInfo.target.z} }`);\n    \n    return viewInfo;\n  };\n}\n\n// ===== GUI初始化 =====\nfunction initGui() {\n  guiController = new GuiController({\n    onBeamChange: (beamParams) => {\n      electronBeam.updateMaterial();\n    },\n    onDeflectionChange: (deflectionParams) => {\n      updateElectronBeam();\n    },\n    onWaveformChange: (waveformParams) => {\n      // 波形参数变化时，需要更新电子束\n      updateElectronBeam();\n      // 同时更新荧光屏上的波形显示\n      updateScreenWaveform();\n    },\n    onScreenChange: (screenParams) => {\n      screenController.updateMaterial();\n    },\n    onShellChange: (shellParams) => {\n      if (crtShell) {\n        crtShell.setVisible(shellParams.visible);\n        crtShell.setOpacity(shellParams.opacity);\n        \n        \n        // 处理第一个圆柱体\n        if (shellParams.cylinder1) {\n          if (shellParams.cylinder1.hasOwnProperty('visible')) {\n            crtShell.setCylinder1Visible(shellParams.cylinder1.visible);\n          }\n          if (shellParams.cylinder1.hasOwnProperty('opacity')) {\n            crtShell.setCylinder1Opacity(shellParams.cylinder1.opacity);\n          }\n          if (shellParams.cylinder1.color) {\n            const cylinder1Color = parseColor(shellParams.cylinder1.color);\n            if (cylinder1Color !== null) {\n              crtShell.setCylinder1Color(cylinder1Color);\n            }\n          }\n          if (shellParams.cylinder1.position) {\n            crtShell.setCylinder1Position(\n              shellParams.cylinder1.position.x,\n              shellParams.cylinder1.position.y,\n              shellParams.cylinder1.position.z\n            );\n          }\n          if (shellParams.cylinder1.rotation) {\n            crtShell.setCylinder1Rotation(\n              shellParams.cylinder1.rotation.x,\n              shellParams.cylinder1.rotation.y,\n              shellParams.cylinder1.rotation.z\n            );\n          }\n        }\n        \n        // 处理第二个圆柱体\n        if (shellParams.cylinder2) {\n          if (shellParams.cylinder2.hasOwnProperty('visible')) {\n            crtShell.setCylinder2Visible(shellParams.cylinder2.visible);\n          }\n          if (shellParams.cylinder2.hasOwnProperty('opacity')) {\n            crtShell.setCylinder2Opacity(shellParams.cylinder2.opacity);\n          }\n          if (shellParams.cylinder2.color) {\n            const cylinder2Color = parseColor(shellParams.cylinder2.color);\n            if (cylinder2Color !== null) {\n              crtShell.setCylinder2Color(cylinder2Color);\n            }\n          }\n          if (shellParams.cylinder2.position) {\n            crtShell.setCylinder2Position(\n              shellParams.cylinder2.position.x,\n              shellParams.cylinder2.position.y,\n              shellParams.cylinder2.position.z\n            );\n          }\n          if (shellParams.cylinder2.rotation) {\n            crtShell.setCylinder2Rotation(\n              shellParams.cylinder2.rotation.x,\n              shellParams.cylinder2.rotation.y,\n              shellParams.cylinder2.rotation.z\n            );\n          }\n        }\n        \n        // 触发配置更新以保持同步\n        crtShell.updateConfig();\n      }\n    }\n  });\n}\n\n// ===== UI控制器初始化 =====\nfunction initUIController() {\n  // 创建UI控制器\n  uiController = new UIController({\n    components: {\n      gun,\n      gunHead,\n      v1,\n      v2,\n      h1,\n      h2,\n      screen,\n      crtShell\n    },\n    controllers: {\n      camera,\n      controls,\n      labelSystem,\n      explodedView,\n      demoAnimation,\n      screenController,\n      onDeflectionChange: (deflectionParams) => {\n        updateElectronBeam();\n      },\n      onWaveformChange: (waveformParams) => {\n        updateElectronBeam();\n        updateScreenWaveform();\n      }\n    }\n  });\n}\n\n// ===== 更新电子束 =====\nfunction updateElectronBeam() {\n  let deflectionParams;\n  \n  // 如果波形启用，计算波形产生的偏转电压\n  if (CONFIG.waveform.enabled) {\n    const deflectionVoltage = waveformGenerator.calculateDeflectionVoltage(\n      CONFIG.waveform,\n      CONFIG.deflection\n    );\n    deflectionParams = {\n      horizontal: { voltage: deflectionVoltage.horizontal },\n      vertical: { voltage: deflectionVoltage.vertical }\n    };\n  } else {\n    // 直接使用控制面板上的电压值\n    deflectionParams = CONFIG.deflection;\n  }\n  \n  // 更新电子束路径\n  electronBeam.updateBeamPath(deflectionParams);\n  \n  // 更新荧光屏和动态光点\n  updateScreenAndGlowPoint();\n}\n\n/**\n * 更新荧光屏波形显示\n * 在波形参数改变时清除旧的显示内容\n */\nfunction updateScreenWaveform() {\n  // 清除荧光屏上的所有荧光点\n  if (screenController) {\n    screenController.clearAllGlowPoints();\n  }\n  \n  // 清除电子束的轨迹点\n  if (electronBeam) {\n    electronBeam.clearAllTraces();\n  }\n  \n  // 重置波形生成器的时间，避免波形不连续\n  // 这确保新的波形参数能从干净的状态开始显示\n  if (waveformGenerator) {\n    waveformGenerator.resetTime();\n  }\n  \n  console.log('波形参数变化：已清除旧的波形显示，准备显示新波形');\n}\n\n/**\n * 更新荧光屏和动态光点\n */\nfunction updateScreenAndGlowPoint() {\n  const lastBeamPoint = electronBeam.beamPoints[electronBeam.beamPoints.length - 1];\n  \n  // 更新荧光屏上的点\n  screenController.addGlowPoint(lastBeamPoint);\n  \n}\n\n// ===== 窗口大小调整 =====\nfunction onWindowResize() {\n  // 获取实际显示尺寸，考虑DPI缩放\n  const devicePixelRatio = window.devicePixelRatio || 1;\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n  \n  // 设置渲染器尺寸，考虑高DPI\n  renderer.setSize(width, height);\n  renderer.setPixelRatio(Math.min(devicePixelRatio, 2)); // 限制最大DPI比率为2\n  \n  // 更新标签系统\n  if (labelSystem) {\n    labelSystem.resize(width, height);\n  }\n  \n  // 更新UI控制器\n  if (uiController) {\n    uiController.resize(width, height);\n  }\n}\n\n// ===== 动画循环 =====\nfunction animate(timestamp) {\n  requestAnimationFrame(animate);\n  \n  // 更新控制器\n  controls.update();\n  \n  // 更新波形生成器\n  waveformGenerator.update(timestamp);\n  \n  // 持续更新电子束（无论波形是否启用都要更新）\n  // 这确保了电子束始终可见并响应参数变化\n  updateElectronBeam();\n  \n  // 更新荧光屏效果\n  screenController.update();\n  \n  // 更新CRT外壳\n  if (crtShell) {\n    crtShell.update(timestamp);\n  }\n  \n  // 更新分解视图\n  if (explodedView) {\n    explodedView.update();\n  }\n  \n  // 更新演示动画\n  if (demoAnimation) {\n    demoAnimation.update();\n  }\n  \n  // 更新标签系统\n  if (labelSystem) {\n    labelSystem.update(camera);\n  }\n  \n  // 更新TWEEN（使用新的 Group API）\n  tweenGroup.update();\n  \n  // 渲染场景\n  renderer.render(scene, camera);\n}\n\n// ===== 启动应用 =====\ninit().catch(error => {\n  console.error('应用初始化失败:', error);\n});\n\n// ===== 初始化右上角切换控件（内部页） =====\nconst bootInternalSwitcher = () => {\n  if (typeof document !== 'undefined') {\n    renderSwitcher('internal');\n  }\n};\nif (typeof document !== 'undefined' && document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', bootInternalSwitcher);\n} else {\n  bootInternalSwitcher();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3RTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeGxCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDblJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNqU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMvUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM21DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3JQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeFdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN0VkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNqZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDck9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3pUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDalNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvY29udHJvbGxlcnMvc3dpdGNoZXIuY3NzPzdmZDYiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy93aWRnZXRzL3N3aXRjaGVyLmpzP2I4NGIiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9jb25maWdMb2FkZXIuanM/NGQ5ZiIsIndlYnBhY2s6Ly9vc2NpbGxvc2NvcGUtc2ltdWxhdG9yLy4vc3JjL2V4YW1wbGVzL0Nvbm5lY3Rpb25Qb3NpdGlvbkRlbW8uanM/MDhjMyIsIndlYnBhY2s6Ly9vc2NpbGxvc2NvcGUtc2ltdWxhdG9yLy4vc3JjL2V4YW1wbGVzL1N1cGVyZWxsaXBzZVRyYW5zaXRpb25EZW1vLmpzPzdjMDAiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9jb250cm9sbGVycy9HdWlDb250cm9sbGVyLmpzPzMxODAiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9jb250cm9sbGVycy9VSUNvbnRyb2xsZXIuanM/MGYyZSIsIndlYnBhY2s6Ly9vc2NpbGxvc2NvcGUtc2ltdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvV2F2ZWZvcm1HZW5lcmF0b3IuanM/YWY4MCIsIndlYnBhY2s6Ly9vc2NpbGxvc2NvcGUtc2ltdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvRWxlY3Ryb25CZWFtLmpzPzc4NjkiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9jb21wb25lbnRzL1NjcmVlbi5qcz82MjhmIiwid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy9MYWJlbFN5c3RlbS5qcz83ZWI2Iiwid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy9FeHBsb2RlZFZpZXcuanM/YmY2NSIsIndlYnBhY2s6Ly9vc2NpbGxvc2NvcGUtc2ltdWxhdG9yLy4vc3JjL3V0aWxzL1BhcnRpY2xlUG9vbC5qcz83ZWE1Iiwid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy9EZW1vQW5pbWF0aW9uLmpzPzNmZDciLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9nZW9tZXRyeS9Sb3RhdGlvbkN1cnZlR2VvbWV0cnkuanM/YzllOCIsIndlYnBhY2s6Ly9vc2NpbGxvc2NvcGUtc2ltdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvQ3lsaW5kZXJDb25uZWN0aW9uLmpzPzRkYzkiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9tYXRlcmlhbHMvVW5pZmllZENvbXBvbmVudE1hdGVyaWFsLmpzP2NmOWMiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9jb21wb25lbnRzL1N1cGVyZWxsaXBzZVRyYW5zaXRpb24uanM/MzYzMiIsIndlYnBhY2s6Ly9vc2NpbGxvc2NvcGUtc2ltdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvQ3lsaW5kZXIyRXhwbG9kZUVmZmVjdC5qcz82OWYwIiwid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy9Sb3RhdGlvbkN1cnZlRXhwbG9kZUVmZmVjdC5qcz9kYmM2Iiwid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvdXRpbHMvU3VwZXJlbGxpcHNlUG9zaXRpb25lci5qcz82MzlhIiwid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy9TdXBlcmVsbGlwc2VFeHBsb2RlRWZmZWN0LmpzP2VlMWUiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9jb21wb25lbnRzL0NSVFNoZWxsLmpzPzZmMzQiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9tYXRlcmlhbHMvTWF0ZXJpYWxNYW5hZ2VyLmpzP2Q3MmUiLCJ3ZWJwYWNrOi8vb3NjaWxsb3Njb3BlLXNpbXVsYXRvci8uL3NyYy9tYWluLmpzPzU2ZDciXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N3aXRjaGVyLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N3aXRjaGVyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAnLi4vY29udHJvbGxlcnMvc3dpdGNoZXIuY3NzJztcclxuLy8g5riy5p+T5Y+z5LiK6KeS5YiH5o2i5o6n5Lu2XHJcbi8vIGN1cnJlbnQ6ICdleHRlcm5hbCcgfCAnaW50ZXJuYWwnXHJcbi8vIG9wdGlvbnM6IHsgdGlsZT86IHN0cmluZywgaWNvbj86IHN0cmluZywgZ2FwPzogc3RyaW5nLCBleHRyYT86IHN0cmluZyB9XHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTd2l0Y2hlcihjdXJyZW50LCBvcHRpb25zID0ge30pe1xyXG4gIGNvbnN0IG5hdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ25hdicpO1xyXG4gIG5hdi5jbGFzc05hbWUgPSAnc3dpdGNoZXInO1xyXG4gIG5hdi5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGFibGlzdCcpO1xyXG4gIG5hdi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAn6aG16Z2i5YiH5o2iJyk7XHJcblxyXG4gIC8vIOWFgeiuuOmAmui/hyBDU1Mg5Y+Y6YeP6Ieq5a6a5LmJ5bC65a+4L+mXtOi3nVxyXG4gIGlmIChvcHRpb25zLnRpbGUpICBuYXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tdGlsZScsIG9wdGlvbnMudGlsZSk7XHJcbiAgaWYgKG9wdGlvbnMuaWNvbikgIG5hdi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1pY29uJywgb3B0aW9ucy5pY29uKTtcclxuICBpZiAob3B0aW9ucy5nYXApICAgbmF2LnN0eWxlLnNldFByb3BlcnR5KCctLXN3aXRjaGVyLWdhcCcsIG9wdGlvbnMuZ2FwKTtcclxuICBpZiAob3B0aW9ucy5leHRyYSkgbmF2LnN0eWxlLnNldFByb3BlcnR5KCctLXN3aXRjaGVyLWV4dHJhJywgb3B0aW9ucy5leHRyYSk7XHJcblxyXG4gIGNvbnN0IGV4dGVybmFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gIGV4dGVybmFsLmNsYXNzTmFtZSA9ICd0aWxlIGxlZnQnO1xyXG4gIGV4dGVybmFsLmlkID0gJ3RhYi1leHRlcm5hbCc7XHJcbiAgZXh0ZXJuYWwuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3RhYicpO1xyXG4gIGV4dGVybmFsLnNldEF0dHJpYnV0ZSgnaHJlZicsICdpbmRleC5odG1sJyk7XHJcbiAgZXh0ZXJuYWwuc2V0QXR0cmlidXRlKCd0aXRsZScsICflpJbpg6jvvIjpnaLmnb8v56S65rOi5Zmo77yJJyk7XHJcbiAgZXh0ZXJuYWwuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgU3RyaW5nKGN1cnJlbnQgPT09ICdleHRlcm5hbCcpKTtcclxuICBleHRlcm5hbC5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+5aSW6YOoPC9zcGFuPicrXHJcbiAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+JytcclxuICAgICcgIDxyZWN0IGNsYXNzPVwic3Ryb2tlXCIgeD1cIjNcIiB5PVwiNFwiIHdpZHRoPVwiMThcIiBoZWlnaHQ9XCIxNFwiIHJ4PVwiMS41XCIvPicrXHJcbiAgICAnICA8cmVjdCBjbGFzcz1cInN0cm9rZVwiIHg9XCI1XCIgeT1cIjZcIiB3aWR0aD1cIjEwXCIgaGVpZ2h0PVwiOFwiIHJ4PVwiMC41XCIvPicrXHJcbiAgICAnICA8Y2lyY2xlIGNsYXNzPVwic3Ryb2tlXCIgY3g9XCIxOFwiIGN5PVwiOVwiIHI9XCIxLjNcIi8+JytcclxuICAgICcgIDxjaXJjbGUgY2xhc3M9XCJzdHJva2VcIiBjeD1cIjE4XCIgY3k9XCIxM1wiIHI9XCIxLjNcIi8+JytcclxuICAgICc8L3N2Zz4nO1xyXG5cclxuICBjb25zdCBpbnRlcm5hbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICBpbnRlcm5hbC5jbGFzc05hbWUgPSAndGlsZSByaWdodCc7XHJcbiAgaW50ZXJuYWwuaWQgPSAndGFiLWludGVybmFsJztcclxuICBpbnRlcm5hbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGFiJyk7XHJcbiAgaW50ZXJuYWwuc2V0QXR0cmlidXRlKCdocmVmJywgJ2ludGVybmFsLmh0bWwnKTtcclxuICBpbnRlcm5hbC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgJ+WGhemDqOWOn+eQhu+8iOazouW9oi/nlLXot6/vvIknKTtcclxuICBpbnRlcm5hbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBTdHJpbmcoY3VycmVudCA9PT0gJ2ludGVybmFsJykpO1xyXG4gIGludGVybmFsLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cInNyLW9ubHlcIj7lhoXpg6jljp/nkIY8L3NwYW4+JytcclxuICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj4nK1xyXG4gICAgJyAgPHBhdGggY2xhc3M9XCJzdHJva2VcIiBkPVwiTTIgMTJjMi02IDQgNiA2IDBzNCA2IDYgMCA0IDYgNiAwXCIvPicrXHJcbiAgICAnICA8Y2lyY2xlIGNsYXNzPVwiZG90XCIgY3g9XCIxOVwiIGN5PVwiNlwiIHI9XCIxLjFcIi8+JytcclxuICAgICc8L3N2Zz4nO1xyXG5cclxuICBuYXYuYXBwZW5kQ2hpbGQoZXh0ZXJuYWwpO1xyXG4gIG5hdi5hcHBlbmRDaGlsZChpbnRlcm5hbCk7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChuYXYpO1xyXG59XHJcblxyXG4vLyDlhbzlrrnvvJrlkIzml7bmjILliLAgd2luZG93IOS7pemBv+WFjeWOhuWPsuiwg+eUqOaKpemUmVxyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICB3aW5kb3cucmVuZGVyU3dpdGNoZXIgPSByZW5kZXJTd2l0Y2hlcjtcclxufVxyXG5cclxuXHJcblxyXG5cclxuIiwiLy8g6YWN572u5Yqg6L295ZmoIC0g5LuOSlNPTuWKoOi9veW5tuWkhOeQhumFjee9rlxyXG5pbXBvcnQgY29uZmlnRGF0YSBmcm9tICcuL2NvbmZpZy5qc29uJztcclxuXHJcbi8vIOmAkuW9kuWkhOeQhuWvueixoe+8jOWwhuWtl+espuS4suW9ouW8j+eahOWNgeWFrei/m+WItuminOiJsui9rOaNouS4uuaVsOWtl1xyXG5mdW5jdGlvbiBwcm9jZXNzQ29uZmlnKG9iaikge1xyXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyAmJiBvYmouc3RhcnRzV2l0aCgnMHgnKSkge1xyXG4gICAgLy8g6L2s5o2i5Y2B5YWt6L+b5Yi25a2X56ym5Liy5Li65pWw5a2XXHJcbiAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxNik7XHJcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcclxuICAgIC8vIOWkhOeQhuaVsOe7hFxyXG4gICAgcmV0dXJuIG9iai5tYXAocHJvY2Vzc0NvbmZpZyk7XHJcbiAgfSBlbHNlIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcclxuICAgIC8vIOWkhOeQhuWvueixoVxyXG4gICAgY29uc3QgcHJvY2Vzc2VkID0ge307XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7XHJcbiAgICAgIHByb2Nlc3NlZFtrZXldID0gcHJvY2Vzc0NvbmZpZyh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vLyDlpITnkIbphY3nva7mlbDmja5cclxuY29uc3QgcHJvY2Vzc2VkQ29uZmlnID0gcHJvY2Vzc0NvbmZpZyhjb25maWdEYXRhKTtcclxuXHJcbi8vIOWvvOWHuuWkhOeQhuWQjueahOmFjee9rlxyXG5leHBvcnQgY29uc3QgQ09ORklHID0gcHJvY2Vzc2VkQ29uZmlnLkNPTkZJRztcclxuZXhwb3J0IGNvbnN0IFdBVkVGT1JNX1RZUEVTID0gcHJvY2Vzc2VkQ29uZmlnLldBVkVGT1JNX1RZUEVTO1xyXG4iLCIvKipcclxuICog5peL6L2s5puy57q/6L+e5o6l5L2N572u5o6n5Yi25ryU56S6XHJcbiAqIOWxleekuuWmguS9leWcqOS7o+eggeS4reWKqOaAgeenu+WKqOWSjOaXi+i9rOi/nuaOpVxyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uUG9zaXRpb25EZW1vIHtcclxuICBjb25zdHJ1Y3RvcihjcnRTaGVsbCkge1xyXG4gICAgdGhpcy5jcnRTaGVsbCA9IGNydFNoZWxsO1xyXG4gICAgdGhpcy5hbmltYXRpb25JZCA9IG51bGw7XHJcbiAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICBcclxuICAgIC8vIOWOn+Wni+WBj+enu+mHj1xyXG4gICAgdGhpcy5vcmlnaW5hbFBvc2l0aW9uT2Zmc2V0ID0geyB4OiAwLCB5OiAwLCB6OiAwIH07XHJcbiAgICB0aGlzLm9yaWdpbmFsUm90YXRpb25PZmZzZXQgPSB7IHg6IDAsIHk6IDAsIHo6IDAgfTtcclxuICAgIFxyXG4gICAgLy8g5Yqo55S75Y+C5pWwXHJcbiAgICB0aGlzLnRpbWUgPSAwO1xyXG4gICAgdGhpcy5hbmltYXRpb25TcGVlZCA9IDAuMDE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvIDlp4vkvY3nva7liqjnlLvmvJTnpLpcclxuICAgKi9cclxuICBzdGFydFBvc2l0aW9uQW5pbWF0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMuaXNBbmltYXRpbmcpIHJldHVybjtcclxuICAgIFxyXG4gICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XHJcbiAgICB0aGlzLnRpbWUgPSAwO1xyXG4gICAgXHJcbiAgICAvLyDkv53lrZjljp/lp4vlgY/np7vph49cclxuICAgIHRoaXMub3JpZ2luYWxQb3NpdGlvbk9mZnNldCA9IHRoaXMuY3J0U2hlbGwuZ2V0Q29ubmVjdGlvblBvc2l0aW9uT2Zmc2V0KCk7XHJcbiAgICB0aGlzLm9yaWdpbmFsUm90YXRpb25PZmZzZXQgPSB0aGlzLmNydFNoZWxsLmdldENvbm5lY3Rpb25Sb3RhdGlvbk9mZnNldCgpO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn8J+OrCDlvIDlp4vml4vovazmm7Lnur/ov57mjqXkvY3nva7liqjnlLvmvJTnpLonKTtcclxuICAgIHRoaXMuYW5pbWF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YGc5q2i5L2N572u5Yqo55S75ryU56S6XHJcbiAgICovXHJcbiAgc3RvcFBvc2l0aW9uQW5pbWF0aW9uKCkge1xyXG4gICAgaWYgKCF0aGlzLmlzQW5pbWF0aW5nKSByZXR1cm47XHJcbiAgICBcclxuICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgIGlmICh0aGlzLmFuaW1hdGlvbklkKSB7XHJcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uSWQpO1xyXG4gICAgICB0aGlzLmFuaW1hdGlvbklkID0gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5oGi5aSN5Y6f5aeL5YGP56e76YePXHJcbiAgICB0aGlzLmNydFNoZWxsLnNldENvbm5lY3Rpb25Qb3NpdGlvbk9mZnNldChcclxuICAgICAgdGhpcy5vcmlnaW5hbFBvc2l0aW9uT2Zmc2V0LngsXHJcbiAgICAgIHRoaXMub3JpZ2luYWxQb3NpdGlvbk9mZnNldC55LFxyXG4gICAgICB0aGlzLm9yaWdpbmFsUG9zaXRpb25PZmZzZXQuelxyXG4gICAgKTtcclxuICAgIHRoaXMuY3J0U2hlbGwuc2V0Q29ubmVjdGlvblJvdGF0aW9uT2Zmc2V0KFxyXG4gICAgICB0aGlzLm9yaWdpbmFsUm90YXRpb25PZmZzZXQueCxcclxuICAgICAgdGhpcy5vcmlnaW5hbFJvdGF0aW9uT2Zmc2V0LnksXHJcbiAgICAgIHRoaXMub3JpZ2luYWxSb3RhdGlvbk9mZnNldC56XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn4o+577iPIOWBnOatouaXi+i9rOabsue6v+i/nuaOpeS9jee9ruWKqOeUu+a8lOekuicpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yqo55S75b6q546vXHJcbiAgICovXHJcbiAgYW5pbWF0ZSgpIHtcclxuICAgIGlmICghdGhpcy5pc0FuaW1hdGluZykgcmV0dXJuO1xyXG4gICAgXHJcbiAgICB0aGlzLnRpbWUgKz0gdGhpcy5hbmltYXRpb25TcGVlZDtcclxuICAgIFxyXG4gICAgLy8g6K6h566X5Yqo5oCB5L2N572u5YGP56e7XHJcbiAgICBjb25zdCBwb3NpdGlvbk9mZnNldCA9IHtcclxuICAgICAgeDogdGhpcy5vcmlnaW5hbFBvc2l0aW9uT2Zmc2V0LnggKyBNYXRoLnNpbih0aGlzLnRpbWUpICogMC41LFxyXG4gICAgICB5OiB0aGlzLm9yaWdpbmFsUG9zaXRpb25PZmZzZXQueSArIE1hdGguY29zKHRoaXMudGltZSAqIDAuOCkgKiAwLjMsXHJcbiAgICAgIHo6IHRoaXMub3JpZ2luYWxQb3NpdGlvbk9mZnNldC56ICsgTWF0aC5zaW4odGhpcy50aW1lICogMS4yKSAqIDAuMlxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8g6K6h566X5Yqo5oCB5peL6L2s5YGP56e7XHJcbiAgICBjb25zdCByb3RhdGlvbk9mZnNldCA9IHtcclxuICAgICAgeDogdGhpcy5vcmlnaW5hbFJvdGF0aW9uT2Zmc2V0LnggKyBNYXRoLnNpbih0aGlzLnRpbWUgKiAwLjcpICogMC4yLFxyXG4gICAgICB5OiB0aGlzLm9yaWdpbmFsUm90YXRpb25PZmZzZXQueSArIE1hdGguY29zKHRoaXMudGltZSAqIDAuOSkgKiAwLjE1LFxyXG4gICAgICB6OiB0aGlzLm9yaWdpbmFsUm90YXRpb25PZmZzZXQueiArIE1hdGguc2luKHRoaXMudGltZSAqIDEuMSkgKiAwLjFcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIOW6lOeUqOWBj+enu1xyXG4gICAgdGhpcy5jcnRTaGVsbC5zZXRDb25uZWN0aW9uUG9zaXRpb25PZmZzZXQoXHJcbiAgICAgIHBvc2l0aW9uT2Zmc2V0LngsXHJcbiAgICAgIHBvc2l0aW9uT2Zmc2V0LnksXHJcbiAgICAgIHBvc2l0aW9uT2Zmc2V0LnpcclxuICAgICk7XHJcbiAgICB0aGlzLmNydFNoZWxsLnNldENvbm5lY3Rpb25Sb3RhdGlvbk9mZnNldChcclxuICAgICAgcm90YXRpb25PZmZzZXQueCxcclxuICAgICAgcm90YXRpb25PZmZzZXQueSxcclxuICAgICAgcm90YXRpb25PZmZzZXQuelxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgdGhpcy5hbmltYXRpb25JZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFuaW1hdGUoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmvJTnpLrkuI3lkIznmoTkvY3nva7pooTorr5cclxuICAgKi9cclxuICBkZW1vbnN0cmF0ZVBvc2l0aW9uUHJlc2V0cygpIHtcclxuICAgIGNvbnNvbGUubG9nKCfwn46vIOa8lOekuuaXi+i9rOabsue6v+i/nuaOpeS9jee9rumihOiuvicpO1xyXG4gICAgXHJcbiAgICBjb25zdCBwcmVzZXRzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogJ+m7mOiupOS9jee9ricsXHJcbiAgICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogMCwgejogMCB9LFxyXG4gICAgICAgIHJvdGF0aW9uOiB7IHg6IDAsIHk6IDAsIHo6IDAgfVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogJ+WQkeS4iuWBj+enuycsXHJcbiAgICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogMC41LCB6OiAwIH0sXHJcbiAgICAgICAgcm90YXRpb246IHsgeDogMCwgeTogMCwgejogMCB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiAn5ZCR5Y+z5YGP56e7JyxcclxuICAgICAgICBwb3NpdGlvbjogeyB4OiAwLjUsIHk6IDAsIHo6IDAgfSxcclxuICAgICAgICByb3RhdGlvbjogeyB4OiAwLCB5OiAwLCB6OiAwIH1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6ICflkJHliY3lgY/np7snLFxyXG4gICAgICAgIHBvc2l0aW9uOiB7IHg6IDAsIHk6IDAsIHo6IDAuNSB9LFxyXG4gICAgICAgIHJvdGF0aW9uOiB7IHg6IDAsIHk6IDAsIHo6IDAgfVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogJ+aXi+i9rOWAvuaWnCcsXHJcbiAgICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogMCwgejogMCB9LFxyXG4gICAgICAgIHJvdGF0aW9uOiB7IHg6IDAuMywgeTogMC4yLCB6OiAwLjEgfVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogJ+WkjeWQiOWPmOaNoicsXHJcbiAgICAgICAgcG9zaXRpb246IHsgeDogMC4zLCB5OiAwLjIsIHo6IDAuMSB9LFxyXG4gICAgICAgIHJvdGF0aW9uOiB7IHg6IDAuMiwgeTogMC4zLCB6OiAwLjEgfVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG4gICAgXHJcbiAgICBsZXQgY3VycmVudEluZGV4ID0gMDtcclxuICAgIFxyXG4gICAgY29uc3Qgc3dpdGNoUHJlc2V0ID0gKCkgPT4ge1xyXG4gICAgICBpZiAoY3VycmVudEluZGV4ID49IHByZXNldHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSDkvY3nva7pooTorr7mvJTnpLrlrozmiJAnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHByZXNldCA9IHByZXNldHNbY3VycmVudEluZGV4XTtcclxuICAgICAgY29uc29sZS5sb2coYPCfk40g5YiH5o2i5Yiw6aKE6K6+OiAke3ByZXNldC5uYW1lfWApO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5jcnRTaGVsbC5zZXRDb25uZWN0aW9uUG9zaXRpb25PZmZzZXQoXHJcbiAgICAgICAgcHJlc2V0LnBvc2l0aW9uLngsXHJcbiAgICAgICAgcHJlc2V0LnBvc2l0aW9uLnksXHJcbiAgICAgICAgcHJlc2V0LnBvc2l0aW9uLnpcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5jcnRTaGVsbC5zZXRDb25uZWN0aW9uUm90YXRpb25PZmZzZXQoXHJcbiAgICAgICAgcHJlc2V0LnJvdGF0aW9uLngsXHJcbiAgICAgICAgcHJlc2V0LnJvdGF0aW9uLnksXHJcbiAgICAgICAgcHJlc2V0LnJvdGF0aW9uLnpcclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIGN1cnJlbnRJbmRleCsrO1xyXG4gICAgICBzZXRUaW1lb3V0KHN3aXRjaFByZXNldCwgMjAwMCk7IC8vIOavjzLnp5LliIfmjaLkuIDkuKrpooTorr5cclxuICAgIH07XHJcbiAgICBcclxuICAgIHN3aXRjaFByZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5omL5Yqo6K6+572u6L+e5o6l5L2N572uXHJcbiAgICovXHJcbiAgc2V0Q29ubmVjdGlvblBvc2l0aW9uKHgsIHksIHopIHtcclxuICAgIGNvbnNvbGUubG9nKGDwn46vIOaJi+WKqOiuvue9rui/nuaOpeS9jee9rjogKCR7eH0sICR7eX0sICR7en0pYCk7XHJcbiAgICB0aGlzLmNydFNoZWxsLnNldENvbm5lY3Rpb25Qb3NpdGlvbk9mZnNldCh4LCB5LCB6KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJi+WKqOiuvue9rui/nuaOpeaXi+i9rFxyXG4gICAqL1xyXG4gIHNldENvbm5lY3Rpb25Sb3RhdGlvbih4LCB5LCB6KSB7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+UhCDmiYvliqjorr7nva7ov57mjqXml4vovaw6ICgke3h9LCAke3l9LCAke3p9KSDlvKfluqZgKTtcclxuICAgIHRoaXMuY3J0U2hlbGwuc2V0Q29ubmVjdGlvblJvdGF0aW9uT2Zmc2V0KHgsIHksIHopO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5b2T5YmN6L+e5o6l5Y+Y5o2i5L+h5oGvXHJcbiAgICovXHJcbiAgZ2V0Q29ubmVjdGlvblRyYW5zZm9ybSgpIHtcclxuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5jcnRTaGVsbC5nZXRDb25uZWN0aW9uUG9zaXRpb25PZmZzZXQoKTtcclxuICAgIGNvbnN0IHJvdGF0aW9uID0gdGhpcy5jcnRTaGVsbC5nZXRDb25uZWN0aW9uUm90YXRpb25PZmZzZXQoKTtcclxuICAgIGNvbnN0IGFjdHVhbFBvc2l0aW9uID0gdGhpcy5jcnRTaGVsbC5nZXRDb25uZWN0aW9uUG9zaXRpb24oKTtcclxuICAgIGNvbnN0IGFjdHVhbFJvdGF0aW9uID0gdGhpcy5jcnRTaGVsbC5nZXRDb25uZWN0aW9uUm90YXRpb24oKTtcclxuICAgIFxyXG4gICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgcG9zaXRpb25PZmZzZXQ6IHBvc2l0aW9uLFxyXG4gICAgICByb3RhdGlvbk9mZnNldDogcm90YXRpb24sXHJcbiAgICAgIGFjdHVhbFBvc2l0aW9uOiB7XHJcbiAgICAgICAgeDogYWN0dWFsUG9zaXRpb24ueCxcclxuICAgICAgICB5OiBhY3R1YWxQb3NpdGlvbi55LFxyXG4gICAgICAgIHo6IGFjdHVhbFBvc2l0aW9uLnpcclxuICAgICAgfSxcclxuICAgICAgYWN0dWFsUm90YXRpb246IHtcclxuICAgICAgICB4OiBhY3R1YWxSb3RhdGlvbi54LFxyXG4gICAgICAgIHk6IGFjdHVhbFJvdGF0aW9uLnksXHJcbiAgICAgICAgejogYWN0dWFsUm90YXRpb24uelxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn8J+TiiDlvZPliY3ov57mjqXlj5jmjaLkv6Hmga86JywgaW5mbyk7XHJcbiAgICByZXR1cm4gaW5mbztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmHjee9rui/nuaOpeWIsOm7mOiupOS9jee9rlxyXG4gICAqL1xyXG4gIHJlc2V0Q29ubmVjdGlvblRyYW5zZm9ybSgpIHtcclxuICAgIGNvbnNvbGUubG9nKCfwn5SEIOmHjee9rui/nuaOpeWIsOm7mOiupOS9jee9ricpO1xyXG4gICAgdGhpcy5jcnRTaGVsbC5zZXRDb25uZWN0aW9uUG9zaXRpb25PZmZzZXQoMCwgMCwgMCk7XHJcbiAgICB0aGlzLmNydFNoZWxsLnNldENvbm5lY3Rpb25Sb3RhdGlvbk9mZnNldCgwLCAwLCAwKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIOS9v+eUqOekuuS+i++8iOWcqOa1j+iniOWZqOaOp+WItuWPsOS4re+8ie+8mlxyXG4vKlxyXG4vLyDlgYforr7kvaDlt7Lnu4/mnInkuoYgY3J0U2hlbGwg5a6e5L6LXHJcbmNvbnN0IGRlbW8gPSBuZXcgQ29ubmVjdGlvblBvc2l0aW9uRGVtbyhjcnRTaGVsbCk7XHJcblxyXG4vLyDlvIDlp4vliqjnlLvmvJTnpLpcclxuZGVtby5zdGFydFBvc2l0aW9uQW5pbWF0aW9uKCk7XHJcblxyXG4vLyDlgZzmraLliqjnlLtcclxuZGVtby5zdG9wUG9zaXRpb25BbmltYXRpb24oKTtcclxuXHJcbi8vIOa8lOekuuS9jee9rumihOiuvlxyXG5kZW1vLmRlbW9uc3RyYXRlUG9zaXRpb25QcmVzZXRzKCk7XHJcblxyXG4vLyDmiYvliqjorr7nva7kvY3nva5cclxuZGVtby5zZXRDb25uZWN0aW9uUG9zaXRpb24oMC41LCAwLjMsIDAuMik7XHJcblxyXG4vLyDmiYvliqjorr7nva7ml4vovaxcclxuZGVtby5zZXRDb25uZWN0aW9uUm90YXRpb24oMC4xLCAwLjIsIDAuMSk7XHJcblxyXG4vLyDojrflj5blvZPliY3lj5jmjaLkv6Hmga9cclxuZGVtby5nZXRDb25uZWN0aW9uVHJhbnNmb3JtKCk7XHJcblxyXG4vLyDph43nva7liLDpu5jorqTkvY3nva5cclxuZGVtby5yZXNldENvbm5lY3Rpb25UcmFuc2Zvcm0oKTtcclxuKi9cclxuIiwiLyoqXHJcbiAqIOi2heakreWchuW9oueKtua4kOWPmOa8lOekuuexu1xyXG4gKiDmj5DkvpvlvaLnirbmuJDlj5jnmoTkuqTkupLmjqfliLblkozliqjnlLvmvJTnpLpcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdXBlcmVsbGlwc2VUcmFuc2l0aW9uRGVtbyB7XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICogQHBhcmFtIHtDUlRTaGVsbH0gY3J0U2hlbGwgLSBDUlTlpJblo7Plrp7kvotcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihjcnRTaGVsbCkge1xyXG4gICAgdGhpcy5jcnRTaGVsbCA9IGNydFNoZWxsO1xyXG4gICAgdGhpcy5hbmltYXRpb25JZCA9IG51bGw7XHJcbiAgICB0aGlzLmFuaW1hdGlvblN0YXJ0VGltZSA9IDA7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCfwn46oIOi2heakreWchuW9oueKtua4kOWPmOa8lOekuuW3suWIneWni+WMlicpO1xyXG4gICAgY29uc29sZS5sb2coJ/Cfk5Yg5Y+v55So5pa55rOV77yaJyk7XHJcbiAgICBjb25zb2xlLmxvZygnICDigKIgc3RhcnRNb3JwaEFuaW1hdGlvbigpIC0g5byA5aeL5b2i54q25Y+Y5b2i5Yqo55S7Jyk7XHJcbiAgICBjb25zb2xlLmxvZygnICDigKIgc3RvcE1vcnBoQW5pbWF0aW9uKCkgLSDlgZzmraLliqjnlLsnKTtcclxuICAgIGNvbnNvbGUubG9nKCcgIOKAoiBkZW1vbnN0cmF0ZUV4cG9uZW50cygpIC0g5ryU56S65LiN5ZCM5oyH5pWw5pWI5p6cJyk7XHJcbiAgICBjb25zb2xlLmxvZygnICDigKIgc2V0VHJhbnNpdGlvblBvc2l0aW9uKHgseSx6KSAtIOiuvue9ruS9jee9ricpO1xyXG4gICAgY29uc29sZS5sb2coJyAg4oCiIHNldFRyYW5zaXRpb25FeHBvbmVudHMoc3RhcnQsZW5kKSAtIOiuvue9ruaMh+aVsOiMg+WbtCcpO1xyXG4gICAgY29uc29sZS5sb2coJyAg4oCiIHJlc2V0VHJhbnNpdGlvbigpIC0g6YeN572u5Yiw6buY6K6k54q25oCBJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvIDlp4vlvaLnirblj5jlvaLliqjnlLtcclxuICAgKiDliqjmgIHmlLnlj5jotoXmpK3lnIbmjIfmlbDvvIzlrp7njrDku47lnIblvaLliLDmlrnlvaLnmoTov57nu63lj5jlvaJcclxuICAgKi9cclxuICBzdGFydE1vcnBoQW5pbWF0aW9uKCkge1xyXG4gICAgY29uc29sZS5sb2coJ/Cfjqwg5byA5aeL6LaF5qSt5ZyG5b2i54q25Y+Y5b2i5Yqo55S7Li4uJyk7XHJcbiAgICBcclxuICAgIHRoaXMuc3RvcE1vcnBoQW5pbWF0aW9uKCk7IC8vIOehruS/neayoeaciemHjeWkjeWKqOeUu1xyXG4gICAgdGhpcy5hbmltYXRpb25TdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgXHJcbiAgICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBlbGFwc2VkID0gKERhdGUubm93KCkgLSB0aGlzLmFuaW1hdGlvblN0YXJ0VGltZSkgLyAxMDAwO1xyXG4gICAgICBjb25zdCBwZXJpb2QgPSA2LjA7IC8vIOWKqOeUu+WRqOacn++8iOenku+8iVxyXG4gICAgICBcclxuICAgICAgLy8g5L2/55So5q2j5bym5rOi5Yib5bu65bmz5ruR55qE5oyH5pWw5Y+Y5YyWXHJcbiAgICAgIGNvbnN0IHQgPSAoTWF0aC5zaW4oZWxhcHNlZCAqIDIgKiBNYXRoLlBJIC8gcGVyaW9kKSArIDEpIC8gMjsgLy8gMOWIsDHkuYvpl7RcclxuICAgICAgXHJcbiAgICAgIC8vIOaMh+aVsOiMg+WbtO+8mjIuMO+8iOWchuW9ou+8ieWIsCAxMi4w77yI5bCW6ZSQ5pa55b2i77yJXHJcbiAgICAgIGNvbnN0IHN0YXJ0RXhwb25lbnQgPSAyLjAgKyB0ICogMTAuMDtcclxuICAgICAgY29uc3QgZW5kRXhwb25lbnQgPSAyLjAgKyAoMSAtIHQpICogMTAuMDtcclxuICAgICAgXHJcbiAgICAgIC8vIOabtOaWsOW9oueKtua4kOWPmFxyXG4gICAgICB0aGlzLmNydFNoZWxsLnVwZGF0ZVRyYW5zaXRpb25FeHBvbmVudHMoc3RhcnRFeHBvbmVudCwgZW5kRXhwb25lbnQpO1xyXG4gICAgICBcclxuICAgICAgLy8g5ZCM5pe26LCD5pW05L2N572u5Lqn55Sf5rOi5Yqo5pWI5p6cXHJcbiAgICAgIGNvbnN0IHBvc2l0aW9uV2F2ZSA9IE1hdGguc2luKGVsYXBzZWQgKiA0KSAqIDAuMjtcclxuICAgICAgdGhpcy5jcnRTaGVsbC5zZXRUcmFuc2l0aW9uUG9zaXRpb25PZmZzZXQoMS4yICsgcG9zaXRpb25XYXZlLCAwLCAwKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBhbmltYXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlgZzmraLlvaLnirblj5jlvaLliqjnlLtcclxuICAgKi9cclxuICBzdG9wTW9ycGhBbmltYXRpb24oKSB7XHJcbiAgICBpZiAodGhpcy5hbmltYXRpb25JZCkge1xyXG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbklkKTtcclxuICAgICAgdGhpcy5hbmltYXRpb25JZCA9IG51bGw7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfij7nvuI8g5b2i54q25Y+Y5b2i5Yqo55S75bey5YGc5q2iJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmvJTnpLrkuI3lkIznmoTotoXmpK3lnIbmjIfmlbDmlYjmnpxcclxuICAgKiDoh6rliqjlvqrnjq/lsZXnpLrlkITnp43lvaLnirZcclxuICAgKi9cclxuICBkZW1vbnN0cmF0ZUV4cG9uZW50cygpIHtcclxuICAgIGNvbnNvbGUubG9nKCfwn46vIOa8lOekuui2heakreWchuaMh+aVsOaViOaenC4uLicpO1xyXG4gICAgXHJcbiAgICBjb25zdCBkZW1vbnN0cmF0aW9ucyA9IFtcclxuICAgICAgeyBuYW1lOiAn5qCH5YeG5ZyG5b2iJywgc3RhcnQ6IDIuMCwgZW5kOiAyLjAsIGR1cmF0aW9uOiAyMDAwIH0sXHJcbiAgICAgIHsgbmFtZTogJ+akreWchuW9oicsIHN0YXJ0OiAyLjAsIGVuZDogMi41LCBkdXJhdGlvbjogMjAwMCB9LFxyXG4gICAgICB7IG5hbWU6ICflnIbop5LmlrnlvaInLCBzdGFydDogMi4wLCBlbmQ6IDYuMCwgZHVyYXRpb246IDIwMDAgfSxcclxuICAgICAgeyBuYW1lOiAn5pa55b2iJywgc3RhcnQ6IDIuMCwgZW5kOiA4LjAsIGR1cmF0aW9uOiAyMDAwIH0sXHJcbiAgICAgIHsgbmFtZTogJ+WwlumUkOaWueW9oicsIHN0YXJ0OiAyLjAsIGVuZDogMTIuMCwgZHVyYXRpb246IDIwMDAgfSxcclxuICAgICAgeyBuYW1lOiAn6LaF5bCW6ZSQ5pa55b2iJywgc3RhcnQ6IDIuMCwgZW5kOiAyMC4wLCBkdXJhdGlvbjogMjAwMCB9LFxyXG4gICAgICB7IG5hbWU6ICfmnoHnq6/mlrnlvaInLCBzdGFydDogMi4wLCBlbmQ6IDUwLjAsIGR1cmF0aW9uOiAyMDAwIH1cclxuICAgIF07XHJcbiAgICBcclxuICAgIGxldCBjdXJyZW50SW5kZXggPSAwO1xyXG4gICAgXHJcbiAgICBjb25zdCBzaG93TmV4dCA9ICgpID0+IHtcclxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA+PSBkZW1vbnN0cmF0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygn4pyFIOaMh+aVsOa8lOekuuWujOaIkCcpO1xyXG4gICAgICAgIHRoaXMucmVzZXRUcmFuc2l0aW9uKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBkZW1vID0gZGVtb25zdHJhdGlvbnNbY3VycmVudEluZGV4XTtcclxuICAgICAgY29uc29sZS5sb2coYPCfk5AgJHtkZW1vLm5hbWV9OiDotbflp4vmjIfmlbA9JHtkZW1vLnN0YXJ0fSwg57uT5p2f5oyH5pWwPSR7ZGVtby5lbmR9YCk7XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLmNydFNoZWxsLnVwZGF0ZVRyYW5zaXRpb25FeHBvbmVudHMoZGVtby5zdGFydCwgZGVtby5lbmQpO1xyXG4gICAgICBcclxuICAgICAgY3VycmVudEluZGV4Kys7XHJcbiAgICAgIHNldFRpbWVvdXQoc2hvd05leHQsIGRlbW8uZHVyYXRpb24pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgc2hvd05leHQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruW9oueKtua4kOWPmOS9jee9rlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWOWdkOagh1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWeWdkOaghyAgXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHogLSBa5Z2Q5qCHXHJcbiAgICovXHJcbiAgc2V0VHJhbnNpdGlvblBvc2l0aW9uKHgsIHksIHopIHtcclxuICAgIHRoaXMuY3J0U2hlbGwuc2V0VHJhbnNpdGlvblBvc2l0aW9uKHgsIHksIHopO1xyXG4gICAgY29uc29sZS5sb2coYPCfk40g5b2i54q25riQ5Y+Y5L2N572u6K6+572u5Li6OiAoJHt4LnRvRml4ZWQoMil9LCAke3kudG9GaXhlZCgyKX0sICR7ei50b0ZpeGVkKDIpfSlgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruW9oueKtua4kOWPmOS9jee9ruWBj+enu1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWOi9tOWBj+enu1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWei9tOWBj+enu1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gWui9tOWBj+enu1xyXG4gICAqL1xyXG4gIHNldFRyYW5zaXRpb25Qb3NpdGlvbk9mZnNldCh4LCB5LCB6KSB7XHJcbiAgICB0aGlzLmNydFNoZWxsLnNldFRyYW5zaXRpb25Qb3NpdGlvbk9mZnNldCh4LCB5LCB6KTtcclxuICAgIGNvbnNvbGUubG9nKGDwn5ONIOW9oueKtua4kOWPmOS9jee9ruWBj+enu+iuvue9ruS4ujogKCR7eC50b0ZpeGVkKDIpfSwgJHt5LnRvRml4ZWQoMil9LCAke3oudG9GaXhlZCgyKX0pYCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDorr7nva7lvaLnirbmuJDlj5jml4vovazlgY/np7tcclxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFjovbTml4vovazlgY/np7vvvIjlvKfluqbvvIlcclxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFnovbTml4vovazlgY/np7vvvIjlvKfluqbvvIlcclxuICAgKiBAcGFyYW0ge251bWJlcn0geiAtIFrovbTml4vovazlgY/np7vvvIjlvKfluqbvvIlcclxuICAgKi9cclxuICBzZXRUcmFuc2l0aW9uUm90YXRpb25PZmZzZXQoeCwgeSwgeikge1xyXG4gICAgdGhpcy5jcnRTaGVsbC5zZXRUcmFuc2l0aW9uUm90YXRpb25PZmZzZXQoeCwgeSwgeik7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+UhCDlvaLnirbmuJDlj5jml4vovazlgY/np7vorr7nva7kuLo6ICgke3gudG9GaXhlZCgzKX0sICR7eS50b0ZpeGVkKDMpfSwgJHt6LnRvRml4ZWQoMyl9KSDlvKfluqZgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9rui2heakreWchuaMh+aVsFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydEV4cG9uZW50IC0g6LW35aeL5oyH5pWw77yI5ZyG5b2i77yaMi4w77yJXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZEV4cG9uZW50IC0g57uT5p2f5oyH5pWw77yI5pa55b2i77yaOC4wK++8iVxyXG4gICAqL1xyXG4gIHNldFRyYW5zaXRpb25FeHBvbmVudHMoc3RhcnRFeHBvbmVudCwgZW5kRXhwb25lbnQpIHtcclxuICAgIHRoaXMuY3J0U2hlbGwudXBkYXRlVHJhbnNpdGlvbkV4cG9uZW50cyhzdGFydEV4cG9uZW50LCBlbmRFeHBvbmVudCk7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+TkCDotoXmpK3lnIbmjIfmlbDorr7nva7kuLo6IOi1t+Wniz0ke3N0YXJ0RXhwb25lbnR9LCDnu5PmnZ89JHtlbmRFeHBvbmVudH1gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruW9oueKtua4kOWPmOWPr+ingeaAp1xyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmlzaWJsZSAtIOaYr+WQpuWPr+ingVxyXG4gICAqL1xyXG4gIHNldFRyYW5zaXRpb25WaXNpYmxlKHZpc2libGUpIHtcclxuICAgIHRoaXMuY3J0U2hlbGwuc2V0VHJhbnNpdGlvblZpc2libGUodmlzaWJsZSk7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+Rge+4jyDlvaLnirbmuJDlj5jlj6/op4HmgKc6ICR7dmlzaWJsZSA/ICfmmL7npLonIDogJ+makOiXjyd9YCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDorr7nva7lvaLnirbmuJDlj5jpopzoibJcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sb3IgLSDpopzoibLlgLzvvIjljYHlha3ov5vliLbvvIlcclxuICAgKi9cclxuICBzZXRUcmFuc2l0aW9uQ29sb3IoY29sb3IpIHtcclxuICAgIHRoaXMuY3J0U2hlbGwuc2V0VHJhbnNpdGlvbkNvbG9yKGNvbG9yKTtcclxuICAgIGNvbnNvbGUubG9nKGDwn46oIOW9oueKtua4kOWPmOminOiJsuiuvue9ruS4ujogMHgke2NvbG9yLnRvU3RyaW5nKDE2KX1gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruW9oueKtua4kOWPmOmAj+aYjuW6plxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvcGFjaXR5IC0g6YCP5piO5bqm77yIMC0x77yJXHJcbiAgICovXHJcbiAgc2V0VHJhbnNpdGlvbk9wYWNpdHkob3BhY2l0eSkge1xyXG4gICAgdGhpcy5jcnRTaGVsbC5zZXRUcmFuc2l0aW9uT3BhY2l0eShvcGFjaXR5KTtcclxuICAgIGNvbnNvbGUubG9nKGDwn5SNIOW9oueKtua4kOWPmOmAj+aYjuW6puiuvue9ruS4ujogJHtvcGFjaXR5LnRvRml4ZWQoMil9YCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blvZPliY3lvaLnirbmuJDlj5jnirbmgIHkv6Hmga9cclxuICAgKi9cclxuICBnZXRUcmFuc2l0aW9uSW5mbygpIHtcclxuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5jcnRTaGVsbC5nZXRUcmFuc2l0aW9uUG9zaXRpb24oKTtcclxuICAgIGNvbnN0IHJvdGF0aW9uID0gdGhpcy5jcnRTaGVsbC5nZXRUcmFuc2l0aW9uUm90YXRpb24oKTtcclxuICAgIGNvbnN0IHBvc09mZnNldCA9IHRoaXMuY3J0U2hlbGwuZ2V0VHJhbnNpdGlvblBvc2l0aW9uT2Zmc2V0KCk7XHJcbiAgICBjb25zdCByb3RPZmZzZXQgPSB0aGlzLmNydFNoZWxsLmdldFRyYW5zaXRpb25Sb3RhdGlvbk9mZnNldCgpO1xyXG4gICAgXHJcbiAgICBjb25zdCBpbmZvID0ge1xyXG4gICAgICBwb3NpdGlvbjogeyB4OiBwb3NpdGlvbi54LCB5OiBwb3NpdGlvbi55LCB6OiBwb3NpdGlvbi56IH0sXHJcbiAgICAgIHJvdGF0aW9uOiB7IHg6IHJvdGF0aW9uLngsIHk6IHJvdGF0aW9uLnksIHo6IHJvdGF0aW9uLnogfSxcclxuICAgICAgcG9zaXRpb25PZmZzZXQ6IHBvc09mZnNldCxcclxuICAgICAgcm90YXRpb25PZmZzZXQ6IHJvdE9mZnNldFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ/Cfk4og5b2T5YmN5b2i54q25riQ5Y+Y54q25oCBOicsIGluZm8pO1xyXG4gICAgcmV0dXJuIGluZm87XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDph43nva7lvaLnirbmuJDlj5jliLDpu5jorqTnirbmgIFcclxuICAgKi9cclxuICByZXNldFRyYW5zaXRpb24oKSB7XHJcbiAgICBjb25zb2xlLmxvZygn8J+UhCDph43nva7lvaLnirbmuJDlj5jliLDpu5jorqTnirbmgIEuLi4nKTtcclxuICAgIFxyXG4gICAgLy8g5YGc5q2i5Yqo55S7XHJcbiAgICB0aGlzLnN0b3BNb3JwaEFuaW1hdGlvbigpO1xyXG4gICAgXHJcbiAgICAvLyDph43nva7mjIfmlbBcclxuICAgIHRoaXMuY3J0U2hlbGwudXBkYXRlVHJhbnNpdGlvbkV4cG9uZW50cygyLjAsIDguMCk7XHJcbiAgICBcclxuICAgIC8vIOmHjee9ruS9jee9ruWBj+enu1xyXG4gICAgdGhpcy5jcnRTaGVsbC5zZXRUcmFuc2l0aW9uUG9zaXRpb25PZmZzZXQoMS4yLCAwLCAwKTtcclxuICAgIFxyXG4gICAgLy8g6YeN572u5peL6L2s5YGP56e7XHJcbiAgICB0aGlzLmNydFNoZWxsLnNldFRyYW5zaXRpb25Sb3RhdGlvbk9mZnNldCgwLCAwLCAwKTtcclxuICAgIFxyXG4gICAgLy8g6YeN572u5Y+v6KeB5oCn5ZKM5qC35byPXHJcbiAgICB0aGlzLmNydFNoZWxsLnNldFRyYW5zaXRpb25WaXNpYmxlKHRydWUpO1xyXG4gICAgdGhpcy5jcnRTaGVsbC5zZXRUcmFuc2l0aW9uQ29sb3IoMHg5OWRkZmYpO1xyXG4gICAgdGhpcy5jcnRTaGVsbC5zZXRUcmFuc2l0aW9uT3BhY2l0eSgwLjgpO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn4pyFIOW9oueKtua4kOWPmOW3sumHjee9ricpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5ryU56S65L2N572u5o6n5Yi25Yqf6IO9XHJcbiAgICovXHJcbiAgZGVtb25zdHJhdGVQb3NpdGlvbkNvbnRyb2woKSB7XHJcbiAgICBjb25zb2xlLmxvZygn8J+OryDmvJTnpLrkvY3nva7mjqfliLblip/og70uLi4nKTtcclxuICAgIFxyXG4gICAgY29uc3QgcG9zaXRpb25zID0gW1xyXG4gICAgICB7IG5hbWU6ICfpu5jorqTkvY3nva4nLCBvZmZzZXQ6IHsgeDogMS4yLCB5OiAwLCB6OiAwIH0gfSxcclxuICAgICAgeyBuYW1lOiAn5LiK56e7Jywgb2Zmc2V0OiB7IHg6IDEuMiwgeTogMC41LCB6OiAwIH0gfSxcclxuICAgICAgeyBuYW1lOiAn5LiL56e7Jywgb2Zmc2V0OiB7IHg6IDEuMiwgeTogLTAuNSwgejogMCB9IH0sXHJcbiAgICAgIHsgbmFtZTogJ+WJjeenuycsIG9mZnNldDogeyB4OiAxLjIsIHk6IDAsIHo6IDAuNSB9IH0sXHJcbiAgICAgIHsgbmFtZTogJ+WQjuenuycsIG9mZnNldDogeyB4OiAxLjIsIHk6IDAsIHo6IC0wLjUgfSB9LFxyXG4gICAgICB7IG5hbWU6ICflt6bnp7snLCBvZmZzZXQ6IHsgeDogMC43LCB5OiAwLCB6OiAwIH0gfSxcclxuICAgICAgeyBuYW1lOiAn5Y+z56e7Jywgb2Zmc2V0OiB7IHg6IDEuNywgeTogMCwgejogMCB9IH1cclxuICAgIF07XHJcbiAgICBcclxuICAgIGxldCBjdXJyZW50SW5kZXggPSAwO1xyXG4gICAgXHJcbiAgICBjb25zdCBzaG93TmV4dCA9ICgpID0+IHtcclxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA+PSBwb3NpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSDkvY3nva7mjqfliLbmvJTnpLrlrozmiJAnKTtcclxuICAgICAgICB0aGlzLnJlc2V0VHJhbnNpdGlvbigpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc3QgcG9zID0gcG9zaXRpb25zW2N1cnJlbnRJbmRleF07XHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5ONICR7cG9zLm5hbWV9OiAoJHtwb3Mub2Zmc2V0Lnh9LCAke3Bvcy5vZmZzZXQueX0sICR7cG9zLm9mZnNldC56fSlgKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMuY3J0U2hlbGwuc2V0VHJhbnNpdGlvblBvc2l0aW9uT2Zmc2V0KHBvcy5vZmZzZXQueCwgcG9zLm9mZnNldC55LCBwb3Mub2Zmc2V0LnopO1xyXG4gICAgICBcclxuICAgICAgY3VycmVudEluZGV4Kys7XHJcbiAgICAgIHNldFRpbWVvdXQoc2hvd05leHQsIDE1MDApO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgc2hvd05leHQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW8gOWni+ieuuaXi+S9jee9ruWKqOeUu1xyXG4gICAqL1xyXG4gIHN0YXJ0U3BpcmFsQW5pbWF0aW9uKCkge1xyXG4gICAgY29uc29sZS5sb2coJ/CfjIAg5byA5aeL6J665peL5L2N572u5Yqo55S7Li4uJyk7XHJcbiAgICBcclxuICAgIHRoaXMuc3RvcE1vcnBoQW5pbWF0aW9uKCk7IC8vIOWBnOatouWFtuS7luWKqOeUu1xyXG4gICAgdGhpcy5hbmltYXRpb25TdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgXHJcbiAgICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBlbGFwc2VkID0gKERhdGUubm93KCkgLSB0aGlzLmFuaW1hdGlvblN0YXJ0VGltZSkgLyAxMDAwO1xyXG4gICAgICBjb25zdCBmcmVxdWVuY3kgPSAwLjU7IC8vIOieuuaXi+mikeeOh1xyXG4gICAgICBcclxuICAgICAgLy8g6J665peL5Y+C5pWwXHJcbiAgICAgIGNvbnN0IHJhZGl1cyA9IDAuMztcclxuICAgICAgY29uc3QgYmFzZVggPSAxLjI7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCB4ID0gYmFzZVggKyBNYXRoLmNvcyhlbGFwc2VkICogZnJlcXVlbmN5ICogMiAqIE1hdGguUEkpICogcmFkaXVzO1xyXG4gICAgICBjb25zdCB5ID0gTWF0aC5zaW4oZWxhcHNlZCAqIGZyZXF1ZW5jeSAqIDIgKiBNYXRoLlBJKSAqIHJhZGl1cztcclxuICAgICAgY29uc3QgeiA9IE1hdGguc2luKGVsYXBzZWQgKiBmcmVxdWVuY3kgKiBNYXRoLlBJKSAqIDAuMjtcclxuICAgICAgXHJcbiAgICAgIHRoaXMuY3J0U2hlbGwuc2V0VHJhbnNpdGlvblBvc2l0aW9uT2Zmc2V0KHgsIHksIHopO1xyXG4gICAgICBcclxuICAgICAgLy8g5ZCM5pe25Y+Y5YyW5oyH5pWw5Yib5bu65pu05aSN5p2C55qE5pWI5p6cXHJcbiAgICAgIGNvbnN0IGV4cFdhdmUgPSAoTWF0aC5zaW4oZWxhcHNlZCAqIDIpICsgMSkgLyAyO1xyXG4gICAgICBjb25zdCBzdGFydEV4cCA9IDIuMCArIGV4cFdhdmUgKiA2LjA7XHJcbiAgICAgIGNvbnN0IGVuZEV4cCA9IDguMCAtIGV4cFdhdmUgKiA0LjA7XHJcbiAgICAgIHRoaXMuY3J0U2hlbGwudXBkYXRlVHJhbnNpdGlvbkV4cG9uZW50cyhzdGFydEV4cCwgZW5kRXhwKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBhbmltYXRlKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIGRhdCBmcm9tICdkYXQuZ3VpJztcbmltcG9ydCB7IENPTkZJRywgV0FWRUZPUk1fVFlQRVMgfSBmcm9tICcuLi9jb25maWdMb2FkZXInO1xuXG5leHBvcnQgY2xhc3MgR3VpQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrcyA9IHt9KSB7XG4gICAgLy8g5ZON5bqU5byP5a695bqm6K6h566XIC0g5Z+65LqOMjU2MCoxNDQw5qCH5YeG5ZCR5LiL5YW85a65XG4gICAgdGhpcy5nZXRSZXNwb25zaXZlV2lkdGggPSAoKSA9PiB7XG4gICAgICBjb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgXG4gICAgICAvLyAyS+WIhui+qOeOh+WPiuS7peS4iiAoMjU2MCoxNDQwKylcbiAgICAgIGlmICh3aWR0aCA+PSAyNTYwICYmIGhlaWdodCA+PSAxNDQwKSByZXR1cm4gNDAwO1xuICAgICAgLy8g5qCH5YeGRkhEICgxOTIwKjEwODApXG4gICAgICBpZiAod2lkdGggPj0gMTkyMCAmJiBoZWlnaHQgPj0gMTA4MCkgcmV0dXJuIDM1MDtcbiAgICAgIC8vIOS4reetieWIhui+qOeOhyAoMTM2Nio3NjgsIDE2MDAqOTAwKVxuICAgICAgaWYgKHdpZHRoID49IDEzNjYpIHJldHVybiAzMDA7XG4gICAgICAvLyDlsI/lsY/luZUgKDEwMjQqNzY4KVxuICAgICAgaWYgKHdpZHRoID49IDEwMjQpIHJldHVybiAyNjA7XG4gICAgICAvLyDlubPmnb8gKDc2OHB4LTEwMjNweClcbiAgICAgIGlmICh3aWR0aCA+PSA3NjgpIHJldHVybiAyNDA7XG4gICAgICAvLyDnp7vliqjorr7lpIcgKDwgNzY4cHgpXG4gICAgICByZXR1cm4gMjIwO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5ndWkgPSBuZXcgZGF0LkdVSSh7IHdpZHRoOiB0aGlzLmdldFJlc3BvbnNpdmVXaWR0aCgpIH0pO1xuICAgIHRoaXMuY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICAgIFxuICAgIC8vIOS/neWtmOWbnuiwg+WHveaVsFxuICAgIHRoaXMub25CZWFtQ2hhbmdlID0gY2FsbGJhY2tzLm9uQmVhbUNoYW5nZSB8fCAoKCkgPT4ge30pO1xuICAgIHRoaXMub25EZWZsZWN0aW9uQ2hhbmdlID0gY2FsbGJhY2tzLm9uRGVmbGVjdGlvbkNoYW5nZSB8fCAoKCkgPT4ge30pO1xuICAgIHRoaXMub25XYXZlZm9ybUNoYW5nZSA9IGNhbGxiYWNrcy5vbldhdmVmb3JtQ2hhbmdlIHx8ICgoKSA9PiB7fSk7XG4gICAgdGhpcy5vblNjcmVlbkNoYW5nZSA9IGNhbGxiYWNrcy5vblNjcmVlbkNoYW5nZSB8fCAoKCkgPT4ge30pO1xuICAgIHRoaXMub25TaGVsbENoYW5nZSA9IGNhbGxiYWNrcy5vblNoZWxsQ2hhbmdlIHx8ICgoKSA9PiB7fSk7XG4gICAgXG4gICAgdGhpcy5pbml0R3VpKCk7XG4gICAgdGhpcy5zZXR1cFJlc3BvbnNpdmVIYW5kbGVycygpO1xuICB9XG4gIFxuICBpbml0R3VpKCkge1xuICAgIC8vIOWIm+W7uuWQhOS4quaOp+WItumdouadv1xuICAgIHRoaXMuaW5pdEJlYW1Db250cm9scygpO1xuICAgIHRoaXMuaW5pdERlZmxlY3Rpb25Db250cm9scygpO1xuICAgIHRoaXMuaW5pdFdhdmVmb3JtQ29udHJvbHMoKTtcbiAgICB0aGlzLmluaXRTY3JlZW5Db250cm9scygpO1xuICAgIHRoaXMuaW5pdFNoZWxsQ29udHJvbHMoKTtcbiAgfVxuICBcbiAgaW5pdEJlYW1Db250cm9scygpIHtcbiAgICBjb25zdCBiZWFtRm9sZGVyID0gdGhpcy5ndWkuYWRkRm9sZGVyKCfnlLXlrZDmnZ/lj4LmlbAnKTtcbiAgICBcbiAgICBiZWFtRm9sZGVyLmFkZChDT05GSUcuYmVhbSwgJ2ludGVuc2l0eScsIDAsIDEpXG4gICAgICAubmFtZSgn5by65bqmJylcbiAgICAgIC5vbkNoYW5nZSgoKSA9PiB0aGlzLm9uQmVhbUNoYW5nZShDT05GSUcuYmVhbSkpO1xuICAgICAgXG4gICAgYmVhbUZvbGRlci5hZGRDb2xvcih7IGNvbG9yOiBDT05GSUcuYmVhbS5jb2xvciB9LCAnY29sb3InKVxuICAgICAgLm5hbWUoJ+minOiJsicpXG4gICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgIENPTkZJRy5iZWFtLmNvbG9yID0gdmFsdWU7XG4gICAgICAgIHRoaXMub25CZWFtQ2hhbmdlKENPTkZJRy5iZWFtKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgYmVhbUZvbGRlci5vcGVuKCk7XG4gIH1cbiAgXG4gIGluaXREZWZsZWN0aW9uQ29udHJvbHMoKSB7XG4gICAgY29uc3QgZGVmbGVjdGlvbkZvbGRlciA9IHRoaXMuZ3VpLmFkZEZvbGRlcign5YGP6L2s5p2/5Y+C5pWwJyk7XG4gICAgXG4gICAgZGVmbGVjdGlvbkZvbGRlci5hZGQoQ09ORklHLmRlZmxlY3Rpb24uaG9yaXpvbnRhbCwgJ3ZvbHRhZ2UnLCAtNSwgNSwgMC4xKVxuICAgICAgLm5hbWUoJ+awtOW5s+eUteWOiyAoViknKVxuICAgICAgLm9uQ2hhbmdlKCgpID0+IHRoaXMub25EZWZsZWN0aW9uQ2hhbmdlKENPTkZJRy5kZWZsZWN0aW9uKSk7XG4gICAgICBcbiAgICBkZWZsZWN0aW9uRm9sZGVyLmFkZChDT05GSUcuZGVmbGVjdGlvbi52ZXJ0aWNhbCwgJ3ZvbHRhZ2UnLCAtNSwgNSwgMC4xKVxuICAgICAgLm5hbWUoJ+WeguebtOeUteWOiyAoViknKVxuICAgICAgLm9uQ2hhbmdlKCgpID0+IHRoaXMub25EZWZsZWN0aW9uQ2hhbmdlKENPTkZJRy5kZWZsZWN0aW9uKSk7XG4gICAgICBcbiAgICBkZWZsZWN0aW9uRm9sZGVyLm9wZW4oKTtcbiAgfVxuICBcbiAgaW5pdFdhdmVmb3JtQ29udHJvbHMoKSB7XG4gICAgY29uc3Qgd2F2ZWZvcm1Gb2xkZXIgPSB0aGlzLmd1aS5hZGRGb2xkZXIoJ+azouW9ouWPguaVsCcpO1xuICAgIFxuICAgIC8vIOWIm+W7uuazouW9ouexu+Wei+S4i+aLieiPnOWNlVxuICAgIGNvbnN0IHdhdmVmb3JtT3B0aW9ucyA9IHt9O1xuICAgIE9iamVjdC5lbnRyaWVzKFdBVkVGT1JNX1RZUEVTKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIHdhdmVmb3JtT3B0aW9uc1t2YWx1ZV0gPSBrZXk7XG4gICAgfSk7XG4gICAgXG4gICAgd2F2ZWZvcm1Gb2xkZXIuYWRkKENPTkZJRy53YXZlZm9ybSwgJ2VuYWJsZWQnKVxuICAgICAgLm5hbWUoJ+WQr+eUqOazouW9oicpXG4gICAgICAub25DaGFuZ2UoKCkgPT4gdGhpcy5vbldhdmVmb3JtQ2hhbmdlKENPTkZJRy53YXZlZm9ybSkpO1xuICAgICAgXG4gICAgd2F2ZWZvcm1Gb2xkZXIuYWRkKENPTkZJRy53YXZlZm9ybSwgJ3R5cGUnLCBPYmplY3Qua2V5cyhXQVZFRk9STV9UWVBFUykpXG4gICAgICAubmFtZSgn5rOi5b2i57G75Z6LJylcbiAgICAgIC5vbkNoYW5nZSgoKSA9PiB0aGlzLm9uV2F2ZWZvcm1DaGFuZ2UoQ09ORklHLndhdmVmb3JtKSk7XG4gICAgICBcbiAgICB3YXZlZm9ybUZvbGRlci5hZGQoQ09ORklHLndhdmVmb3JtLCAnZnJlcXVlbmN5JywgMC4xLCA1LCAwLjEpXG4gICAgICAubmFtZSgn6aKR546HIChIeiknKVxuICAgICAgLm9uQ2hhbmdlKCgpID0+IHRoaXMub25XYXZlZm9ybUNoYW5nZShDT05GSUcud2F2ZWZvcm0pKTtcbiAgICAgIFxuICAgIHdhdmVmb3JtRm9sZGVyLmFkZChDT05GSUcud2F2ZWZvcm0sICdhbXBsaXR1ZGUnLCAwLCA1LCAwLjEpXG4gICAgICAubmFtZSgn5oyv5bmFJylcbiAgICAgIC5vbkNoYW5nZSgoKSA9PiB0aGlzLm9uV2F2ZWZvcm1DaGFuZ2UoQ09ORklHLndhdmVmb3JtKSk7XG4gICAgICBcbiAgICB3YXZlZm9ybUZvbGRlci5vcGVuKCk7XG4gIH1cbiAgXG4gIGluaXRTY3JlZW5Db250cm9scygpIHtcbiAgICBjb25zdCBzY3JlZW5Gb2xkZXIgPSB0aGlzLmd1aS5hZGRGb2xkZXIoJ+iNp+WFieWxj+WPguaVsCcpO1xuICAgIFxuICAgIHNjcmVlbkZvbGRlci5hZGQoQ09ORklHLnNjcmVlbiwgJ3BlcnNpc3RlbmNlJywgMCwgMSwgMC4wMSlcbiAgICAgIC5uYW1lKCfkvZnovonmjIHnu60nKVxuICAgICAgLm9uQ2hhbmdlKCgpID0+IHRoaXMub25TY3JlZW5DaGFuZ2UoQ09ORklHLnNjcmVlbikpO1xuICAgICAgXG4gICAgc2NyZWVuRm9sZGVyLmFkZENvbG9yKHsgY29sb3I6IENPTkZJRy5zY3JlZW4uY29sb3IgfSwgJ2NvbG9yJylcbiAgICAgIC5uYW1lKCfojaflhYnpopzoibInKVxuICAgICAgLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICBDT05GSUcuc2NyZWVuLmNvbG9yID0gdmFsdWU7XG4gICAgICAgIHRoaXMub25TY3JlZW5DaGFuZ2UoQ09ORklHLnNjcmVlbik7XG4gICAgICB9KTtcbiAgICAgIFxuICAgIHNjcmVlbkZvbGRlci5hZGQoQ09ORklHLnNjcmVlbiwgJ2ludGVuc2l0eScsIDAsIDEsIDAuMSlcbiAgICAgIC5uYW1lKCflj5HlhYnlvLrluqYnKVxuICAgICAgLm9uQ2hhbmdlKCgpID0+IHRoaXMub25TY3JlZW5DaGFuZ2UoQ09ORklHLnNjcmVlbikpO1xuICAgICAgXG4gICAgc2NyZWVuRm9sZGVyLm9wZW4oKTtcbiAgfVxuICBcbiAgaW5pdFNoZWxsQ29udHJvbHMoKSB7XG4gICAgY29uc3Qgc2hlbGxGb2xkZXIgPSB0aGlzLmd1aS5hZGRGb2xkZXIoJ+WkluWjs+WPguaVsCcpO1xuICAgIFxuICAgIHNoZWxsRm9sZGVyLmFkZChDT05GSUcuc2hlbGwsICd2aXNpYmxlJylcbiAgICAgIC5uYW1lKCfmmL7npLrlpJblo7MnKVxuICAgICAgLm9uQ2hhbmdlKCgpID0+IHRoaXMub25TaGVsbENoYW5nZShDT05GSUcuc2hlbGwpKTtcbiAgICAgIFxuICAgIHNoZWxsRm9sZGVyLmFkZChDT05GSUcuc2hlbGwsICdvcGFjaXR5JywgMCwgMSwgMC4wMSlcbiAgICAgIC5uYW1lKCfpgI/mmI7luqYnKVxuICAgICAgLm9uQ2hhbmdlKCgpID0+IHRoaXMub25TaGVsbENoYW5nZShDT05GSUcuc2hlbGwpKTtcbiAgICAgIFxuICBcbiAgICBzaGVsbEZvbGRlci5vcGVuKCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDorr7nva7lk43lupTlvI/lpITnkIblmahcbiAgICovXG4gIHNldHVwUmVzcG9uc2l2ZUhhbmRsZXJzKCkge1xuICAgIC8vIOmYsuaKluWHveaVsFxuICAgIGxldCByZXNpemVUaW1lb3V0O1xuICAgIGNvbnN0IGRlYm91bmNlID0gKGZ1bmMsIHdhaXQpID0+IHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBleGVjdXRlZEZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHJlc2l6ZVRpbWVvdXQpO1xuICAgICAgICAgIGZ1bmMoLi4uYXJncyk7XG4gICAgICAgIH07XG4gICAgICAgIGNsZWFyVGltZW91dChyZXNpemVUaW1lb3V0KTtcbiAgICAgICAgcmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgfTtcbiAgICB9O1xuICAgIFxuICAgIC8vIOeql+WPo+Wkp+Wwj+aUueWPmOaXtuiwg+aVtEdVSeWuveW6plxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIGNvbnN0IG5ld1dpZHRoID0gdGhpcy5nZXRSZXNwb25zaXZlV2lkdGgoKTtcbiAgICAgIGlmICh0aGlzLmd1aSAmJiB0aGlzLmd1aS5kb21FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZ3VpLndpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgIC8vIOaJi+WKqOabtOaWsEdVSeeahERPTeagt+W8j1xuICAgICAgICBjb25zdCBndWlFbGVtZW50ID0gdGhpcy5ndWkuZG9tRWxlbWVudDtcbiAgICAgICAgaWYgKGd1aUVsZW1lbnQpIHtcbiAgICAgICAgICBndWlFbGVtZW50LnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMjUwKTtcbiAgICBcbiAgICAvLyDnm5HlkKznqpflj6PlpKflsI/lj5jljJZcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICBcbiAgICAvLyDlrZjlgqjmuIXnkIblh73mlbBcbiAgICB0aGlzLmNsZWFudXAgPSAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9XG4gIFxuICAvKipcbiAgICog6ZSA5q+BR1VJ5o6n5Yi25ZmoXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmNsZWFudXApIHtcbiAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5ndWkpIHtcbiAgICAgIHRoaXMuZ3VpLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn0gIiwiaW1wb3J0ICogYXMgZGF0IGZyb20gJ2RhdC5ndWknO1xuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSAnLi4vY29uZmlnTG9hZGVyJztcblxuLyoqXG4gKiBVSeaOp+WItuWZqOexu1xuICog6LSf6LSj566h55CG55WM6Z2i5YWD57Sg5ZKM5Lqk5LqSXG4gKi9cbmV4cG9ydCBjbGFzcyBVSUNvbnRyb2xsZXIge1xuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0g6YCJ6aG5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmNvbXBvbmVudHMgLSDnu4Tku7blr7nosaFcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuY29udHJvbGxlcnMgLSDmjqfliLblmajlr7nosaFcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY29tcG9uZW50cyA9IG9wdGlvbnMuY29tcG9uZW50cyB8fCB7fTtcbiAgICB0aGlzLmNvbnRyb2xsZXJzID0gb3B0aW9ucy5jb250cm9sbGVycyB8fCB7fTtcbiAgICBcbiAgICAvLyDliJvlu7pVSeWuueWZqFxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5jb250YWluZXIuaWQgPSAndWktY29udGFpbmVyJztcbiAgICBcbiAgICAvLyDnoa7kv51ET03lt7LliqDovb1cbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmluaXRpYWxpemVVSSgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVVJKCk7XG4gICAgfVxuICB9XG4gIFxuICAvKipcbiAgICog5Yid5aeL5YyWVUnvvIjlnKhET03liqDovb3lrozmiJDlkI7osIPnlKjvvIlcbiAgICovXG4gIGluaXRpYWxpemVVSSgpIHtcbiAgICBjb25zb2xlLmxvZygn5Yid5aeL5YyWVUkuLi4nKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgICBcbiAgICAvLyDliJ3lp4vljJZVSVxuICAgIHRoaXMuaW5pdFN0eWxlcygpO1xuICAgIHRoaXMuaW5pdFVJKCk7XG4gICAgXG4gICAgLy8g5qOA5p+lY29udHJvbGxlcnPmmK/lkKbmraPnoa7kvKDpgJJcbiAgICBjb25zb2xlLmxvZygn5qOA5p+l5o6n5Yi25ZmoOicsIHtcbiAgICAgIGxhYmVsU3lzdGVtOiAhIXRoaXMuY29udHJvbGxlcnMubGFiZWxTeXN0ZW0sXG4gICAgICBleHBsb2RlZFZpZXc6ICEhdGhpcy5jb250cm9sbGVycy5leHBsb2RlZFZpZXcsXG4gICAgICBkZW1vQW5pbWF0aW9uOiAhIXRoaXMuY29udHJvbGxlcnMuZGVtb0FuaW1hdGlvblxuICAgIH0pO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdVSeaOp+WItuWZqOWIneWni+WMluWujOaIkCcpO1xuICB9XG4gIFxuICAvKipcbiAgICog5Yid5aeL5YyW5qC35byPXG4gICAqL1xuICBpbml0U3R5bGVzKCkge1xuICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IGBcbiAgICAgICN1aS1jb250YWluZXIge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5jb250cm9sLXBhbmVsIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBib3R0b206ICR7Q09ORklHLnVpLmNvbnRyb2xQYW5lbC5wb3NpdGlvbi5ib3R0b219O1xuICAgICAgICByaWdodDogJHtDT05GSUcudWkuY29udHJvbFBhbmVsLnBvc2l0aW9uLnJpZ2h0fTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtDT05GSUcudWkuY29udHJvbFBhbmVsLmJhY2tncm91bmRDb2xvcn07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICR7Q09ORklHLnVpLmNvbnRyb2xQYW5lbC5ib3JkZXJSYWRpdXN9O1xuICAgICAgICBwYWRkaW5nOiAke0NPTkZJRy51aS5jb250cm9sUGFuZWwucGFkZGluZ307XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgZ2FwOiAxMHB4O1xuICAgICAgICB6LWluZGV4OiAke0NPTkZJRy51aS5jb250cm9sUGFuZWwuekluZGV4fTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmNvbnRyb2wtcGFuZWwgYnV0dG9uIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtDT05GSUcudWkuYnV0dG9uLmJhY2tncm91bmRDb2xvcn07XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICBwYWRkaW5nOiAke0NPTkZJRy51aS5idXR0b24ucGFkZGluZ307XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgbWFyZ2luOiAycHg7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJHtDT05GSUcudWkuYnV0dG9uLmJvcmRlclJhZGl1c307XG4gICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmNvbnRyb2wtcGFuZWwgYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtDT05GSUcudWkuYnV0dG9uLmhvdmVyQ29sb3J9O1xuICAgICAgfVxuICAgICAgXG4gICAgICAuY29udHJvbC1wYW5lbCBidXR0b24uYWN0aXZlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtDT05GSUcudWkuYnV0dG9uLmFjdGl2ZUNvbG9yfTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmNvbnRyb2wtcGFuZWwgYnV0dG9uLndhcm5pbmcge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke0NPTkZJRy51aS5idXR0b24ud2FybmluZ0NvbG9yfTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmNvbnRyb2wtcGFuZWwgLmJ1dHRvbi1ncm91cCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgZ2FwOiA1cHg7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5kZW1vLXBhbmVsIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6ICR7Q09ORklHLnVpLmRlbW9QYW5lbC5wb3NpdGlvbi50b3B9O1xuICAgICAgICBsZWZ0OiAke0NPTkZJRy51aS5kZW1vUGFuZWwucG9zaXRpb24ubGVmdH07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Q09ORklHLnVpLmRlbW9QYW5lbC5iYWNrZ3JvdW5kQ29sb3J9O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAke0NPTkZJRy51aS5kZW1vUGFuZWwuYm9yZGVyUmFkaXVzfTtcbiAgICAgICAgcGFkZGluZzogJHtDT05GSUcudWkuZGVtb1BhbmVsLnBhZGRpbmd9O1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgICAgIG1heC13aWR0aDogJHtDT05GSUcudWkuZGVtb1BhbmVsLm1heFdpZHRofTtcbiAgICAgICAgei1pbmRleDogJHtDT05GSUcudWkuZGVtb1BhbmVsLnpJbmRleH07XG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC41cztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmRlbW8tcGFuZWwgaDIge1xuICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5kZW1vLXBhbmVsIHAge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5kZW1vLXBhbmVsIC5wcm9ncmVzcyB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDRweDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzU1NTtcbiAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgfVxuICAgICAgXG4gICAgICAuZGVtby1wYW5lbCAucHJvZ3Jlc3MtYmFyIHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwO1xuICAgICAgICB3aWR0aDogMCU7XG4gICAgICAgIHRyYW5zaXRpb246IHdpZHRoIDAuM3M7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5kZW1vLXBhbmVsIC5zdGVwLWluZm8ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgbWFyZ2luLXRvcDogNXB4O1xuICAgICAgfVxuICAgIGA7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDliJ3lp4vljJZVSVxuICAgKi9cbiAgaW5pdFVJKCkge1xuICAgIHRoaXMuaW5pdENvbnRyb2xQYW5lbCgpO1xuICAgIHRoaXMuaW5pdERlbW9QYW5lbCgpO1xuICB9XG4gIFxuICAvKipcbiAgICog5Yid5aeL5YyW5o6n5Yi26Z2i5p2/XG4gICAqL1xuICBpbml0Q29udHJvbFBhbmVsKCkge1xuICAgIGNvbnNvbGUubG9nKCfliJ3lp4vljJbmjqfliLbpnaLmnb8uLi4nKTtcbiAgICBcbiAgICAvLyDliJvlu7rmjqfliLbpnaLmnb9cbiAgICB0aGlzLmNvbnRyb2xQYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuY29udHJvbFBhbmVsLmNsYXNzTmFtZSA9ICdjb250cm9sLXBhbmVsJztcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRyb2xQYW5lbCk7XG4gICAgXG4gICAgLy8g5qCH562+5o6n5Yi2XG4gICAgY29uc3QgbGFiZWxHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGxhYmVsR3JvdXAuY2xhc3NOYW1lID0gJ2J1dHRvbi1ncm91cCc7XG4gICAgXG4gICAgY29uc3QgbGFiZWxUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGxhYmVsVGl0bGUudGV4dENvbnRlbnQgPSAn5qCH562+5o6n5Yi2JztcbiAgICBsYWJlbFRpdGxlLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICc1cHgnO1xuICAgIGxhYmVsR3JvdXAuYXBwZW5kQ2hpbGQobGFiZWxUaXRsZSk7XG4gICAgXG4gICAgY29uc3QgdG9nZ2xlTGFiZWxzQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgdG9nZ2xlTGFiZWxzQnRuLnRleHRDb250ZW50ID0gJ+aYvuekuuagh+etvic7XG4gICAgdG9nZ2xlTGFiZWxzQnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygn5qCH562+5oyJ6ZKu6KKr54K55Ye7Jyk7XG4gICAgICB0aGlzLnRvZ2dsZUxhYmVscygpO1xuICAgIH07XG4gICAgdG9nZ2xlTGFiZWxzQnRuLmlkID0gJ3RvZ2dsZS1sYWJlbHMtYnRuJztcbiAgICBsYWJlbEdyb3VwLmFwcGVuZENoaWxkKHRvZ2dsZUxhYmVsc0J0bik7XG4gICAgXG4gICAgdGhpcy5jb250cm9sUGFuZWwuYXBwZW5kQ2hpbGQobGFiZWxHcm91cCk7XG4gICAgXG4gICAgLy8g5YiG6Kej6KeG5Zu+5o6n5Yi2XG4gICAgY29uc3QgZXhwbG9kZUdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZXhwbG9kZUdyb3VwLmNsYXNzTmFtZSA9ICdidXR0b24tZ3JvdXAnO1xuICAgIFxuICAgIGNvbnN0IGV4cGxvZGVUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGV4cGxvZGVUaXRsZS50ZXh0Q29udGVudCA9ICfliIbop6Pop4blm74nO1xuICAgIGV4cGxvZGVUaXRsZS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnNXB4JztcbiAgICBleHBsb2RlR3JvdXAuYXBwZW5kQ2hpbGQoZXhwbG9kZVRpdGxlKTtcbiAgICBcbiAgICBjb25zdCB0b2dnbGVFeHBsb2RlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgdG9nZ2xlRXhwbG9kZUJ0bi50ZXh0Q29udGVudCA9ICfliIbop6Pop4blm74nO1xuICAgIHRvZ2dsZUV4cGxvZGVCdG4ub25jbGljayA9ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCfliIbop6Pop4blm77mjInpkq7ooqvngrnlh7snKTtcbiAgICAgIHRoaXMudG9nZ2xlRXhwbG9kZWRWaWV3KCk7XG4gICAgfTtcbiAgICB0b2dnbGVFeHBsb2RlQnRuLmlkID0gJ3RvZ2dsZS1leHBsb2RlLWJ0bic7XG4gICAgZXhwbG9kZUdyb3VwLmFwcGVuZENoaWxkKHRvZ2dsZUV4cGxvZGVCdG4pO1xuICAgIFxuICAgIGNvbnN0IHJlc2V0Vmlld0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHJlc2V0Vmlld0J0bi50ZXh0Q29udGVudCA9ICfph43nva7op4blm74nO1xuICAgIHJlc2V0Vmlld0J0bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ+mHjee9ruinhuWbvuaMiemSruiiq+eCueWHuycpO1xuICAgICAgdGhpcy5yZXNldFZpZXcoKTtcbiAgICB9O1xuICAgIGV4cGxvZGVHcm91cC5hcHBlbmRDaGlsZChyZXNldFZpZXdCdG4pO1xuICAgIFxuICAgIHRoaXMuY29udHJvbFBhbmVsLmFwcGVuZENoaWxkKGV4cGxvZGVHcm91cCk7XG4gICAgXG4gICAgLy8g57uE5Lu26IGa54Sm5o6n5Yi2XG4gICAgY29uc3QgZm9jdXNHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGZvY3VzR3JvdXAuY2xhc3NOYW1lID0gJ2J1dHRvbi1ncm91cCc7XG4gICAgXG4gICAgY29uc3QgZm9jdXNUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGZvY3VzVGl0bGUudGV4dENvbnRlbnQgPSAn6IGa54Sm57uE5Lu2JztcbiAgICBmb2N1c1RpdGxlLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICc1cHgnO1xuICAgIGZvY3VzR3JvdXAuYXBwZW5kQ2hpbGQoZm9jdXNUaXRsZSk7XG4gICAgXG4gICAgLy8g5Li65q+P5Liq5Li76KaB57uE5Lu25Yib5bu66IGa54Sm5oyJ6ZKuXG4gICAgY29uc3QgY29tcG9uZW50cyA9IFtcbiAgICAgIHsga2V5OiAnZ3VuJywgbmFtZTogJ+eUteWtkOaeqicgfSxcbiAgICAgIHsga2V5OiAndjEnLCBuYW1lOiAn5Z6C55u05YGP6L2s5p2/JyB9LFxuICAgICAgeyBrZXk6ICdoMScsIG5hbWU6ICfmsLTlubPlgY/ovazmnb8nIH0sXG4gICAgICB7IGtleTogJ3NjcmVlbicsIG5hbWU6ICfojaflhYnlsY8nIH1cbiAgICBdO1xuICAgIFxuICAgIGNvbXBvbmVudHMuZm9yRWFjaChjb21wID0+IHtcbiAgICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnRuLnRleHRDb250ZW50ID0gY29tcC5uYW1lO1xuICAgICAgYnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfogZrnhKbliLDnu4Tku7Y6JywgY29tcC5rZXkpO1xuICAgICAgICB0aGlzLmZvY3VzQ29tcG9uZW50KGNvbXAua2V5KTtcbiAgICAgIH07XG4gICAgICBmb2N1c0dyb3VwLmFwcGVuZENoaWxkKGJ0bik7XG4gICAgfSk7XG4gICAgXG4gICAgdGhpcy5jb250cm9sUGFuZWwuYXBwZW5kQ2hpbGQoZm9jdXNHcm91cCk7XG4gICAgXG4gICAgLy8g5ryU56S65Yqo55S75o6n5Yi2XG4gICAgY29uc3QgZGVtb0dyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGVtb0dyb3VwLmNsYXNzTmFtZSA9ICdidXR0b24tZ3JvdXAnO1xuICAgIFxuICAgIGNvbnN0IGRlbW9UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRlbW9UaXRsZS50ZXh0Q29udGVudCA9ICflt6XkvZzljp/nkIbmvJTnpLonO1xuICAgIGRlbW9UaXRsZS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnNXB4JztcbiAgICBkZW1vR3JvdXAuYXBwZW5kQ2hpbGQoZGVtb1RpdGxlKTtcbiAgICBcbiAgICBjb25zdCBzdGFydERlbW9CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBzdGFydERlbW9CdG4udGV4dENvbnRlbnQgPSAn5byA5aeL5ryU56S6JztcbiAgICBzdGFydERlbW9CdG4ub25jbGljayA9ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCflvIDlp4vmvJTnpLrmjInpkq7ooqvngrnlh7snKTtcbiAgICAgIHRoaXMuc3RhcnREZW1vQW5pbWF0aW9uKCk7XG4gICAgfTtcbiAgICBzdGFydERlbW9CdG4uaWQgPSAnc3RhcnQtZGVtby1idG4nO1xuICAgIGRlbW9Hcm91cC5hcHBlbmRDaGlsZChzdGFydERlbW9CdG4pO1xuICAgIFxuICAgIGNvbnN0IHN0b3BEZW1vQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgc3RvcERlbW9CdG4udGV4dENvbnRlbnQgPSAn5YGc5q2i5ryU56S6JztcbiAgICBzdG9wRGVtb0J0bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ+WBnOatoua8lOekuuaMiemSruiiq+eCueWHuycpO1xuICAgICAgdGhpcy5zdG9wRGVtb0FuaW1hdGlvbigpO1xuICAgIH07XG4gICAgc3RvcERlbW9CdG4uY2xhc3NOYW1lID0gJ3dhcm5pbmcnO1xuICAgIHN0b3BEZW1vQnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgc3RvcERlbW9CdG4uaWQgPSAnc3RvcC1kZW1vLWJ0bic7XG4gICAgZGVtb0dyb3VwLmFwcGVuZENoaWxkKHN0b3BEZW1vQnRuKTtcbiAgICBcbiAgICB0aGlzLmNvbnRyb2xQYW5lbC5hcHBlbmRDaGlsZChkZW1vR3JvdXApO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfmjqfliLbpnaLmnb/liJ3lp4vljJblrozmiJAnKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIneWni+WMlua8lOekuumdouadv1xuICAgKi9cbiAgaW5pdERlbW9QYW5lbCgpIHtcbiAgICB0aGlzLmRlbW9QYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZGVtb1BhbmVsLmNsYXNzTmFtZSA9ICdkZW1vLXBhbmVsJztcbiAgICB0aGlzLmRlbW9QYW5lbC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIHRoaXMuZGVtb1BhbmVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5kZW1vUGFuZWwpO1xuICAgIFxuICAgIC8vIOagh+mimFxuICAgIHRoaXMuZGVtb1RpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICB0aGlzLmRlbW9QYW5lbC5hcHBlbmRDaGlsZCh0aGlzLmRlbW9UaXRsZSk7XG4gICAgXG4gICAgLy8g5o+P6L+wXG4gICAgdGhpcy5kZW1vRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgdGhpcy5kZW1vUGFuZWwuYXBwZW5kQ2hpbGQodGhpcy5kZW1vRGVzY3JpcHRpb24pO1xuICAgIFxuICAgIC8vIOi/m+W6puadoVxuICAgIGNvbnN0IHByb2dyZXNzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcHJvZ3Jlc3NDb250YWluZXIuY2xhc3NOYW1lID0gJ3Byb2dyZXNzJztcbiAgICB0aGlzLnByb2dyZXNzQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5wcm9ncmVzc0Jhci5jbGFzc05hbWUgPSAncHJvZ3Jlc3MtYmFyJztcbiAgICBwcm9ncmVzc0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnByb2dyZXNzQmFyKTtcbiAgICB0aGlzLmRlbW9QYW5lbC5hcHBlbmRDaGlsZChwcm9ncmVzc0NvbnRhaW5lcik7XG4gICAgXG4gICAgLy8g5q2l6aqk5L+h5oGvXG4gICAgY29uc3Qgc3RlcEluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzdGVwSW5mby5jbGFzc05hbWUgPSAnc3RlcC1pbmZvJztcbiAgICB0aGlzLnN0ZXBDdXJyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMuc3RlcFRvdGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHN0ZXBJbmZvLmFwcGVuZENoaWxkKHRoaXMuc3RlcEN1cnJlbnQpO1xuICAgIHN0ZXBJbmZvLmFwcGVuZENoaWxkKHRoaXMuc3RlcFRvdGFsKTtcbiAgICB0aGlzLmRlbW9QYW5lbC5hcHBlbmRDaGlsZChzdGVwSW5mbyk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDliIfmjaLmoIfnrb7mmL7npLpcbiAgICovXG4gIHRvZ2dsZUxhYmVscygpIHtcbiAgICBjb25zb2xlLmxvZygn5YiH5o2i5qCH562+5pi+56S6JywgdGhpcy5jb250cm9sbGVycy5sYWJlbFN5c3RlbSk7XG4gICAgaWYgKCF0aGlzLmNvbnRyb2xsZXJzLmxhYmVsU3lzdGVtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfmoIfnrb7ns7vnu5/mnKrliJ3lp4vljJYnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgdmlzaWJsZSA9ICF0aGlzLmNvbnRyb2xsZXJzLmxhYmVsU3lzdGVtLnZpc2libGU7XG4gICAgY29uc29sZS5sb2coJ+iuvue9ruagh+etvuWPr+ingeaApzonLCB2aXNpYmxlKTtcbiAgICB0aGlzLmNvbnRyb2xsZXJzLmxhYmVsU3lzdGVtLnNldFZpc2libGUodmlzaWJsZSk7XG4gICAgXG4gICAgLy8g5pu05paw5oyJ6ZKu5paH5pysXG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZ2dsZS1sYWJlbHMtYnRuJyk7XG4gICAgaWYgKGJ0bikge1xuICAgICAgYnRuLnRleHRDb250ZW50ID0gdmlzaWJsZSA/ICfpmpDol4/moIfnrb4nIDogJ+aYvuekuuagh+etvic7XG4gICAgICBidG4uY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJywgdmlzaWJsZSk7XG4gICAgICBjb25zb2xlLmxvZygn5oyJ6ZKu54q25oCB5bey5pu05pawJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+aJvuS4jeWIsOagh+etvuaMiemSricpO1xuICAgIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIh+aNouWIhuino+inhuWbvlxuICAgKi9cbiAgdG9nZ2xlRXhwbG9kZWRWaWV3KCkge1xuICAgIGNvbnNvbGUubG9nKCfliIfmjaLliIbop6Pop4blm74nLCB0aGlzLmNvbnRyb2xsZXJzLmV4cGxvZGVkVmlldyk7XG4gICAgY29uc29sZS5sb2coJ+W9k+WJjWNvbXBvbmVudHM6JywgdGhpcy5jb21wb25lbnRzKTtcbiAgICBjb25zb2xlLmxvZygnY3J0U2hlbGzlrZjlnKg/JywgISF0aGlzLmNvbXBvbmVudHMuY3J0U2hlbGwpO1xuICAgIFxuICAgIGlmICghdGhpcy5jb250cm9sbGVycy5leHBsb2RlZFZpZXcpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBleHBsb2RlZCA9IHRoaXMuY29udHJvbGxlcnMuZXhwbG9kZWRWaWV3LnRvZ2dsZSgpO1xuICAgIGNvbnNvbGUubG9nKCfliIbop6Pop4blm77nirbmgIE6JywgZXhwbG9kZWQpO1xuICAgIFxuICAgIC8vIOWQjOaXtuWIh+aNomN5bGluZGVyMueahOeIhueCuOaViOaenFxuICAgIGlmICh0aGlzLmNvbXBvbmVudHMuY3J0U2hlbGwgJiYgdGhpcy5jb21wb25lbnRzLmNydFNoZWxsLnRvZ2dsZUN5bGluZGVyMkV4cGxvZGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfmraPlnKjosIPnlKhjeWxpbmRlcjLniIbngrjmlYjmnpwuLi4nKTtcbiAgICAgIGNvbnN0IGN5bGluZGVyMkV4cGxvZGVkID0gdGhpcy5jb21wb25lbnRzLmNydFNoZWxsLnRvZ2dsZUN5bGluZGVyMkV4cGxvZGUoZXhwbG9kZWQpO1xuICAgICAgY29uc29sZS5sb2coJ0N5bGluZGVyMueIhueCuOeKtuaAgTonLCBjeWxpbmRlcjJFeHBsb2RlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2Fybign5peg5rOV6LCD55SoY3lsaW5kZXIy54iG54K45pWI5p6cOicsIHtcbiAgICAgICAgY3J0U2hlbGw6ICEhdGhpcy5jb21wb25lbnRzLmNydFNoZWxsLFxuICAgICAgICB0b2dnbGVNZXRob2Q6ICEhKHRoaXMuY29tcG9uZW50cy5jcnRTaGVsbCAmJiB0aGlzLmNvbXBvbmVudHMuY3J0U2hlbGwudG9nZ2xlQ3lsaW5kZXIyRXhwbG9kZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyDlkIzml7bliIfmjaLml4vovazmm7Lnur/ov57mjqXnmoTniIbngrjmlYjmnpxcbiAgICBpZiAodGhpcy5jb21wb25lbnRzLmNydFNoZWxsICYmIHRoaXMuY29tcG9uZW50cy5jcnRTaGVsbC50b2dnbGVDb25uZWN0aW9uRXhwbG9kZSkge1xuICAgICAgY29uc29sZS5sb2coJ+ato+WcqOiwg+eUqOaXi+i9rOabsue6v+i/nuaOpeeIhueCuOaViOaenC4uLicpO1xuICAgICAgY29uc3QgY29ubmVjdGlvbkV4cGxvZGVkID0gdGhpcy5jb21wb25lbnRzLmNydFNoZWxsLnRvZ2dsZUNvbm5lY3Rpb25FeHBsb2RlKGV4cGxvZGVkKTtcbiAgICAgIGNvbnNvbGUubG9nKCfml4vovazmm7Lnur/ov57mjqXniIbngrjnirbmgIE6JywgY29ubmVjdGlvbkV4cGxvZGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKCfml6Dms5XosIPnlKjml4vovazmm7Lnur/ov57mjqXniIbngrjmlYjmnpw6Jywge1xuICAgICAgICBjcnRTaGVsbDogISF0aGlzLmNvbXBvbmVudHMuY3J0U2hlbGwsXG4gICAgICAgIHRvZ2dsZU1ldGhvZDogISEodGhpcy5jb21wb25lbnRzLmNydFNoZWxsICYmIHRoaXMuY29tcG9uZW50cy5jcnRTaGVsbC50b2dnbGVDb25uZWN0aW9uRXhwbG9kZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyDlkIzml7bliIfmjaLotoXmpK3lnIblvaLnirbmuJDlj5jnmoTniIbngrjmlYjmnpxcbiAgICBpZiAodGhpcy5jb21wb25lbnRzLmNydFNoZWxsICYmIHRoaXMuY29tcG9uZW50cy5jcnRTaGVsbC50b2dnbGVTdXBlcmVsbGlwc2VFeHBsb2RlKSB7XG4gICAgICBjb25zb2xlLmxvZygn5q2j5Zyo6LCD55So6LaF5qSt5ZyG5b2i54q25riQ5Y+Y54iG54K45pWI5p6cLi4uJyk7XG4gICAgICBjb25zdCBzdXBlcmVsbGlwc2VFeHBsb2RlZCA9IHRoaXMuY29tcG9uZW50cy5jcnRTaGVsbC50b2dnbGVTdXBlcmVsbGlwc2VFeHBsb2RlKGV4cGxvZGVkKTtcbiAgICAgIGNvbnNvbGUubG9nKCfotoXmpK3lnIblvaLnirbmuJDlj5jniIbngrjnirbmgIE6Jywgc3VwZXJlbGxpcHNlRXhwbG9kZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+aXoOazleiwg+eUqOi2heakreWchuW9oueKtua4kOWPmOeIhueCuOaViOaenDonLCB7XG4gICAgICAgIGNydFNoZWxsOiAhIXRoaXMuY29tcG9uZW50cy5jcnRTaGVsbCxcbiAgICAgICAgdG9nZ2xlTWV0aG9kOiAhISh0aGlzLmNvbXBvbmVudHMuY3J0U2hlbGwgJiYgdGhpcy5jb21wb25lbnRzLmNydFNoZWxsLnRvZ2dsZVN1cGVyZWxsaXBzZUV4cGxvZGUpXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8g5pu05paw5oyJ6ZKu5paH5pysXG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZ2dsZS1leHBsb2RlLWJ0bicpO1xuICAgIGlmIChidG4pIHtcbiAgICAgIGJ0bi50ZXh0Q29udGVudCA9IGV4cGxvZGVkID8gJ+WQiOW5tuinhuWbvicgOiAn5YiG6Kej6KeG5Zu+JztcbiAgICAgIGJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCBleHBsb2RlZCk7XG4gICAgfVxuICB9XG4gIFxuICAvKipcbiAgICog6YeN572u6KeG5Zu+XG4gICAqL1xuICByZXNldFZpZXcoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRyb2xsZXJzLmV4cGxvZGVkVmlldykgcmV0dXJuO1xuICAgIFxuICAgIHRoaXMuY29udHJvbGxlcnMuZXhwbG9kZWRWaWV3LnJlc2V0VmlldyhcbiAgICAgIHRoaXMuY29udHJvbGxlcnMuY2FtZXJhLFxuICAgICAgdGhpcy5jb250cm9sbGVycy5jb250cm9sc1xuICAgICk7XG4gICAgXG4gICAgLy8g6YeN572uY3lsaW5kZXIy54iG54K454q25oCBXG4gICAgaWYgKHRoaXMuY29tcG9uZW50cy5jcnRTaGVsbCAmJiB0aGlzLmNvbXBvbmVudHMuY3J0U2hlbGwudG9nZ2xlQ3lsaW5kZXIyRXhwbG9kZSkge1xuICAgICAgdGhpcy5jb21wb25lbnRzLmNydFNoZWxsLnRvZ2dsZUN5bGluZGVyMkV4cGxvZGUoZmFsc2UpO1xuICAgICAgY29uc29sZS5sb2coJ+mHjee9rkN5bGluZGVyMueIhueCuOeKtuaAgScpO1xuICAgIH1cbiAgICBcbiAgICAvLyDph43nva7ml4vovazmm7Lnur/ov57mjqXniIbngrjnirbmgIFcbiAgICBpZiAodGhpcy5jb21wb25lbnRzLmNydFNoZWxsICYmIHRoaXMuY29tcG9uZW50cy5jcnRTaGVsbC50b2dnbGVDb25uZWN0aW9uRXhwbG9kZSkge1xuICAgICAgdGhpcy5jb21wb25lbnRzLmNydFNoZWxsLnRvZ2dsZUNvbm5lY3Rpb25FeHBsb2RlKGZhbHNlKTtcbiAgICAgIGNvbnNvbGUubG9nKCfph43nva7ml4vovazmm7Lnur/ov57mjqXniIbngrjnirbmgIEnKTtcbiAgICB9XG4gICAgXG4gICAgLy8g6YeN572u6LaF5qSt5ZyG5b2i54q25riQ5Y+Y54iG54K454q25oCBXG4gICAgaWYgKHRoaXMuY29tcG9uZW50cy5jcnRTaGVsbCAmJiB0aGlzLmNvbXBvbmVudHMuY3J0U2hlbGwudG9nZ2xlU3VwZXJlbGxpcHNlRXhwbG9kZSkge1xuICAgICAgdGhpcy5jb21wb25lbnRzLmNydFNoZWxsLnRvZ2dsZVN1cGVyZWxsaXBzZUV4cGxvZGUoZmFsc2UpO1xuICAgICAgY29uc29sZS5sb2coJ+mHjee9rui2heakreWchuW9oueKtua4kOWPmOeIhueCuOeKtuaAgScpO1xuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDliIbop6Pop4blm77mjInpkq7nirbmgIFcbiAgICBjb25zdCBleHBsb2RlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZ2dsZS1leHBsb2RlLWJ0bicpO1xuICAgIGlmIChleHBsb2RlQnRuKSB7XG4gICAgICBleHBsb2RlQnRuLnRleHRDb250ZW50ID0gJ+WIhuino+inhuWbvic7XG4gICAgICBleHBsb2RlQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIOiBmueEpuWIsOe7hOS7tlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50S2V5IC0g57uE5Lu26ZSu5ZCNXG4gICAqL1xuICBmb2N1c0NvbXBvbmVudChjb21wb25lbnRLZXkpIHtcbiAgICBjb25zb2xlLmxvZygnZm9jdXNDb21wb25lbnTooqvosIPnlKjvvIxjb21wb25lbnRLZXk6JywgY29tcG9uZW50S2V5KTtcbiAgICBjb25zb2xlLmxvZygndGhpcy5jb250cm9sbGVyczonLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgICBjb25zb2xlLmxvZygndGhpcy5jb250cm9sbGVycy5leHBsb2RlZFZpZXc6JywgdGhpcy5jb250cm9sbGVycy5leHBsb2RlZFZpZXcpO1xuICAgIGNvbnNvbGUubG9nKCd0aGlzLmNvbnRyb2xsZXJzLmNhbWVyYTonLCB0aGlzLmNvbnRyb2xsZXJzLmNhbWVyYSk7XG4gICAgY29uc29sZS5sb2coJ3RoaXMuY29udHJvbGxlcnMuY29udHJvbHM6JywgdGhpcy5jb250cm9sbGVycy5jb250cm9scyk7XG4gICAgXG4gICAgaWYgKCF0aGlzLmNvbnRyb2xsZXJzLmV4cGxvZGVkVmlldykge1xuICAgICAgY29uc29sZS5lcnJvcignZXhwbG9kZWRWaWV35pyq5Yid5aeL5YyWJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGlmICghdGhpcy5jb250cm9sbGVycy5jYW1lcmEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ2NhbWVyYeacquWIneWni+WMlicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIXRoaXMuY29udHJvbGxlcnMuY29udHJvbHMpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ2NvbnRyb2xz5pyq5Yid5aeL5YyWJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKCflvIDlp4vosIPnlKhleHBsb2RlZFZpZXcuZm9jdXNDb21wb25lbnQnKTtcbiAgICB0aGlzLmNvbnRyb2xsZXJzLmV4cGxvZGVkVmlldy5mb2N1c0NvbXBvbmVudChcbiAgICAgIGNvbXBvbmVudEtleSxcbiAgICAgIHRoaXMuY29udHJvbGxlcnMuY2FtZXJhLFxuICAgICAgdGhpcy5jb250cm9sbGVycy5jb250cm9sc1xuICAgICk7XG4gICAgY29uc29sZS5sb2coJ2V4cGxvZGVkVmlldy5mb2N1c0NvbXBvbmVudOiwg+eUqOWujOaIkCcpO1xuICB9XG4gIFxuICAvKipcbiAgICog5byA5aeL5ryU56S65Yqo55S7XG4gICAqL1xuICBzdGFydERlbW9BbmltYXRpb24oKSB7XG4gICAgY29uc29sZS5sb2coJ3N0YXJ0RGVtb0FuaW1hdGlvbuiiq+iwg+eUqCcpO1xuICAgIGNvbnNvbGUubG9nKCd0aGlzLmNvbnRyb2xsZXJzLmRlbW9BbmltYXRpb246JywgdGhpcy5jb250cm9sbGVycy5kZW1vQW5pbWF0aW9uKTtcbiAgICBcbiAgICBpZiAoIXRoaXMuY29udHJvbGxlcnMuZGVtb0FuaW1hdGlvbikge1xuICAgICAgY29uc29sZS5lcnJvcignZGVtb0FuaW1hdGlvbuacquWIneWni+WMlicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZygn5pi+56S65ryU56S66Z2i5p2/Jyk7XG4gICAgLy8g5pi+56S65ryU56S66Z2i5p2/XG4gICAgdGhpcy5zaG93RGVtb1BhbmVsKCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+iuvue9ruatpemqpOWbnuiwgycpO1xuICAgIC8vIOiuvue9ruatpemqpOWbnuiwg1xuICAgIHRoaXMuY29udHJvbGxlcnMuZGVtb0FuaW1hdGlvbi5vblN0ZXBTdGFydCA9IChzdGVwSW5kZXgsIHN0ZXApID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCfmraXpqqTlm57osIPooqvop6blj5E6Jywgc3RlcEluZGV4LCBzdGVwKTtcbiAgICAgIHRoaXMudXBkYXRlRGVtb1BhbmVsKHN0ZXBJbmRleCwgc3RlcCk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn5byA5aeL5ryU56S6Jyk7XG4gICAgLy8g5byA5aeL5ryU56S6XG4gICAgdGhpcy5jb250cm9sbGVycy5kZW1vQW5pbWF0aW9uLnN0YXJ0KCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+abtOaWsOaMiemSrueKtuaAgScpO1xuICAgIC8vIOabtOaWsOaMiemSrueKtuaAgVxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFydC1kZW1vLWJ0bicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3AtZGVtby1idG4nKS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ3N0YXJ0RGVtb0FuaW1hdGlvbuWujOaIkCcpO1xuICB9XG4gIFxuICAvKipcbiAgICog5YGc5q2i5ryU56S65Yqo55S7XG4gICAqL1xuICBzdG9wRGVtb0FuaW1hdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuY29udHJvbGxlcnMuZGVtb0FuaW1hdGlvbikgcmV0dXJuO1xuICAgIFxuICAgIC8vIOWBnOatoua8lOekulxuICAgIHRoaXMuY29udHJvbGxlcnMuZGVtb0FuaW1hdGlvbi5zdG9wKCk7XG4gICAgXG4gICAgLy8g6ZqQ6JeP5ryU56S66Z2i5p2/XG4gICAgdGhpcy5oaWRlRGVtb1BhbmVsKCk7XG4gICAgXG4gICAgLy8g5pu05paw5oyJ6ZKu54q25oCBXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0LWRlbW8tYnRuJykuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9wLWRlbW8tYnRuJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOaYvuekuua8lOekuumdouadv1xuICAgKi9cbiAgc2hvd0RlbW9QYW5lbCgpIHtcbiAgICB0aGlzLmRlbW9QYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGVtb1BhbmVsLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgfSwgMTApO1xuICB9XG4gIFxuICAvKipcbiAgICog6ZqQ6JeP5ryU56S66Z2i5p2/XG4gICAqL1xuICBoaWRlRGVtb1BhbmVsKCkge1xuICAgIHRoaXMuZGVtb1BhbmVsLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmRlbW9QYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH0sIDUwMCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDmm7TmlrDmvJTnpLrpnaLmnb9cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXBJbmRleCAtIOW9k+WJjeatpemqpOe0ouW8lVxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RlcCAtIOW9k+WJjeatpemqpOWvueixoVxuICAgKi9cbiAgdXBkYXRlRGVtb1BhbmVsKHN0ZXBJbmRleCwgc3RlcCkge1xuICAgIGlmICghdGhpcy5jb250cm9sbGVycy5kZW1vQW5pbWF0aW9uKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgdG90YWxTdGVwcyA9IHRoaXMuY29udHJvbGxlcnMuZGVtb0FuaW1hdGlvbi5hbmltYXRpb25TdGVwcy5sZW5ndGg7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSAoKHN0ZXBJbmRleCArIDEpIC8gdG90YWxTdGVwcykgKiAxMDA7XG4gICAgXG4gICAgLy8g5pu05paw5qCH6aKY5ZKM5o+P6L+wXG4gICAgdGhpcy5kZW1vVGl0bGUudGV4dENvbnRlbnQgPSBzdGVwLnRpdGxlO1xuICAgIHRoaXMuZGVtb0Rlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gc3RlcC5kZXNjcmlwdGlvbjtcbiAgICBcbiAgICAvLyDmm7TmlrDov5vluqbmnaFcbiAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gYCR7cHJvZ3Jlc3N9JWA7XG4gICAgXG4gICAgLy8g5pu05paw5q2l6aqk5L+h5oGvXG4gICAgdGhpcy5zdGVwQ3VycmVudC50ZXh0Q29udGVudCA9IGDmraXpqqQgJHtzdGVwSW5kZXggKyAxfWA7XG4gICAgdGhpcy5zdGVwVG90YWwudGV4dENvbnRlbnQgPSBg5YWxICR7dG90YWxTdGVwc30g5q2lYDtcbiAgICBcbiAgICAvLyDlpoLmnpzmmK/mnIDlkI7kuIDmraXvvIzlh4blpIfnu5PmnZ/mvJTnpLpcbiAgICBpZiAoc3RlcEluZGV4ID09PSB0b3RhbFN0ZXBzIC0gMSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RvcERlbW9BbmltYXRpb24oKTtcbiAgICAgIH0sIHN0ZXAuZHVyYXRpb24pO1xuICAgIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIOiwg+aVtFVJ5aSn5bCPXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIOWuveW6plxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0g6auY5bqmXG4gICAqL1xuICByZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIC8vIOWmguaenOmcgOimgeagueaNrueql+WPo+Wkp+Wwj+iwg+aVtFVJ77yM5Y+v5Lul5Zyo6L+Z6YeM5a6e546wXG4gIH1cbn0iLCIvKipcbiAqIOazouW9oueUn+aIkOWZqOexu1xuICog6LSf6LSj55Sf5oiQ5ZCE56eN5rOi5b2i5bm26K6h566X5YGP6L2s55S15Y6LXG4gKi9cbmV4cG9ydCBjbGFzcyBXYXZlZm9ybUdlbmVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudGltZSA9IDA7XG4gICAgdGhpcy5sYXN0VGltZXN0YW1wID0gMDtcbiAgICB0aGlzLmxhc3RIb3Jpem9udGFsUG9zaXRpb24gPSAwOyAvLyDorrDlvZXkuIrkuIDmrKHnmoTmsLTlubPkvY3nva5cbiAgICB0aGlzLm9uV2F2ZWZvcm1SZXNldCA9IG51bGw7IC8vIOazouW9oumHjee9ruWbnuiwg+WHveaVsFxuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOaXtumXtFxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wIC0g5b2T5YmN5pe26Ze05oizXG4gICAqL1xuICB1cGRhdGUodGltZXN0YW1wKSB7XG4gICAgLy8g5re75Yqg6Ziy5oqk5qOA5p+lXG4gICAgaWYgKHR5cGVvZiB0aW1lc3RhbXAgIT09ICdudW1iZXInIHx8IGlzTmFOKHRpbWVzdGFtcCkpIHtcbiAgICAgIGNvbnNvbGUud2Fybign5rOi5b2i55Sf5oiQ5ZmoIC0g5peg5pWI55qE5pe26Ze05oizOicsIHRpbWVzdGFtcCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIOiuoeeul+aXtumXtOWinumHj++8iOenku+8iVxuICAgIGlmICh0aGlzLmxhc3RUaW1lc3RhbXAgPT09IDApIHtcbiAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgZGVsdGFUaW1lID0gKHRpbWVzdGFtcCAtIHRoaXMubGFzdFRpbWVzdGFtcCkgLyAxMDAwO1xuICAgIFxuICAgIC8vIOmYsuaKpOW8guW4uOeahCBkZWx0YVRpbWVcbiAgICBpZiAoaXNOYU4oZGVsdGFUaW1lKSB8fCBkZWx0YVRpbWUgPCAwIHx8IGRlbHRhVGltZSA+IDEpIHtcbiAgICAgIGNvbnNvbGUud2Fybign5rOi5b2i55Sf5oiQ5ZmoIC0g5byC5bi455qE5pe26Ze05aKe6YePOicsIGRlbHRhVGltZSwgJ+mHjee9ruaXtumXtOaIsycpO1xuICAgICAgdGhpcy5sYXN0VGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLmxhc3RUaW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgXG4gICAgLy8g5pu05paw5YaF6YOo5pe26Ze077yI5Zyo5ryU56S65Yqo55S75pyf6Ze05YeP5oWiNTAl77yJXG4gICAgY29uc3QgdGltZVNjYWxlID0gKHdpbmRvdy5kZW1vQW5pbWF0aW9uICYmIHdpbmRvdy5kZW1vQW5pbWF0aW9uLmlzUGxheWluZykgPyAwLjYgOiAxLjA7XG4gICAgdGhpcy50aW1lICs9IGRlbHRhVGltZSAqIHRpbWVTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlJ/miJDms6LlvaLlgLxcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIOazouW9ouWPguaVsFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIOazouW9ouWAvCAoLTEg5YiwIDEg5LmL6Ze0KVxuICAgKi9cbiAgZ2VuZXJhdGVXYXZlZm9ybShwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtcy5lbmFibGVkKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyB0eXBlLCBmcmVxdWVuY3ksIGFtcGxpdHVkZSwgcGhhc2UgfSA9IHBhcmFtcztcbiAgICBcbiAgICAvLyDmt7vliqDpmLLmiqTmo4Dmn6VcbiAgICBpZiAoaXNOYU4odGhpcy50aW1lKSB8fCBpc05hTihmcmVxdWVuY3kpIHx8IGlzTmFOKGFtcGxpdHVkZSkgfHwgaXNOYU4ocGhhc2UpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfms6LlvaLnlJ/miJDlmaggLSDmo4DmtYvliLAgTmFOIOWPguaVsDonLCB7XG4gICAgICAgIHRpbWU6IHRoaXMudGltZSxcbiAgICAgICAgZnJlcXVlbmN5LFxuICAgICAgICBhbXBsaXR1ZGUsXG4gICAgICAgIHBoYXNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB0ID0gdGhpcy50aW1lICogZnJlcXVlbmN5ICogTWF0aC5QSSAqIDIgKyBwaGFzZTtcbiAgICBcbiAgICAvLyDmo4Dmn6XorqHnrpfnu5PmnpxcbiAgICBpZiAoaXNOYU4odCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+azouW9oueUn+aIkOWZqCAtIOaXtumXtOiuoeeul+e7k+aenOS4uiBOYU46JywgdCk7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgXG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdzaW5lJzpcbiAgICAgICAgcmVzdWx0ID0gTWF0aC5zaW4odCkgKiBhbXBsaXR1ZGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3F1YXJlJzpcbiAgICAgICAgcmVzdWx0ID0gKE1hdGguc2luKHQpID49IDAgPyAxIDogLTEpICogYW1wbGl0dWRlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Nhd3Rvb3RoJzpcbiAgICAgICAgcmVzdWx0ID0gKCgodCAvIChNYXRoLlBJICogMikpICUgMSkgKiAyIC0gMSkgKiBhbXBsaXR1ZGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndHJpYW5nbGUnOlxuICAgICAgICByZXN1bHQgPSAoTWF0aC5hYnMoKCh0IC8gTWF0aC5QSSkgJSAyKSAtIDEpICogMiAtIDEpICogYW1wbGl0dWRlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlc3VsdCA9IDA7XG4gICAgfVxuICAgIFxuICAgIC8vIOacgOe7iOajgOafpee7k+aenFxuICAgIGlmIChpc05hTihyZXN1bHQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfms6LlvaLnlJ/miJDlmaggLSDms6LlvaLorqHnrpfnu5PmnpzkuLogTmFOOicsIHsgdHlwZSwgdCwgYW1wbGl0dWRlLCByZXN1bHQgfSk7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiuoeeul+W9k+WJjeeahOWBj+i9rOeUteWOi1xuICAgKiBAcGFyYW0ge09iamVjdH0gd2F2ZWZvcm1QYXJhbXMgLSDms6LlvaLlj4LmlbBcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlZmxlY3Rpb25QYXJhbXMgLSDlgY/ovazlj4LmlbBcbiAgICogQHJldHVybnMge09iamVjdH0gLSDljIXlkKvmsLTlubPlkozlnoLnm7TlgY/ovaznlLXljovnmoTlr7nosaFcbiAgICovXG4gIGNhbGN1bGF0ZURlZmxlY3Rpb25Wb2x0YWdlKHdhdmVmb3JtUGFyYW1zLCBkZWZsZWN0aW9uUGFyYW1zKSB7XG4gICAgLy8g5Zyo5ryU56S65Yqo55S75pyf6Ze077yM5L2/55So5Zu65a6a55qE5Y6f5aeL55S15Y6L5YC85Lul5L+d5oyB5rOi5b2i5L2N572u5LiN5Y+YXG4gICAgbGV0IGJhc2VIb3Jpem9udGFsLCBiYXNlVmVydGljYWw7XG4gICAgaWYgKHdpbmRvdy5kZW1vQW5pbWF0aW9uICYmIHdpbmRvdy5kZW1vQW5pbWF0aW9uLmlzUGxheWluZyAmJiB3aW5kb3cuZGVtb0FuaW1hdGlvbi5vcmlnaW5hbFZvbHRhZ2VzKSB7XG4gICAgICBiYXNlSG9yaXpvbnRhbCA9IHdpbmRvdy5kZW1vQW5pbWF0aW9uLm9yaWdpbmFsVm9sdGFnZXMuaG9yaXpvbnRhbDtcbiAgICAgIGJhc2VWZXJ0aWNhbCA9IHdpbmRvdy5kZW1vQW5pbWF0aW9uLm9yaWdpbmFsVm9sdGFnZXMudmVydGljYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIOiOt+WPluWfuuehgOeUteWOi+WAvO+8jOa3u+WKoOmYsuaKpFxuICAgICAgYmFzZUhvcml6b250YWwgPSBkZWZsZWN0aW9uUGFyYW1zPy5ob3Jpem9udGFsPy52b2x0YWdlID8/IDA7XG4gICAgICBiYXNlVmVydGljYWwgPSBkZWZsZWN0aW9uUGFyYW1zPy52ZXJ0aWNhbD8udm9sdGFnZSA/PyAwO1xuICAgIH1cbiAgICBcbiAgICAvLyDlpoLmnpzms6LlvaLmnKrlkK/nlKjvvIznm7TmjqXov5Tlm57ln7rnoYDnlLXljotcbiAgICBpZiAoIXdhdmVmb3JtUGFyYW1zLmVuYWJsZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhvcml6b250YWw6IGJhc2VIb3Jpem9udGFsLFxuICAgICAgICB2ZXJ0aWNhbDogYmFzZVZlcnRpY2FsXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvLyDmoLnmja7ms6LlvaLnsbvlnovnlJ/miJDkuI3lkIznmoTmiavmj4/mqKHlvI/vvIzkvb/nlKjlgY/ovaznlLXljovkvZzkuLrluYXluqbosIPliLblm6DlrZBcbiAgICBjb25zdCBzY2FuUGF0dGVybiA9IHRoaXMuZ2VuZXJhdGVTY2FuUGF0dGVybih3YXZlZm9ybVBhcmFtcywgZGVmbGVjdGlvblBhcmFtcyk7XG4gICAgXG4gICAgLy8g55u05o6l6L+U5Zue5rOi5b2i5omr5o+P5qih5byP5Lqn55Sf55qE55S15Y6L5YC877yI5LiN5YaN5LiO5Z+656GA55S15Y6L55u45Yqg77yJXG4gICAgLy8g6L+Z5qC35YGP6L2s55S15Y6L5bCx5o6n5Yi25rOi5b2i5bmF5bqm77yM6ICM5LiN5piv5L2N572u5YGP56e7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvcml6b250YWw6IHNjYW5QYXR0ZXJuLmhvcml6b250YWwsXG4gICAgICB2ZXJ0aWNhbDogc2NhblBhdHRlcm4udmVydGljYWxcbiAgICB9O1xuICB9XG4gIFxuICAvKipcbiAgICog5qC55o2u5rOi5b2i57G75Z6L55Sf5oiQ5omr5o+P5qih5byPXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSDms6LlvaLlj4LmlbBcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlZmxlY3Rpb25QYXJhbXMgLSDlgY/ovazlj4LmlbDvvIznlKjkuo7mjqfliLbms6LlvaLluYXluqZcbiAgICogQHJldHVybnMge09iamVjdH0gLSDljIXlkKvmsLTlubPlkozlnoLnm7TlgY/ovazlgLznmoTlr7nosaFcbiAgICovXG4gIGdlbmVyYXRlU2NhblBhdHRlcm4ocGFyYW1zLCBkZWZsZWN0aW9uUGFyYW1zID0gbnVsbCkge1xuICAgIGNvbnN0IHsgdHlwZSwgZnJlcXVlbmN5LCBhbXBsaXR1ZGUsIHBoYXNlIH0gPSBwYXJhbXM7XG4gICAgXG4gICAgLy8g5re75Yqg6Ziy5oqk5qOA5p+lXG4gICAgaWYgKGlzTmFOKHRoaXMudGltZSkgfHwgaXNOYU4oZnJlcXVlbmN5KSB8fCBpc05hTihhbXBsaXR1ZGUpIHx8IGlzTmFOKHBoYXNlKSkge1xuICAgICAgY29uc29sZS5lcnJvcign5rOi5b2i55Sf5oiQ5ZmoIC0g5qOA5rWL5YiwIE5hTiDlj4LmlbA6Jywge1xuICAgICAgICB0aW1lOiB0aGlzLnRpbWUsXG4gICAgICAgIGZyZXF1ZW5jeSxcbiAgICAgICAgYW1wbGl0dWRlLFxuICAgICAgICBwaGFzZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4geyBob3Jpem9udGFsOiAwLCB2ZXJ0aWNhbDogMCB9O1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB0ID0gdGhpcy50aW1lICogZnJlcXVlbmN5ICogTWF0aC5QSSAqIDIgKyBwaGFzZTtcbiAgICBcbiAgICAvLyDmo4Dmn6XorqHnrpfnu5PmnpxcbiAgICBpZiAoaXNOYU4odCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+azouW9oueUn+aIkOWZqCAtIOaXtumXtOiuoeeul+e7k+aenOS4uiBOYU46JywgdCk7XG4gICAgICByZXR1cm4geyBob3Jpem9udGFsOiAwLCB2ZXJ0aWNhbDogMCB9O1xuICAgIH1cbiAgICBcbiAgICAvLyDojrflj5blgY/ovaznlLXljovkvZzkuLrluYXluqbosIPliLblm6DlrZBcbiAgICAvLyDkvb/nlKjln7rnoYDluYXluqYgKyDlgY/ovaznlLXljovosIPliLbvvIznoa7kv53ljbPkvb/nlLXljovkuLow5Lmf5pyJ5Z+65pys5rOi5b2i5pi+56S6XG4gICAgY29uc3QgYmFzZUFtcGxpdHVkZSA9IGFtcGxpdHVkZSAqIDAuMzsgLy8g5Z+656GA5bmF5bqm77yIMzAl55qE5Y6f5aeL5bmF5bqm77yJXG4gICAgY29uc3QgaG9yaXpvbnRhbFZvbHRhZ2UgPSBkZWZsZWN0aW9uUGFyYW1zPy5ob3Jpem9udGFsPy52b2x0YWdlID8/IDA7XG4gICAgY29uc3QgdmVydGljYWxWb2x0YWdlID0gZGVmbGVjdGlvblBhcmFtcz8udmVydGljYWw/LnZvbHRhZ2UgPz8gMDtcbiAgICBcbiAgICAvLyDluYXluqYgPSDln7rnoYDluYXluqYgKyAo55S15Y6L6LCD5Yi2ICog5Y6f5aeL5bmF5bqmKVxuICAgIGNvbnN0IGhvcml6b250YWxBbXBsaXR1ZGUgPSBiYXNlQW1wbGl0dWRlICsgKE1hdGguYWJzKGhvcml6b250YWxWb2x0YWdlKSAqIGFtcGxpdHVkZSAqIDAuMik7XG4gICAgY29uc3QgdmVydGljYWxBbXBsaXR1ZGUgPSBiYXNlQW1wbGl0dWRlICsgKE1hdGguYWJzKHZlcnRpY2FsVm9sdGFnZSkgKiBhbXBsaXR1ZGUgKiAwLjIpO1xuICAgIFxuICAgIC8vIOa3u+WKoOmYsuaKpOajgOafpVxuICAgIGlmIChpc05hTihob3Jpem9udGFsQW1wbGl0dWRlKSB8fCBpc05hTih2ZXJ0aWNhbEFtcGxpdHVkZSkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+azouW9oueUn+aIkOWZqCAtIOajgOa1i+WIsCBOYU4g5bmF5bqm5Y+C5pWwOicsIHtcbiAgICAgICAgaG9yaXpvbnRhbEFtcGxpdHVkZSxcbiAgICAgICAgdmVydGljYWxBbXBsaXR1ZGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHsgaG9yaXpvbnRhbDogMCwgdmVydGljYWw6IDAgfTtcbiAgICB9XG4gICAgXG4gICAgbGV0IGhvcml6b250YWwgPSAwO1xuICAgIGxldCB2ZXJ0aWNhbCA9IDA7XG4gICAgXG4gICAgLy8g5L2/55So6aKR546H5Y+C5pWw5p2l5o6n5Yi25rOi5b2i5a+G6ZuG56iL5bqmXG4gICAgY29uc3QgZnJlcU11bHRpcGxpZXIgPSBmcmVxdWVuY3kgKiAyOyAvLyDpopHnjoflgI3mlbDvvIznlKjkuo7mjqfliLbms6LlvaLlr4bpm4bluqZcbiAgICBcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3NpbmUnOlxuICAgICAgICAvLyDmraPlvKbms6IgLSDmsLTlubPplK/pvb/miavmj4/vvIjku47lj7PlkJHlt6bvvIkrIOWeguebtOato+W8puazolxuICAgICAgICAvLyDmsLTlubPmiavmj4/nmoTluYXluqbnlLHmsLTlubPlgY/ovaznlLXljovmjqfliLZcbiAgICAgICAgaG9yaXpvbnRhbCA9ICgoMSAtICgodCAvIChNYXRoLlBJICogMikpICUgMSkpICogMiAtIDEpICogTWF0aC5hYnMoaG9yaXpvbnRhbEFtcGxpdHVkZSk7XG4gICAgICAgIC8vIOWeguebtOazouW9oueahOW5heW6pueUseWeguebtOWBj+i9rOeUteWOi+aOp+WItlxuICAgICAgICB2ZXJ0aWNhbCA9IE1hdGguc2luKHQgKiBmcmVxTXVsdGlwbGllcikgKiBNYXRoLmFicyh2ZXJ0aWNhbEFtcGxpdHVkZSkgKiAwLjU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ3NxdWFyZSc6XG4gICAgICAgIC8vIOaWueazoiAtIOawtOW5s+mUr+m9v+aJq+aPj++8iOS7juWPs+WQkeW3pu+8iSsg5Z6C55u05pa55rOiXG4gICAgICAgIGhvcml6b250YWwgPSAoKDEgLSAoKHQgLyAoTWF0aC5QSSAqIDIpKSAlIDEpKSAqIDIgLSAxKSAqIE1hdGguYWJzKGhvcml6b250YWxBbXBsaXR1ZGUpO1xuICAgICAgICB2ZXJ0aWNhbCA9IChNYXRoLnNpbih0ICogZnJlcU11bHRpcGxpZXIpID49IDAgPyAxIDogLTEpICogTWF0aC5hYnModmVydGljYWxBbXBsaXR1ZGUpICogMC41O1xuICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgIC8vIOS4ieinkuazoiAtIOawtOW5s+mUr+m9v+aJq+aPj++8iOS7juWPs+WQkeW3pu+8iSsg5Z6C55u05LiJ6KeS5rOiXG4gICAgICAgIGhvcml6b250YWwgPSAoKDEgLSAoKHQgLyAoTWF0aC5QSSAqIDIpKSAlIDEpKSAqIDIgLSAxKSAqIE1hdGguYWJzKGhvcml6b250YWxBbXBsaXR1ZGUpO1xuICAgICAgICB2ZXJ0aWNhbCA9IChNYXRoLmFicygoKHQgKiBmcmVxTXVsdGlwbGllciAvIE1hdGguUEkpICUgMikgLSAxKSAqIDIgLSAxKSAqIE1hdGguYWJzKHZlcnRpY2FsQW1wbGl0dWRlKSAqIDAuNTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgY2FzZSAnc2F3dG9vdGgnOlxuICAgICAgICAvLyDplK/pvb/ms6IgLSDmsLTlubPplK/pvb/miavmj4/vvIjku47lj7PlkJHlt6bvvIkrIOWeguebtOmUr+m9v+azolxuICAgICAgICBob3Jpem9udGFsID0gKCgxIC0gKCh0IC8gKE1hdGguUEkgKiAyKSkgJSAxKSkgKiAyIC0gMSkgKiBNYXRoLmFicyhob3Jpem9udGFsQW1wbGl0dWRlKTtcbiAgICAgICAgdmVydGljYWwgPSAoKCh0ICogZnJlcU11bHRpcGxpZXIgLyAoTWF0aC5QSSAqIDIpKSAlIDEpICogMiAtIDEpICogTWF0aC5hYnModmVydGljYWxBbXBsaXR1ZGUpICogMC41O1xuICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyDpu5jorqTkuLrnroDljZXnmoTmsLTlubPmiavmj4/vvIjku47lj7PlkJHlt6bvvIlcbiAgICAgICAgaG9yaXpvbnRhbCA9ICgoMSAtICgodCAvIChNYXRoLlBJICogMikpICUgMSkpICogMiAtIDEpICogTWF0aC5hYnMoaG9yaXpvbnRhbEFtcGxpdHVkZSk7XG4gICAgICAgIHZlcnRpY2FsID0gMDtcbiAgICB9XG4gICAgXG4gICAgLy8g5pyA57uI5qOA5p+l57uT5p6cXG4gICAgaWYgKGlzTmFOKGhvcml6b250YWwpIHx8IGlzTmFOKHZlcnRpY2FsKSkge1xuICAgICAgY29uc29sZS5lcnJvcign5rOi5b2i55Sf5oiQ5ZmoIC0g5omr5o+P5qih5byP6K6h566X57uT5p6c5Li6IE5hTjonLCB7IHR5cGUsIHQsIGhvcml6b250YWxBbXBsaXR1ZGUsIHZlcnRpY2FsQW1wbGl0dWRlLCBob3Jpem9udGFsLCB2ZXJ0aWNhbCB9KTtcbiAgICAgIHJldHVybiB7IGhvcml6b250YWw6IDAsIHZlcnRpY2FsOiAwIH07XG4gICAgfVxuICAgIFxuICAgIC8vIOajgOa1i+azouW9oumHjee9ru+8iOawtOW5s+S9jee9ruS7juW3puS+p+i3s+WbnuWPs+S+p++8iVxuICAgIHRoaXMuZGV0ZWN0V2F2ZWZvcm1SZXNldChob3Jpem9udGFsKTtcbiAgICBcbiAgICByZXR1cm4geyBob3Jpem9udGFsLCB2ZXJ0aWNhbCB9O1xuICB9XG5cblxuICAvKipcbiAgICog5qOA5rWL5rOi5b2i6YeN572u77yI5rC05bmz5omr5o+P5LuO5bem56uv6Lez5Zue5Y+z56uv77yJXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SG9yaXpvbnRhbCAtIOW9k+WJjeawtOW5s+S9jee9rlxuICAgKi9cbiAgZGV0ZWN0V2F2ZWZvcm1SZXNldChjdXJyZW50SG9yaXpvbnRhbCkge1xuICAgIC8vIOajgOa1i+S7jui0n+WAvO+8iOW3puS+p++8iei3s+WIsOato+WAvO+8iOWPs+S+p++8ieeahOaDheWGtVxuICAgIC8vIOi/meihqOekuuW8gOWni+S6huaWsOeahOaJq+aPj+WRqOacn++8iOS7juWPs+WQkeW3puaJq+aPj+WujOaIkOWQjui3s+WbnuWPs+S+p+mHjeaWsOW8gOWni++8iVxuICAgIGlmICh0aGlzLmxhc3RIb3Jpem9udGFsUG9zaXRpb24gPCAtMC41ICYmIGN1cnJlbnRIb3Jpem9udGFsID4gMC41KSB7XG4gICAgICAvLyDop6blj5Hms6LlvaLph43nva7lm57osINcbiAgICAgIGlmICh0aGlzLm9uV2F2ZWZvcm1SZXNldCkge1xuICAgICAgICB0aGlzLm9uV2F2ZWZvcm1SZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDkuIrkuIDmrKHnmoTmsLTlubPkvY3nva5cbiAgICB0aGlzLmxhc3RIb3Jpem9udGFsUG9zaXRpb24gPSBjdXJyZW50SG9yaXpvbnRhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva7ms6LlvaLph43nva7lm57osIPlh73mlbBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSDlm57osIPlh73mlbBcbiAgICovXG4gIHNldFdhdmVmb3JtUmVzZXRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHRoaXMub25XYXZlZm9ybVJlc2V0ID0gY2FsbGJhY2s7XG4gIH1cblxuICAvKipcbiAgICog6YeN572u5pe26Ze05ZKM5pe26Ze05oizXG4gICAqIOWcqOazouW9ouexu+Wei+WIh+aNouaXtuiwg+eUqO+8jOehruS/neaWsOazouW9ouS7juW5suWHgOeahOeKtuaAgeW8gOWni1xuICAgKi9cbiAgcmVzZXRUaW1lKCkge1xuICAgIHRoaXMudGltZSA9IDA7XG4gICAgdGhpcy5sYXN0VGltZXN0YW1wID0gMDtcbiAgICB0aGlzLmxhc3RIb3Jpem9udGFsUG9zaXRpb24gPSAwO1xuICAgIGNvbnNvbGUubG9nKCfms6LlvaLnlJ/miJDlmajml7bpl7Tlt7Lph43nva4nKTtcbiAgfVxufSAiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuLi9jb25maWdMb2FkZXInO1xuXG4vKipcbiAqIOeUteWtkOadn+exu1xuICog6LSf6LSj5aSE55CG55S15a2Q5p2f55qE6Lev5b6E5ZKM5pi+56S6XG4gKi9cbmV4cG9ydCBjbGFzcyBFbGVjdHJvbkJlYW0ge1xuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqIEBwYXJhbSB7VEhSRUUuU2NlbmV9IHNjZW5lIC0gVGhyZWUuanPlnLrmma9cbiAgICovXG4gIGNvbnN0cnVjdG9yKHNjZW5lKSB7XG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgIHRoaXMuYmVhbUxpbmUgPSBudWxsO1xuICAgIHRoaXMuZ2xvd0xpbmUgPSBudWxsO1xuICAgIHRoaXMucGFydGljbGVTeXN0ZW0gPSBudWxsO1xuICAgIHRoaXMuYmVhbVBvaW50cyA9IFtdO1xuICAgIHRoaXMudHJhY2VQb2ludHMgPSBbXTtcbiAgICB0aGlzLnRyYWNlTGluZXMgPSBbXTtcbiAgICB0aGlzLnRyYWNlU2VnbWVudHMgPSBbXTsgLy8g5a2Y5YKo6L2o6L+55q6177yM6YG/5YWN5Zue5omr57q/XG4gICAgXG4gICAgLy8g55S15a2Q5p2f5p2Q6LSoXG4gICAgdGhpcy5iZWFtTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xuICAgICAgY29sb3I6IENPTkZJRy5iZWFtLmNvbG9yLFxuICAgICAgb3BhY2l0eTogQ09ORklHLmJlYW0uaW50ZW5zaXR5LFxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWVcbiAgICB9KTtcbiAgICBcbiAgICAvLyDovajov7nmnZDotKjvvIjmt6HkuIDkupvvvIlcbiAgICB0aGlzLnRyYWNlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xuICAgICAgY29sb3I6IENPTkZJRy5iZWFtLmNvbG9yLFxuICAgICAgb3BhY2l0eTogQ09ORklHLmVsZWN0cm9uQmVhbS50cmFjZS5vcGFjaXR5LFxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWVcbiAgICB9KTtcbiAgICBcbiAgICAvLyDliJ3lp4vljJbnlLXlrZDmnZ9cbiAgICB0aGlzLmluaXRCZWFtKCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDliJ3lp4vljJbnlLXlrZDmnZ9cbiAgICovXG4gIGluaXRCZWFtKCkge1xuICAgIC8vIOm7mOiupOeUteWtkOadn+i3r+W+hOeCuVxuICAgIHRoaXMuYmVhbVBvaW50cyA9IENPTkZJRy5lbGVjdHJvbkJlYW0ucGF0aFBvaW50cy5tYXAocG9pbnQgPT4gXG4gICAgICBuZXcgVEhSRUUuVmVjdG9yMyhwb2ludC54LCBwb2ludC55LCBwb2ludC56KVxuICAgICk7XG4gICAgXG4gICAgLy8g5Yib5bu65aKe5by655qE55S15a2Q5p2f5p2Q6LSoXG4gICAgdGhpcy5jcmVhdGVFbmhhbmNlZEJlYW1NYXRlcmlhbCgpO1xuICAgIFxuICAgIC8vIOWIm+W7uueUteWtkOadn+WHoOS9leS9k+WSjOe6v+adoVxuICAgIGNvbnN0IGJlYW1HZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHModGhpcy5iZWFtUG9pbnRzKTtcbiAgICB0aGlzLmJlYW1MaW5lID0gbmV3IFRIUkVFLkxpbmUoYmVhbUdlb21ldHJ5LCB0aGlzLmJlYW1NYXRlcmlhbCk7XG4gICAgXG4gICAgLy8g6K6+572u5riy5p+T6aG65bqP77yM56Gu5L+d55S15a2Q5p2f5Zyo6YCP5piO5p6B5p2/5LmL5ZCO5riy5p+TXG4gICAgdGhpcy5iZWFtTGluZS5yZW5kZXJPcmRlciA9IDU7XG4gICAgXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5iZWFtTGluZSk7XG4gIH1cblxuICAvKipcbiAgICog5Yib5bu65aKe5by655qE55S15a2Q5p2f5p2Q6LSo77yM5YyF5ZCr5Y+R5YWJ5pWI5p6cXG4gICAqL1xuICBjcmVhdGVFbmhhbmNlZEJlYW1NYXRlcmlhbCgpIHtcbiAgICAvLyDkuLvnlLXlrZDmnZ/mnZDotKjvvIjmm7Tkuq7mm7TpspzoibPvvIktIOS8mOWMlumAj+aYjuW6pua4suafk1xuICAgIHRoaXMuYmVhbU1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtcbiAgICAgIGNvbG9yOiBDT05GSUcuYmVhbS5jb2xvcixcbiAgICAgIG9wYWNpdHk6IENPTkZJRy5iZWFtLmludGVuc2l0eSxcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgbGluZXdpZHRoOiAzLCAvLyDlop7liqDnur/lrr1cbiAgICAgIGRlcHRoVGVzdDogZmFsc2UsIC8vIOemgeeUqOa3seW6pua1i+ivle+8jOehruS/neeUteWtkOadn+aAu+aYr+WPr+ingVxuICAgICAgZGVwdGhXcml0ZTogZmFsc2UgLy8g56aB55So5rex5bqm5YaZ5YWlXG4gICAgfSk7XG4gICAgXG4gICAgLy8g5Yib5bu65Y+R5YWJ5aSW5Zu05p2Q6LSoXG4gICAgdGhpcy5nbG93TWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xuICAgICAgY29sb3I6IENPTkZJRy5iZWFtLmNvbG9yLFxuICAgICAgb3BhY2l0eTogQ09ORklHLmJlYW0uaW50ZW5zaXR5ICogMC4zLFxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICBsaW5ld2lkdGg6IDgsIC8vIOabtOWuveeahOWPkeWFieaViOaenFxuICAgICAgZGVwdGhUZXN0OiBmYWxzZSwgLy8g56aB55So5rex5bqm5rWL6K+VXG4gICAgICBkZXB0aFdyaXRlOiBmYWxzZSAvLyDnpoHnlKjmt7HluqblhpnlhaVcbiAgICB9KTtcbiAgICBcbiAgICAvLyDovajov7nmnZDotKggLSDkvJjljJbpgI/mmI7luqbmuLLmn5NcbiAgICB0aGlzLnRyYWNlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xuICAgICAgY29sb3I6IENPTkZJRy5iZWFtLmNvbG9yLFxuICAgICAgb3BhY2l0eTogQ09ORklHLmVsZWN0cm9uQmVhbS50cmFjZS5vcGFjaXR5LFxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICBkZXB0aFRlc3Q6IGZhbHNlLCAvLyDnpoHnlKjmt7HluqbmtYvor5XvvIznoa7kv53ovajov7nlj6/op4FcbiAgICAgIGRlcHRoV3JpdGU6IGZhbHNlIC8vIOemgeeUqOa3seW6puWGmeWFpVxuICAgIH0pO1xuICB9XG4gIFxuICAvKipcbiAgICog5pu05paw55S15a2Q5p2f6Lev5b6EXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZWZsZWN0aW9uUGFyYW1zIC0g5YGP6L2s5Y+C5pWw5a+56LGhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZWZsZWN0aW9uUGFyYW1zLnZlcnRpY2FsIC0g5Z6C55u05YGP6L2s5Y+C5pWwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWZsZWN0aW9uUGFyYW1zLnZlcnRpY2FsLnZvbHRhZ2UgLSDlnoLnm7TlgY/ovaznlLXljotcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlZmxlY3Rpb25QYXJhbXMuaG9yaXpvbnRhbCAtIOawtOW5s+WBj+i9rOWPguaVsFxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVmbGVjdGlvblBhcmFtcy5ob3Jpem9udGFsLnZvbHRhZ2UgLSDmsLTlubPlgY/ovaznlLXljotcbiAgICovXG4gIHVwZGF0ZUJlYW1QYXRoKGRlZmxlY3Rpb25QYXJhbXMpIHtcbiAgICAvLyDorqHnrpflgY/ovazph4/vvIzmt7vliqDpmLLmiqRcbiAgICBjb25zdCB2b2x0YWdlU2NhbGluZ0ZhY3RvciA9IENPTkZJRy5lbGVjdHJvbkJlYW0udm9sdGFnZVNjYWxpbmdGYWN0b3I7XG4gICAgY29uc3QgdmVydGljYWxWb2x0YWdlID0gZGVmbGVjdGlvblBhcmFtcz8udmVydGljYWw/LnZvbHRhZ2UgPz8gMDtcbiAgICBjb25zdCBob3Jpem9udGFsVm9sdGFnZSA9IGRlZmxlY3Rpb25QYXJhbXM/Lmhvcml6b250YWw/LnZvbHRhZ2UgPz8gMDtcbiAgICBcbiAgICAvLyDmo4Dmn6XmmK/lkKbmnIkgTmFOIOWAvFxuICAgIGlmIChpc05hTih2ZXJ0aWNhbFZvbHRhZ2UpIHx8IGlzTmFOKGhvcml6b250YWxWb2x0YWdlKSkge1xuICAgICAgY29uc29sZS5lcnJvcign55S15a2Q5p2f6ZSZ6K+vIC0g5qOA5rWL5YiwIE5hTiDlgLw6JywgeyB2ZXJ0aWNhbFZvbHRhZ2UsIGhvcml6b250YWxWb2x0YWdlIH0pO1xuICAgICAgcmV0dXJuOyAvLyDnm7TmjqXov5Tlm57vvIzpgb/lhY3lkI7nu63orqHnrpfplJnor69cbiAgICB9XG4gICAgXG4gICAgY29uc3QgdmVydGljYWxEZWZsZWN0aW9uID0gdmVydGljYWxWb2x0YWdlICogKENPTkZJRy5kZWZsZWN0aW9uLnZlcnRpY2FsLm1heERlZmxlY3Rpb24gLyB2b2x0YWdlU2NhbGluZ0ZhY3Rvcik7XG4gICAgY29uc3QgaG9yaXpvbnRhbERlZmxlY3Rpb24gPSBob3Jpem9udGFsVm9sdGFnZSAqIChDT05GSUcuZGVmbGVjdGlvbi5ob3Jpem9udGFsLm1heERlZmxlY3Rpb24gLyB2b2x0YWdlU2NhbGluZ0ZhY3Rvcik7XG4gICAgXG4gICAgLy8g55Sf5oiQ566A5Y2V55qE55u057q/55S15a2Q5p2f6L2o6L+5XG4gICAgdGhpcy5iZWFtUG9pbnRzID0gdGhpcy5nZW5lcmF0ZVNpbXBsZUJlYW1QYXRoKHZlcnRpY2FsRGVmbGVjdGlvbiwgaG9yaXpvbnRhbERlZmxlY3Rpb24pO1xuICAgIFxuICAgIC8vIOabtOaWsOWHoOS9leS9k1xuICAgIGNvbnN0IGJlYW1HZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHModGhpcy5iZWFtUG9pbnRzKTtcbiAgICBcbiAgICAvLyDmuIXpmaTml6fnmoTnlLXlrZDmnZ9cbiAgICB0aGlzLmNsZWFyQmVhbUxpbmVzKCk7XG4gICAgXG4gICAgLy8g5Yib5bu65aSa5bGC55S15a2Q5p2f5pWI5p6cXG4gICAgdGhpcy5jcmVhdGVMYXllcmVkQmVhbShiZWFtR2VvbWV0cnkpO1xuICAgIFxuICAgIC8vIOWPr+mAie+8muWIm+W7uueykuWtkOaViOaenO+8iOWcqOmFjee9ruS4reWQr+eUqOaXtu+8iVxuICAgIGlmIChDT05GSUcuZWxlY3Ryb25CZWFtLmVuYWJsZVBhcnRpY2xlRWZmZWN0KSB7XG4gICAgICB0aGlzLmNyZWF0ZVBhcnRpY2xlQmVhbSh0aGlzLmJlYW1Qb2ludHMpO1xuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDmnZDotKjpopzoibLlkozlvLrluqZcbiAgICB0aGlzLnVwZGF0ZUJlYW1NYXRlcmlhbHMoKTtcbiAgICBcbiAgICAvLyDorrDlvZXovajov7nngrnvvIjlj6rorrDlvZXmiZPlnKjojaflhYnlsY/kuIrnmoTngrnvvIlcbiAgICBjb25zdCBsYXN0QmVhbVBvaW50ID0gdGhpcy5iZWFtUG9pbnRzW3RoaXMuYmVhbVBvaW50cy5sZW5ndGggLSAxXTtcbiAgICB0aGlzLmFkZFRyYWNlUG9pbnQobGFzdEJlYW1Qb2ludC5jbG9uZSgpKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOeUn+aIkOecn+WunueahOeUteWtkOadn+i9qOi/ue+8iOiAg+iZkeeJqeeQhuWBj+i9rOaViOaenO+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0gdmVydGljYWxEZWZsZWN0aW9uIC0g5Z6C55u05YGP6L2s6YePXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBob3Jpem9udGFsRGVmbGVjdGlvbiAtIOawtOW5s+WBj+i9rOmHj1xuICAgKiBAcmV0dXJucyB7QXJyYXk8VEhSRUUuVmVjdG9yMz59IOi9qOi/ueeCueaVsOe7hFxuICAgKi9cbiAgZ2VuZXJhdGVTaW1wbGVCZWFtUGF0aCh2ZXJ0aWNhbERlZmxlY3Rpb24sIGhvcml6b250YWxEZWZsZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVSZWFsaXN0aWNCZWFtUGF0aCh2ZXJ0aWNhbERlZmxlY3Rpb24sIGhvcml6b250YWxEZWZsZWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlJ/miJDnnJ/lrp7nmoTnlLXlrZDmnZ/ovajov7nvvIzmqKHmi5/niannkIblgY/ovazmlYjmnpxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZlcnRpY2FsRGVmbGVjdGlvbiAtIOWeguebtOWBj+i9rOmHj1xuICAgKiBAcGFyYW0ge251bWJlcn0gaG9yaXpvbnRhbERlZmxlY3Rpb24gLSDmsLTlubPlgY/ovazph49cbiAgICogQHJldHVybnMge0FycmF5PFRIUkVFLlZlY3RvcjM+fSDovajov7nngrnmlbDnu4RcbiAgICovXG4gIGdlbmVyYXRlUmVhbGlzdGljQmVhbVBhdGgodmVydGljYWxEZWZsZWN0aW9uLCBob3Jpem9udGFsRGVmbGVjdGlvbikge1xuICAgIGNvbnN0IHRyYWplY3RvcnlQb2ludHMgPSBbXTtcbiAgICBjb25zdCB0b3RhbFNlZ21lbnRzID0gMTAwOyAvLyDlop7liqDmrrXmlbDku6Xojrflvpfmm7TlubPmu5HnmoTmm7Lnur/vvIznibnliKvmmK/lr7nmlrnms6JcbiAgICBcbiAgICAvLyDku47phY3nva7mlofku7bojrflj5blhbPplK7kvY3nva7ngrlcbiAgICBjb25zdCBlbGVjdHJvbkd1biA9IG5ldyBUSFJFRS5WZWN0b3IzKFxuICAgICAgQ09ORklHLmVsZWN0cm9uQmVhbS5zdGFydFBvaW50LngsIFxuICAgICAgQ09ORklHLmVsZWN0cm9uQmVhbS5zdGFydFBvaW50LnksIFxuICAgICAgQ09ORklHLmVsZWN0cm9uQmVhbS5zdGFydFBvaW50LnpcbiAgICApO1xuICAgIGNvbnN0IHNjcmVlblBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoXG4gICAgICBDT05GSUcuZWxlY3Ryb25CZWFtLmVuZFBvaW50LngsIFxuICAgICAgQ09ORklHLmVsZWN0cm9uQmVhbS5lbmRQb2ludC55LCBcbiAgICAgIENPTkZJRy5lbGVjdHJvbkJlYW0uZW5kUG9pbnQuelxuICAgICk7XG4gICAgXG4gICAgLy8g5LuO6YWN572u5paH5Lu26I635Y+W5YGP6L2s5p2/5L2N572uXG4gICAgY29uc3QgcGxhdGVQb3NpdGlvbnMgPSBDT05GSUcuZWxlY3Ryb25CZWFtLnBoeXNpY3MucGxhdGVQb3NpdGlvbnM7XG4gICAgY29uc3QgdmVydGljYWxQbGF0ZVN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjMocGxhdGVQb3NpdGlvbnMudmVydGljYWxQbGF0ZVN0YXJ0LCAwLCAwKTtcbiAgICBjb25zdCB2ZXJ0aWNhbFBsYXRlRW5kID0gbmV3IFRIUkVFLlZlY3RvcjMocGxhdGVQb3NpdGlvbnMudmVydGljYWxQbGF0ZUVuZCwgMCwgMCk7XG4gICAgY29uc3QgaG9yaXpvbnRhbFBsYXRlU3RhcnQgPSBuZXcgVEhSRUUuVmVjdG9yMyhwbGF0ZVBvc2l0aW9ucy5ob3Jpem9udGFsUGxhdGVTdGFydCwgMCwgMCk7XG4gICAgY29uc3QgaG9yaXpvbnRhbFBsYXRlRW5kID0gbmV3IFRIUkVFLlZlY3RvcjMocGxhdGVQb3NpdGlvbnMuaG9yaXpvbnRhbFBsYXRlRW5kLCAwLCAwKTtcbiAgICBcbiAgICAvLyDku47phY3nva7mlofku7bojrflj5bniannkIblj4LmlbBcbiAgICBjb25zdCBlbGVjdHJvblZlbG9jaXR5ID0gQ09ORklHLmVsZWN0cm9uQmVhbS5waHlzaWNzLmVsZWN0cm9uVmVsb2NpdHk7XG4gICAgY29uc3QgZWxlY3RyaWNGaWVsZFN0cmVuZ3RoID0gQ09ORklHLmVsZWN0cm9uQmVhbS5waHlzaWNzLmVsZWN0cmljRmllbGRTdHJlbmd0aDtcbiAgICBcbiAgICAvLyDlvZPliY3kvY3nva7lkozpgJ/luqZcbiAgICBsZXQgY3VycmVudFBvcyA9IGVsZWN0cm9uR3VuLmNsb25lKCk7XG4gICAgbGV0IHZlbG9jaXR5ID0gbmV3IFRIUkVFLlZlY3RvcjMoZWxlY3Ryb25WZWxvY2l0eSwgMCwgMCk7IC8vIOWIneWni+awtOW5s+WQkeWPs1xuICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHRvdGFsU2VnbWVudHM7IGkrKykge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBpIC8gdG90YWxTZWdtZW50cztcbiAgICAgIGNvbnN0IHggPSBlbGVjdHJvbkd1bi54ICsgKHNjcmVlblBvc2l0aW9uLnggLSBlbGVjdHJvbkd1bi54KSAqIHByb2dyZXNzO1xuICAgICAgXG4gICAgICAvLyDorqHnrpflvZPliY3mrrXnmoTliqDpgJ/luqZcbiAgICAgIGxldCBhY2NlbGVyYXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKTtcbiAgICAgIFxuICAgICAgLy8g5Zyo5Z6C55u05YGP6L2s5p2/5Yy65Z+f5YaF5bqU55So5Z6C55u055S15Zy6XG4gICAgICBpZiAoeCA+PSB2ZXJ0aWNhbFBsYXRlU3RhcnQueCAmJiB4IDw9IHZlcnRpY2FsUGxhdGVFbmQueCkge1xuICAgICAgICBjb25zdCBwbGF0ZVByb2dyZXNzID0gKHggLSB2ZXJ0aWNhbFBsYXRlU3RhcnQueCkgLyAodmVydGljYWxQbGF0ZUVuZC54IC0gdmVydGljYWxQbGF0ZVN0YXJ0LngpO1xuICAgICAgICBjb25zdCBmaWVsZEludGVuc2l0eSA9IE1hdGguc2luKHBsYXRlUHJvZ3Jlc3MgKiBNYXRoLlBJKSAqIGVsZWN0cmljRmllbGRTdHJlbmd0aDsgLy8g5bmz5ruR6L+H5rihXG4gICAgICAgIGFjY2VsZXJhdGlvbi55ID0gdmVydGljYWxEZWZsZWN0aW9uICogZmllbGRJbnRlbnNpdHkgKiAwLjU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIOWcqOawtOW5s+WBj+i9rOadv+WMuuWfn+WGheW6lOeUqOawtOW5s+eUteWculxuICAgICAgaWYgKHggPj0gaG9yaXpvbnRhbFBsYXRlU3RhcnQueCAmJiB4IDw9IGhvcml6b250YWxQbGF0ZUVuZC54KSB7XG4gICAgICAgIGNvbnN0IHBsYXRlUHJvZ3Jlc3MgPSAoeCAtIGhvcml6b250YWxQbGF0ZVN0YXJ0LngpIC8gKGhvcml6b250YWxQbGF0ZUVuZC54IC0gaG9yaXpvbnRhbFBsYXRlU3RhcnQueCk7XG4gICAgICAgIGNvbnN0IGZpZWxkSW50ZW5zaXR5ID0gTWF0aC5zaW4ocGxhdGVQcm9ncmVzcyAqIE1hdGguUEkpICogZWxlY3RyaWNGaWVsZFN0cmVuZ3RoOyAvLyDlubPmu5Hov4fmuKFcbiAgICAgICAgYWNjZWxlcmF0aW9uLnogPSBob3Jpem9udGFsRGVmbGVjdGlvbiAqIGZpZWxkSW50ZW5zaXR5ICogMC41O1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyDmm7TmlrDpgJ/luqblkozkvY3nva7vvIjnroDljJbnmoTmrKfmi4nnp6/liIbvvIlcbiAgICAgIGNvbnN0IGR0ID0gKHNjcmVlblBvc2l0aW9uLnggLSBlbGVjdHJvbkd1bi54KSAvIHRvdGFsU2VnbWVudHMgLyBlbGVjdHJvblZlbG9jaXR5O1xuICAgICAgdmVsb2NpdHkuYWRkKGFjY2VsZXJhdGlvbi5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKGR0KSk7XG4gICAgICBcbiAgICAgIC8vIOS/neaMgeawtOW5s+mAn+W6puWfuuacrOaBkuWumu+8iOeUteWtkOadn+eahOS4u+imgei/kOWKqOaWueWQke+8iVxuICAgICAgdmVsb2NpdHkueCA9IGVsZWN0cm9uVmVsb2NpdHk7XG4gICAgICBcbiAgICAgIC8vIOiuoeeul+aWsOS9jee9rlxuICAgICAgY3VycmVudFBvcy5hZGQodmVsb2NpdHkuY2xvbmUoKS5tdWx0aXBseVNjYWxhcihkdCAqIDAuMSkpOyAvLyDnvKnmlL7lm6DlrZDosIPmlbTovajov7nlubPmu5HluqZcbiAgICAgIFxuICAgICAgLy8g56Gu5L+dIHgg5Z2Q5qCH5oyJ6aKE5pyf6YCS5aKeXG4gICAgICBjdXJyZW50UG9zLnggPSB4O1xuICAgICAgXG4gICAgICB0cmFqZWN0b3J5UG9pbnRzLnB1c2goY3VycmVudFBvcy5jbG9uZSgpKTtcbiAgICB9XG4gICAgXG4gICAgLy8g5bqU55So6L2o6L+55bmz5ruR5aSE55CGXG4gICAgcmV0dXJuIHRoaXMuc21vb3RoVHJhamVjdG9yeSh0cmFqZWN0b3J5UG9pbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlubPmu5Hovajov7nngrnvvIzkvb/nlLXlrZDmnZ/nnIvotbfmnaXmm7Toh6rnhLZcbiAgICogQHBhcmFtIHtBcnJheTxUSFJFRS5WZWN0b3IzPn0gcG9pbnRzIC0g5Y6f5aeL6L2o6L+554K5XG4gICAqIEByZXR1cm5zIHtBcnJheTxUSFJFRS5WZWN0b3IzPn0g5bmz5ruR5ZCO55qE6L2o6L+554K5XG4gICAqL1xuICBzbW9vdGhUcmFqZWN0b3J5KHBvaW50cykge1xuICAgIGlmIChwb2ludHMubGVuZ3RoIDwgMykgcmV0dXJuIHBvaW50cztcbiAgICBcbiAgICBjb25zdCBzbW9vdGhlZCA9IFtdO1xuICAgIGNvbnN0IHNtb290aGluZ0ZhY3RvciA9IENPTkZJRy5lbGVjdHJvbkJlYW0udHJhamVjdG9yeVNtb290aGluZyB8fCAwLjg7XG4gICAgXG4gICAgLy8g5L+d5oyB56ys5LiA5Liq54K55LiN5Y+YXG4gICAgc21vb3RoZWQucHVzaChwb2ludHNbMF0uY2xvbmUoKSk7XG4gICAgXG4gICAgLy8g5a+55Lit6Ze055qE54K56L+b6KGM5bmz5ruR5aSE55CGXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBjb25zdCBwcmV2ID0gcG9pbnRzW2kgLSAxXTtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBuZXh0ID0gcG9pbnRzW2kgKyAxXTtcbiAgICAgIFxuICAgICAgLy8g6K6h566X5bmz5ruR5ZCO55qE5L2N572u77yI5Yqg5p2D5bmz5Z2H77yJXG4gICAgICBjb25zdCBzbW9vdGhlZFBvaW50ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgIHNtb290aGVkUG9pbnQuYWRkU2NhbGVkVmVjdG9yKHByZXYsICgxIC0gc21vb3RoaW5nRmFjdG9yKSAqIDAuNSk7XG4gICAgICBzbW9vdGhlZFBvaW50LmFkZFNjYWxlZFZlY3RvcihjdXJyZW50LCBzbW9vdGhpbmdGYWN0b3IpO1xuICAgICAgc21vb3RoZWRQb2ludC5hZGRTY2FsZWRWZWN0b3IobmV4dCwgKDEgLSBzbW9vdGhpbmdGYWN0b3IpICogMC41KTtcbiAgICAgIFxuICAgICAgc21vb3RoZWQucHVzaChzbW9vdGhlZFBvaW50KTtcbiAgICB9XG4gICAgXG4gICAgLy8g5L+d5oyB5pyA5ZCO5LiA5Liq54K55LiN5Y+YXG4gICAgc21vb3RoZWQucHVzaChwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdLmNsb25lKCkpO1xuICAgIFxuICAgIHJldHVybiBzbW9vdGhlZDtcbiAgfVxuICBcbiAgXG4gIC8qKlxuICAgKiDmt7vliqDovajov7nngrlcbiAgICogQHBhcmFtIHtUSFJFRS5WZWN0b3IzfSBwb2ludCAtIOi9qOi/ueeCuVxuICAgKi9cbiAgYWRkVHJhY2VQb2ludChwb2ludCkge1xuICAgIC8vIOWmguaenOayoeacieW9k+WJjeaute+8jOWIm+W7uuS4gOS4quaWsOautVxuICAgIGlmICh0aGlzLnRyYWNlU2VnbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnRyYWNlU2VnbWVudHMucHVzaChbXSk7XG4gICAgfVxuICAgIFxuICAgIC8vIOiOt+WPluW9k+WJjeautVxuICAgIGNvbnN0IGN1cnJlbnRTZWdtZW50ID0gdGhpcy50cmFjZVNlZ21lbnRzW3RoaXMudHJhY2VTZWdtZW50cy5sZW5ndGggLSAxXTtcbiAgICBcbiAgICAvLyDmt7vliqDngrnliLDlvZPliY3mrrVcbiAgICBjdXJyZW50U2VnbWVudC5wdXNoKHBvaW50LmNsb25lKCkpO1xuICAgIFxuICAgIC8vIOmZkOWItuavj+S4quauteeahOeCueaVsFxuICAgIGlmIChjdXJyZW50U2VnbWVudC5sZW5ndGggPiBDT05GSUcuZWxlY3Ryb25CZWFtLnRyYWNlLm1heFBvaW50cyAvIDIpIHtcbiAgICAgIC8vIOS/neeVmeacgOWQjuWHoOS4queCueWIsOaWsOaute+8jOehruS/nei/nue7reaAp1xuICAgICAgY29uc3QgbmV3U2VnbWVudCA9IGN1cnJlbnRTZWdtZW50LnNsaWNlKC0yKTtcbiAgICAgIHRoaXMudHJhY2VTZWdtZW50cy5wdXNoKG5ld1NlZ21lbnQpO1xuICAgICAgXG4gICAgICAvLyDnp7vpmaTov4flpJrnmoTmrrVcbiAgICAgIGlmICh0aGlzLnRyYWNlU2VnbWVudHMubGVuZ3RoID4gNCkge1xuICAgICAgICB0aGlzLnRyYWNlU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8g6YeN5paw57uY5Yi26L2o6L+5XG4gICAgdGhpcy5yZWRyYXdUcmFjZVNlZ21lbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICog6YeN5paw57uY5Yi26L2o6L+55q61XG4gICAqL1xuICByZWRyYXdUcmFjZVNlZ21lbnRzKCkge1xuICAgIC8vIOa4hemZpOaXp+eahOi9qOi/uee6v1xuICAgIHRoaXMuY2xlYXJUcmFjZUxpbmVzKCk7XG4gICAgXG4gICAgLy8g5Li65q+P5Liq5q615Yib5bu65Y2V54us55qE57q/5p2hXG4gICAgdGhpcy50cmFjZVNlZ21lbnRzLmZvckVhY2goKHNlZ21lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlR2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKHNlZ21lbnQpO1xuICAgICAgICBcbiAgICAgICAgLy8g5Li65LiN5ZCM5q615L2/55So5LiN5ZCM55qE6YCP5piO5bqm77yM5pyA5paw55qE5q615pyA5LquXG4gICAgICAgIGNvbnN0IG9wYWNpdHkgPSBDT05GSUcuZWxlY3Ryb25CZWFtLnRyYWNlLm9wYWNpdHkgKiAoMC4zICsgMC43ICogKGluZGV4ICsgMSkgLyB0aGlzLnRyYWNlU2VnbWVudHMubGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgc2VnbWVudE1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtcbiAgICAgICAgICBjb2xvcjogQ09ORklHLmJlYW0uY29sb3IsXG4gICAgICAgICAgb3BhY2l0eTogb3BhY2l0eSxcbiAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgICAgICAgICBkZXB0aFRlc3Q6IGZhbHNlLCAvLyDnpoHnlKjmt7HluqbmtYvor5XvvIznoa7kv53ovajov7nlj6/op4FcbiAgICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZSAvLyDnpoHnlKjmt7HluqblhpnlhaVcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0cmFjZUxpbmUgPSBuZXcgVEhSRUUuTGluZSh0cmFjZUdlb21ldHJ5LCBzZWdtZW50TWF0ZXJpYWwpO1xuICAgICAgICB0cmFjZUxpbmUucmVuZGVyT3JkZXIgPSAzOyAvLyDorr7nva7ovajov7nnur/nmoTmuLLmn5Ppobrluo/vvIzlnKjmnoHmnb/kuYvlkI7muLLmn5NcbiAgICAgICAgdGhpcy50cmFjZUxpbmVzLnB1c2godHJhY2VMaW5lKTtcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQodHJhY2VMaW5lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvIDlp4vmlrDnmoTovajov7nmrrXvvIjnlKjkuo7pgb/lhY3lm57miavnur/vvIlcbiAgICovXG4gIHN0YXJ0TmV3VHJhY2VTZWdtZW50KCkge1xuICAgIC8vIOWmguaenOW9k+WJjeauteacieeCue+8jOWIm+W7uuaWsOautVxuICAgIGlmICh0aGlzLnRyYWNlU2VnbWVudHMubGVuZ3RoID4gMCAmJiB0aGlzLnRyYWNlU2VnbWVudHNbdGhpcy50cmFjZVNlZ21lbnRzLmxlbmd0aCAtIDFdLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMudHJhY2VTZWdtZW50cy5wdXNoKFtdKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDmuIXpmaTovajov7nnur9cbiAgICovXG4gIGNsZWFyVHJhY2VMaW5lcygpIHtcbiAgICB0aGlzLnRyYWNlTGluZXMuZm9yRWFjaChsaW5lID0+IHtcbiAgICAgIHRoaXMuc2NlbmUucmVtb3ZlKGxpbmUpO1xuICAgICAgbGluZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgfSk7XG4gICAgdGhpcy50cmFjZUxpbmVzID0gW107XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDmm7TmlrDmnZDotKhcbiAgICovXG4gIHVwZGF0ZU1hdGVyaWFsKCkge1xuICAgIHRoaXMudXBkYXRlQmVhbU1hdGVyaWFscygpO1xuICB9XG4gIFxuICAvKipcbiAgICog5riF6Zmk5omA5pyJ6L2o6L+5XG4gICAqL1xuICBjbGVhckFsbFRyYWNlcygpIHtcbiAgICB0aGlzLmNsZWFyVHJhY2VMaW5lcygpO1xuICAgIHRoaXMudHJhY2VQb2ludHMgPSBbXTtcbiAgICB0aGlzLnRyYWNlU2VnbWVudHMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmuIXpmaTnlLXlrZDmnZ/nur/mnaFcbiAgICovXG4gIGNsZWFyQmVhbUxpbmVzKCkge1xuICAgIGlmICh0aGlzLmJlYW1MaW5lKSB7XG4gICAgICB0aGlzLnNjZW5lLnJlbW92ZSh0aGlzLmJlYW1MaW5lKTtcbiAgICAgIHRoaXMuYmVhbUxpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5iZWFtTGluZSA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLmdsb3dMaW5lKSB7XG4gICAgICB0aGlzLnNjZW5lLnJlbW92ZSh0aGlzLmdsb3dMaW5lKTtcbiAgICAgIHRoaXMuZ2xvd0xpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5nbG93TGluZSA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLnBhcnRpY2xlU3lzdGVtKSB7XG4gICAgICB0aGlzLnNjZW5lLnJlbW92ZSh0aGlzLnBhcnRpY2xlU3lzdGVtKTtcbiAgICAgIHRoaXMucGFydGljbGVTeXN0ZW0uZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5wYXJ0aWNsZVN5c3RlbS5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICB0aGlzLnBhcnRpY2xlU3lzdGVtID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Yib5bu65YiG5bGC55S15a2Q5p2f5pWI5p6cXG4gICAqIEBwYXJhbSB7VEhSRUUuQnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5IC0g55S15a2Q5p2f5Yeg5L2V5L2TXG4gICAqL1xuICBjcmVhdGVMYXllcmVkQmVhbShnZW9tZXRyeSkge1xuICAgIC8vIOWIm+W7uuWPkeWFieWkluWbtOWxgu+8iOabtOWuve+8jOmAj+aYjuW6puabtOS9ju+8iVxuICAgIHRoaXMuZ2xvd0xpbmUgPSBuZXcgVEhSRUUuTGluZShnZW9tZXRyeS5jbG9uZSgpLCB0aGlzLmdsb3dNYXRlcmlhbCk7XG4gICAgdGhpcy5nbG93TGluZS5yZW5kZXJPcmRlciA9IDQ7IC8vIOiuvue9rua4suafk+mhuuW6j++8jOWcqOaegeadv+S5i+WQju+8jOS4u+eUteWtkOadn+S5i+WJjVxuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuZ2xvd0xpbmUpO1xuICAgIFxuICAgIC8vIOWIm+W7uuS4u+eUteWtkOadn++8iOi+g+eqhO+8jOS6ruW6puabtOmrmO+8iVxuICAgIHRoaXMuYmVhbUxpbmUgPSBuZXcgVEhSRUUuTGluZShnZW9tZXRyeS5jbG9uZSgpLCB0aGlzLmJlYW1NYXRlcmlhbCk7XG4gICAgdGhpcy5iZWFtTGluZS5yZW5kZXJPcmRlciA9IDU7IC8vIOiuvue9rua4suafk+mhuuW6j++8jOehruS/neWcqOmAj+aYjuaegeadv+S5i+WQjua4suafk1xuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuYmVhbUxpbmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOeUteWtkOadn+adkOi0qFxuICAgKi9cbiAgdXBkYXRlQmVhbU1hdGVyaWFscygpIHtcbiAgICAvLyDmm7TmlrDkuLvnlLXlrZDmnZ/mnZDotKhcbiAgICBpZiAodGhpcy5iZWFtTWF0ZXJpYWwpIHtcbiAgICAgIHRoaXMuYmVhbU1hdGVyaWFsLmNvbG9yLnNldChDT05GSUcuYmVhbS5jb2xvcik7XG4gICAgICB0aGlzLmJlYW1NYXRlcmlhbC5vcGFjaXR5ID0gQ09ORklHLmJlYW0uaW50ZW5zaXR5O1xuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDlj5HlhYnmnZDotKhcbiAgICBpZiAodGhpcy5nbG93TWF0ZXJpYWwpIHtcbiAgICAgIHRoaXMuZ2xvd01hdGVyaWFsLmNvbG9yLnNldChDT05GSUcuYmVhbS5jb2xvcik7XG4gICAgICB0aGlzLmdsb3dNYXRlcmlhbC5vcGFjaXR5ID0gQ09ORklHLmJlYW0uaW50ZW5zaXR5ICogMC4zO1xuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDovajov7nmnZDotKhcbiAgICBpZiAodGhpcy50cmFjZU1hdGVyaWFsKSB7XG4gICAgICB0aGlzLnRyYWNlTWF0ZXJpYWwuY29sb3Iuc2V0KENPTkZJRy5iZWFtLmNvbG9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Yib5bu657KS5a2Q55S15a2Q5p2f5pWI5p6c77yI5Y+v6YCJ55qE6auY57qn5pWI5p6c77yJXG4gICAqIEBwYXJhbSB7QXJyYXk8VEhSRUUuVmVjdG9yMz59IHBvaW50cyAtIOi9qOi/ueeCuVxuICAgKi9cbiAgY3JlYXRlUGFydGljbGVCZWFtKHBvaW50cykge1xuICAgIC8vIOWIm+W7uueykuWtkOezu+e7n+adpeaooeaLn+eUteWtkOa1gVxuICAgIGNvbnN0IHBhcnRpY2xlQ291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHBhcnRpY2xlcyA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkocGFydGljbGVDb3VudCAqIDMpO1xuICAgIGNvbnN0IGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkocGFydGljbGVDb3VudCAqIDMpO1xuICAgIGNvbnN0IHNpemVzID0gbmV3IEZsb2F0MzJBcnJheShwYXJ0aWNsZUNvdW50KTtcbiAgICBcbiAgICBjb25zdCBjb2xvciA9IG5ldyBUSFJFRS5Db2xvcihDT05GSUcuYmVhbS5jb2xvcik7XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWNsZUNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29uc3QgaTMgPSBpICogMztcbiAgICAgIFxuICAgICAgLy8g5L2N572uXG4gICAgICBwb3NpdGlvbnNbaTNdID0gcG9pbnQueDtcbiAgICAgIHBvc2l0aW9uc1tpMyArIDFdID0gcG9pbnQueTtcbiAgICAgIHBvc2l0aW9uc1tpMyArIDJdID0gcG9pbnQuejtcbiAgICAgIFxuICAgICAgLy8g6aKc6Imy77yI5rK/552A6L2o6L+55riQ5Y+Y77yJXG4gICAgICBjb25zdCBpbnRlbnNpdHkgPSAxLjAgLSAoaSAvIHBhcnRpY2xlQ291bnQpICogMC41OyAvLyDku47liY3liLDlkI7pgJDmuJDlj5jmmpdcbiAgICAgIGNvbG9yc1tpM10gPSBjb2xvci5yICogaW50ZW5zaXR5O1xuICAgICAgY29sb3JzW2kzICsgMV0gPSBjb2xvci5nICogaW50ZW5zaXR5O1xuICAgICAgY29sb3JzW2kzICsgMl0gPSBjb2xvci5iICogaW50ZW5zaXR5O1xuICAgICAgXG4gICAgICAvLyDlpKflsI/vvIjliY3pnaLovoPlsI/vvIzlkI7pnaLovoPlpKfvvIlcbiAgICAgIHNpemVzW2ldID0gMC4wMiArIChpIC8gcGFydGljbGVDb3VudCkgKiAwLjAxO1xuICAgIH1cbiAgICBcbiAgICBwYXJ0aWNsZXMuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XG4gICAgcGFydGljbGVzLnNldEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGNvbG9ycywgMykpO1xuICAgIHBhcnRpY2xlcy5zZXRBdHRyaWJ1dGUoJ3NpemUnLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHNpemVzLCAxKSk7XG4gICAgXG4gICAgY29uc3QgcGFydGljbGVNYXRlcmlhbCA9IG5ldyBUSFJFRS5Qb2ludHNNYXRlcmlhbCh7XG4gICAgICBzaXplOiAwLjAzLFxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICBvcGFjaXR5OiBDT05GSUcuYmVhbS5pbnRlbnNpdHkgKiAwLjgsXG4gICAgICB2ZXJ0ZXhDb2xvcnM6IHRydWUsXG4gICAgICBibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZ1xuICAgIH0pO1xuICAgIFxuICAgIGlmICh0aGlzLnBhcnRpY2xlU3lzdGVtKSB7XG4gICAgICB0aGlzLnNjZW5lLnJlbW92ZSh0aGlzLnBhcnRpY2xlU3lzdGVtKTtcbiAgICAgIHRoaXMucGFydGljbGVTeXN0ZW0uZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5wYXJ0aWNsZVN5c3RlbS5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIFxuICAgIHRoaXMucGFydGljbGVTeXN0ZW0gPSBuZXcgVEhSRUUuUG9pbnRzKHBhcnRpY2xlcywgcGFydGljbGVNYXRlcmlhbCk7XG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5wYXJ0aWNsZVN5c3RlbSk7XG4gIH1cblxuICAvKipcbiAgICog5ryU56S655S15a2Q5p2f5pWI5p6c55qE5rWL6K+V5Ye95pWwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0ZXN0Vm9sdGFnZSAtIOa1i+ivleeUteWOi++8iOWPr+mAie+8jOm7mOiupOS4ujEuMO+8iVxuICAgKi9cbiAgZGVtb25zdHJhdGVCZWFtRWZmZWN0cyh0ZXN0Vm9sdGFnZSA9IDEuMCkge1xuICAgIGNvbnNvbGUubG9nKCfwn5SsIOa8lOekuuaWsOeahOeUteWtkOadn+aViOaenC4uLicpO1xuICAgIFxuICAgIC8vIOa1i+ivleS4jeWQjOeahOWBj+i9rOaViOaenFxuICAgIGNvbnN0IHRlc3REZWZsZWN0aW9ucyA9IFtcbiAgICAgIHsgdjogMCwgaDogMCwgbmFtZTogJ+aXoOWBj+i9rCcgfSxcbiAgICAgIHsgdjogdGVzdFZvbHRhZ2UsIGg6IDAsIG5hbWU6ICflnoLnm7TlgY/ovawnIH0sXG4gICAgICB7IHY6IDAsIGg6IHRlc3RWb2x0YWdlLCBuYW1lOiAn5rC05bmz5YGP6L2sJyB9LFxuICAgICAgeyB2OiB0ZXN0Vm9sdGFnZSwgaDogdGVzdFZvbHRhZ2UsIG5hbWU6ICflj4zlkJHlgY/ovawnIH1cbiAgICBdO1xuICAgIFxuICAgIGxldCB0ZXN0SW5kZXggPSAwO1xuICAgIGNvbnN0IHRlc3RJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmICh0ZXN0SW5kZXggPj0gdGVzdERlZmxlY3Rpb25zLmxlbmd0aCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRlc3RJbnRlcnZhbCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUg55S15a2Q5p2f5pWI5p6c5ryU56S65a6M5oiQ77yBJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgdGVzdCA9IHRlc3REZWZsZWN0aW9uc1t0ZXN0SW5kZXhdO1xuICAgICAgY29uc29sZS5sb2coYPCfk6Eg5rWL6K+VICR7dGVzdEluZGV4ICsgMX0vNDogJHt0ZXN0Lm5hbWV9IChWOiR7dGVzdC52fSwgSDoke3Rlc3QuaH0pYCk7XG4gICAgICBcbiAgICAgIHRoaXMudXBkYXRlQmVhbVBhdGgoe1xuICAgICAgICB2ZXJ0aWNhbDogeyB2b2x0YWdlOiB0ZXN0LnYgfSxcbiAgICAgICAgaG9yaXpvbnRhbDogeyB2b2x0YWdlOiB0ZXN0LmggfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHRlc3RJbmRleCsrO1xuICAgIH0sIDIwMDApOyAvLyDmr48y56eS5YiH5o2i5LiA5qyhXG4gICAgXG4gICAgcmV0dXJuIHRlc3RJbnRlcnZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlkK/nlKjnspLlrZDmlYjmnpxcbiAgICovXG4gIGVuYWJsZVBhcnRpY2xlRWZmZWN0KCkge1xuICAgIC8vIOS4tOaXtuS/ruaUuemFjee9ruS7peWQr+eUqOeykuWtkOaViOaenFxuICAgIGNvbnN0IG9yaWdpbmFsQ29uZmlnID0gQ09ORklHLmVsZWN0cm9uQmVhbS5lbmFibGVQYXJ0aWNsZUVmZmVjdDtcbiAgICBDT05GSUcuZWxlY3Ryb25CZWFtLmVuYWJsZVBhcnRpY2xlRWZmZWN0ID0gdHJ1ZTtcbiAgICBcbiAgICAvLyDph43mlrDnlJ/miJDnlLXlrZDmnZ/ku6XlupTnlKjnspLlrZDmlYjmnpxcbiAgICB0aGlzLnVwZGF0ZUJlYW1QYXRoKHtcbiAgICAgIHZlcnRpY2FsOiB7IHZvbHRhZ2U6IDAgfSxcbiAgICAgIGhvcml6b250YWw6IHsgdm9sdGFnZTogMCB9XG4gICAgfSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+KcqCDnspLlrZDmlYjmnpzlt7LlkK/nlKgnKTtcbiAgICBcbiAgICAvLyDov5Tlm57mgaLlpI3lh73mlbBcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgQ09ORklHLmVsZWN0cm9uQmVhbS5lbmFibGVQYXJ0aWNsZUVmZmVjdCA9IG9yaWdpbmFsQ29uZmlnO1xuICAgICAgdGhpcy51cGRhdGVCZWFtUGF0aCh7XG4gICAgICAgIHZlcnRpY2FsOiB7IHZvbHRhZ2U6IDAgfSxcbiAgICAgICAgaG9yaXpvbnRhbDogeyB2b2x0YWdlOiAwIH1cbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coJ/CflIQg57KS5a2Q5pWI5p6c5bey5oGi5aSN5Yiw5Y6f5aeL6K6+572uJyk7XG4gICAgfTtcbiAgfVxufSAiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gJy4uL2NvbmZpZ0xvYWRlcic7XHJcblxyXG4vKipcclxuICog6I2n5YWJ5bGP57G7XHJcbiAqIOi0n+i0o+WkhOeQhuiNp+WFieWxj+aViOaenOWSjOazouW9ouaYvuekulxyXG4gKiDpm4bmiJDkuoZUaHJlZVdhdmVmb3JtUmVuZGVyZXLnmoTms6LlvaLmuLLmn5Plip/og71cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTY3JlZW4ge1xyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIEBwYXJhbSB7VEhSRUUuU2NlbmV9IHNjZW5lIC0gVGhyZWUuanPlnLrmma9cclxuICAgKiBAcGFyYW0ge1RIUkVFLk1lc2h9IHNjcmVlbk1lc2ggLSDojaflhYnlsY/nvZHmoLxcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihzY2VuZSwgc2NyZWVuTWVzaCkge1xyXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xyXG4gICAgdGhpcy5zY3JlZW5NZXNoID0gc2NyZWVuTWVzaDtcclxuICAgIFxyXG4gICAgLy8g5Yib5bu66I2n5YWJ54K56ZuG5ZCIXHJcbiAgICB0aGlzLmdsb3dQb2ludHMgPSBbXTtcclxuICAgIHRoaXMuZ2xvd01lc2hlcyA9IFtdO1xyXG4gICAgdGhpcy5tYXhHbG93UG9pbnRzID0gQ09ORklHLnNjcmVlbkVmZmVjdHMubWF4R2xvd1BvaW50cztcclxuICAgIFxyXG4gICAgLy8g5Li65LqG5YW85a65RGVtb0FuaW1hdGlvbueahGZvY3VzT25Db21wb25lbnTmlrnms5XvvIzmt7vliqBwb3NpdGlvbuWxnuaAp1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuc2NyZWVuTWVzaC5wb3NpdGlvbjtcclxuICAgIFxyXG4gICAgLy8g56e76Zmk5LqG6Z2Z5oCB5rOi5b2i55u45YWz5bGe5oCn77yM5L+d55WZ55S15a2Q5p2f6L2o6L+55rOi5b2iXHJcbiAgICBcclxuICAgIC8vIOWIneWni+WMluiNp+WFieadkOi0qFxyXG4gICAgdGhpcy5pbml0R2xvd01hdGVyaWFsKCk7XHJcbiAgICBcclxuICAgIC8vIOWIm+W7uuiNp+WFieWxj+e9keagvFxyXG4gICAgdGhpcy5jcmVhdGVTY3JlZW5HcmlkKCk7XHJcbiAgICBcclxuICAgIC8vIOenu+mZpOS6humdmeaAgeazouW9ouWIneWni+WMllxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDliJ3lp4vljJbojaflhYnmnZDotKhcclxuICAgKi9cclxuICBpbml0R2xvd01hdGVyaWFsKCkge1xyXG4gICAgLy8g5pu05paw6I2n5YWJ5bGP5p2Q6LSoXHJcbiAgICB0aGlzLnNjcmVlbk1lc2gubWF0ZXJpYWwuZW1pc3NpdmUuc2V0KENPTkZJRy5zY3JlZW4uY29sb3IpO1xyXG4gICAgdGhpcy5zY3JlZW5NZXNoLm1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0gQ09ORklHLnNjcmVlbi5pbnRlbnNpdHk7XHJcbiAgICBcclxuICAgIC8vIOWIm+W7uuiNp+WFieeCueadkOi0qFxyXG4gICAgdGhpcy5nbG93TWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICBjb2xvcjogQ09ORklHLmJlYW0uY29sb3IsIC8vIOS9v+eUqOeUteWtkOadn+eahOminOiJsu+8iOe7v+iJsu+8iVxyXG4gICAgICB0cmFuc3BhcmVudDogdHJ1ZSxcclxuICAgICAgb3BhY2l0eTogMC44XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g56e76Zmk5LqG6Z2Z5oCB5rOi5b2i5p2Q6LSoXHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuiNp+WFieWxj+e9keagvFxyXG4gICAqL1xyXG4gIGNyZWF0ZVNjcmVlbkdyaWQoKSB7XHJcbiAgICAvLyDojrflj5bojaflhYnlsY/nmoTlsLrlr7jlkozkvY3nva5cclxuICAgIGNvbnN0IHNjcmVlbldpZHRoID0gQ09ORklHLmNvbXBvbmVudHMuc2NyZWVuLndpZHRoO1xyXG4gICAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gQ09ORklHLmNvbXBvbmVudHMuc2NyZWVuLmhlaWdodDtcclxuICAgIGNvbnN0IHNjcmVlblBvc2l0aW9uID0gQ09ORklHLmNvbXBvbmVudHMuc2NyZWVuLnBvc2l0aW9uO1xyXG4gICAgXHJcbiAgICAvLyDliJvlu7rnvZHmoLzmnZDotKhcclxuICAgIGNvbnN0IGdyaWRNYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgIGNvbG9yOiBDT05GSUcuc2NyZWVuLmdyaWRDb2xvcixcclxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXHJcbiAgICAgIG9wYWNpdHk6IENPTkZJRy5zY3JlZW4uZ3JpZE9wYWNpdHlcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDliJvlu7rnvZHmoLzlh6DkvZXkvZNcclxuICAgIGNvbnN0IGdyaWRHZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG4gICAgY29uc3QgZ3JpZFBvaW50cyA9IFtdO1xyXG4gICAgXHJcbiAgICAvLyDorqHnrpfnvZHmoLznur/pl7Tot51cclxuICAgIGNvbnN0IGdyaWRTcGFjaW5nID0gQ09ORklHLnNjcmVlbi5ncmlkU3BhY2luZztcclxuICAgIGNvbnN0IGhhbGZXaWR0aCA9IHNjcmVlbldpZHRoIC8gMjtcclxuICAgIGNvbnN0IGhhbGZIZWlnaHQgPSBzY3JlZW5IZWlnaHQgLyAyO1xyXG4gICAgXHJcbiAgICAvLyDmt7vliqDlnoLnm7Tnur9cclxuICAgIGZvciAobGV0IHggPSAtaGFsZldpZHRoOyB4IDw9IGhhbGZXaWR0aDsgeCArPSBncmlkU3BhY2luZykge1xyXG4gICAgICBncmlkUG9pbnRzLnB1c2goeCwgLWhhbGZIZWlnaHQsIDApO1xyXG4gICAgICBncmlkUG9pbnRzLnB1c2goeCwgaGFsZkhlaWdodCwgMCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOa3u+WKoOawtOW5s+e6v1xyXG4gICAgZm9yIChsZXQgeSA9IC1oYWxmSGVpZ2h0OyB5IDw9IGhhbGZIZWlnaHQ7IHkgKz0gZ3JpZFNwYWNpbmcpIHtcclxuICAgICAgZ3JpZFBvaW50cy5wdXNoKC1oYWxmV2lkdGgsIHksIDApO1xyXG4gICAgICBncmlkUG9pbnRzLnB1c2goaGFsZldpZHRoLCB5LCAwKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g6K6+572u5Yeg5L2V5L2T5bGe5oCnXHJcbiAgICBncmlkR2VvbWV0cnkuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKGdyaWRQb2ludHMsIDMpKTtcclxuICAgIFxyXG4gICAgLy8g5Yib5bu6572R5qC857q/XHJcbiAgICB0aGlzLnNjcmVlbkdyaWQgPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKGdyaWRHZW9tZXRyeSwgZ3JpZE1hdGVyaWFsKTtcclxuICAgIFxyXG4gICAgLy8g6K6+572u572R5qC85L2N572u77yI56iN5b6u5YGP56e777yM6YG/5YWNei1maWdodGluZ++8iVxyXG4gICAgdGhpcy5zY3JlZW5HcmlkLnBvc2l0aW9uLmNvcHkoc2NyZWVuUG9zaXRpb24pO1xyXG4gICAgdGhpcy5zY3JlZW5HcmlkLnBvc2l0aW9uLnggKz0gMC4wMTsgLy8g5Zyo6I2n5YWJ5bGP5YmN6Z2i5LiA54K554K5XHJcbiAgICB0aGlzLnNjcmVlbkdyaWQucm90YXRpb24ueSA9IC1NYXRoLlBJIC8gMjsgLy8g5LiO6I2n5YWJ5bGP55u45ZCM55qE5peL6L2sXHJcbiAgICBcclxuICAgIC8vIOa3u+WKoOWIsOWcuuaZr1xyXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5zY3JlZW5HcmlkKTtcclxuICB9XHJcbiAgXHJcbiAgLy8g56e76Zmk5LqGaW5pdFdhdmVmb3Jt5pa55rOVXHJcbiAgXHJcbiAgLy8g56e76Zmk5LqGY3JlYXRlV2F2ZWZvcm3mlrnms5VcclxuICBcclxuICAvLyDnp7vpmaTkuoZjcmVhdGVTaW5nbGVXYXZlZm9ybeaWueazlVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOagueaNruazouW9ouexu+Wei+iuoeeul+eUteWOi+WAvFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB3YXZlVHlwZSAtIOazouW9ouexu+Wei1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwaGFzZVZhbCAtIOebuOS9jeWAvCjlvKfluqYpXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFtcGxpdHVkZSAtIOaMr+W5hVxyXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IOeUteWOi+WAvFxyXG4gICAqL1xyXG4gIGNhbGN1bGF0ZVZvbHRhZ2Uod2F2ZVR5cGUsIHBoYXNlVmFsLCBhbXBsaXR1ZGUpIHtcclxuICAgIHN3aXRjaCAod2F2ZVR5cGUpIHtcclxuICAgICAgY2FzZSAnc2luZSc6XHJcbiAgICAgICAgcmV0dXJuIGFtcGxpdHVkZSAqIE1hdGguc2luKHBoYXNlVmFsKTtcclxuICAgICAgY2FzZSAnc3F1YXJlJzpcclxuICAgICAgICByZXR1cm4gYW1wbGl0dWRlICogKE1hdGguc2luKHBoYXNlVmFsKSA+PSAwID8gMSA6IC0xKTtcclxuICAgICAgY2FzZSAndHJpYW5nbGUnOlxyXG4gICAgICAgIHJldHVybiBhbXBsaXR1ZGUgKiAoMiAqIE1hdGguYWJzKChwaGFzZVZhbCAlICgyICogTWF0aC5QSSkpIC8gKDIgKiBNYXRoLlBJKSAtIDAuNSkgLSAxKTtcclxuICAgICAgY2FzZSAnc2F3dG9vdGgnOlxyXG4gICAgICAgIHJldHVybiBhbXBsaXR1ZGUgKiAoKChwaGFzZVZhbCAlICgyICogTWF0aC5QSSkpIC8gKDIgKiBNYXRoLlBJKSkgKiAyIC0gMSk7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOa3u+WKoOiNp+WFieeCuVxyXG4gICAqIEBwYXJhbSB7VEhSRUUuVmVjdG9yM30gcG9zaXRpb24gLSDnlLXlrZDmnZ/lh7vkuK3ojaflhYnlsY/nmoTkvY3nva5cclxuICAgKi9cclxuICBhZGRHbG93UG9pbnQocG9zaXRpb24pIHtcclxuICAgIC8vIOWIm+W7uuS4gOS4quWwj+eQg+S9k+S7o+ihqOiNp+WFieeCuVxyXG4gICAgY29uc3QgZ2xvd0dlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KENPTkZJRy5zY3JlZW5FZmZlY3RzLmdsb3dQb2ludFNpemUsIDYsIDYpO1xyXG4gICAgY29uc3QgZ2xvd01lc2ggPSBuZXcgVEhSRUUuTWVzaChnbG93R2VvbWV0cnksIHRoaXMuZ2xvd01hdGVyaWFsLmNsb25lKCkpO1xyXG4gICAgXHJcbiAgICAvLyDorr7nva7kvY3nva7vvIjnqI3lvq7lgY/np7vvvIzpgb/lhY16LWZpZ2h0aW5n77yJXHJcbiAgICBnbG93TWVzaC5wb3NpdGlvbi5jb3B5KHBvc2l0aW9uKTtcclxuICAgIGNvbnN0IHNjcmVlbk9mZnNldCA9IENPTkZJRy5lbGVjdHJvbkJlYW0uc2NyZWVuT2Zmc2V0O1xyXG4gICAgZ2xvd01lc2gucG9zaXRpb24ueCA9IENPTkZJRy5jb21wb25lbnRzLnNjcmVlbi5wb3NpdGlvbi54IC0gc2NyZWVuT2Zmc2V0OyAvLyDnoa7kv53lnKjojaflhYnlsY/liY3pnaLkuIDngrnngrlcclxuICAgIFxyXG4gICAgLy8g5re75Yqg5Yiw5Zy65pmvXHJcbiAgICB0aGlzLnNjZW5lLmFkZChnbG93TWVzaCk7XHJcbiAgICBcclxuICAgIC8vIOiusOW9leiNp+WFieeCueS/oeaBr1xyXG4gICAgdGhpcy5nbG93UG9pbnRzLnB1c2goe1xyXG4gICAgICBtZXNoOiBnbG93TWVzaCxcclxuICAgICAgY3JlYXRlZEF0OiBEYXRlLm5vdygpLFxyXG4gICAgICBpbml0aWFsT3BhY2l0eTogMC44XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g5aaC5p6c6I2n5YWJ54K56L+H5aSa77yM56e76Zmk5pyA5pep55qE54K5XHJcbiAgICBpZiAodGhpcy5nbG93UG9pbnRzLmxlbmd0aCA+IHRoaXMubWF4R2xvd1BvaW50cykge1xyXG4gICAgICBjb25zdCBvbGRlc3RQb2ludCA9IHRoaXMuZ2xvd1BvaW50cy5zaGlmdCgpO1xyXG4gICAgICB0aGlzLnNjZW5lLnJlbW92ZShvbGRlc3RQb2ludC5tZXNoKTtcclxuICAgICAgb2xkZXN0UG9pbnQubWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcbiAgICAgIG9sZGVzdFBvaW50Lm1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDmm7TmlrDojaflhYnngrnmlYjmnpzlkozms6LlvaLliqjnlLtcclxuICAgKi9cclxuICB1cGRhdGUoKSB7XHJcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3QgcGVyc2lzdGVuY2UgPSBDT05GSUcuc2NyZWVuLnBlcnNpc3RlbmNlO1xyXG4gICAgXHJcbiAgICAvLyDmm7TmlrDojaflhYnlsY/mnZDotKhcclxuICAgIHRoaXMuc2NyZWVuTWVzaC5tYXRlcmlhbC5lbWlzc2l2ZS5zZXQoQ09ORklHLnNjcmVlbi5jb2xvcik7XHJcbiAgICB0aGlzLnNjcmVlbk1lc2gubWF0ZXJpYWwuZW1pc3NpdmVJbnRlbnNpdHkgPSBDT05GSUcuc2NyZWVuLmludGVuc2l0eTtcclxuICAgIFxyXG4gICAgLy8g5pu05paw5q+P5Liq6I2n5YWJ54K555qE6YCP5piO5bqm77yI5qih5ouf5L2Z6L6J5pWI5p6c77yJXHJcbiAgICB0aGlzLmdsb3dQb2ludHMuZm9yRWFjaCgocG9pbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IGFnZSA9IChub3cgLSBwb2ludC5jcmVhdGVkQXQpIC8gMTAwMDsgLy8g5bm06b6E77yI56eS77yJXHJcbiAgICAgIGNvbnN0IGZhZGVSYXRlID0gMSAtIHBlcnNpc3RlbmNlOyAvLyDmt6Hlh7rpgJ/njodcclxuICAgICAgY29uc3Qgb3BhY2l0eSA9IHBvaW50LmluaXRpYWxPcGFjaXR5ICogTWF0aC5wb3cocGVyc2lzdGVuY2UsIGFnZSAqIENPTkZJRy5zY3JlZW5FZmZlY3RzLmZhZGVSYXRlKTtcclxuICAgICAgXHJcbiAgICAgIC8vIOabtOaWsOmAj+aYjuW6plxyXG4gICAgICBwb2ludC5tZXNoLm1hdGVyaWFsLm9wYWNpdHkgPSBvcGFjaXR5O1xyXG4gICAgICBcclxuICAgICAgLy8g5aaC5p6c5a6M5YWo6YCP5piO77yM56e76Zmk6L+Z5Liq54K5XHJcbiAgICAgIGlmIChvcGFjaXR5IDwgQ09ORklHLnNjcmVlbkVmZmVjdHMubWluT3BhY2l0eSkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlKHBvaW50Lm1lc2gpO1xyXG4gICAgICAgIHBvaW50Lm1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG4gICAgICAgIHBvaW50Lm1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuZ2xvd1BvaW50cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g56e76Zmk5LqG6Z2Z5oCB5rOi5b2i5Yqo55S76YC76L6RXHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOa4hemZpOaJgOacieiNp+WFieeCuVxyXG4gICAqL1xyXG4gIGNsZWFyQWxsR2xvd1BvaW50cygpIHtcclxuICAgIHRoaXMuZ2xvd1BvaW50cy5mb3JFYWNoKHBvaW50ID0+IHtcclxuICAgICAgdGhpcy5zY2VuZS5yZW1vdmUocG9pbnQubWVzaCk7XHJcbiAgICAgIHBvaW50Lm1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG4gICAgICBwb2ludC5tZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5nbG93UG9pbnRzID0gW107XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOabtOaWsOadkOi0qOminOiJslxyXG4gICAqL1xyXG4gIHVwZGF0ZU1hdGVyaWFsKCkge1xyXG4gICAgLy8g5pu05paw6I2n5YWJ5bGP5p2Q6LSoXHJcbiAgICB0aGlzLnNjcmVlbk1lc2gubWF0ZXJpYWwuZW1pc3NpdmUuc2V0KENPTkZJRy5zY3JlZW4uY29sb3IpO1xyXG4gICAgdGhpcy5zY3JlZW5NZXNoLm1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0gQ09ORklHLnNjcmVlbi5pbnRlbnNpdHk7XHJcbiAgICBcclxuICAgIC8vIOabtOaWsOaJgOacieiNp+WFieeCueeahOminOiJslxyXG4gICAgdGhpcy5nbG93UG9pbnRzLmZvckVhY2gocG9pbnQgPT4ge1xyXG4gICAgICBwb2ludC5tZXNoLm1hdGVyaWFsLmNvbG9yLnNldChDT05GSUcuc2NyZWVuLmNvbG9yKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICAvLyA9PT09PT09PT09IOenu+mZpOS6huaJgOaciemdmeaAgeazouW9ouaOp+WItuaWueazlSA9PT09PT09PT09XHJcbiAgLy8g5L+d55WZ55S15a2Q5p2f6L2o6L+55rOi5b2i77yM6L+Z5Lqb5pa55rOV5LiN5YaN6ZyA6KaBXHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5pi+56S6L+makOiXj+azouW9oiAtIOS/neeVmeatpOaWueazleS7pemBv+WFjeiwg+eUqOmUmeivr++8jOS9huS4jeaJp+ihjOS7u+S9leaTjeS9nFxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdyAtIOaYr+WQpuaYvuekuuazouW9olxyXG4gICAqL1xyXG4gIHNob3dXYXZlZm9ybShzaG93KSB7XHJcbiAgICAvLyDpnZnmgIHms6LlvaLlt7Lnp7vpmaTvvIzmraTmlrnms5Xkv53nlZnkuLrnqbrku6Xpgb/lhY3osIPnlKjplJnor69cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDorr7nva7ms6LlvaLnsbvlnosgLSDkv53nlZnmraTmlrnms5Xku6Xpgb/lhY3osIPnlKjplJnor6/vvIzkvYbkuI3miafooYzku7vkvZXmk43kvZxcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIOazouW9ouexu+Wei1xyXG4gICAqL1xyXG4gIHNldFdhdmVmb3JtVHlwZSh0eXBlKSB7XHJcbiAgICAvLyDpnZnmgIHms6LlvaLlt7Lnp7vpmaTvvIzmraTmlrnms5Xkv53nlZnkuLrnqbrku6Xpgb/lhY3osIPnlKjplJnor69cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDorr7nva7popHnjocgLSDkv53nlZnmraTmlrnms5Xku6Xpgb/lhY3osIPnlKjplJnor6/vvIzkvYbkuI3miafooYzku7vkvZXmk43kvZxcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJlcXVlbmN5IC0g6aKR546H5YC8XHJcbiAgICovXHJcbiAgc2V0RnJlcXVlbmN5KGZyZXF1ZW5jeSkge1xyXG4gICAgLy8g6Z2Z5oCB5rOi5b2i5bey56e76Zmk77yM5q2k5pa55rOV5L+d55WZ5Li656m65Lul6YG/5YWN6LCD55So6ZSZ6K+vXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog6K6+572u5oyv5bmFIC0g5L+d55WZ5q2k5pa55rOV5Lul6YG/5YWN6LCD55So6ZSZ6K+v77yM5L2G5LiN5omn6KGM5Lu75L2V5pON5L2cXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFtcGxpdHVkZSAtIOaMr+W5heWAvFxyXG4gICAqL1xyXG4gIHNldEFtcGxpdHVkZShhbXBsaXR1ZGUpIHtcclxuICAgIC8vIOmdmeaAgeazouW9ouW3suenu+mZpO+8jOatpOaWueazleS/neeVmeS4uuepuuS7pemBv+WFjeiwg+eUqOmUmeivr1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruebuOS9jSAtIOS/neeVmeatpOaWueazleS7pemBv+WFjeiwg+eUqOmUmeivr++8jOS9huS4jeaJp+ihjOS7u+S9leaTjeS9nFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwaGFzZSAtIOebuOS9jeWAvO+8iOW8p+W6pu+8iVxyXG4gICAqL1xyXG4gIHNldFBoYXNlKHBoYXNlKSB7XHJcbiAgICAvLyDpnZnmgIHms6LlvaLlt7Lnp7vpmaTvvIzmraTmlrnms5Xkv53nlZnkuLrnqbrku6Xpgb/lhY3osIPnlKjplJnor69cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDlvIDlp4vms6LlvaLliqjnlLsgLSDkv53nlZnmraTmlrnms5Xku6Xpgb/lhY3osIPnlKjplJnor6/vvIzkvYbkuI3miafooYzku7vkvZXmk43kvZxcclxuICAgKi9cclxuICBzdGFydFdhdmVmb3JtQW5pbWF0aW9uKCkge1xyXG4gICAgLy8g6Z2Z5oCB5rOi5b2i5bey56e76Zmk77yM5q2k5pa55rOV5L+d55WZ5Li656m65Lul6YG/5YWN6LCD55So6ZSZ6K+vXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5YGc5q2i5rOi5b2i5Yqo55S7IC0g5L+d55WZ5q2k5pa55rOV5Lul6YG/5YWN6LCD55So6ZSZ6K+v77yM5L2G5LiN5omn6KGM5Lu75L2V5pON5L2cXHJcbiAgICovXHJcbiAgc3RvcFdhdmVmb3JtQW5pbWF0aW9uKCkge1xyXG4gICAgLy8g6Z2Z5oCB5rOi5b2i5bey56e76Zmk77yM5q2k5pa55rOV5L+d55WZ5Li656m65Lul6YG/5YWN6LCD55So6ZSZ6K+vXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn0gIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQgeyBDU1MyRFJlbmRlcmVyLCBDU1MyRE9iamVjdCB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9yZW5kZXJlcnMvQ1NTMkRSZW5kZXJlci5qcyc7XHJcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gJy4uL2NvbmZpZ0xvYWRlci5qcyc7XHJcblxyXG4vKipcclxuICog5qCH562+57O757uf57G7XHJcbiAqIOi0n+i0o+euoeeQhuWSjOa4suafkzNE5Zy65pmv5Lit55qE5qCH562+XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGFiZWxTeXN0ZW0ge1xyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIEBwYXJhbSB7VEhSRUUuU2NlbmV9IHNjZW5lIC0gVGhyZWUuanPlnLrmma9cclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXIgLSDlrrnlmajlhYPntKBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihzY2VuZSwgY29udGFpbmVyKSB7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMubGFiZWxzID0gbmV3IE1hcCgpOyAvLyDlrZjlgqjmoIfnrb7lr7nosaFcclxuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlOyAvLyDpu5jorqTpmpDol4/moIfnrb5cclxuICAgIFxyXG4gICAgLy8g5Yid5aeL5YyWQ1NTMkTmuLLmn5PlmahcclxuICAgIHRoaXMuaW5pdFJlbmRlcmVyKCk7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdMYWJlbFN5c3RlbeWIneWni+WMluWujOaIkCcpO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDliJ3lp4vljJZDU1MyROa4suafk+WZqFxyXG4gICAqL1xyXG4gIGluaXRSZW5kZXJlcigpIHtcclxuICAgIHRoaXMubGFiZWxSZW5kZXJlciA9IG5ldyBDU1MyRFJlbmRlcmVyKCk7XHJcbiAgICB0aGlzLmxhYmVsUmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgIHRoaXMubGFiZWxSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIHRoaXMubGFiZWxSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwJztcclxuICAgIHRoaXMubGFiZWxSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsUmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcbiAgICBcclxuICAgIC8vIOm7mOiupOmakOiXj1xyXG4gICAgdGhpcy5sYWJlbFJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5Yib5bu65qCH562+XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0g5qCH562+SURcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIOagh+etvuaWh+acrFxyXG4gICAqIEBwYXJhbSB7VEhSRUUuT2JqZWN0M0R9IHRhcmdldCAtIOagh+etvumZhOWKoOeahOebruagh+WvueixoVxyXG4gICAqIEBwYXJhbSB7VEhSRUUuVmVjdG9yM30gb2Zmc2V0IC0g5qCH562+55u45a+55LqO55uu5qCH55qE5YGP56e76YePXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRlc2NyaXB0aW9uIC0g5qCH562+5o+P6L+w77yI5Y+v6YCJ77yJXHJcbiAgICovXHJcbiAgY3JlYXRlTGFiZWwoaWQsIHRleHQsIHRhcmdldCwgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMC41LCAwKSwgZGVzY3JpcHRpb24gPSAnJykge1xyXG4gICAgLy8g5Yib5bu65qCH562+5YWD57SgXHJcbiAgICBjb25zdCBsYWJlbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbGFiZWxEaXYuY2xhc3NOYW1lID0gJ2xhYmVsJztcclxuICAgIGxhYmVsRGl2LnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIGxhYmVsRGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IENPTkZJRy5sYWJlbFN5c3RlbS5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICBsYWJlbERpdi5zdHlsZS5jb2xvciA9IENPTkZJRy5sYWJlbFN5c3RlbS5jb2xvcjtcclxuICAgIGxhYmVsRGl2LnN0eWxlLnBhZGRpbmcgPSBDT05GSUcubGFiZWxTeXN0ZW0ucGFkZGluZztcclxuICAgIGxhYmVsRGl2LnN0eWxlLmJvcmRlclJhZGl1cyA9IENPTkZJRy5sYWJlbFN5c3RlbS5ib3JkZXJSYWRpdXM7XHJcbiAgICBsYWJlbERpdi5zdHlsZS5mb250U2l6ZSA9IENPTkZJRy5sYWJlbFN5c3RlbS5mb250U2l6ZTtcclxuICAgIGxhYmVsRGl2LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYXV0byc7XHJcbiAgICBsYWJlbERpdi5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XHJcbiAgICBcclxuICAgIC8vIOWIm+W7ukNTUzJE5a+56LGhXHJcbiAgICBjb25zdCBsYWJlbE9iamVjdCA9IG5ldyBDU1MyRE9iamVjdChsYWJlbERpdik7XHJcbiAgICBsYWJlbE9iamVjdC5wb3NpdGlvbi5jb3B5KG9mZnNldCk7XHJcbiAgICBcclxuICAgIC8vIOWwhuagh+etvua3u+WKoOWIsOebruagh+WvueixoVxyXG4gICAgdGFyZ2V0LmFkZChsYWJlbE9iamVjdCk7XHJcbiAgICBcclxuICAgIC8vIOWtmOWCqOagh+etvuS/oeaBr1xyXG4gICAgdGhpcy5sYWJlbHMuc2V0KGlkLCB7XHJcbiAgICAgIG9iamVjdDogbGFiZWxPYmplY3QsXHJcbiAgICAgIGVsZW1lbnQ6IGxhYmVsRGl2LFxyXG4gICAgICB0YXJnZXQ6IHRhcmdldCxcclxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g5re75Yqg54K55Ye75LqL5Lu2XHJcbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcclxuICAgICAgbGFiZWxEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG93RGVzY3JpcHRpb24oaWQpO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIC8vIOa3u+WKoOaPkOekulxyXG4gICAgICBsYWJlbERpdi50aXRsZSA9ICfngrnlh7vmn6XnnIvor6bmg4UnO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gbGFiZWxPYmplY3Q7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOaYvuekuuagh+etvuaPj+i/sFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIOagh+etvklEXHJcbiAgICovXHJcbiAgc2hvd0Rlc2NyaXB0aW9uKGlkKSB7XHJcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMubGFiZWxzLmdldChpZCk7XHJcbiAgICBpZiAoIWxhYmVsIHx8ICFsYWJlbC5kZXNjcmlwdGlvbikgcmV0dXJuO1xyXG4gICAgXHJcbiAgICAvLyDliJvlu7rmiJbmm7TmlrDmj4/ov7DpnaLmnb9cclxuICAgIGxldCBkZXNjUGFuZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGFiZWwtZGVzY3JpcHRpb24tcGFuZWwnKTtcclxuICAgIGlmICghZGVzY1BhbmVsKSB7XHJcbiAgICAgIGRlc2NQYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBkZXNjUGFuZWwuaWQgPSAnbGFiZWwtZGVzY3JpcHRpb24tcGFuZWwnO1xyXG4gICAgICBkZXNjUGFuZWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICBkZXNjUGFuZWwuc3R5bGUuYm90dG9tID0gQ09ORklHLmxhYmVsU3lzdGVtLmRlc2NyaXB0aW9uUGFuZWwucG9zaXRpb24uYm90dG9tO1xyXG4gICAgICBkZXNjUGFuZWwuc3R5bGUubGVmdCA9IENPTkZJRy5sYWJlbFN5c3RlbS5kZXNjcmlwdGlvblBhbmVsLnBvc2l0aW9uLmxlZnQ7XHJcbiAgICAgIGRlc2NQYW5lbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBDT05GSUcubGFiZWxTeXN0ZW0uZGVzY3JpcHRpb25QYW5lbC5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgIGRlc2NQYW5lbC5zdHlsZS5jb2xvciA9ICd3aGl0ZSc7XHJcbiAgICAgIGRlc2NQYW5lbC5zdHlsZS5wYWRkaW5nID0gJzE1cHgnO1xyXG4gICAgICBkZXNjUGFuZWwuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzVweCc7XHJcbiAgICAgIGRlc2NQYW5lbC5zdHlsZS5tYXhXaWR0aCA9IENPTkZJRy5sYWJlbFN5c3RlbS5kZXNjcmlwdGlvblBhbmVsLm1heFdpZHRoO1xyXG4gICAgICBkZXNjUGFuZWwuc3R5bGUuekluZGV4ID0gQ09ORklHLmxhYmVsU3lzdGVtLmRlc2NyaXB0aW9uUGFuZWwuekluZGV4O1xyXG4gICAgICBkZXNjUGFuZWwuc3R5bGUudHJhbnNpdGlvbiA9ICdvcGFjaXR5IDAuM3MnO1xyXG4gICAgICBkZXNjUGFuZWwuc3R5bGUuYm94U2hhZG93ID0gJzAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC41KSc7XHJcbiAgICAgIFxyXG4gICAgICAvLyDmt7vliqDlhbPpl63mjInpkq5cclxuICAgICAgY29uc3QgY2xvc2VCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgY2xvc2VCdG4udGV4dENvbnRlbnQgPSAnw5cnO1xyXG4gICAgICBjbG9zZUJ0bi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgIGNsb3NlQnRuLnN0eWxlLnRvcCA9ICc1cHgnO1xyXG4gICAgICBjbG9zZUJ0bi5zdHlsZS5yaWdodCA9ICc1cHgnO1xyXG4gICAgICBjbG9zZUJ0bi5zdHlsZS5iYWNrZ3JvdW5kID0gJ25vbmUnO1xyXG4gICAgICBjbG9zZUJ0bi5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XHJcbiAgICAgIGNsb3NlQnRuLnN0eWxlLmNvbG9yID0gJ3doaXRlJztcclxuICAgICAgY2xvc2VCdG4uc3R5bGUuZm9udFNpemUgPSAnMjBweCc7XHJcbiAgICAgIGNsb3NlQnRuLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcclxuICAgICAgY2xvc2VCdG4ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICBkZXNjUGFuZWwuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGlmIChkZXNjUGFuZWwucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICBkZXNjUGFuZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkZXNjUGFuZWwpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDMwMCk7XHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICBkZXNjUGFuZWwuYXBwZW5kQ2hpbGQoY2xvc2VCdG4pO1xyXG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChkZXNjUGFuZWwpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDorr7nva7moIfpopjlkozmj4/ov7BcclxuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcclxuICAgIHRpdGxlLnRleHRDb250ZW50ID0gbGFiZWwuZWxlbWVudC50ZXh0Q29udGVudDtcclxuICAgIHRpdGxlLnN0eWxlLm1hcmdpbiA9ICcwIDAgMTBweCAwJztcclxuICAgIFxyXG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGRlc2NyaXB0aW9uLmlubmVySFRNTCA9IGxhYmVsLmRlc2NyaXB0aW9uO1xyXG4gICAgXHJcbiAgICAvLyDmuIXpmaTml6flhoXlrrlcclxuICAgIHdoaWxlIChkZXNjUGFuZWwuZmlyc3RDaGlsZCkge1xyXG4gICAgICBpZiAoZGVzY1BhbmVsLmZpcnN0Q2hpbGQudGFnTmFtZSAhPT0gJ0JVVFRPTicpIHtcclxuICAgICAgICBkZXNjUGFuZWwucmVtb3ZlQ2hpbGQoZGVzY1BhbmVsLmZpcnN0Q2hpbGQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGRlc2NQYW5lbC5hcHBlbmRDaGlsZCh0aXRsZSk7XHJcbiAgICBkZXNjUGFuZWwuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb24pO1xyXG4gICAgZGVzY1BhbmVsLnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruagh+etvuWPr+ingeaAp1xyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmlzaWJsZSAtIOaYr+WQpuWPr+ingVxyXG4gICAqL1xyXG4gIHNldFZpc2libGUodmlzaWJsZSkge1xyXG4gICAgdGhpcy52aXNpYmxlID0gdmlzaWJsZTtcclxuICAgIHRoaXMubGFiZWxSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSB2aXNpYmxlID8gJ2Jsb2NrJyA6ICdub25lJztcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5pu05paw5qCH562+5L2N572u5ZKM5aSn5bCPXHJcbiAgICogQHBhcmFtIHtUSFJFRS5DYW1lcmF9IGNhbWVyYSAtIOebuOaculxyXG4gICAqL1xyXG4gIHVwZGF0ZShjYW1lcmEpIHtcclxuICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgdGhpcy5sYWJlbFJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLCBjYW1lcmEpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDosIPmlbTmoIfnrb7muLLmn5PlmajlpKflsI9cclxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSDlrr3luqZcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0g6auY5bqmXHJcbiAgICovXHJcbiAgcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHRoaXMubGFiZWxSZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDnp7vpmaTmoIfnrb5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSDmoIfnrb5JRFxyXG4gICAqL1xyXG4gIHJlbW92ZUxhYmVsKGlkKSB7XHJcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMubGFiZWxzLmdldChpZCk7XHJcbiAgICBpZiAobGFiZWwpIHtcclxuICAgICAgbGFiZWwudGFyZ2V0LnJlbW92ZShsYWJlbC5vYmplY3QpO1xyXG4gICAgICB0aGlzLmxhYmVscy5kZWxldGUoaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDnp7vpmaTmiYDmnInmoIfnrb5cclxuICAgKi9cclxuICByZW1vdmVBbGxMYWJlbHMoKSB7XHJcbiAgICB0aGlzLmxhYmVscy5mb3JFYWNoKChsYWJlbCwgaWQpID0+IHtcclxuICAgICAgbGFiZWwudGFyZ2V0LnJlbW92ZShsYWJlbC5vYmplY3QpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmxhYmVscy5jbGVhcigpO1xyXG4gIH1cclxufSAiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgKiBhcyBUV0VFTiBmcm9tICdAdHdlZW5qcy90d2Vlbi5qcyc7XG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuLi9jb25maWdMb2FkZXIuanMnO1xuaW1wb3J0IHsgdHdlZW5Hcm91cCB9IGZyb20gJy4uL21haW4uanMnO1xuXG4vKipcbiAqIOWIhuino+inhuWbvuexu1xuICog6LSf6LSj5aSE55CG5qih5Z6L55qE5YiG6Kej6KeG5Zu+5pWI5p6cXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBsb2RlZFZpZXcge1xuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb21wb25lbnRzIC0g57uE5Lu25a+56LGh6ZuG5ZCIXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb21wb25lbnRzKSB7XG4gICAgdGhpcy5jb21wb25lbnRzID0gY29tcG9uZW50cztcbiAgICB0aGlzLm9yaWdpbmFsUG9zaXRpb25zID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuZXhwbG9kZWQgPSBmYWxzZTtcbiAgICB0aGlzLmV4cGxvZGVGYWN0b3IgPSBDT05GSUcuZXhwbG9kZWRWaWV3LmV4cGxvZGVGYWN0b3I7XG4gICAgdGhpcy50d2VlbnMgPSBbXTtcbiAgICBcbiAgICAvLyDkuLvopoHnu4Tku7bliJfooajvvIjku4XnlKjkuo7ogZrnhKbvvIzkuI3lj4LkuI7liIbop6PliqjnlLvvvIlcbiAgICB0aGlzLmZvY3VzT25seUNvbXBvbmVudHMgPSBbJ2d1bicsICdndW5IZWFkJywgJ3YxJywgJ3YyJywgJ2gxJywgJ2gyJywgJ3NjcmVlbiddO1xuICAgIFxuICAgIC8vIOS/neWtmOWOn+Wni+S9jee9rlxuICAgIHRoaXMuc2F2ZU9yaWdpbmFsUG9zaXRpb25zKCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDkv53lrZjmiYDmnInnu4Tku7bnmoTljp/lp4vkvY3nva5cbiAgICovXG4gIHNhdmVPcmlnaW5hbFBvc2l0aW9ucygpIHtcbiAgICBPYmplY3QuZW50cmllcyh0aGlzLmNvbXBvbmVudHMpLmZvckVhY2goKFtrZXksIG9iamVjdF0pID0+IHtcbiAgICAgIC8vIOi3s+i/h+S7heeUqOS6juiBmueEpueahOe7hOS7tlxuICAgICAgaWYgKHRoaXMuZm9jdXNPbmx5Q29tcG9uZW50cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKG9iamVjdCAmJiBvYmplY3QucG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbFBvc2l0aW9ucy5zZXQoa2V5LCBvYmplY3QucG9zaXRpb24uY2xvbmUoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDmt7vliqDnu4Tku7ZcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIOe7hOS7tumUruWQjVxuICAgKiBAcGFyYW0ge1RIUkVFLk9iamVjdDNEfSBvYmplY3QgLSDnu4Tku7blr7nosaFcbiAgICovXG4gIGFkZENvbXBvbmVudChrZXksIG9iamVjdCkge1xuICAgIHRoaXMuY29tcG9uZW50c1trZXldID0gb2JqZWN0O1xuICAgIFxuICAgIC8vIOi3s+i/h+S7heeUqOS6juiBmueEpueahOe7hOS7tu+8jOS4jeS/neWtmOWFtuWOn+Wni+S9jee9rlxuICAgIGlmICghdGhpcy5mb2N1c09ubHlDb21wb25lbnRzLmluY2x1ZGVzKGtleSkgJiYgb2JqZWN0ICYmIG9iamVjdC5wb3NpdGlvbikge1xuICAgICAgdGhpcy5vcmlnaW5hbFBvc2l0aW9ucy5zZXQoa2V5LCBvYmplY3QucG9zaXRpb24uY2xvbmUoKSk7XG4gICAgfVxuICB9XG4gIFxuICAvKipcbiAgICog6K6h566X57uE5Lu255qE5YiG6Kej5L2N572uXG4gICAqIEBwYXJhbSB7VEhSRUUuVmVjdG9yM30gb3JpZ2luYWxQb3NpdGlvbiAtIOWOn+Wni+S9jee9rlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50S2V5IC0g57uE5Lu26ZSu5ZCNXG4gICAqIEByZXR1cm5zIHtUSFJFRS5WZWN0b3IzfSDliIbop6PlkI7nmoTkvY3nva5cbiAgICovXG4gIGNhbGN1bGF0ZUV4cGxvZGVkUG9zaXRpb24ob3JpZ2luYWxQb3NpdGlvbiwgY29tcG9uZW50S2V5KSB7XG4gICAgLy8g5a6a5LmJ5ZCE57uE5Lu255qE5YiG6Kej5pa55ZCRXG4gICAgY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgICAgICdndW4nOiBuZXcgVEhSRUUuVmVjdG9yMygtMSwgMCwgMCksXG4gICAgICAnZ3VuSGVhZCc6IG5ldyBUSFJFRS5WZWN0b3IzKC0xLCAwLCAwKSxcbiAgICAgICd2MSc6IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDEsIDApLFxuICAgICAgJ3YyJzogbmV3IFRIUkVFLlZlY3RvcjMoMCwgLTEsIDApLFxuICAgICAgJ2gxJzogbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMSksXG4gICAgICAnaDInOiBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAtMSksXG4gICAgICAnc2NyZWVuJzogbmV3IFRIUkVFLlZlY3RvcjMoMSwgMCwgMClcbiAgICB9O1xuICAgIFxuICAgIC8vIOiOt+WPluWIhuino+aWueWQke+8jOWmguaenOayoeacieWumuS5ieWImeS9v+eUqOm7mOiupOaWueWQke+8iOWQkeWklu+8iVxuICAgIGxldCBkaXJlY3Rpb247XG4gICAgaWYgKGRpcmVjdGlvbnNbY29tcG9uZW50S2V5XSkge1xuICAgICAgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tjb21wb25lbnRLZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDpu5jorqTmlrnlkJHvvJrku47ljp/ngrnliLDnu4Tku7bnmoTmlrnlkJFcbiAgICAgIGRpcmVjdGlvbiA9IG9yaWdpbmFsUG9zaXRpb24uY2xvbmUoKS5ub3JtYWxpemUoKTtcbiAgICAgIGlmIChkaXJlY3Rpb24ubGVuZ3RoKCkgPT09IDApIHtcbiAgICAgICAgZGlyZWN0aW9uLnNldCgxLCAwLCAwKTsgLy8g6buY6K6kWOi9tOaWueWQkVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDorqHnrpfliIbop6PlkI7nmoTkvY3nva5cbiAgICByZXR1cm4gb3JpZ2luYWxQb3NpdGlvbi5jbG9uZSgpLmFkZChcbiAgICAgIGRpcmVjdGlvbi5tdWx0aXBseVNjYWxhcih0aGlzLmV4cGxvZGVGYWN0b3IpXG4gICAgKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIh+aNouWIhuino+inhuWbvlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGV4cGxvZGUgLSDmmK/lkKbliIbop6NcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0g5Yqo55S75oyB57ut5pe26Ze077yI5q+r56eS77yJXG4gICAqL1xuICB0b2dnbGUoZXhwbG9kZSA9ICF0aGlzLmV4cGxvZGVkLCBkdXJhdGlvbiA9IENPTkZJRy5leHBsb2RlZFZpZXcuYW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICB0aGlzLmV4cGxvZGVkID0gZXhwbG9kZTtcbiAgICBcbiAgICAvLyDlgZzmraLmiYDmnInmraPlnKjov5vooYznmoTliqjnlLtcbiAgICB0aGlzLnR3ZWVucy5mb3JFYWNoKHR3ZWVuID0+IHR3ZWVuLnN0b3AoKSk7XG4gICAgdGhpcy50d2VlbnMgPSBbXTtcbiAgICBcbiAgICAvLyDkuLrmr4/kuKrnu4Tku7bliJvlu7rliqjnlLtcbiAgICBPYmplY3QuZW50cmllcyh0aGlzLmNvbXBvbmVudHMpLmZvckVhY2goKFtrZXksIG9iamVjdF0pID0+IHtcbiAgICAgIC8vIOi3s+i/h+S7heeUqOS6juiBmueEpueahOe7hOS7tlxuICAgICAgaWYgKHRoaXMuZm9jdXNPbmx5Q29tcG9uZW50cy5pbmNsdWRlcyhrZXkpKSByZXR1cm47XG4gICAgICBcbiAgICAgIGlmICghb2JqZWN0IHx8ICFvYmplY3QucG9zaXRpb24pIHJldHVybjtcbiAgICAgIFxuICAgICAgY29uc3Qgb3JpZ2luYWxQb3NpdGlvbiA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbnMuZ2V0KGtleSk7XG4gICAgICBpZiAoIW9yaWdpbmFsUG9zaXRpb24pIHJldHVybjtcbiAgICAgIFxuICAgICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSBleHBsb2RlIFxuICAgICAgICA/IHRoaXMuY2FsY3VsYXRlRXhwbG9kZWRQb3NpdGlvbihvcmlnaW5hbFBvc2l0aW9uLCBrZXkpXG4gICAgICAgIDogb3JpZ2luYWxQb3NpdGlvbi5jbG9uZSgpO1xuICAgICAgXG4gICAgICAvLyDliJvlu7rkvY3nva7liqjnlLtcbiAgICAgIGNvbnN0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9iamVjdC5wb3NpdGlvbiwgdHdlZW5Hcm91cClcbiAgICAgICAgLnRvKHtcbiAgICAgICAgICB4OiB0YXJnZXRQb3NpdGlvbi54LFxuICAgICAgICAgIHk6IHRhcmdldFBvc2l0aW9uLnksXG4gICAgICAgICAgejogdGFyZ2V0UG9zaXRpb24uelxuICAgICAgICB9LCBkdXJhdGlvbilcbiAgICAgICAgLmVhc2luZyhUV0VFTi5FYXNpbmcuUXVhZHJhdGljLkluT3V0KVxuICAgICAgICAuc3RhcnQoKTtcbiAgICAgIFxuICAgICAgdGhpcy50d2VlbnMucHVzaCh0d2Vlbik7XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuZXhwbG9kZWQ7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDogZrnhKbliLDnibnlrprnu4Tku7ZcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudEtleSAtIOe7hOS7tumUruWQjVxuICAgKiBAcGFyYW0ge1RIUkVFLkNhbWVyYX0gY2FtZXJhIC0g55u45py6XG4gICAqIEBwYXJhbSB7VEhSRUUuQ29udHJvbHN9IGNvbnRyb2xzIC0g5o6n5Yi25ZmoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIOWKqOeUu+aMgee7reaXtumXtO+8iOavq+enku+8iVxuICAgKi9cbiAgZm9jdXNDb21wb25lbnQoY29tcG9uZW50S2V5LCBjYW1lcmEsIGNvbnRyb2xzLCBkdXJhdGlvbiA9IDEwMDApIHtcbiAgICBjb25zb2xlLmxvZygnRXhwbG9kZWRWaWV3LmZvY3VzQ29tcG9uZW506KKr6LCD55SoJyk7XG4gICAgY29uc29sZS5sb2coJ2NvbXBvbmVudEtleTonLCBjb21wb25lbnRLZXkpO1xuICAgIGNvbnNvbGUubG9nKCd0aGlzLmNvbXBvbmVudHM6JywgdGhpcy5jb21wb25lbnRzKTtcbiAgICBjb25zb2xlLmxvZygnY2FtZXJhOicsIGNhbWVyYSk7XG4gICAgY29uc29sZS5sb2coJ2NvbnRyb2xzOicsIGNvbnRyb2xzKTtcbiAgICBcbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50S2V5XTtcbiAgICBjb25zb2xlLmxvZygn5om+5Yiw55qE57uE5Lu2OicsIGNvbXBvbmVudCk7XG4gICAgXG4gICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+e7hOS7tuacquaJvuWIsDonLCBjb21wb25lbnRLZXkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyDorqHnrpfnm67moIfkvY3nva7vvIjnu4Tku7bkvY3nva4gKyDlgY/np7vvvIlcbiAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IGNvbXBvbmVudC5wb3NpdGlvbi5jbG9uZSgpO1xuICAgIGNvbnN0IG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKFxuICAgICAgQ09ORklHLmV4cGxvZGVkVmlldy5jYW1lcmFPZmZzZXQueCxcbiAgICAgIENPTkZJRy5leHBsb2RlZFZpZXcuY2FtZXJhT2Zmc2V0LnksXG4gICAgICBDT05GSUcuZXhwbG9kZWRWaWV3LmNhbWVyYU9mZnNldC56XG4gICAgKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn57uE5Lu25L2N572uOicsIHRhcmdldFBvc2l0aW9uKTtcbiAgICBjb25zb2xlLmxvZygn55u45py65YGP56e7OicsIG9mZnNldCk7XG4gICAgY29uc29sZS5sb2coJ+ebruagh+ebuOacuuS9jee9rjonLCB7XG4gICAgICB4OiB0YXJnZXRQb3NpdGlvbi54ICsgb2Zmc2V0LngsXG4gICAgICB5OiB0YXJnZXRQb3NpdGlvbi55ICsgb2Zmc2V0LnksXG4gICAgICB6OiB0YXJnZXRQb3NpdGlvbi56ICsgb2Zmc2V0LnpcbiAgICB9KTtcbiAgICBcbiAgICAvLyDliJvlu7rnm7jmnLrkvY3nva7liqjnlLtcbiAgICBjb25zdCBwb3NUd2VlbiA9IG5ldyBUV0VFTi5Ud2VlbihjYW1lcmEucG9zaXRpb24sIHR3ZWVuR3JvdXApXG4gICAgICAudG8oe1xuICAgICAgICB4OiB0YXJnZXRQb3NpdGlvbi54ICsgb2Zmc2V0LngsXG4gICAgICAgIHk6IHRhcmdldFBvc2l0aW9uLnkgKyBvZmZzZXQueSxcbiAgICAgICAgejogdGFyZ2V0UG9zaXRpb24ueiArIG9mZnNldC56XG4gICAgICB9LCBkdXJhdGlvbilcbiAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkN1YmljLkluT3V0KVxuICAgICAgLnN0YXJ0KCk7XG4gICAgXG4gICAgLy8g5Yib5bu65o6n5Yi25Zmo55uu5qCH54K55Yqo55S7XG4gICAgY29uc3QgdGFyZ2V0VHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oY29udHJvbHMudGFyZ2V0LCB0d2Vlbkdyb3VwKVxuICAgICAgLnRvKHtcbiAgICAgICAgeDogdGFyZ2V0UG9zaXRpb24ueCxcbiAgICAgICAgeTogdGFyZ2V0UG9zaXRpb24ueSxcbiAgICAgICAgejogdGFyZ2V0UG9zaXRpb24uelxuICAgICAgfSwgZHVyYXRpb24pXG4gICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5DdWJpYy5Jbk91dClcbiAgICAgIC5zdGFydCgpO1xuICAgIFxuICAgIHRoaXMudHdlZW5zLnB1c2gocG9zVHdlZW4sIHRhcmdldFR3ZWVuKTtcbiAgICBjb25zb2xlLmxvZygn5Yqo55S75bey5Yib5bu65bm25re75Yqg5YiwdHdlZW5z5pWw57uE77yM5b2T5YmNdHdlZW5z5pWw6YePOicsIHRoaXMudHdlZW5zLmxlbmd0aCk7XG4gICAgXG4gICAgLy8g5aaC5p6c5Yqo55S75rKh5pyJ56uL5Y2z5byA5aeL77yM5by65Yi256e75Yqo55u45py6XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY2FtZXJhLnBvc2l0aW9uLmRpc3RhbmNlVG8obmV3IFRIUkVFLlZlY3RvcjMoXG4gICAgICAgIHRhcmdldFBvc2l0aW9uLnggKyBvZmZzZXQueCxcbiAgICAgICAgdGFyZ2V0UG9zaXRpb24ueSArIG9mZnNldC55LFxuICAgICAgICB0YXJnZXRQb3NpdGlvbi56ICsgb2Zmc2V0LnpcbiAgICAgICkpID4gMC4xKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfliqjnlLvlj6/og73msqHmnInmraPluLjlt6XkvZzvvIzlvLrliLbnp7vliqjnm7jmnLonKTtcbiAgICAgICAgdGhpcy5mb3JjZU1vdmVDYW1lcmEoY2FtZXJhLCBjb250cm9scywgdGFyZ2V0UG9zaXRpb24sIG9mZnNldCk7XG4gICAgICB9XG4gICAgfSwgMTAwKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOW8uuWItuenu+WKqOebuOacuu+8iOWkh+mAieaWueahiO+8iVxuICAgKi9cbiAgZm9yY2VNb3ZlQ2FtZXJhKGNhbWVyYSwgY29udHJvbHMsIHRhcmdldFBvc2l0aW9uLCBvZmZzZXQpIHtcbiAgICBjb25zb2xlLmxvZygn5omn6KGM5by65Yi256e75YqoJyk7XG4gICAgXG4gICAgLy8g55u05o6l6K6+572u55u45py65L2N572uXG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldChcbiAgICAgIHRhcmdldFBvc2l0aW9uLnggKyBvZmZzZXQueCxcbiAgICAgIHRhcmdldFBvc2l0aW9uLnkgKyBvZmZzZXQueSxcbiAgICAgIHRhcmdldFBvc2l0aW9uLnogKyBvZmZzZXQuelxuICAgICk7XG4gICAgXG4gICAgLy8g55u05o6l6K6+572u5o6n5Yi25Zmo55uu5qCH54K5XG4gICAgY29udHJvbHMudGFyZ2V0LnNldChcbiAgICAgIHRhcmdldFBvc2l0aW9uLngsXG4gICAgICB0YXJnZXRQb3NpdGlvbi55LFxuICAgICAgdGFyZ2V0UG9zaXRpb24uelxuICAgICk7XG4gICAgXG4gICAgLy8g5pu05paw5o6n5Yi25ZmoXG4gICAgY29udHJvbHMudXBkYXRlKCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+W8uuWItuenu+WKqOWujOaIkO+8jOebuOacuuS9jee9rjonLCBjYW1lcmEucG9zaXRpb24pO1xuICAgIGNvbnNvbGUubG9nKCfmjqfliLblmajnm67moIfngrk6JywgY29udHJvbHMudGFyZ2V0KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOmHjee9ruinhuWbvlxuICAgKiBAcGFyYW0ge1RIUkVFLkNhbWVyYX0gY2FtZXJhIC0g55u45py6XG4gICAqIEBwYXJhbSB7VEhSRUUuQ29udHJvbHN9IGNvbnRyb2xzIC0g5o6n5Yi25ZmoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIOWKqOeUu+aMgee7reaXtumXtO+8iOavq+enku+8iVxuICAgKi9cbiAgcmVzZXRWaWV3KGNhbWVyYSwgY29udHJvbHMsIGR1cmF0aW9uID0gQ09ORklHLmV4cGxvZGVkVmlldy5hbmltYXRpb25EdXJhdGlvbikge1xuICAgIC8vIOmHjee9ruebuOacuuS9jee9rlxuICAgIGNvbnN0IHBvc1R3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKGNhbWVyYS5wb3NpdGlvbiwgdHdlZW5Hcm91cClcbiAgICAgIC50byh7IFxuICAgICAgICB4OiBDT05GSUcuY2FtZXJhLnBvc2l0aW9uLngsIFxuICAgICAgICB5OiBDT05GSUcuY2FtZXJhLnBvc2l0aW9uLnksIFxuICAgICAgICB6OiBDT05GSUcuY2FtZXJhLnBvc2l0aW9uLnogXG4gICAgICB9LCBkdXJhdGlvbilcbiAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkN1YmljLkluT3V0KVxuICAgICAgLnN0YXJ0KCk7XG4gICAgXG4gICAgLy8g6YeN572u5o6n5Yi25Zmo55uu5qCH54K5XG4gICAgY29uc3QgdGFyZ2V0VHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oY29udHJvbHMudGFyZ2V0LCB0d2Vlbkdyb3VwKVxuICAgICAgLnRvKHsgXG4gICAgICAgIHg6IENPTkZJRy5jYW1lcmEudGFyZ2V0LngsIFxuICAgICAgICB5OiBDT05GSUcuY2FtZXJhLnRhcmdldC55LCBcbiAgICAgICAgejogQ09ORklHLmNhbWVyYS50YXJnZXQueiBcbiAgICAgIH0sIGR1cmF0aW9uKVxuICAgICAgLmVhc2luZyhUV0VFTi5FYXNpbmcuQ3ViaWMuSW5PdXQpXG4gICAgICAuc3RhcnQoKTtcbiAgICBcbiAgICB0aGlzLnR3ZWVucy5wdXNoKHBvc1R3ZWVuLCB0YXJnZXRUd2Vlbik7XG4gICAgXG4gICAgLy8g5aaC5p6c5aSE5LqO5YiG6Kej54q25oCB77yM6YeN572u57uE5Lu25L2N572uXG4gICAgaWYgKHRoaXMuZXhwbG9kZWQpIHtcbiAgICAgIHRoaXMudG9nZ2xlKGZhbHNlLCBkdXJhdGlvbik7XG4gICAgfVxuICB9XG4gIFxuICAvKipcbiAgICog5pu05paw5Yqo55S7XG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgLy8g5pu05paw5omA5pyJdHdlZW5zXG4gICAgdGhpcy50d2VlbnMuZm9yRWFjaCh0d2VlbiA9PiB7XG4gICAgICBpZiAodHdlZW4gJiYgdHdlZW4uaXNQbGF5aW5nKSB7XG4gICAgICAgIHR3ZWVuLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIOa4heeQhuW3suWujOaIkOeahHR3ZWVuc1xuICAgIHRoaXMudHdlZW5zID0gdGhpcy50d2VlbnMuZmlsdGVyKHR3ZWVuID0+IHR3ZWVuICYmIHR3ZWVuLmlzUGxheWluZyk7XG4gIH1cbn0gIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuLi9jb25maWdMb2FkZXInO1xyXG5cclxuLyoqXHJcbiAqIOeykuWtkOWvueixoeaxoOexu1xyXG4gKiDnlKjkuo7nrqHnkIbnlLXlrZDnspLlrZDnmoTliJvlu7rjgIHlpI3nlKjlkozlm57mlLbvvIzpgb/lhY3popHnuYHnmoTlhoXlrZjliIbphY3lkozlnoPlnL7lm57mlLZcclxuICog5pi+6JGX5o+Q5Y2H5Yqo55S75oCn6IO977yM54m55Yir5piv5Zyo5aSn6YeP57KS5a2Q5Zy65pmv5LiLXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGFydGljbGVQb29sIHtcclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4U2l6ZSAtIOWvueixoeaxoOacgOWkp+WuuemHj1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmVDcmVhdGVDb3VudCAtIOmihOWIm+W7uueahOeykuWtkOaVsOmHj1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKG1heFNpemUgPSAxMDAsIHByZUNyZWF0ZUNvdW50ID0gMjApIHtcclxuICAgIHRoaXMucG9vbCA9IFtdOyAgICAgICAgICAgICAgICAgICAgLy8g5Y+v55So57KS5a2Q5rGgXHJcbiAgICB0aGlzLmFjdGl2ZVBhcnRpY2xlcyA9IFtdOyAgICAgICAgIC8vIOato+WcqOS9v+eUqOeahOeykuWtkFxyXG4gICAgdGhpcy5tYXhTaXplID0gbWF4U2l6ZTsgICAgICAgICAgIC8vIOacgOWkp+WuuemHj1xyXG4gICAgdGhpcy5wcmVDcmVhdGVDb3VudCA9IHByZUNyZWF0ZUNvdW50O1xyXG4gICAgXHJcbiAgICAvLyDmgKfog73nu5/orqFcclxuICAgIHRoaXMuc3RhdHMgPSB7XHJcbiAgICAgIGNyZWF0ZWQ6IDAsICAgICAgICAvLyDmgLvliJvlu7rmlbBcclxuICAgICAgcmV1c2VkOiAwLCAgICAgICAgIC8vIOmHjeeUqOasoeaVsFxyXG4gICAgICByZWxlYXNlZDogMCwgICAgICAgLy8g6YeK5pS+5qyh5pWwXHJcbiAgICAgIG1heEFjdGl2ZTogMCAgICAgICAvLyDmnIDlpKflkIzml7bmtLvot4PmlbBcclxuICAgIH07XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGBQYXJ0aWNsZVBvb2w6IOWIneWni+WMlu+8jOacgOWkp+WuuemHjz0ke21heFNpemV977yM6aKE5Yib5bu6PSR7cHJlQ3JlYXRlQ291bnR9YCk7XHJcbiAgICBcclxuICAgIC8vIOmihOWIm+W7uueykuWtkOWvueixoVxyXG4gICAgdGhpcy5wcmVDcmVhdGVQYXJ0aWNsZXMoKTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog6aKE5Yib5bu657KS5a2Q5a+56LGhXHJcbiAgICog5Zyo5Yid5aeL5YyW5pe25Yib5bu65LiA5om557KS5a2Q77yM6YG/5YWN6L+Q6KGM5pe25Yib5bu655qE5oCn6IO95byA6ZSAXHJcbiAgICovXHJcbiAgcHJlQ3JlYXRlUGFydGljbGVzKCkge1xyXG4gICAgY29uc29sZS5sb2coYFBhcnRpY2xlUG9vbDog5byA5aeL6aKE5Yib5bu6ICR7dGhpcy5wcmVDcmVhdGVDb3VudH0g5Liq57KS5a2QYCk7XHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wcmVDcmVhdGVDb3VudDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5jcmVhdGVOZXdQYXJ0aWNsZSgpO1xyXG4gICAgICBwYXJ0aWNsZS52aXNpYmxlID0gZmFsc2U7ICAvLyDliJ3lp4vnirbmgIHkuI3lj6/op4FcclxuICAgICAgdGhpcy5wb29sLnB1c2gocGFydGljbGUpO1xyXG4gICAgICB0aGlzLnN0YXRzLmNyZWF0ZWQrKztcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYFBhcnRpY2xlUG9vbDog6aKE5Yib5bu65a6M5oiQ77yM5rGg5Lit5Y+v55So57KS5a2Q5pWwOiAke3RoaXMucG9vbC5sZW5ndGh9YCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuaWsOeahOeykuWtkOWvueixoVxyXG4gICAqIEByZXR1cm5zIHtUSFJFRS5NZXNofSDmlrDliJvlu7rnmoTnspLlrZDnvZHmoLzlr7nosaFcclxuICAgKi9cclxuICBjcmVhdGVOZXdQYXJ0aWNsZSgpIHtcclxuICAgIC8vIOWIm+W7uueQg+S9k+WHoOS9leS9kyAtIOS9v+eUqOi+g+S9jueahOe7huWIhue6p+WIq+S7peaPkOWNh+aAp+iDvVxyXG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoXHJcbiAgICAgIENPTkZJRy5kZW1vQW5pbWF0aW9uPy5lbGVjdHJvblBhcnRpY2xlPy5yYWRpdXMgfHwgMC4wMiwgIC8vIOWNiuW+hFxyXG4gICAgICA4LCAgIC8vIOawtOW5s+WIhuauteaVsO+8iOi+g+S9juS7peaPkOWNh+aAp+iDve+8iVxyXG4gICAgICA2ICAgIC8vIOWeguebtOWIhuauteaVsO+8iOi+g+S9juS7peaPkOWNh+aAp+iDve+8iVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgLy8g5Yib5bu65p2Q6LSoIC0g5LyY5YyW6YCP5piO5bqm5riy5p+TXHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgIGNvbG9yOiBDT05GSUcuYmVhbT8uY29sb3IgfHwgMHgwMGZmZmYsXHJcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxyXG4gICAgICBvcGFjaXR5OiBDT05GSUcuZGVtb0FuaW1hdGlvbj8uZWxlY3Ryb25QYXJ0aWNsZT8ub3BhY2l0eSB8fCAwLjgsXHJcbiAgICAgIGRlcHRoVGVzdDogZmFsc2UsICAvLyDnpoHnlKjmt7HluqbmtYvor5XvvIznoa7kv53nspLlrZDmgLvmmK/lj6/op4FcclxuICAgICAgZGVwdGhXcml0ZTogZmFsc2UsIC8vIOemgeeUqOa3seW6puWGmeWFpeS7pemBv+WFjemAj+aYjuW6pumXrumimFxyXG4gICAgICBibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZyAvLyDkvb/nlKjliqDms5Xmt7flkIjvvIzlop7lvLrlj5HlhYnmlYjmnpxcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDliJvlu7rnvZHmoLzlr7nosaFcclxuICAgIGNvbnN0IHBhcnRpY2xlID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgIFxyXG4gICAgLy8g6K6+572u5riy5p+T6aG65bqP77yM56Gu5L+d57KS5a2Q5Zyo6YCP5piO5p6B5p2/5LmL5ZCO5riy5p+TXHJcbiAgICBwYXJ0aWNsZS5yZW5kZXJPcmRlciA9IDEwO1xyXG4gICAgXHJcbiAgICAvLyDmt7vliqDoh6rlrprkuYnlsZ7mgKfnlKjkuo7ov73ouKpcclxuICAgIHBhcnRpY2xlLnVzZXJEYXRhID0ge1xyXG4gICAgICBwb29sSWQ6IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KSwgIC8vIOWUr+S4gElEXHJcbiAgICAgIGNyZWF0ZWRBdDogRGF0ZS5ub3coKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Yib5bu65pe26Ze0XHJcbiAgICAgIHJldXNlQ291bnQ6IDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6YeN55So5qyh5pWwXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICByZXR1cm4gcGFydGljbGU7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOS7juWvueixoeaxoOiOt+WPluS4gOS4queykuWtkFxyXG4gICAqIEByZXR1cm5zIHtUSFJFRS5NZXNofSDlj6/nlKjnmoTnspLlrZDlr7nosaFcclxuICAgKi9cclxuICBnZXRQYXJ0aWNsZSgpIHtcclxuICAgIGxldCBwYXJ0aWNsZTtcclxuICAgIFxyXG4gICAgaWYgKHRoaXMucG9vbC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIOS7juaxoOS4reWPluWHuuS4gOS4queOsOaIkOeahOeykuWtkO+8iOacgOS9s+aDheWGte+8iVxyXG4gICAgICBwYXJ0aWNsZSA9IHRoaXMucG9vbC5wb3AoKTtcclxuICAgICAgcGFydGljbGUudXNlckRhdGEucmV1c2VDb3VudCsrO1xyXG4gICAgICB0aGlzLnN0YXRzLnJldXNlZCsrO1xyXG4gICAgICBcclxuICAgIH0gZWxzZSBpZiAodGhpcy5hY3RpdmVQYXJ0aWNsZXMubGVuZ3RoIDwgdGhpcy5tYXhTaXplKSB7XHJcbiAgICAgIC8vIOaxoOepuuS6huS9hui/mOayoei+vuWIsOacgOWkp+mZkOWItu+8jOWIm+W7uuaWsOeahOeykuWtkFxyXG4gICAgICBwYXJ0aWNsZSA9IHRoaXMuY3JlYXRlTmV3UGFydGljbGUoKTtcclxuICAgICAgdGhpcy5zdGF0cy5jcmVhdGVkKys7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBQYXJ0aWNsZVBvb2w6IOaxoOW3suepuu+8jOWIm+W7uuaWsOeykuWtkCAo5oC75Yib5bu65pWwOiAke3RoaXMuc3RhdHMuY3JlYXRlZH0pYCk7XHJcbiAgICAgIFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g6L6+5Yiw5pyA5aSn6ZmQ5Yi277yM5by65Yi25Zue5pS25pyA6ICB55qE57KS5a2QXHJcbiAgICAgIHBhcnRpY2xlID0gdGhpcy5hY3RpdmVQYXJ0aWNsZXMuc2hpZnQoKTtcclxuICAgICAgY29uc29sZS53YXJuKGBQYXJ0aWNsZVBvb2w6IOi+vuWIsOacgOWkp+WuuemHjyAke3RoaXMubWF4U2l6ZX3vvIzlvLrliLblm57mlLbmnIDogIHnspLlrZBgKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g6YeN572u57KS5a2Q54q25oCBXHJcbiAgICB0aGlzLnJlc2V0UGFydGljbGUocGFydGljbGUpO1xyXG4gICAgXHJcbiAgICAvLyDorr7nva7kuLrlj6/op4HlubbliqDlhaXmtLvot4PliJfooahcclxuICAgIHBhcnRpY2xlLnZpc2libGUgPSB0cnVlO1xyXG4gICAgdGhpcy5hY3RpdmVQYXJ0aWNsZXMucHVzaChwYXJ0aWNsZSk7XHJcbiAgICBcclxuICAgIC8vIOabtOaWsOe7n+iuoVxyXG4gICAgdGhpcy5zdGF0cy5tYXhBY3RpdmUgPSBNYXRoLm1heCh0aGlzLnN0YXRzLm1heEFjdGl2ZSwgdGhpcy5hY3RpdmVQYXJ0aWNsZXMubGVuZ3RoKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHBhcnRpY2xlO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDlsIbnspLlrZDlvZLov5jliLDlr7nosaHmsaBcclxuICAgKiBAcGFyYW0ge1RIUkVFLk1lc2h9IHBhcnRpY2xlIC0g6KaB5b2S6L+Y55qE57KS5a2Q5a+56LGhXHJcbiAgICovXHJcbiAgcmVsZWFzZVBhcnRpY2xlKHBhcnRpY2xlKSB7XHJcbiAgICBpZiAoIXBhcnRpY2xlKSByZXR1cm47XHJcbiAgICBcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5hY3RpdmVQYXJ0aWNsZXMuaW5kZXhPZihwYXJ0aWNsZSk7XHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignUGFydGljbGVQb29sOiDlsJ3or5Xph4rmlL7mnKrlnKjmtLvot4PliJfooajkuK3nmoTnspLlrZAnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDku47mtLvot4PliJfooajkuK3np7vpmaRcclxuICAgIHRoaXMuYWN0aXZlUGFydGljbGVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICBcclxuICAgIC8vIOmHjee9rueykuWtkOeKtuaAgVxyXG4gICAgdGhpcy5yZXNldFBhcnRpY2xlKHBhcnRpY2xlKTtcclxuICAgIHBhcnRpY2xlLnZpc2libGUgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgLy8g5b2S6L+Y5Yiw5rGg5LitXHJcbiAgICB0aGlzLnBvb2wucHVzaChwYXJ0aWNsZSk7XHJcbiAgICB0aGlzLnN0YXRzLnJlbGVhc2VkKys7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOmHjee9rueykuWtkOeKtuaAgVxyXG4gICAqIEBwYXJhbSB7VEhSRUUuTWVzaH0gcGFydGljbGUgLSDopoHph43nva7nmoTnspLlrZBcclxuICAgKi9cclxuICByZXNldFBhcnRpY2xlKHBhcnRpY2xlKSB7XHJcbiAgICAvLyDph43nva7kvY3nva5cclxuICAgIHBhcnRpY2xlLnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcclxuICAgIFxyXG4gICAgLy8g6YeN572u5peL6L2sXHJcbiAgICBwYXJ0aWNsZS5yb3RhdGlvbi5zZXQoMCwgMCwgMCk7XHJcbiAgICBcclxuICAgIC8vIOmHjee9rue8qeaUvlxyXG4gICAgcGFydGljbGUuc2NhbGUuc2V0KDEsIDEsIDEpO1xyXG4gICAgXHJcbiAgICAvLyDph43nva7mnZDotKjlsZ7mgKdcclxuICAgIGlmIChwYXJ0aWNsZS5tYXRlcmlhbCkge1xyXG4gICAgICBwYXJ0aWNsZS5tYXRlcmlhbC5vcGFjaXR5ID0gQ09ORklHLmRlbW9BbmltYXRpb24/LmVsZWN0cm9uUGFydGljbGU/Lm9wYWNpdHkgfHwgMC44O1xyXG4gICAgICBwYXJ0aWNsZS5tYXRlcmlhbC5jb2xvci5zZXRIZXgoQ09ORklHLmJlYW0/LmNvbG9yIHx8IDB4MDBmZmZmKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5YGc5q2i5omA5pyJ5q2j5Zyo6L+b6KGM55qE5Yqo55S7XHJcbiAgICBpZiAocGFydGljbGUudXNlckRhdGEuY3VycmVudFR3ZWVuKSB7XHJcbiAgICAgIHBhcnRpY2xlLnVzZXJEYXRhLmN1cnJlbnRUd2Vlbi5zdG9wKCk7XHJcbiAgICAgIGRlbGV0ZSBwYXJ0aWNsZS51c2VyRGF0YS5jdXJyZW50VHdlZW47XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOaJuemHj+iOt+WPluWkmuS4queykuWtkFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIOmcgOimgeeahOeykuWtkOaVsOmHj1xyXG4gICAqIEByZXR1cm5zIHtUSFJFRS5NZXNoW119IOeykuWtkOaVsOe7hFxyXG4gICAqL1xyXG4gIGdldFBhcnRpY2xlcyhjb3VudCkge1xyXG4gICAgY29uc3QgcGFydGljbGVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgcGFydGljbGVzLnB1c2godGhpcy5nZXRQYXJ0aWNsZSgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwYXJ0aWNsZXM7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOaJuemHj+mHiuaUvuWkmuS4queykuWtkFxyXG4gICAqIEBwYXJhbSB7VEhSRUUuTWVzaFtdfSBwYXJ0aWNsZXMgLSDopoHph4rmlL7nmoTnspLlrZDmlbDnu4RcclxuICAgKi9cclxuICByZWxlYXNlUGFydGljbGVzKHBhcnRpY2xlcykge1xyXG4gICAgcGFydGljbGVzLmZvckVhY2gocGFydGljbGUgPT4gdGhpcy5yZWxlYXNlUGFydGljbGUocGFydGljbGUpKTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5riF55CG5omA5pyJ5rS76LeD57KS5a2QXHJcbiAgICovXHJcbiAgY2xlYXJBbGwoKSB7XHJcbiAgICBjb25zb2xlLmxvZyhgUGFydGljbGVQb29sOiDmuIXnkIbmiYDmnInmtLvot4PnspLlrZDvvIzmlbDph486ICR7dGhpcy5hY3RpdmVQYXJ0aWNsZXMubGVuZ3RofWApO1xyXG4gICAgXHJcbiAgICAvLyDlgZzmraLmiYDmnInnspLlrZDnmoTliqjnlLtcclxuICAgIHRoaXMuYWN0aXZlUGFydGljbGVzLmZvckVhY2gocGFydGljbGUgPT4ge1xyXG4gICAgICBpZiAocGFydGljbGUudXNlckRhdGEuY3VycmVudFR3ZWVuKSB7XHJcbiAgICAgICAgcGFydGljbGUudXNlckRhdGEuY3VycmVudFR3ZWVuLnN0b3AoKTtcclxuICAgICAgICBkZWxldGUgcGFydGljbGUudXNlckRhdGEuY3VycmVudFR3ZWVuO1xyXG4gICAgICB9XHJcbiAgICAgIHBhcnRpY2xlLnZpc2libGUgPSBmYWxzZTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDlsIbmiYDmnInmtLvot4PnspLlrZDlvZLov5jliLDmsaDkuK1cclxuICAgIHRoaXMucG9vbC5wdXNoKC4uLnRoaXMuYWN0aXZlUGFydGljbGVzKTtcclxuICAgIHRoaXMuYWN0aXZlUGFydGljbGVzID0gW107XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWvueixoeaxoOeKtuaAgeS/oeaBr1xyXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IOeKtuaAgeS/oeaBr+WvueixoVxyXG4gICAqL1xyXG4gIGdldFN0YXR1cygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHBvb2xTaXplOiB0aGlzLnBvb2wubGVuZ3RoLCAgICAgICAgICAgLy8g5rGg5Lit5Y+v55So57KS5a2Q5pWwXHJcbiAgICAgIGFjdGl2ZUNvdW50OiB0aGlzLmFjdGl2ZVBhcnRpY2xlcy5sZW5ndGgsICAvLyDmtLvot4PnspLlrZDmlbBcclxuICAgICAgbWF4U2l6ZTogdGhpcy5tYXhTaXplLCAgICAgICAgICAgICAgICAvLyDmnIDlpKflrrnph49cclxuICAgICAgc3RhdHM6IHsgLi4udGhpcy5zdGF0cyB9ICAgICAgICAgICAgIC8vIOaAp+iDvee7n+iuoe+8iOWkjeWItu+8iVxyXG4gICAgfTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5omT5Y2w6K+m57uG54q25oCB5L+h5oGvXHJcbiAgICovXHJcbiAgcHJpbnRTdGF0dXMoKSB7XHJcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmdldFN0YXR1cygpO1xyXG4gICAgY29uc29sZS5sb2coJz09PSBQYXJ0aWNsZVBvb2wg54q25oCB5oql5ZGKID09PScpO1xyXG4gICAgY29uc29sZS5sb2coYOaxoOS4reWPr+eUqDogJHtzdGF0dXMucG9vbFNpemV9YCk7XHJcbiAgICBjb25zb2xlLmxvZyhg5q2j5Zyo5L2/55SoOiAke3N0YXR1cy5hY3RpdmVDb3VudH1gKTtcclxuICAgIGNvbnNvbGUubG9nKGDmnIDlpKflrrnph486ICR7c3RhdHVzLm1heFNpemV9YCk7XHJcbiAgICBjb25zb2xlLmxvZyhg5oC75Yib5bu65pWwOiAke3N0YXR1cy5zdGF0cy5jcmVhdGVkfWApO1xyXG4gICAgY29uc29sZS5sb2coYOmHjeeUqOasoeaVsDogJHtzdGF0dXMuc3RhdHMucmV1c2VkfWApO1xyXG4gICAgY29uc29sZS5sb2coYOmHiuaUvuasoeaVsDogJHtzdGF0dXMuc3RhdHMucmVsZWFzZWR9YCk7XHJcbiAgICBjb25zb2xlLmxvZyhg5pyA5aSn5ZCM5pe25rS76LeDOiAke3N0YXR1cy5zdGF0cy5tYXhBY3RpdmV9YCk7XHJcbiAgICBjb25zb2xlLmxvZyhg6YeN55So546HOiAke3N0YXR1cy5zdGF0cy5yZXVzZWQgPiAwID8gKHN0YXR1cy5zdGF0cy5yZXVzZWQgLyAoc3RhdHVzLnN0YXRzLmNyZWF0ZWQgKyBzdGF0dXMuc3RhdHMucmV1c2VkKSAqIDEwMCkudG9GaXhlZCgxKSA6IDB9JWApO1xyXG4gICAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PScpO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDplIDmr4Hlr7nosaHmsaDvvIzph4rmlL7miYDmnInotYTmupBcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgY29uc29sZS5sb2coJ1BhcnRpY2xlUG9vbDog5byA5aeL6ZSA5q+B77yM6YeK5pS+5omA5pyJ6LWE5rqQJyk7XHJcbiAgICBcclxuICAgIC8vIOa4heeQhuaJgOacieeykuWtkFxyXG4gICAgdGhpcy5jbGVhckFsbCgpO1xyXG4gICAgXHJcbiAgICAvLyDph4rmlL7lh6DkvZXkvZPlkozmnZDotKjotYTmupBcclxuICAgIGNvbnN0IGFsbFBhcnRpY2xlcyA9IFsuLi50aGlzLnBvb2wsIC4uLnRoaXMuYWN0aXZlUGFydGljbGVzXTtcclxuICAgIGFsbFBhcnRpY2xlcy5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgaWYgKHBhcnRpY2xlLmdlb21ldHJ5KSB7XHJcbiAgICAgICAgcGFydGljbGUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChwYXJ0aWNsZS5tYXRlcmlhbCkge1xyXG4gICAgICAgIHBhcnRpY2xlLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOa4heepuuaVsOe7hFxyXG4gICAgdGhpcy5wb29sID0gW107XHJcbiAgICB0aGlzLmFjdGl2ZVBhcnRpY2xlcyA9IFtdO1xyXG4gICAgXHJcbiAgICAvLyDph43nva7nu5/orqFcclxuICAgIHRoaXMuc3RhdHMgPSB7XHJcbiAgICAgIGNyZWF0ZWQ6IDAsXHJcbiAgICAgIHJldXNlZDogMCxcclxuICAgICAgcmVsZWFzZWQ6IDAsXHJcbiAgICAgIG1heEFjdGl2ZTogMFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ1BhcnRpY2xlUG9vbDog6ZSA5q+B5a6M5oiQJyk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyDlr7zlh7rpu5jorqTlrp7kvovvvIjljZXkvovmqKHlvI/vvIlcclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRQYXJ0aWNsZVBvb2wgPSBuZXcgUGFydGljbGVQb29sKDEwMCwgMzApO1xyXG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJztcclxuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSAnLi4vY29uZmlnTG9hZGVyJztcclxuaW1wb3J0IHsgdHdlZW5Hcm91cCB9IGZyb20gJy4uL21haW4uanMnO1xyXG5pbXBvcnQgeyBQYXJ0aWNsZVBvb2wgfSBmcm9tICcuLi91dGlscy9QYXJ0aWNsZVBvb2wuanMnO1xyXG5cclxuLyoqXHJcbiAqIOa8lOekuuWKqOeUu+exu1xyXG4gKiDotJ/otKPliJvlu7rlkozmjqfliLbpmLTmnoHlsITnur/nrqHlt6XkvZzljp/nkIbnmoTmvJTnpLrliqjnlLtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEZW1vQW5pbWF0aW9uIHtcclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0ge1RIUkVFLlNjZW5lfSBzY2VuZSAtIFRocmVlLmpz5Zy65pmvXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudHMgLSDnu4Tku7blr7nosaHpm4blkIhcclxuICAgKiBAcGFyYW0ge09iamVjdH0gY29udHJvbGxlcnMgLSDmjqfliLblmajlr7nosaHpm4blkIhcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihzY2VuZSwgY29tcG9uZW50cywgY29udHJvbGxlcnMpIHtcclxuICAgIGNvbnNvbGUubG9nKCdEZW1vQW5pbWF0aW9u5p6E6YCg5Ye95pWw6KKr6LCD55SoJyk7XHJcbiAgICBjb25zb2xlLmxvZygnc2NlbmU6Jywgc2NlbmUpO1xyXG4gICAgY29uc29sZS5sb2coJ2NvbXBvbmVudHM6JywgY29tcG9uZW50cyk7XHJcbiAgICBjb25zb2xlLmxvZygnY29udHJvbGxlcnM6JywgY29udHJvbGxlcnMpO1xyXG4gICAgXHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xyXG4gICAgdGhpcy5jb250cm9sbGVycyA9IGNvbnRyb2xsZXJzO1xyXG4gICAgXHJcbiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5jdXJyZW50U3RlcCA9IDA7XHJcbiAgICB0aGlzLmFuaW1hdGlvblN0ZXBzID0gW107XHJcbiAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xyXG4gICAgdGhpcy50d2VlbnMgPSBbXTtcclxuICAgIHRoaXMuc3RlcENhbGxiYWNrcyA9IFtdO1xyXG4gICAgdGhpcy5jb250aW51b3VzQmVhbUludGVydmFsID0gbnVsbDsgLy8g6L+e57ut55S15a2Q5p2f55qE5a6a5pe25ZmoXHJcbiAgICB0aGlzLm9yaWdpbmFsVm9sdGFnZXMgPSBudWxsOyAvLyDkv53lrZjljp/lp4vlgY/ovaznlLXljovlgLzvvIznlKjkuo7ms6LlvaLmmL7npLpcclxuICAgIHRoaXMub3JpZ2luYWxQbGF0ZU9wYWNpdGllcyA9IG51bGw7IC8vIOS/neWtmOaegeadv+WOn+Wni+S4jemAj+aYjuW6plxyXG4gICAgdGhpcy5vcmlnaW5hbEd1aVN0YXRlID0gbnVsbDsgLy8g5L+d5a2YR1VJ6Z2i5p2/55qE5Y6f5aeL54q25oCBXHJcbiAgICBcclxuICAgIC8vIOWIneWni+WMlueykuWtkOWvueixoeaxoFxyXG4gICAgdGhpcy5wYXJ0aWNsZVBvb2wgPSBuZXcgUGFydGljbGVQb29sKDgwLCAyNSk7IC8vIOacgOWkpzgw5Liq57KS5a2Q77yM6aKE5Yib5bu6MjXkuKpcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ+WIneWni+WMluWKqOeUu+atpemqpCcpO1xyXG4gICAgLy8g5Yid5aeL5YyW5Yqo55S75q2l6aqkXHJcbiAgICB0aGlzLmluaXRBbmltYXRpb25TdGVwcygpO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn5Yib5bu655S15a2Q57KS5a2Q5p2Q6LSoJyk7XHJcbiAgICAvLyDliJvlu7rnlLXlrZDnspLlrZDmnZDotKggLSDkvJjljJbpgI/mmI7luqbmuLLmn5NcclxuICAgIHRoaXMucGFydGljbGVNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgIGNvbG9yOiBDT05GSUcuYmVhbS5jb2xvcixcclxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXHJcbiAgICAgIG9wYWNpdHk6IENPTkZJRy5kZW1vQW5pbWF0aW9uLmVsZWN0cm9uUGFydGljbGUub3BhY2l0eSxcclxuICAgICAgZGVwdGhUZXN0OiBmYWxzZSwgIC8vIOemgeeUqOa3seW6pua1i+ivle+8jOehruS/neeykuWtkOaAu+aYr+WPr+ingVxyXG4gICAgICBkZXB0aFdyaXRlOiBmYWxzZSwgLy8g56aB55So5rex5bqm5YaZ5YWl77yM6YG/5YWN5b2x5ZON5YW25LuW6YCP5piO54mp5L2TXHJcbiAgICAgIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nIC8vIOS9v+eUqOWKoOazlea3t+WQiO+8jOWinuW8uuWPkeWFieaViOaenFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdEZW1vQW5pbWF0aW9u5p6E6YCg5Ye95pWw5a6M5oiQJyk7XHJcbiAgICBjb25zb2xlLmxvZygn57KS5a2Q5a+56LGh5rGg54q25oCBOicsIHRoaXMucGFydGljbGVQb29sLmdldFN0YXR1cygpKTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyW5Yqo55S75q2l6aqkXHJcbiAgICovXHJcbiAgaW5pdEFuaW1hdGlvblN0ZXBzKCkge1xyXG4gICAgLy8g5q2l6aqkMTog5LuL57uN6Zi05p6B5bCE57q/566hXHJcbiAgICB0aGlzLmFuaW1hdGlvblN0ZXBzLnB1c2goe1xyXG4gICAgICB0aXRsZTogJ+mYtOaegeWwhOe6v+euoeeugOS7iycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAn6Zi05p6B5bCE57q/566h5piv5LiA56eN55yf56m655S15a2Q566h77yM5Yip55So55S15Zy65o6n5Yi255S15a2Q5p2f55qE5YGP6L2s5p2l5pi+56S65Zu+5YOP44CCJyxcclxuICAgICAgZHVyYXRpb246IDYwMDAsICAvLyDlop7liqDmjIHnu63ml7bpl7TliLA256eSXHJcbiAgICAgIHNldHVwOiAoKSA9PiB7XHJcbiAgICAgICAgLy8g5L2/55So6Ieq5a6a5LmJ6KeG6KeS5bGV56S65pW05Liq6Zi05p6B5bCE57q/566h55qE5YWo6LKMXHJcbiAgICAgICAgY29uc3Qgdmlld1Byb21pc2UgPSB0aGlzLnNldEN1c3RvbVZpZXcoe1xyXG4gICAgICAgICAgcG9zaXRpb246IHsgeDogOCwgeTogNSwgejogMTIgfSwgIC8vIOeojeW+rui/nOS4gOeCueeahOS/r+inhuinkuW6plxyXG4gICAgICAgICAgdGFyZ2V0OiB7IHg6IDAsIHk6IDAsIHo6IDAgfSAgICAgIC8vIOinguWvn+aVtOS4quiuvuWkh+S4reW/g1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOWcqOS4gOWNiuaXtumXtO+8iDPnp5LvvInml7bngrnlh7vliIbop6Pop4blm77mjInpkq7lkozlhbPpl63lpJblo7NcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCfmvJTnpLrliqjnlLvvvJrop6blj5HliIbop6Pop4blm74nKTtcclxuICAgICAgICAgIC8vIOeCueWHu+WIhuino+inhuWbvuaMiemSrlxyXG4gICAgICAgICAgY29uc3QgZXhwbG9kZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGUtZXhwbG9kZS1idG4nKTtcclxuICAgICAgICAgIGlmIChleHBsb2RlQnRuKSB7XHJcbiAgICAgICAgICAgIGV4cGxvZGVCdG4uY2xpY2soKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8g56iN562J5LiA5LiL5YaN5YWz6Zet5aSW5aOzXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ+a8lOekuuWKqOeUu++8muWFs+mXreWkluWjsycpO1xyXG4gICAgICAgICAgICAvLyDmn6Xmib5cIuaYvuekuuWkluWjs1wi55qE5aSN6YCJ5qGG5bm26K6+572u5Li6ZmFsc2VcclxuICAgICAgICAgICAgY29uc3Qgc2hlbGxDaGVja2JveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyk7XHJcbiAgICAgICAgICAgIGxldCBzaGVsbENoZWNrYm94ID0gbnVsbDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOafpeaJvuWvueW6lOeahOWkjemAieahhlxyXG4gICAgICAgICAgICBzaGVsbENoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBjaGVja2JveC5jbG9zZXN0KCdsaScpPy5xdWVyeVNlbGVjdG9yKCcucHJvcGVydHktbmFtZScpO1xyXG4gICAgICAgICAgICAgIGlmIChsYWJlbCAmJiBsYWJlbC50ZXh0Q29udGVudC5pbmNsdWRlcygn5pi+56S65aSW5aOzJykpIHtcclxuICAgICAgICAgICAgICAgIHNoZWxsQ2hlY2tib3ggPSBjaGVja2JveDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHNoZWxsQ2hlY2tib3ggJiYgc2hlbGxDaGVja2JveC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+a8lOekuuWKqOeUu++8mumAmui/h+WkjemAieahhuWFs+mXreWkluWjsycpO1xyXG4gICAgICAgICAgICAgIHNoZWxsQ2hlY2tib3guY2xpY2soKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAvLyDlpoLmnpzmib7kuI3liLDlpI3pgInmoYbvvIznm7TmjqXpgJrov4dDT05GSUfkv67mlLlcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygn5ryU56S65Yqo55S777ya55u05o6l6YCa6L+HQ09ORklH5YWz6Zet5aSW5aOzJyk7XHJcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5DT05GSUcpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5DT05GSUcuc2hlbGwudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgLy8g6Kem5Y+R5aSW5aOz5pu05pawXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVycyAmJiB0aGlzLmNvbnRyb2xsZXJzLm9uU2hlbGxDaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVycy5vblNoZWxsQ2hhbmdlKHdpbmRvdy5DT05GSUcuc2hlbGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgIH0sIDMwMDApOyAgLy8g5Zyo5oyB57ut5pe26Ze055qE5LiA5Y2K77yIM+enku+8ieaXtuaJp+ihjFxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB2aWV3UHJvbWlzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOatpemqpDI6IOeUteWtkOaequWPkeWwhOeUteWtkFxyXG4gICAgdGhpcy5hbmltYXRpb25TdGVwcy5wdXNoKHtcclxuICAgICAgdGl0bGU6ICfnlLXlrZDmnqrlj5HlsITnlLXlrZAnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ+eUteWtkOaequWKoOeDremYtOaege+8jOmHiuaUvueUteWtkOW5tuWKoOmAn+W9ouaIkOeUteWtkOadn+OAgicsXHJcbiAgICAgIGR1cmF0aW9uOiA0MDAwLFxyXG4gICAgICBzZXR1cDogKCkgPT4ge1xyXG4gICAgICAgIC8vIOiBmueEpuWIsOeUteWtkOaeqlxyXG4gICAgICAgIGNvbnN0IGZvY3VzUHJvbWlzZSA9IHRoaXMuZm9jdXNPbkNvbXBvbmVudCgnZ3VuJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g5Yib5bu66L+e57ut55S15a2Q5p2f5rWBXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnN0YXJ0Q29udGludW91c0VsZWN0cm9uQmVhbShcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoLTMsIDAsIDApLFxyXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygtMi43LCAwLCAwKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gZm9jdXNQcm9taXNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g5q2l6aqkMzog5Z6C55u05YGP6L2s5p2/XHJcbiAgICB0aGlzLmFuaW1hdGlvblN0ZXBzLnB1c2goe1xyXG4gICAgICB0aXRsZTogJ+WeguebtOWBj+i9rOadvycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAn5Z6C55u05YGP6L2s5p2/6YCa6L+H55S15Y6L5o6n5Yi255S15a2Q5p2f5Zyo5Z6C55u05pa55ZCR5LiK55qE5YGP6L2s44CCJyxcclxuICAgICAgZHVyYXRpb246IDUwMDAsXHJcbiAgICAgIHNldHVwOiAoKSA9PiB7XHJcbiAgICAgICAgLy8g6IGa54Sm5Yiw5Z6C55u05YGP6L2s5p2/XHJcbiAgICAgICAgY29uc3QgZm9jdXNQcm9taXNlID0gdGhpcy5mb2N1c09uQ29tcG9uZW50KCd2MScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOaooeaLn+eUteWOi+WPmOWMllxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgLy8g6K6+572u5Z6C55u055S15Y6LXHJcbiAgICAgICAgICB0aGlzLnNpbXVsYXRlVm9sdGFnZUNoYW5nZSgndmVydGljYWwnLCAzLCAyMDAwKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8g5Yib5bu66L+e57ut55S15a2Q5p2f5rWB77yI5LuO55S15a2Q5p6q5Yiw5YGP6L2s5p2/77yJXHJcbiAgICAgICAgICB0aGlzLnN0YXJ0Q29udGludW91c0VsZWN0cm9uQmVhbShcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoLTIuNywgMCwgMCksXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKC0xLjUsIDAuNiwgMClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGZvY3VzUHJvbWlzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOatpemqpDQ6IOawtOW5s+WBj+i9rOadv1xyXG4gICAgdGhpcy5hbmltYXRpb25TdGVwcy5wdXNoKHtcclxuICAgICAgdGl0bGU6ICfmsLTlubPlgY/ovazmnb8nLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ+awtOW5s+WBj+i9rOadv+mAmui/h+eUteWOi+aOp+WItueUteWtkOadn+WcqOawtOW5s+aWueWQkeS4iueahOWBj+i9rOOAgicsXHJcbiAgICAgIGR1cmF0aW9uOiA1MDAwLFxyXG4gICAgICBzZXR1cDogKCkgPT4ge1xyXG4gICAgICAgIC8vIOiBmueEpuWIsOawtOW5s+WBj+i9rOadv1xyXG4gICAgICAgIGNvbnN0IGZvY3VzUHJvbWlzZSA9IHRoaXMuZm9jdXNPbkNvbXBvbmVudCgnaDEnKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDmqKHmi5/nlLXljovlj5jljJZcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIC8vIOiuvue9ruawtOW5s+eUteWOi1xyXG4gICAgICAgICAgdGhpcy5zaW11bGF0ZVZvbHRhZ2VDaGFuZ2UoJ2hvcml6b250YWwnLCAyLCAyMDAwKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8g5Yib5bu66L+e57ut55S15a2Q5p2f5rWB77yI5LuO5Z6C55u05YGP6L2s5p2/5Yiw5rC05bmz5YGP6L2s5p2/77yJXHJcbiAgICAgICAgICB0aGlzLnN0YXJ0Q29udGludW91c0VsZWN0cm9uQmVhbShcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoLTEuNSwgMC42LCAwKSxcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoLTAuMiwgMC42LCAwLjQpXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBmb2N1c1Byb21pc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDmraXpqqQ1OiDojaflhYnlsY/mmL7npLpcclxuICAgIHRoaXMuYW5pbWF0aW9uU3RlcHMucHVzaCh7XHJcbiAgICAgIHRpdGxlOiAn6I2n5YWJ5bGP5pi+56S6JyxcclxuICAgICAgZGVzY3JpcHRpb246ICfnlLXlrZDmnZ/lh7vkuK3ojaflhYnlsY/kuIrnmoTojaflhYnnianotKjvvIzkuqfnlJ/lj6/op4HlhYnvvIzlvaLmiJDlm77lg4/jgIInLFxyXG4gICAgICBkdXJhdGlvbjogNTAwMCxcclxuICAgICAgc2V0dXA6ICgpID0+IHtcclxuICAgICAgICAvLyDogZrnhKbliLDojaflhYnlsY9cclxuICAgICAgICBjb25zdCBmb2N1c1Byb21pc2UgPSB0aGlzLmZvY3VzT25Db21wb25lbnQoJ3NjcmVlbicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOWIm+W7uui/nue7reeUteWtkOadn+a1ge+8iOS7juawtOW5s+WBj+i9rOadv+WIsOiNp+WFieWxj++8iVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5zdGFydENvbnRpbnVvdXNFbGVjdHJvbkJlYW0oXHJcbiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKC0wLjIsIDAuNiwgMC40KSxcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMywgMC42LCAwLjQpXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBmb2N1c1Byb21pc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDmraXpqqQ2OiDms6LlvaLmmL7npLpcclxuICAgIHRoaXMuYW5pbWF0aW9uU3RlcHMucHVzaCh7XHJcbiAgICAgIHRpdGxlOiAn5rOi5b2i5pi+56S6JyxcclxuICAgICAgZGVzY3JpcHRpb246ICfpgJrov4fmlLnlj5jlgY/ovaznlLXljovvvIzlj6/ku6XlnKjojaflhYnlsY/kuIrnu5jliLblkITnp43ms6LlvaLjgIInLFxyXG4gICAgICBkdXJhdGlvbjogMTAwMDAsICAvLyDlop7liqDmjIHnu63ml7bpl7Tku6XlsZXnpLrkuKTnp43ms6LlvaJcclxuICAgICAgc2V0dXA6ICgpID0+IHtcclxuICAgICAgICAvLyDkvb/nlKjoh6rlrprkuYnop4bop5LvvIzku47lt6bliY3mlrnjgIHkuIrmlrnop4Llr5/mlbTkuKrpmLTmnoHlsITnur/nrqHlkozms6LlvaLmmL7npLpcclxuICAgICAgICBjb25zdCByZXNldFByb21pc2UgPSB0aGlzLnNldEN1c3RvbVZpZXcoe1xyXG4gICAgICAgICAgcG9zaXRpb246IHsgeDogMTQsIHk6IDEsIHo6IC0yLjUgfSwgICAgICAgXHJcbiAgICAgICAgICB0YXJnZXQ6IHsgeDogMCwgeTogMCwgejogMCB9ICAgICAgICAgLy8g6IGa54Sm5Yiw5pW05Liq6KOF572u55qE5Lit5b+DXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g5ZCv55So5rOi5b2i5ZKM55S15a2Q5p2fXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAvLyDmuIXpmaTkuYvliY3nmoTnspLlrZDlkozojaflhYnngrlcclxuICAgICAgICAgIHRoaXMuY2xlYXJBbGxQYXJ0aWNsZXMoKTtcclxuICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudHMgJiYgdGhpcy5jb21wb25lbnRzLnNjcmVlbikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMuc2NyZWVuLmNsZWFyQWxsR2xvd1BvaW50cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDnrKzkuIDpmLbmrrXvvJrmmL7npLrmraPlvKbms6LvvIjliY0056eS77yJXHJcbiAgICAgICAgICB0aGlzLnNldFdhdmVmb3JtUGFyYW1zKHtcclxuICAgICAgICAgICAgdHlwZTogJ3NpbmUnLFxyXG4gICAgICAgICAgICBmcmVxdWVuY3k6IDEuMixcclxuICAgICAgICAgICAgYW1wbGl0dWRlOiAyLjUsXHJcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDlkK/liqjov57nu63nlLXlrZDmnZ/mtYEgLSDku47nlLXlrZDmnqrliLDojaflhYnlsY/nmoTlrozmlbTot6/lvoRcclxuICAgICAgICAgIHRoaXMuc3RhcnRDb250aW51b3VzRWxlY3Ryb25CZWFtKFxyXG4gICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygtMywgMCwgMCksICAgICAvLyDku47nlLXlrZDmnqrlvIDlp4tcclxuICAgICAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMywgMCwgMCkgICAgICAgLy8g5Yiw6I2n5YWJ5bGP57uT5p2fXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyA056eS5ZCO5YiH5o2i5Yiw5pa55rOiXHJcbiAgICAgICAgICBjb25zdCB3YXZlZm9ybVN3aXRjaENhbGxiYWNrID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIOa4hemZpOiNp+WFieWxj++8jOWHhuWkh+aYvuekuuaWsOazouW9olxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb25lbnRzICYmIHRoaXMuY29tcG9uZW50cy5zY3JlZW4pIHtcclxuICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMuc2NyZWVuLmNsZWFyQWxsR2xvd1BvaW50cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDliIfmjaLliLDmlrnms6JcclxuICAgICAgICAgICAgdGhpcy5zZXRXYXZlZm9ybVBhcmFtcyh7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ3NxdWFyZScsXHJcbiAgICAgICAgICAgICAgZnJlcXVlbmN5OiAwLjgsXHJcbiAgICAgICAgICAgICAgYW1wbGl0dWRlOiAzLFxyXG4gICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9LCA0MDAwKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdGhpcy5zdGVwQ2FsbGJhY2tzLnB1c2god2F2ZWZvcm1Td2l0Y2hDYWxsYmFjayk7XHJcbiAgICAgICAgICBcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gcmVzZXRQcm9taXNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g5q2l6aqkNzog5ryU56S657uT5p2fXHJcbiAgICB0aGlzLmFuaW1hdGlvblN0ZXBzLnB1c2goe1xyXG4gICAgICB0aXRsZTogJ+a8lOekuue7k+adnycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAn6Zi05p6B5bCE57q/566h5piv5pep5pyf5pi+56S65Zmo55qE5Z+656GA5oqA5pyv77yM5Li6546w5Luj5pi+56S65oqA5pyv5aWg5a6a5LqG5Z+656GA44CCJyxcclxuICAgICAgZHVyYXRpb246IDMwMDAsXHJcbiAgICAgIHNldHVwOiAoKSA9PiB7XHJcbiAgICAgICAgLy8g6K6+572u6Ieq5a6a5LmJ6KeG6KeS77yM5bGV56S65pW05Liq6Zi05p6B5bCE57q/566h55qE5a6M5pW06KeG5Zu+XHJcbiAgICAgICAgY29uc3Qgdmlld1Byb21pc2UgPSB0aGlzLnNldEN1c3RvbVZpZXcoe1xyXG4gICAgICAgICAgcG9zaXRpb246IHsgeDogNiwgeTogNCwgejogMTAgfSxcclxuICAgICAgICAgIHRhcmdldDogeyB4OiAwLCB5OiAwLCB6OiAwIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDov5jljp/liIbop6Pop4blm77nirbmgIFcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCfmvJTnpLrliqjnlLvnu5PmnZ/vvJrov5jljp/liIbop6Pop4blm77nirbmgIEnKTtcclxuICAgICAgICAgIGNvbnN0IGV4cGxvZGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9nZ2xlLWV4cGxvZGUtYnRuJyk7XHJcbiAgICAgICAgICBpZiAoZXhwbG9kZUJ0biAmJiBleHBsb2RlQnRuLnRleHRDb250ZW50ID09PSAn5ZCI5bm26KeG5Zu+Jykge1xyXG4gICAgICAgICAgICBleHBsb2RlQnRuLmNsaWNrKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDov5jljp/lpJblo7PmmL7npLrnirbmgIFcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCfmvJTnpLrliqjnlLvnu5PmnZ/vvJrov5jljp/lpJblo7PmmL7npLrnirbmgIEnKTtcclxuICAgICAgICAgIGlmICh0aGlzLm9yaWdpbmFsU2hlbGxWaXNpYmxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8g5p+l5om+XCLmmL7npLrlpJblo7NcIueahOWkjemAieahhlxyXG4gICAgICAgICAgICBjb25zdCBzaGVsbENoZWNrYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcclxuICAgICAgICAgICAgbGV0IHNoZWxsQ2hlY2tib3ggPSBudWxsO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g5p+l5om+5a+55bqU55qE5aSN6YCJ5qGGXHJcbiAgICAgICAgICAgIHNoZWxsQ2hlY2tib3hlcy5mb3JFYWNoKGNoZWNrYm94ID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGNoZWNrYm94LmNsb3Nlc3QoJ2xpJyk/LnF1ZXJ5U2VsZWN0b3IoJy5wcm9wZXJ0eS1uYW1lJyk7XHJcbiAgICAgICAgICAgICAgaWYgKGxhYmVsICYmIGxhYmVsLnRleHRDb250ZW50LmluY2x1ZGVzKCfmmL7npLrlpJblo7MnKSkge1xyXG4gICAgICAgICAgICAgICAgc2hlbGxDaGVja2JveCA9IGNoZWNrYm94O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoc2hlbGxDaGVja2JveCkge1xyXG4gICAgICAgICAgICAgIC8vIOWmguaenOWOn+Wni+eKtuaAgeWSjOW9k+WJjeeKtuaAgeS4jeWQjO+8jOeCueWHu+WkjemAieahhlxyXG4gICAgICAgICAgICAgIGlmIChzaGVsbENoZWNrYm94LmNoZWNrZWQgIT09IHRoaXMub3JpZ2luYWxTaGVsbFZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfmvJTnpLrliqjnlLvnu5PmnZ/vvJrpgJrov4flpI3pgInmoYbov5jljp/lpJblo7PnirbmgIEnKTtcclxuICAgICAgICAgICAgICAgIHNoZWxsQ2hlY2tib3guY2xpY2soKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8g55u05o6l6YCa6L+HQ09ORklH6L+Y5Y6fXHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+a8lOekuuWKqOeUu+e7k+adn++8muebtOaOpemAmui/h0NPTkZJR+i/mOWOn+WkluWjs+eKtuaAgScpO1xyXG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuQ09ORklHKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuQ09ORklHLnNoZWxsLnZpc2libGUgPSB0aGlzLm9yaWdpbmFsU2hlbGxWaXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgLy8g6Kem5Y+R5aSW5aOz5pu05pawXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVycyAmJiB0aGlzLmNvbnRyb2xsZXJzLm9uU2hlbGxDaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVycy5vblNoZWxsQ2hhbmdlKHdpbmRvdy5DT05GSUcuc2hlbGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDph43nva7miYDmnInlj4LmlbBcclxuICAgICAgICAgIHRoaXMucmVzZXRBbGxQYXJhbXMoKTtcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdmlld1Byb21pc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDlvIDlp4vmvJTnpLrliqjnlLtcclxuICAgKi9cclxuICBzdGFydCgpIHtcclxuICAgIGNvbnNvbGUubG9nKCdEZW1vQW5pbWF0aW9uLnN0YXJ06KKr6LCD55SoJyk7XHJcbiAgICBjb25zb2xlLmxvZygndGhpcy5pc1BsYXlpbmc6JywgdGhpcy5pc1BsYXlpbmcpO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5pc1BsYXlpbmcpIHtcclxuICAgICAgY29uc29sZS5sb2coJ+a8lOekuuW3suWcqOaSreaUvuS4re+8jOi/lOWbnicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOS/neWtmOWOn+Wni+WBj+i9rOeUteWOi+WAvO+8jOeUqOS6juazouW9ouaYvuekuuaXtuS/neaMgeWbuuWumuS9jee9rlxyXG4gICAgdGhpcy5vcmlnaW5hbFZvbHRhZ2VzID0ge1xyXG4gICAgICBob3Jpem9udGFsOiBDT05GSUcuZGVmbGVjdGlvbi5ob3Jpem9udGFsLnZvbHRhZ2UsXHJcbiAgICAgIHZlcnRpY2FsOiBDT05GSUcuZGVmbGVjdGlvbi52ZXJ0aWNhbC52b2x0YWdlXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyDkv53lrZjljp/lp4vlpJblo7PmmL7npLrnirbmgIFcclxuICAgIHRoaXMub3JpZ2luYWxTaGVsbFZpc2libGUgPSBDT05GSUcuc2hlbGwgPyBDT05GSUcuc2hlbGwudmlzaWJsZSA6IHRydWU7XHJcbiAgICBjb25zb2xlLmxvZygn5L+d5a2Y5Y6f5aeL5aSW5aOz54q25oCBOicsIHRoaXMub3JpZ2luYWxTaGVsbFZpc2libGUpO1xyXG4gICAgXHJcbiAgICAvLyDkv53lrZjmnoHmnb/ljp/lp4vkuI3pgI/mmI7luqblubborr7nva7kuLo1MCXvvIzmj5Dpq5jpgI/mmI7luqbku6Xkvr/mm7Tlpb3lnLDop4Llr5/nlLXlrZDmnZ9cclxuICAgIHRoaXMuc2V0UGxhdGVPcGFjaXR5KDAuNSk7XHJcbiAgICBcclxuICAgIC8vIOaKmOWPoEdVSemdouadv++8jOmBv+WFjea8lOekuuaXtueVjOmdouW5suaJsFxyXG4gICAgdGhpcy5jb2xsYXBzZUd1aUZvbGRlcnMoKTtcclxuICAgIFxyXG4gICAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5jdXJyZW50U3RlcCA9IDA7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCfkv53lrZjljp/lp4vlj4LmlbAnKTtcclxuICAgIC8vIOS/neWtmOWOn+Wni+WPguaVsFxyXG4gICAgdGhpcy5zYXZlT3JpZ2luYWxQYXJhbXMoKTtcclxuICAgIFxyXG4gICAgLy8g5Zyo5Yqo55S75byA5aeL5pe25ZCv55So55S15a2Q5p2f77yI6K6+572u6YCC5b2T55qE5by65bqm77yJXHJcbiAgICBDT05GSUcuYmVhbS5pbnRlbnNpdHkgPSAwLjk7XHJcbiAgICBpZiAodGhpcy5jb250cm9sbGVycy5vbkJlYW1DaGFuZ2UpIHtcclxuICAgICAgdGhpcy5jb250cm9sbGVycy5vbkJlYW1DaGFuZ2UoQ09ORklHLmJlYW0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn5byA5aeL56ys5LiA5q2l77yM6LCD55SocGxheUN1cnJlbnRTdGVwJyk7XHJcbiAgICAvLyDlvIDlp4vnrKzkuIDmraVcclxuICAgIHRoaXMucGxheUN1cnJlbnRTdGVwKCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOWBnOatoua8lOekuuWKqOeUu1xyXG4gICAqL1xyXG4gIHN0b3AoKSB7XHJcbiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICAvLyDlgZzmraLov57nu63nlLXlrZDmnZ9cclxuICAgIHRoaXMuc3RvcENvbnRpbnVvdXNFbGVjdHJvbkJlYW0oKTtcclxuICAgIFxyXG4gICAgLy8g5YGc5q2i5omA5pyJ5Yqo55S7XHJcbiAgICB0aGlzLnR3ZWVucy5mb3JFYWNoKHR3ZWVuID0+IHtcclxuICAgICAgaWYgKHR3ZWVuICYmIHR5cGVvZiB0d2Vlbi5zdG9wID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdHdlZW4uc3RvcCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMudHdlZW5zID0gW107XHJcbiAgICBcclxuICAgIC8vIOa4hemZpOaJgOacieeykuWtkO+8iOS9v+eUqOWvueixoeaxoOS8mOWMlu+8iVxyXG4gICAgdGhpcy5jbGVhckFsbFBhcnRpY2xlcygpO1xyXG4gICAgXHJcbiAgICAvLyDmuIXnkIblr7nosaHmsaDkuK3nmoTmiYDmnInmtLvot4PnspLlrZBcclxuICAgIGlmICh0aGlzLnBhcnRpY2xlUG9vbCkge1xyXG4gICAgICB0aGlzLnBhcnRpY2xlUG9vbC5jbGVhckFsbCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDmgaLlpI3ljp/lp4vlgY/ovaznlLXljovlgLxcclxuICAgIGlmICh0aGlzLm9yaWdpbmFsVm9sdGFnZXMpIHtcclxuICAgICAgQ09ORklHLmRlZmxlY3Rpb24uaG9yaXpvbnRhbC52b2x0YWdlID0gdGhpcy5vcmlnaW5hbFZvbHRhZ2VzLmhvcml6b250YWw7XHJcbiAgICAgIENPTkZJRy5kZWZsZWN0aW9uLnZlcnRpY2FsLnZvbHRhZ2UgPSB0aGlzLm9yaWdpbmFsVm9sdGFnZXMudmVydGljYWw7XHJcbiAgICAgIHRoaXMub3JpZ2luYWxWb2x0YWdlcyA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOa4heeQhuS/neWtmOeahOWkluWjs+eKtuaAgVxyXG4gICAgdGhpcy5vcmlnaW5hbFNoZWxsVmlzaWJsZSA9IHVuZGVmaW5lZDtcclxuICAgIFxyXG4gICAgLy8g5oGi5aSN5p6B5p2/5Y6f5aeL5LiN6YCP5piO5bqmXHJcbiAgICB0aGlzLnJlc3RvcmVQbGF0ZU9wYWNpdHkoKTtcclxuICAgIFxyXG4gICAgLy8g5oGi5aSNR1VJ6Z2i5p2/54q25oCBXHJcbiAgICB0aGlzLnJlc3RvcmVHdWlGb2xkZXJzKCk7XHJcbiAgICBcclxuICAgIC8vIOmHjee9ruaJgOacieWPguaVsFxyXG4gICAgdGhpcy5yZXNldEFsbFBhcmFtcygpO1xyXG4gICAgXHJcbiAgICAvLyDmuIXpmaTmiYDmnInlm57osIPlkozlrprml7blmahcclxuICAgIHRoaXMuc3RlcENhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IHtcclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQoY2FsbGJhY2spO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3RlcENhbGxiYWNrcyA9IFtdO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDmkq3mlL7lvZPliY3mraXpqqRcclxuICAgKi9cclxuICBwbGF5Q3VycmVudFN0ZXAoKSB7XHJcbiAgICBjb25zb2xlLmxvZygncGxheUN1cnJlbnRTdGVw6KKr6LCD55SoJyk7XHJcbiAgICBjb25zb2xlLmxvZygndGhpcy5pc1BsYXlpbmc6JywgdGhpcy5pc1BsYXlpbmcpO1xyXG4gICAgY29uc29sZS5sb2coJ3RoaXMuY3VycmVudFN0ZXA6JywgdGhpcy5jdXJyZW50U3RlcCk7XHJcbiAgICBjb25zb2xlLmxvZygndGhpcy5hbmltYXRpb25TdGVwcy5sZW5ndGg6JywgdGhpcy5hbmltYXRpb25TdGVwcy5sZW5ndGgpO1xyXG4gICAgXHJcbiAgICBpZiAoIXRoaXMuaXNQbGF5aW5nIHx8IHRoaXMuY3VycmVudFN0ZXAgPj0gdGhpcy5hbmltYXRpb25TdGVwcy5sZW5ndGgpIHtcclxuICAgICAgY29uc29sZS5sb2coJ+a8lOekuue7k+adn+aIluW3suWBnOatou+8jOiwg+eUqHN0b3AnKTtcclxuICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5YGc5q2i5LmL5YmN55qE6L+e57ut55S15a2Q5p2fXHJcbiAgICB0aGlzLnN0b3BDb250aW51b3VzRWxlY3Ryb25CZWFtKCk7XHJcbiAgICBcclxuICAgIGNvbnN0IHN0ZXAgPSB0aGlzLmFuaW1hdGlvblN0ZXBzW3RoaXMuY3VycmVudFN0ZXBdO1xyXG4gICAgY29uc29sZS5sb2coJ+W9k+WJjeatpemqpDonLCBzdGVwKTtcclxuICAgIFxyXG4gICAgLy8g6Kem5Y+R5q2l6aqk5byA5aeL5LqL5Lu2XHJcbiAgICBpZiAodGhpcy5vblN0ZXBTdGFydCkge1xyXG4gICAgICBjb25zb2xlLmxvZygn6Kem5Y+R5q2l6aqk5byA5aeL5LqL5Lu2Jyk7XHJcbiAgICAgIHRoaXMub25TdGVwU3RhcnQodGhpcy5jdXJyZW50U3RlcCwgc3RlcCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZygnb25TdGVwU3RhcnTmnKrorr7nva4nKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g6K6+572u5q2l6aqkXHJcbiAgICBjb25zb2xlLmxvZygn5omn6KGM5q2l6aqkc2V0dXAnKTtcclxuICAgIGNvbnN0IHNldHVwUHJvbWlzZSA9IHN0ZXAuc2V0dXAgPyBzdGVwLnNldHVwKCkgOiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIFxyXG4gICAgLy8g5q2l6aqk5a6M5oiQ5ZCO77yM57un57ut5LiL5LiA5q2lXHJcbiAgICBzZXR1cFByb21pc2UudGhlbigoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfmraXpqqRzZXR1cOWujOaIkO+8jOiuvue9ruS4i+S4gOatpeWumuaXtuWZqO+8jOaMgee7reaXtumXtDonLCBzdGVwLmR1cmF0aW9uKTtcclxuICAgICAgY29uc3QgY2FsbGJhY2sgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygn5a6a5pe25Zmo6Kem5Y+R77yM6L+b5YWl5LiL5LiA5q2lJyk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3RlcCsrO1xyXG4gICAgICAgIHRoaXMucGxheUN1cnJlbnRTdGVwKCk7XHJcbiAgICAgIH0sIHN0ZXAuZHVyYXRpb24pO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5zdGVwQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICBjb25zb2xlLmxvZygn5a6a5pe25Zmo5bey5re75Yqg5Yiwc3RlcENhbGxiYWNrcycpO1xyXG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfmraXpqqRzZXR1cOWHuumUmTonLCBlcnJvcik7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog6IGa54Sm5Yiw57uE5Lu2XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudEtleSAtIOe7hOS7tumUruWQjVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSDliqjnlLvlrozmiJDnmoRQcm9taXNlXHJcbiAgICovXHJcbiAgZm9jdXNPbkNvbXBvbmVudChjb21wb25lbnRLZXkpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRzW2NvbXBvbmVudEtleV07XHJcbiAgICAgIGlmICghY29tcG9uZW50KSB7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8g6K6h566X55uu5qCH5L2N572uXHJcbiAgICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gY29tcG9uZW50LnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgIGNvbnN0IG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKFxyXG4gICAgICAgIENPTkZJRy5kZW1vQW5pbWF0aW9uLmNhbWVyYU9mZnNldC54LFxyXG4gICAgICAgIENPTkZJRy5kZW1vQW5pbWF0aW9uLmNhbWVyYU9mZnNldC55LFxyXG4gICAgICAgIENPTkZJRy5kZW1vQW5pbWF0aW9uLmNhbWVyYU9mZnNldC56XHJcbiAgICAgICk7XHJcbiAgICAgIFxyXG4gICAgICAvLyDliJvlu7rnm7jmnLrkvY3nva7liqjnlLtcclxuICAgICAgY29uc3QgcG9zVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4odGhpcy5jb250cm9sbGVycy5jYW1lcmEucG9zaXRpb24sIHR3ZWVuR3JvdXApXHJcbiAgICAgICAgLnRvKHtcclxuICAgICAgICAgIHg6IHRhcmdldFBvc2l0aW9uLnggKyBvZmZzZXQueCxcclxuICAgICAgICAgIHk6IHRhcmdldFBvc2l0aW9uLnkgKyBvZmZzZXQueSxcclxuICAgICAgICAgIHo6IHRhcmdldFBvc2l0aW9uLnogKyBvZmZzZXQuelxyXG4gICAgICAgIH0sIENPTkZJRy5kZW1vQW5pbWF0aW9uLmFuaW1hdGlvbkR1cmF0aW9uKVxyXG4gICAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkN1YmljLkluT3V0KVxyXG4gICAgICAgIC5vbkNvbXBsZXRlKHJlc29sdmUpXHJcbiAgICAgICAgLnN0YXJ0KCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyDliJvlu7rmjqfliLblmajnm67moIfngrnliqjnlLtcclxuICAgICAgY29uc3QgdGFyZ2V0VHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4odGhpcy5jb250cm9sbGVycy5jb250cm9scy50YXJnZXQsIHR3ZWVuR3JvdXApXHJcbiAgICAgICAgLnRvKHtcclxuICAgICAgICAgIHg6IHRhcmdldFBvc2l0aW9uLngsXHJcbiAgICAgICAgICB5OiB0YXJnZXRQb3NpdGlvbi55LFxyXG4gICAgICAgICAgejogdGFyZ2V0UG9zaXRpb24uelxyXG4gICAgICAgIH0sIENPTkZJRy5kZW1vQW5pbWF0aW9uLmFuaW1hdGlvbkR1cmF0aW9uKVxyXG4gICAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkN1YmljLkluT3V0KVxyXG4gICAgICAgIC5zdGFydCgpO1xyXG4gICAgICBcclxuICAgICAgdGhpcy50d2VlbnMucHVzaChwb3NUd2VlbiwgdGFyZ2V0VHdlZW4pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOmHjee9ruinhuWbvlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSDliqjnlLvlrozmiJDnmoRQcm9taXNlXHJcbiAgICovXHJcbiAgcmVzZXRWaWV3KCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgLy8g6YeN572u55u45py65L2N572uXHJcbiAgICBjb25zdCBwb3NUd2VlbiA9IG5ldyBUV0VFTi5Ud2Vlbih0aGlzLmNvbnRyb2xsZXJzLmNhbWVyYS5wb3NpdGlvbiwgdHdlZW5Hcm91cClcclxuICAgICAgLnRvKHsgXHJcbiAgICAgICAgeDogQ09ORklHLmNhbWVyYS5wb3NpdGlvbi54LCBcclxuICAgICAgICB5OiBDT05GSUcuY2FtZXJhLnBvc2l0aW9uLnksIFxyXG4gICAgICAgIHo6IENPTkZJRy5jYW1lcmEucG9zaXRpb24ueiBcclxuICAgICAgfSwgQ09ORklHLmRlbW9BbmltYXRpb24uYW5pbWF0aW9uRHVyYXRpb24pXHJcbiAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkN1YmljLkluT3V0KVxyXG4gICAgICAub25Db21wbGV0ZShyZXNvbHZlKVxyXG4gICAgICAuc3RhcnQoKTtcclxuICAgICAgXHJcbiAgICAgICAgICAvLyDph43nva7mjqfliLblmajnm67moIfngrlcclxuICAgIGNvbnN0IHRhcmdldFR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKHRoaXMuY29udHJvbGxlcnMuY29udHJvbHMudGFyZ2V0LCB0d2Vlbkdyb3VwKVxyXG4gICAgICAudG8oeyBcclxuICAgICAgICB4OiBDT05GSUcuY2FtZXJhLnRhcmdldC54LCBcclxuICAgICAgICB5OiBDT05GSUcuY2FtZXJhLnRhcmdldC55LCBcclxuICAgICAgICB6OiBDT05GSUcuY2FtZXJhLnRhcmdldC56IFxyXG4gICAgICB9LCBDT05GSUcuZGVtb0FuaW1hdGlvbi5hbmltYXRpb25EdXJhdGlvbilcclxuICAgICAgLmVhc2luZyhUV0VFTi5FYXNpbmcuQ3ViaWMuSW5PdXQpXHJcbiAgICAgIC5zdGFydCgpO1xyXG4gICAgICBcclxuICAgICAgdGhpcy50d2VlbnMucHVzaChwb3NUd2VlbiwgdGFyZ2V0VHdlZW4pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDorr7nva7oh6rlrprkuYnop4blm75cclxuICAgKiBAcGFyYW0ge09iamVjdH0gdmlld0NvbmZpZyAtIOinhuWbvumFjee9rlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2aWV3Q29uZmlnLnBvc2l0aW9uIC0g5pGE5YOP5aS05L2N572uIHt4LCB5LCB6fVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2aWV3Q29uZmlnLnRhcmdldCAtIOinguWvn+ebruaghyB7eCwgeSwgen1cclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSDliqjnlLvmjIHnu63ml7bpl7TvvIjlj6/pgInvvIlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g5Yqo55S75a6M5oiQ55qEUHJvbWlzZVxyXG4gICAqL1xyXG4gIHNldEN1c3RvbVZpZXcodmlld0NvbmZpZywgZHVyYXRpb24gPSBDT05GSUcuZGVtb0FuaW1hdGlvbi5hbmltYXRpb25EdXJhdGlvbikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAvLyDorr7nva7nm7jmnLrkvY3nva5cclxuICAgICAgY29uc3QgcG9zVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4odGhpcy5jb250cm9sbGVycy5jYW1lcmEucG9zaXRpb24sIHR3ZWVuR3JvdXApXHJcbiAgICAgICAgLnRvKHsgXHJcbiAgICAgICAgICB4OiB2aWV3Q29uZmlnLnBvc2l0aW9uLngsIFxyXG4gICAgICAgICAgeTogdmlld0NvbmZpZy5wb3NpdGlvbi55LCBcclxuICAgICAgICAgIHo6IHZpZXdDb25maWcucG9zaXRpb24ueiBcclxuICAgICAgICB9LCBkdXJhdGlvbilcclxuICAgICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5DdWJpYy5Jbk91dClcclxuICAgICAgICAub25Db21wbGV0ZShyZXNvbHZlKVxyXG4gICAgICAgIC5zdGFydCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAvLyDorr7nva7mjqfliLblmajnm67moIfngrlcclxuICAgICAgY29uc3QgdGFyZ2V0VHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4odGhpcy5jb250cm9sbGVycy5jb250cm9scy50YXJnZXQsIHR3ZWVuR3JvdXApXHJcbiAgICAgICAgLnRvKHsgXHJcbiAgICAgICAgICB4OiB2aWV3Q29uZmlnLnRhcmdldC54LCBcclxuICAgICAgICAgIHk6IHZpZXdDb25maWcudGFyZ2V0LnksIFxyXG4gICAgICAgICAgejogdmlld0NvbmZpZy50YXJnZXQueiBcclxuICAgICAgICB9LCBkdXJhdGlvbilcclxuICAgICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5DdWJpYy5Jbk91dClcclxuICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgICBcclxuICAgICAgdGhpcy50d2VlbnMucHVzaChwb3NUd2VlbiwgdGFyZ2V0VHdlZW4pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rov57nu63nlLXlrZDmnZ/mtYFcclxuICAgKiBAcGFyYW0ge1RIUkVFLlZlY3RvcjN9IHN0YXJ0UG9zIC0g6LW35aeL5L2N572uXHJcbiAgICogQHBhcmFtIHtUSFJFRS5WZWN0b3IzfSBlbmRQb3MgLSDnu5PmnZ/kvY3nva5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSDnspLlrZDmlbDph49cclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSDliqjnlLvmjIHnu63ml7bpl7RcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkNvbXBsZXRlIC0g5a6M5oiQ5Zue6LCDXHJcbiAgICovXHJcbiAgY3JlYXRlRWxlY3Ryb25QYXJ0aWNsZXMoc3RhcnRQb3MsIGVuZFBvcywgY291bnQgPSAxMCwgZHVyYXRpb24gPSAyMDAwLCBvbkNvbXBsZXRlID0gbnVsbCkge1xyXG4gICAgLy8g5L2/55So6YWN572u5Lit55qE5Y+R5bCE6aKR546H77yM5aaC5p6c5rKh5pyJ5YiZ5L2/55So6buY6K6k5YC8XHJcbiAgICBjb25zdCBlbWlzc2lvblJhdGUgPSBDT05GSUcuZGVtb0FuaW1hdGlvbi5lbGVjdHJvblBhcnRpY2xlLmVtaXNzaW9uUmF0ZSB8fCA4O1xyXG4gICAgY29uc3QgcGFydGljbGVJbnRlcnZhbCA9IDEwMDAgLyBlbWlzc2lvblJhdGU7IC8vIOagueaNruWPkeWwhOmikeeOh+iuoeeul+mXtOmalOaXtumXtO+8iOavq+enku+8iVxyXG4gICAgXHJcbiAgICAvLyDorqHnrpfnlLXlrZDmnZ/nmoTmgLvot6/lvoTplb/luqbvvIznlKjkuo7noa7lrprnspLlrZDnmoTnlJ/lkb3lkajmnJ9cclxuICAgIGNvbnN0IGJlYW1EaXN0YW5jZSA9IHN0YXJ0UG9zLmRpc3RhbmNlVG8oZW5kUG9zKTtcclxuICAgIGNvbnN0IHBhcnRpY2xlU3BlZWQgPSBiZWFtRGlzdGFuY2UgLyAxNTAwOyAvLyDnspLlrZDnp7vliqjpgJ/luqbvvIjljZXkvY0v5q+r56eS77yJXHJcbiAgICBjb25zdCBwYXJ0aWNsZUxpZmV0aW1lID0gYmVhbURpc3RhbmNlIC8gcGFydGljbGVTcGVlZCArIDUwMDsgLy8g57KS5a2Q55Sf5ZG95ZGo5pyf56iN6ZW/5LiA5LqbXHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAvLyDkvb/nlKggc2V0VGltZW91dCDmnaXlrp7njrDnnJ/mraPnmoTlrp7ml7blj5HlsIRcclxuICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIOS7juWvueixoeaxoOiOt+WPlueykuWtkO+8jOiAjOS4jeaYr+WIm+W7uuaWsOeahCAo5oCn6IO95LyY5YyWKVxyXG4gICAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5wYXJ0aWNsZVBvb2wuZ2V0UGFydGljbGUoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDorr7nva7liJ3lp4vkvY3nva5cclxuICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi5jb3B5KHN0YXJ0UG9zKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDmt7vliqDlj5HlsITmlYjmnpzvvJrnspLlrZDku47lsI/liLDmraPluLjlpKflsI9cclxuICAgICAgICBwYXJ0aWNsZS5zY2FsZS5zZXRTY2FsYXIoMC4xKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDmt7vliqDliLDlnLrmma9cclxuICAgICAgICB0aGlzLnNjZW5lLmFkZChwYXJ0aWNsZSk7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMucHVzaChwYXJ0aWNsZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g5Yib5bu657KS5a2Q5Ye6546w5Yqo55S7XHJcbiAgICAgICAgY29uc3QgYXBwZWFyVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4ocGFydGljbGUuc2NhbGUsIHR3ZWVuR3JvdXApXHJcbiAgICAgICAgICAudG8oeyB4OiAxLCB5OiAxLCB6OiAxIH0sIDIwMClcclxuICAgICAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkJhY2suT3V0KVxyXG4gICAgICAgICAgLnN0YXJ0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy50d2VlbnMucHVzaChhcHBlYXJUd2Vlbik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g5Yib5bu66L+e57ut56e75Yqo5Yqo55S7IC0g57KS5a2Q5Lya57un57ut5ZCR5YmN6L+Q5Yqo6ICM5LiN5piv5ZyoZW5kUG9z5YGc5q2iXHJcbiAgICAgICAgY29uc3QgZXh0ZW5kZWRFbmRQb3MgPSB0aGlzLmNhbGN1bGF0ZUV4dGVuZGVkRW5kUG9zaXRpb24oc3RhcnRQb3MsIGVuZFBvcyk7XHJcbiAgICAgICAgY29uc3QgbW92ZUR1cmF0aW9uID0gcGFydGljbGVMaWZldGltZTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB0d2VlbiA9IG5ldyBUV0VFTi5Ud2VlbihwYXJ0aWNsZS5wb3NpdGlvbiwgdHdlZW5Hcm91cClcclxuICAgICAgICAgIC50byh7XHJcbiAgICAgICAgICAgIHg6IGV4dGVuZGVkRW5kUG9zLngsXHJcbiAgICAgICAgICAgIHk6IGV4dGVuZGVkRW5kUG9zLnksXHJcbiAgICAgICAgICAgIHo6IGV4dGVuZGVkRW5kUG9zLnpcclxuICAgICAgICAgIH0sIG1vdmVEdXJhdGlvbilcclxuICAgICAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkxpbmVhci5Ob25lKVxyXG4gICAgICAgICAgLm9uVXBkYXRlKCgpID0+IHtcclxuICAgICAgICAgICAgLy8g5b2T57KS5a2Q5o6l6L+R6I2n5YWJ5bGP5pe277yM5re75Yqg5Y+R5YWJ5pWI5p6cXHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlVG9TY3JlZW4gPSBwYXJ0aWNsZS5wb3NpdGlvbi5kaXN0YW5jZVRvKGVuZFBvcyk7XHJcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZVRvU2NyZWVuIDwgMC4xKSB7XHJcbiAgICAgICAgICAgICAgLy8g5Zyo6I2n5YWJ5bGP5LiK5re75Yqg5Y+R5YWJ54K5XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50cyAmJiB0aGlzLmNvbXBvbmVudHMuc2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMuc2NyZWVuLmFkZEdsb3dQb2ludChwYXJ0aWNsZS5wb3NpdGlvbi5jbG9uZSgpKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAub25Db21wbGV0ZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIOacgOWQjuS4gOS4queykuWtkOWujOaIkOaXtuinpuWPkeWbnuiwg1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gY291bnQgLSAxICYmIG9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOS7juWcuuaZr+S4reenu+mZpOeykuWtkFxyXG4gICAgICAgICAgICB0aGlzLnNjZW5lLnJlbW92ZShwYXJ0aWNsZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wYXJ0aWNsZXMuaW5kZXhPZihwYXJ0aWNsZSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICB0aGlzLnBhcnRpY2xlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDlvZLov5jnspLlrZDliLDlr7nosaHmsaDvvIzogIzkuI3mmK/plIDmr4EgKOaAp+iDveS8mOWMlilcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZVBvb2wucmVsZWFzZVBhcnRpY2xlKHBhcnRpY2xlKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnR3ZWVucy5wdXNoKHR3ZWVuKTtcclxuICAgICAgfSwgaSAqIHBhcnRpY2xlSW50ZXJ2YWwpO1xyXG4gICAgICBcclxuICAgICAgLy8g5L+d5a2YdGltZW91dOS7peS+v+WcqOWBnOatouWKqOeUu+aXtuWPr+S7pea4hemZpFxyXG4gICAgICB0aGlzLnN0ZXBDYWxsYmFja3MucHVzaCh0aW1lb3V0KTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog6K6h566X5bu25Ly455qE57uT5p2f5L2N572u77yM6K6p55S15a2Q57KS5a2Q55yL6LW35p2l57un57ut6L+Q5YqoXHJcbiAgICogQHBhcmFtIHtUSFJFRS5WZWN0b3IzfSBzdGFydFBvcyAtIOi1t+Wni+S9jee9rlxyXG4gICAqIEBwYXJhbSB7VEhSRUUuVmVjdG9yM30gZW5kUG9zIC0g5Y6f5aeL57uT5p2f5L2N572uXHJcbiAgICogQHJldHVybnMge1RIUkVFLlZlY3RvcjN9IOW7tuS8uOeahOe7k+adn+S9jee9rlxyXG4gICAqL1xyXG4gIGNhbGN1bGF0ZUV4dGVuZGVkRW5kUG9zaXRpb24oc3RhcnRQb3MsIGVuZFBvcykge1xyXG4gICAgLy8g6K6h566X6L+Q5Yqo5pa55ZCR5ZCR6YePXHJcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpLnN1YlZlY3RvcnMoZW5kUG9zLCBzdGFydFBvcykubm9ybWFsaXplKCk7XHJcbiAgICBcclxuICAgIC8vIOWwhue7k+adn+S9jee9ruWQkeWJjeW7tuS8uO+8jOiuqeeykuWtkOeci+i1t+adpee7p+e7rei/kOWKqFxyXG4gICAgY29uc3QgZXh0ZW5zaW9uRGlzdGFuY2UgPSAyLjA7IC8vIOW7tuS8uOi3neemu1xyXG4gICAgY29uc3QgZXh0ZW5kZWRFbmRQb3MgPSBlbmRQb3MuY2xvbmUoKS5hZGQoZGlyZWN0aW9uLm11bHRpcGx5U2NhbGFyKGV4dGVuc2lvbkRpc3RhbmNlKSk7XHJcbiAgICBcclxuICAgIHJldHVybiBleHRlbmRlZEVuZFBvcztcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5Yib5bu66L+e57ut55S15a2Q5p2f5rWB77yI5peg6ZmQ5b6q546v55u05Yiw5YGc5q2i77yJXHJcbiAgICogQHBhcmFtIHtUSFJFRS5WZWN0b3IzfSBzdGFydFBvcyAtIOi1t+Wni+S9jee9rlxyXG4gICAqIEBwYXJhbSB7VEhSRUUuVmVjdG9yM30gZW5kUG9zIC0g57uT5p2f5L2N572uXHJcbiAgICovXHJcbiAgc3RhcnRDb250aW51b3VzRWxlY3Ryb25CZWFtKHN0YXJ0UG9zLCBlbmRQb3MpIHtcclxuICAgIC8vIOWmguaenOW3sue7j+aciei/nue7reeUteWtkOadn+WcqOi/kOihjO+8jOWFiOWBnOatouWug1xyXG4gICAgdGhpcy5zdG9wQ29udGludW91c0VsZWN0cm9uQmVhbSgpO1xyXG4gICAgXHJcbiAgICBjb25zdCBlbWlzc2lvblJhdGUgPSBDT05GSUcuZGVtb0FuaW1hdGlvbi5lbGVjdHJvblBhcnRpY2xlLmVtaXNzaW9uUmF0ZSB8fCA4O1xyXG4gICAgY29uc3QgcGFydGljbGVJbnRlcnZhbCA9IDEwMDAgLyBlbWlzc2lvblJhdGU7XHJcbiAgICBcclxuICAgIC8vIOiuoeeul+eUteWtkOadn+WPguaVsFxyXG4gICAgY29uc3QgYmVhbURpc3RhbmNlID0gc3RhcnRQb3MuZGlzdGFuY2VUbyhlbmRQb3MpO1xyXG4gICAgY29uc3QgcGFydGljbGVTcGVlZCA9IGJlYW1EaXN0YW5jZSAvIDE1MDA7IC8vIOeykuWtkOenu+WKqOmAn+W6plxyXG4gICAgY29uc3QgcGFydGljbGVMaWZldGltZSA9IGJlYW1EaXN0YW5jZSAvIHBhcnRpY2xlU3BlZWQgKyAxMDAwOyAvLyDlu7bplb/nlJ/lkb3lkajmnJ9cclxuICAgIFxyXG4gICAgLy8g5Yib5bu66L+e57ut5Y+R5bCE55qE5a6a5pe25ZmoXHJcbiAgICB0aGlzLmNvbnRpbnVvdXNCZWFtSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIGlmICghdGhpcy5pc1BsYXlpbmcpIHJldHVybjsgLy8g5aaC5p6c5Yqo55S75bey5YGc5q2i77yM5LiN5YaN5Y+R5bCE5paw57KS5a2QXHJcbiAgICAgIFxyXG4gICAgICAvLyDliJvlu7rljZXkuKrnlLXlrZDnspLlrZAgLSDkvb/nlKjkvJjljJbnmoTmnZDotKhcclxuICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoQ09ORklHLmRlbW9BbmltYXRpb24uZWxlY3Ryb25QYXJ0aWNsZS5zaXplLCA2LCA2KTtcclxuICAgICAgY29uc3QgcGFydGljbGVNYXQgPSB0aGlzLnBhcnRpY2xlTWF0ZXJpYWwuY2xvbmUoKTtcclxuICAgICAgXHJcbiAgICAgIC8vIOehruS/neeykuWtkOadkOi0qOWFt+acieacgOS9s+WPr+ingeaAp1xyXG4gICAgICBwYXJ0aWNsZU1hdC5kZXB0aFRlc3QgPSBmYWxzZTtcclxuICAgICAgcGFydGljbGVNYXQuZGVwdGhXcml0ZSA9IGZhbHNlO1xyXG4gICAgICBwYXJ0aWNsZU1hdC5ibGVuZGluZyA9IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmc7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBwYXJ0aWNsZSA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBwYXJ0aWNsZU1hdCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyDorr7nva7nspLlrZDnmoTmuLLmn5Ppobrluo/vvIznoa7kv53lnKjmnoHmnb/kuYvlkI7muLLmn5NcclxuICAgICAgcGFydGljbGUucmVuZGVyT3JkZXIgPSAxMDtcclxuICAgICAgXHJcbiAgICAgIC8vIOiuvue9ruWIneWni+S9jee9rlxyXG4gICAgICBwYXJ0aWNsZS5wb3NpdGlvbi5jb3B5KHN0YXJ0UG9zKTtcclxuICAgICAgcGFydGljbGUuc2NhbGUuc2V0U2NhbGFyKDAuMSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyDmt7vliqDliLDlnLrmma9cclxuICAgICAgdGhpcy5zY2VuZS5hZGQocGFydGljbGUpO1xyXG4gICAgICB0aGlzLnBhcnRpY2xlcy5wdXNoKHBhcnRpY2xlKTtcclxuICAgICAgXHJcbiAgICAgIC8vIOeykuWtkOWHuueOsOWKqOeUu1xyXG4gICAgICBjb25zdCBhcHBlYXJUd2VlbiA9IG5ldyBUV0VFTi5Ud2VlbihwYXJ0aWNsZS5zY2FsZSwgdHdlZW5Hcm91cClcclxuICAgICAgICAudG8oeyB4OiAxLCB5OiAxLCB6OiAxIH0sIDIwMClcclxuICAgICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5CYWNrLk91dClcclxuICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMudHdlZW5zLnB1c2goYXBwZWFyVHdlZW4pO1xyXG4gICAgICBcclxuICAgICAgLy8g6I635Y+W5b2T5YmN55S15a2Q5p2f6L2o6L+56Lev5b6EXHJcbiAgICAgIGNvbnN0IGJlYW1QYXRoID0gdGhpcy5nZXRDdXJyZW50QmVhbVBhdGgoc3RhcnRQb3MsIGVuZFBvcyk7XHJcbiAgICAgIGNvbnN0IGV4dGVuZGVkRW5kUG9zID0gdGhpcy5jYWxjdWxhdGVFeHRlbmRlZEVuZFBvc2l0aW9uKHN0YXJ0UG9zLCBlbmRQb3MpO1xyXG4gICAgICBcclxuICAgICAgLy8g57KS5a2Q5rK/552A55S15a2Q5p2f6L2o6L+556e75Yqo5Yqo55S7XHJcbiAgICAgIGNvbnN0IG1vdmVUd2VlbiA9IG5ldyBUV0VFTi5Ud2Vlbih7IHByb2dyZXNzOiAwIH0sIHR3ZWVuR3JvdXApXHJcbiAgICAgICAgLnRvKHsgcHJvZ3Jlc3M6IDEgfSwgcGFydGljbGVMaWZldGltZSlcclxuICAgICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5MaW5lYXIuTm9uZSlcclxuICAgICAgICAub25VcGRhdGUoKG9iaikgPT4ge1xyXG4gICAgICAgICAgLy8g5qC55o2u6L+b5bqm5rK/552A55S15a2Q5p2f6Lev5b6E56e75Yqo57KS5a2QXHJcbiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb25BbG9uZ0JlYW1QYXRoKGJlYW1QYXRoLCBvYmoucHJvZ3Jlc3MsIGV4dGVuZGVkRW5kUG9zKTtcclxuICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLmNvcHkocG9zaXRpb24pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDlvZPnspLlrZDmjqXov5HojaflhYnlsY/ml7bvvIzmt7vliqDlj5HlhYnmlYjmnpxcclxuICAgICAgICAgIGNvbnN0IGRpc3RhbmNlVG9TY3JlZW4gPSBwYXJ0aWNsZS5wb3NpdGlvbi5kaXN0YW5jZVRvKGVuZFBvcyk7XHJcbiAgICAgICAgICBpZiAoZGlzdGFuY2VUb1NjcmVlbiA8IDAuMSAmJiAhcGFydGljbGUuaGFzSGl0U2NyZWVuKSB7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlLmhhc0hpdFNjcmVlbiA9IHRydWU7IC8vIOmYsuatoumHjeWkjeinpuWPkVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb25lbnRzICYmIHRoaXMuY29tcG9uZW50cy5zY3JlZW4pIHtcclxuICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMuc2NyZWVuLmFkZEdsb3dQb2ludChwYXJ0aWNsZS5wb3NpdGlvbi5jbG9uZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uQ29tcGxldGUoKCkgPT4ge1xyXG4gICAgICAgICAgLy8g56e76Zmk57KS5a2QXHJcbiAgICAgICAgICB0aGlzLnNjZW5lLnJlbW92ZShwYXJ0aWNsZSk7XHJcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucGFydGljbGVzLmluZGV4T2YocGFydGljbGUpO1xyXG4gICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgcGFydGljbGUubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXJ0KCk7XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLnR3ZWVucy5wdXNoKG1vdmVUd2Vlbik7XHJcbiAgICAgIFxyXG4gICAgfSwgcGFydGljbGVJbnRlcnZhbCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW9k+WJjeeUteWtkOadn+i3r+W+hFxyXG4gICAqIEBwYXJhbSB7VEhSRUUuVmVjdG9yM30gc3RhcnRQb3MgLSDotbflp4vkvY3nva5cclxuICAgKiBAcGFyYW0ge1RIUkVFLlZlY3RvcjN9IGVuZFBvcyAtIOe7k+adn+S9jee9rlxyXG4gICAqIEByZXR1cm5zIHtBcnJheTxUSFJFRS5WZWN0b3IzPn0g55S15a2Q5p2f6Lev5b6E54K55pWw57uEXHJcbiAgICovXHJcbiAgZ2V0Q3VycmVudEJlYW1QYXRoKHN0YXJ0UG9zLCBlbmRQb3MpIHtcclxuICAgIC8vIOWmguaenOacieeUteWtkOadn+e7hOS7tuS4lOacieW9k+WJjei3r+W+hO+8jOS9v+eUqOWunumZheeahOeUteWtkOadn+i3r+W+hFxyXG4gICAgaWYgKHRoaXMuY29tcG9uZW50cyAmJiB0aGlzLmNvbXBvbmVudHMuZWxlY3Ryb25CZWFtICYmIHRoaXMuY29tcG9uZW50cy5lbGVjdHJvbkJlYW0uYmVhbVBvaW50cyAmJiB0aGlzLmNvbXBvbmVudHMuZWxlY3Ryb25CZWFtLmJlYW1Qb2ludHMubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmVsZWN0cm9uQmVhbS5iZWFtUG9pbnRzO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDlkKbliJnnlJ/miJDnroDljZXnmoTnm7Tnur/ot6/lvoRcclxuICAgIGNvbnN0IHBhdGhQb2ludHMgPSBbXTtcclxuICAgIGNvbnN0IG51bVNlZ21lbnRzID0gMjA7XHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG51bVNlZ21lbnRzOyBpKyspIHtcclxuICAgICAgY29uc3QgdCA9IGkgLyBudW1TZWdtZW50cztcclxuICAgICAgY29uc3QgcG9pbnQgPSBuZXcgVEhSRUUuVmVjdG9yMygpLmxlcnBWZWN0b3JzKHN0YXJ0UG9zLCBlbmRQb3MsIHQpO1xyXG4gICAgICBwYXRoUG9pbnRzLnB1c2gocG9pbnQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gcGF0aFBvaW50cztcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5qC55o2u6L+b5bqm6I635Y+W5rK/55S15a2Q5p2f6Lev5b6E55qE5L2N572uXHJcbiAgICogQHBhcmFtIHtBcnJheTxUSFJFRS5WZWN0b3IzPn0gYmVhbVBhdGggLSDnlLXlrZDmnZ/ot6/lvoTngrnmlbDnu4RcclxuICAgKiBAcGFyYW0ge251bWJlcn0gcHJvZ3Jlc3MgLSDov5vluqYgKDAtMSlcclxuICAgKiBAcGFyYW0ge1RIUkVFLlZlY3RvcjN9IGV4dGVuZGVkRW5kUG9zIC0g5bu25Ly455qE57uT5p2f5L2N572uXHJcbiAgICogQHJldHVybnMge1RIUkVFLlZlY3RvcjN9IOW9k+WJjeS9jee9rlxyXG4gICAqL1xyXG4gIGdldFBvc2l0aW9uQWxvbmdCZWFtUGF0aChiZWFtUGF0aCwgcHJvZ3Jlc3MsIGV4dGVuZGVkRW5kUG9zKSB7XHJcbiAgICBpZiAoIWJlYW1QYXRoIHx8IGJlYW1QYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAvLyDlpoLmnpzmsqHmnInot6/lvoTvvIzov5Tlm57otbflp4vkvY3nva5cclxuICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChiZWFtUGF0aC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgcmV0dXJuIGJlYW1QYXRoWzBdLmNsb25lKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOWmguaenOi/m+W6pui2hei/hzHvvIznu6fnu63lkJHlu7bkvLjkvY3nva7np7vliqhcclxuICAgIGlmIChwcm9ncmVzcyA+IDEpIHtcclxuICAgICAgY29uc3QgbGFzdFBvaW50ID0gYmVhbVBhdGhbYmVhbVBhdGgubGVuZ3RoIC0gMV07XHJcbiAgICAgIGNvbnN0IG92ZXJQcm9ncmVzcyA9IHByb2dyZXNzIC0gMTtcclxuICAgICAgcmV0dXJuIGxhc3RQb2ludC5jbG9uZSgpLmxlcnAoZXh0ZW5kZWRFbmRQb3MsIG92ZXJQcm9ncmVzcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOWcqOi3r+W+hOS4iuaPkuWAvFxyXG4gICAgY29uc3Qgc2NhbGVkUHJvZ3Jlc3MgPSBwcm9ncmVzcyAqIChiZWFtUGF0aC5sZW5ndGggLSAxKTtcclxuICAgIGNvbnN0IHNlZ21lbnRJbmRleCA9IE1hdGguZmxvb3Ioc2NhbGVkUHJvZ3Jlc3MpO1xyXG4gICAgY29uc3Qgc2VnbWVudFByb2dyZXNzID0gc2NhbGVkUHJvZ3Jlc3MgLSBzZWdtZW50SW5kZXg7XHJcbiAgICBcclxuICAgIGlmIChzZWdtZW50SW5kZXggPj0gYmVhbVBhdGgubGVuZ3RoIC0gMSkge1xyXG4gICAgICByZXR1cm4gYmVhbVBhdGhbYmVhbVBhdGgubGVuZ3RoIC0gMV0uY2xvbmUoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3Qgc3RhcnRQb2ludCA9IGJlYW1QYXRoW3NlZ21lbnRJbmRleF07XHJcbiAgICBjb25zdCBlbmRQb2ludCA9IGJlYW1QYXRoW3NlZ21lbnRJbmRleCArIDFdO1xyXG4gICAgXHJcbiAgICByZXR1cm4gc3RhcnRQb2ludC5jbG9uZSgpLmxlcnAoZW5kUG9pbnQsIHNlZ21lbnRQcm9ncmVzcyk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOWBnOatoui/nue7reeUteWtkOadn+a1gVxyXG4gICAqL1xyXG4gIHN0b3BDb250aW51b3VzRWxlY3Ryb25CZWFtKCkge1xyXG4gICAgaWYgKHRoaXMuY29udGludW91c0JlYW1JbnRlcnZhbCkge1xyXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuY29udGludW91c0JlYW1JbnRlcnZhbCk7XHJcbiAgICAgIHRoaXMuY29udGludW91c0JlYW1JbnRlcnZhbCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOaooeaLn+eUteWOi+WPmOWMllxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXJlY3Rpb24gLSDmlrnlkJHvvIgnaG9yaXpvbnRhbCcg5oiWICd2ZXJ0aWNhbCfvvIlcclxuICAgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0Vm9sdGFnZSAtIOebruagh+eUteWOi1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIOWKqOeUu+aMgee7reaXtumXtFxyXG4gICAqL1xyXG4gIHNpbXVsYXRlVm9sdGFnZUNoYW5nZShkaXJlY3Rpb24sIHRhcmdldFZvbHRhZ2UsIGR1cmF0aW9uID0gMTAwMCkge1xyXG4gICAgY29uc3QgZGVmbGVjdGlvbiA9IENPTkZJRy5kZWZsZWN0aW9uW2RpcmVjdGlvbl07XHJcbiAgICBpZiAoIWRlZmxlY3Rpb24pIHJldHVybjtcclxuICAgIFxyXG4gICAgLy8g5Yib5bu655S15Y6L5Y+Y5YyW5Yqo55S7XHJcbiAgICBjb25zdCB0d2VlbiA9IG5ldyBUV0VFTi5Ud2Vlbih7IHZvbHRhZ2U6IGRlZmxlY3Rpb24udm9sdGFnZSB9LCB0d2Vlbkdyb3VwKVxyXG4gICAgICAudG8oeyB2b2x0YWdlOiB0YXJnZXRWb2x0YWdlIH0sIGR1cmF0aW9uKVxyXG4gICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5RdWFkcmF0aWMuSW5PdXQpXHJcbiAgICAgIC5vblVwZGF0ZShvYmogPT4ge1xyXG4gICAgICAgIC8vIOabtOaWsOeUteWOi+WAvFxyXG4gICAgICAgIGRlZmxlY3Rpb24udm9sdGFnZSA9IG9iai52b2x0YWdlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOabtOaWsOeUteWtkOadn1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXJzLm9uRGVmbGVjdGlvbkNoYW5nZSkge1xyXG4gICAgICAgICAgdGhpcy5jb250cm9sbGVycy5vbkRlZmxlY3Rpb25DaGFuZ2UoQ09ORklHLmRlZmxlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLnN0YXJ0KCk7XHJcbiAgICBcclxuICAgIHRoaXMudHdlZW5zLnB1c2godHdlZW4pO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDorr7nva7ms6LlvaLlj4LmlbBcclxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0g5rOi5b2i5Y+C5pWwXHJcbiAgICovXHJcbiAgc2V0V2F2ZWZvcm1QYXJhbXMocGFyYW1zKSB7XHJcbiAgICBPYmplY3QuYXNzaWduKENPTkZJRy53YXZlZm9ybSwgcGFyYW1zKTtcclxuICAgIFxyXG4gICAgLy8g5pu05paw5rOi5b2iXHJcbiAgICBpZiAodGhpcy5jb250cm9sbGVycy5vbldhdmVmb3JtQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMuY29udHJvbGxlcnMub25XYXZlZm9ybUNoYW5nZShDT05GSUcud2F2ZWZvcm0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDkv53lrZjljp/lp4vlj4LmlbBcclxuICAgKi9cclxuICBzYXZlT3JpZ2luYWxQYXJhbXMoKSB7XHJcbiAgICB0aGlzLm9yaWdpbmFsUGFyYW1zID0ge1xyXG4gICAgICBkZWZsZWN0aW9uOiB7XHJcbiAgICAgICAgaG9yaXpvbnRhbDogeyB2b2x0YWdlOiBDT05GSUcuZGVmbGVjdGlvbi5ob3Jpem9udGFsLnZvbHRhZ2UgfSxcclxuICAgICAgICB2ZXJ0aWNhbDogeyB2b2x0YWdlOiBDT05GSUcuZGVmbGVjdGlvbi52ZXJ0aWNhbC52b2x0YWdlIH1cclxuICAgICAgfSxcclxuICAgICAgd2F2ZWZvcm06IHsgLi4uQ09ORklHLndhdmVmb3JtIH0sXHJcbiAgICAgIGJlYW06IHtcclxuICAgICAgICBpbnRlbnNpdHk6IENPTkZJRy5iZWFtLmludGVuc2l0eVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDkv53lrZhHVUnpnaLmnb/nirbmgIHlubbmipjlj6DmiYDmnInpnaLmnb9cclxuICAgKi9cclxuICBjb2xsYXBzZUd1aUZvbGRlcnMoKSB7XHJcbiAgICAvLyDojrflj5ZHVUnmjqfliLblmahcclxuICAgIGNvbnN0IGd1aUNvbnRyb2xsZXIgPSB0aGlzLmNvbnRyb2xsZXJzLmd1aUNvbnRyb2xsZXI7XHJcbiAgICBpZiAoIWd1aUNvbnRyb2xsZXIgfHwgIWd1aUNvbnRyb2xsZXIuZ3VpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5L+d5a2Y5Y6f5aeL54q25oCBXHJcbiAgICB0aGlzLm9yaWdpbmFsR3VpU3RhdGUgPSB7fTtcclxuICAgIFxyXG4gICAgLy8g6YGN5Y6G5omA5pyJ5paH5Lu25aS55bm25L+d5a2Y5YW25bGV5byA54q25oCB77yM54S25ZCO5oqY5Y+gXHJcbiAgICBndWlDb250cm9sbGVyLmd1aS5fX2ZvbGRlcnMgJiYgT2JqZWN0LmtleXMoZ3VpQ29udHJvbGxlci5ndWkuX19mb2xkZXJzKS5mb3JFYWNoKGZvbGRlck5hbWUgPT4ge1xyXG4gICAgICBjb25zdCBmb2xkZXIgPSBndWlDb250cm9sbGVyLmd1aS5fX2ZvbGRlcnNbZm9sZGVyTmFtZV07XHJcbiAgICAgIGlmIChmb2xkZXIpIHtcclxuICAgICAgICAvLyDkv53lrZjljp/lp4vlsZXlvIDnirbmgIFcclxuICAgICAgICB0aGlzLm9yaWdpbmFsR3VpU3RhdGVbZm9sZGVyTmFtZV0gPSBmb2xkZXIuY2xvc2VkO1xyXG4gICAgICAgIC8vIOaKmOWPoOmdouadv1xyXG4gICAgICAgIGZvbGRlci5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ0dVSemdouadv+W3suaKmOWPoO+8jOS/neWtmOeahOWOn+Wni+eKtuaAgTonLCB0aGlzLm9yaWdpbmFsR3VpU3RhdGUpO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDmgaLlpI1HVUnpnaLmnb/nirbmgIFcclxuICAgKi9cclxuICByZXN0b3JlR3VpRm9sZGVycygpIHtcclxuICAgIC8vIOiOt+WPlkdVSeaOp+WItuWZqFxyXG4gICAgY29uc3QgZ3VpQ29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlcnMuZ3VpQ29udHJvbGxlcjtcclxuICAgIGlmICghZ3VpQ29udHJvbGxlciB8fCAhZ3VpQ29udHJvbGxlci5ndWkgfHwgIXRoaXMub3JpZ2luYWxHdWlTdGF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOaBouWkjeaJgOacieaWh+S7tuWkueeahOWOn+Wni+WxleW8gOeKtuaAgVxyXG4gICAgT2JqZWN0LmtleXModGhpcy5vcmlnaW5hbEd1aVN0YXRlKS5mb3JFYWNoKGZvbGRlck5hbWUgPT4ge1xyXG4gICAgICBjb25zdCBmb2xkZXIgPSBndWlDb250cm9sbGVyLmd1aS5fX2ZvbGRlcnNbZm9sZGVyTmFtZV07XHJcbiAgICAgIGlmIChmb2xkZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5vcmlnaW5hbEd1aVN0YXRlW2ZvbGRlck5hbWVdKSB7XHJcbiAgICAgICAgICBmb2xkZXIuY2xvc2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZm9sZGVyLm9wZW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnR1VJ6Z2i5p2/54q25oCB5bey5oGi5aSNJyk7XHJcbiAgICB0aGlzLm9yaWdpbmFsR3VpU3RhdGUgPSBudWxsO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDph43nva7miYDmnInlj4LmlbBcclxuICAgKi9cclxuICByZXNldEFsbFBhcmFtcygpIHtcclxuICAgIGlmICghdGhpcy5vcmlnaW5hbFBhcmFtcykgcmV0dXJuO1xyXG4gICAgXHJcbiAgICAvLyDmgaLlpI3lgY/ovazlj4LmlbBcclxuICAgIENPTkZJRy5kZWZsZWN0aW9uLmhvcml6b250YWwudm9sdGFnZSA9IHRoaXMub3JpZ2luYWxQYXJhbXMuZGVmbGVjdGlvbi5ob3Jpem9udGFsLnZvbHRhZ2U7XHJcbiAgICBDT05GSUcuZGVmbGVjdGlvbi52ZXJ0aWNhbC52b2x0YWdlID0gdGhpcy5vcmlnaW5hbFBhcmFtcy5kZWZsZWN0aW9uLnZlcnRpY2FsLnZvbHRhZ2U7XHJcbiAgICBcclxuICAgIC8vIOaBouWkjeazouW9ouWPguaVsFxyXG4gICAgT2JqZWN0LmFzc2lnbihDT05GSUcud2F2ZWZvcm0sIHRoaXMub3JpZ2luYWxQYXJhbXMud2F2ZWZvcm0pO1xyXG4gICAgXHJcbiAgICAvLyDmgaLlpI3nlLXlrZDmnZ/lj4LmlbBcclxuICAgIENPTkZJRy5iZWFtLmludGVuc2l0eSA9IHRoaXMub3JpZ2luYWxQYXJhbXMuYmVhbS5pbnRlbnNpdHk7XHJcbiAgICBcclxuICAgIC8vIOabtOaWsOaOp+WItuWZqFxyXG4gICAgaWYgKHRoaXMuY29udHJvbGxlcnMub25EZWZsZWN0aW9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMuY29udHJvbGxlcnMub25EZWZsZWN0aW9uQ2hhbmdlKENPTkZJRy5kZWZsZWN0aW9uKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRoaXMuY29udHJvbGxlcnMub25XYXZlZm9ybUNoYW5nZSkge1xyXG4gICAgICB0aGlzLmNvbnRyb2xsZXJzLm9uV2F2ZWZvcm1DaGFuZ2UoQ09ORklHLndhdmVmb3JtKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRoaXMuY29udHJvbGxlcnMub25CZWFtQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMuY29udHJvbGxlcnMub25CZWFtQ2hhbmdlKENPTkZJRy5iZWFtKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5riF6Zmk5omA5pyJ57KS5a2QXHJcbiAgICovXHJcbiAgY2xlYXJBbGxQYXJ0aWNsZXMoKSB7XHJcbiAgICB0aGlzLnBhcnRpY2xlcy5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgdGhpcy5zY2VuZS5yZW1vdmUocGFydGljbGUpO1xyXG4gICAgICBwYXJ0aWNsZS5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcbiAgICAgIHBhcnRpY2xlLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5wYXJ0aWNsZXMgPSBbXTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog6K6+572u5p6B5p2/5LiN6YCP5piO5bqmXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHkgLSDkuI3pgI/mmI7luqblgLwgKDAtMSlcclxuICAgKi9cclxuICBzZXRQbGF0ZU9wYWNpdHkob3BhY2l0eSkge1xyXG4gICAgLy8g5aaC5p6c6L+Y5rKh5pyJ5L+d5a2Y5Y6f5aeL5LiN6YCP5piO5bqm77yM5YWI5L+d5a2YXHJcbiAgICBpZiAoIXRoaXMub3JpZ2luYWxQbGF0ZU9wYWNpdGllcykge1xyXG4gICAgICB0aGlzLm9yaWdpbmFsUGxhdGVPcGFjaXRpZXMgPSB7fTtcclxuICAgICAgXHJcbiAgICAgIC8vIOS/neWtmOWeguebtOWBj+i9rOadv+eahOWOn+Wni+S4jemAj+aYjuW6plxyXG4gICAgICBpZiAodGhpcy5jb21wb25lbnRzLnYxICYmIHRoaXMuY29tcG9uZW50cy52MS5tYXRlcmlhbCkge1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxQbGF0ZU9wYWNpdGllcy52MSA9IHRoaXMuY29tcG9uZW50cy52MS5tYXRlcmlhbC5vcGFjaXR5IHx8IDEuMDtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5jb21wb25lbnRzLnYyICYmIHRoaXMuY29tcG9uZW50cy52Mi5tYXRlcmlhbCkge1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxQbGF0ZU9wYWNpdGllcy52MiA9IHRoaXMuY29tcG9uZW50cy52Mi5tYXRlcmlhbC5vcGFjaXR5IHx8IDEuMDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8g5L+d5a2Y5rC05bmz5YGP6L2s5p2/55qE5Y6f5aeL5LiN6YCP5piO5bqmXHJcbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudHMuaDEgJiYgdGhpcy5jb21wb25lbnRzLmgxLm1hdGVyaWFsKSB7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFBsYXRlT3BhY2l0aWVzLmgxID0gdGhpcy5jb21wb25lbnRzLmgxLm1hdGVyaWFsLm9wYWNpdHkgfHwgMS4wO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudHMuaDIgJiYgdGhpcy5jb21wb25lbnRzLmgyLm1hdGVyaWFsKSB7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFBsYXRlT3BhY2l0aWVzLmgyID0gdGhpcy5jb21wb25lbnRzLmgyLm1hdGVyaWFsLm9wYWNpdHkgfHwgMS4wO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOiuvue9ruaegeadv+eahOaWsOS4jemAj+aYjuW6piAtIOS8mOWMlumAj+aYjuW6pua4suafk1xyXG4gICAgY29uc3QgcGxhdGVzID0gW3RoaXMuY29tcG9uZW50cy52MSwgdGhpcy5jb21wb25lbnRzLnYyLCB0aGlzLmNvbXBvbmVudHMuaDEsIHRoaXMuY29tcG9uZW50cy5oMl07XHJcbiAgICBwbGF0ZXMuZm9yRWFjaChwbGF0ZSA9PiB7XHJcbiAgICAgIGlmIChwbGF0ZSAmJiBwbGF0ZS5tYXRlcmlhbCkge1xyXG4gICAgICAgIHBsYXRlLm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcclxuICAgICAgICBwbGF0ZS5tYXRlcmlhbC5vcGFjaXR5ID0gb3BhY2l0eTtcclxuICAgICAgICBwbGF0ZS5tYXRlcmlhbC5kZXB0aFdyaXRlID0gZmFsc2U7IC8vIOemgeeUqOa3seW6puWGmeWFpe+8jOmBv+WFjemBruaMoeeUteWtkOadn1xyXG4gICAgICAgIHBsYXRlLm1hdGVyaWFsLnNpZGUgPSBUSFJFRS5Eb3VibGVTaWRlOyAvLyDlj4zpnaLmuLLmn5PvvIznoa7kv53lkITkuKrop5Lluqbpg73og73nnIvliLBcclxuICAgICAgICBwbGF0ZS5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g6LCD5pW05riy5p+T6aG65bqP77yM6K6p5p6B5p2/5Zyo55S15a2Q5p2f5LmL5YmN5riy5p+TXHJcbiAgICAgICAgcGxhdGUucmVuZGVyT3JkZXIgPSAtMTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOaBouWkjeaegeadv+WOn+Wni+S4jemAj+aYjuW6plxyXG4gICAqL1xyXG4gIHJlc3RvcmVQbGF0ZU9wYWNpdHkoKSB7XHJcbiAgICBpZiAoIXRoaXMub3JpZ2luYWxQbGF0ZU9wYWNpdGllcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOaBouWkjeaJgOacieaegeadv+eahOWOn+Wni+S4jemAj+aYjuW6puWSjOa4suafk+WxnuaAp1xyXG4gICAgY29uc3QgcGxhdGVzID0gW1xyXG4gICAgICB7IGNvbXBvbmVudDogdGhpcy5jb21wb25lbnRzLnYxLCBrZXk6ICd2MScgfSxcclxuICAgICAgeyBjb21wb25lbnQ6IHRoaXMuY29tcG9uZW50cy52Miwga2V5OiAndjInIH0sXHJcbiAgICAgIHsgY29tcG9uZW50OiB0aGlzLmNvbXBvbmVudHMuaDEsIGtleTogJ2gxJyB9LFxyXG4gICAgICB7IGNvbXBvbmVudDogdGhpcy5jb21wb25lbnRzLmgyLCBrZXk6ICdoMicgfVxyXG4gICAgXTtcclxuICAgIFxyXG4gICAgcGxhdGVzLmZvckVhY2goKHsgY29tcG9uZW50LCBrZXkgfSkgPT4ge1xyXG4gICAgICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5tYXRlcmlhbCkge1xyXG4gICAgICAgIGNvbXBvbmVudC5tYXRlcmlhbC5vcGFjaXR5ID0gdGhpcy5vcmlnaW5hbFBsYXRlT3BhY2l0aWVzW2tleV07XHJcbiAgICAgICAgY29tcG9uZW50Lm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdGhpcy5vcmlnaW5hbFBsYXRlT3BhY2l0aWVzW2tleV0gPCAxLjA7XHJcbiAgICAgICAgY29tcG9uZW50Lm1hdGVyaWFsLmRlcHRoV3JpdGUgPSB0cnVlOyAvLyDmgaLlpI3mt7HluqblhpnlhaVcclxuICAgICAgICBjb21wb25lbnQubWF0ZXJpYWwuc2lkZSA9IFRIUkVFLkZyb250U2lkZTsgLy8g5oGi5aSN5Y2V6Z2i5riy5p+TXHJcbiAgICAgICAgY29tcG9uZW50Lm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDmgaLlpI3muLLmn5Ppobrluo9cclxuICAgICAgICBjb21wb25lbnQucmVuZGVyT3JkZXIgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g5riF6Zmk5L+d5a2Y55qE5Y6f5aeL5YC8XHJcbiAgICB0aGlzLm9yaWdpbmFsUGxhdGVPcGFjaXRpZXMgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pu05paw5Yqo55S7XHJcbiAgICovXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgLy8g5pu05paw5omA5pyJdHdlZW5zXHJcbiAgICB0aGlzLnR3ZWVucy5mb3JFYWNoKHR3ZWVuID0+IHtcclxuICAgICAgaWYgKHR3ZWVuICYmIHR3ZWVuLmlzUGxheWluZykge1xyXG4gICAgICAgIHR3ZWVuLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g5riF55CG5bey5a6M5oiQ55qEdHdlZW5zXHJcbiAgICB0aGlzLnR3ZWVucyA9IHRoaXMudHdlZW5zLmZpbHRlcih0d2VlbiA9PiB0d2VlbiAmJiB0d2Vlbi5pc1BsYXlpbmcpO1xyXG4gICAgXHJcbiAgICAvLyDmm7TmlrBUV0VFTu+8iOS9v+eUqOaWsOeahCBHcm91cCBBUEnvvIlcclxuICAgIHR3ZWVuR3JvdXAudXBkYXRlKCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWvueixoeaxoOaAp+iDvee7n+iuoeS/oeaBr1xyXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IOWvueixoeaxoOeKtuaAgeWSjOaAp+iDvee7n+iuoVxyXG4gICAqL1xyXG4gIGdldFBhcnRpY2xlUG9vbFN0YXR1cygpIHtcclxuICAgIGlmICghdGhpcy5wYXJ0aWNsZVBvb2wpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5wYXJ0aWNsZVBvb2wuZ2V0U3RhdHVzKCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOaJk+WNsOWvueixoeaxoOivpue7hueKtuaAge+8iOiwg+ivleeUqO+8iVxyXG4gICAqL1xyXG4gIHByaW50UGFydGljbGVQb29sU3RhdHVzKCkge1xyXG4gICAgaWYgKHRoaXMucGFydGljbGVQb29sKSB7XHJcbiAgICAgIHRoaXMucGFydGljbGVQb29sLnByaW50U3RhdHVzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59ICIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuLyoqXG4gKiDml4vovazmm7Lnur/lh6DkvZXkvZPnlJ/miJDlmahcbiAqIOWfuuS6juaVsOWtpuWFrOW8j+eUn+aIkOW5s+a7kei/nuaOpeeahOaXi+i9rOabsumdolxuICog5pSv5oyBRzHlkoxHMui/nue7reaAp1xuICovXG5leHBvcnQgY2xhc3MgUm90YXRpb25DdXJ2ZUdlb21ldHJ5IHtcbiAgXG4gIC8qKlxuICAgKiDmnoTpgKDlh73mlbBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHIxIC0g5bCP5Y2K5b6EXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByMiAtIOWkp+WNiuW+hCAgXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSDov4fmuKHplb/luqZcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnZlVHlwZSAtIOabsue6v+exu+WeiyAoJ0cxJyDmiJYgJ0cyJylcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlZ21lbnRzIC0g5YiG5q615pWw6YePXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpYWxTZWdtZW50cyAtIOW+hOWQkeWIhuauteaVsFxuICAgKi9cbiAgY29uc3RydWN0b3IocjEsIHIyLCBsZW5ndGgsIGN1cnZlVHlwZSA9ICdHMicsIHNlZ21lbnRzID0gNTAsIHJhZGlhbFNlZ21lbnRzID0gMzIpIHtcbiAgICB0aGlzLnIxID0gcjE7XG4gICAgdGhpcy5yMiA9IHIyO1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgIHRoaXMuY3VydmVUeXBlID0gY3VydmVUeXBlO1xuICAgIHRoaXMuc2VnbWVudHMgPSBzZWdtZW50cztcbiAgICB0aGlzLnJhZGlhbFNlZ21lbnRzID0gcmFkaWFsU2VnbWVudHM7XG4gICAgXG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgIHRoaXMuZ2VuZXJhdGVHZW9tZXRyeSgpO1xuICB9XG4gIFxuICAvKipcbiAgICogRzHov57nu63mgKfmm7Lnur8gKOmbtuaWnOeOh+err+eCue+8jOWkn+mhuua7kSlcbiAgICogcih6KSA9IHIxICsgKHIyIC0gcjEpICogKDNzwrIgLSAyc8KzKVxuICAgKiDlhbbkuK0gcyA9IHovTCDiiIggWzAsMV1cbiAgICovXG4gIGNhbGN1bGF0ZUcxUmFkaXVzKHMpIHtcbiAgICBjb25zdCB0ID0gMyAqIHMgKiBzIC0gMiAqIHMgKiBzICogcztcbiAgICByZXR1cm4gdGhpcy5yMSArICh0aGlzLnIyIC0gdGhpcy5yMSkgKiB0O1xuICB9XG4gIFxuICAvKipcbiAgICogRzLov57nu63mgKfmm7Lnur8gKOi/nuabsueOh+S5n+i/nue7re+8jOabtOWDj1wi6ZO255m96YeR5bGeXCLoiKzkuJ3mu5EpXG4gICAqIHIoeikgPSByMSArIChyMiAtIHIxKSAqICgxMHPCsyAtIDE1c+KBtCArIDZz4oG1KVxuICAgKiDlhbbkuK0gcyA9IHovTCDiiIggWzAsMV1cbiAgICovXG4gIGNhbGN1bGF0ZUcyUmFkaXVzKHMpIHtcbiAgICBjb25zdCBzMyA9IHMgKiBzICogcztcbiAgICBjb25zdCBzNCA9IHMzICogcztcbiAgICBjb25zdCBzNSA9IHM0ICogcztcbiAgICBjb25zdCB0ID0gMTAgKiBzMyAtIDE1ICogczQgKyA2ICogczU7XG4gICAgcmV0dXJuIHRoaXMucjEgKyAodGhpcy5yMiAtIHRoaXMucjEpICogdDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOagueaNruabsue6v+exu+Wei+iuoeeul+WNiuW+hFxuICAgKi9cbiAgY2FsY3VsYXRlUmFkaXVzKHMpIHtcbiAgICBzd2l0Y2ggKHRoaXMuY3VydmVUeXBlKSB7XG4gICAgICBjYXNlICdHMSc6XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUcxUmFkaXVzKHMpO1xuICAgICAgY2FzZSAnRzInOlxuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVHMlJhZGl1cyhzKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUcyUmFkaXVzKHMpOyAvLyDpu5jorqTkvb/nlKhHMlxuICAgIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIOeUn+aIkOaXi+i9rOabsumdouWHoOS9leS9k1xuICAgKi9cbiAgZ2VuZXJhdGVHZW9tZXRyeSgpIHtcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuICAgIGNvbnN0IG5vcm1hbHMgPSBbXTtcbiAgICBjb25zdCB1dnMgPSBbXTtcbiAgICBjb25zdCBpbmRpY2VzID0gW107XG4gICAgXG4gICAgLy8g55Sf5oiQ6aG254K5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdGhpcy5zZWdtZW50czsgaSsrKSB7XG4gICAgICBjb25zdCBzID0gaSAvIHRoaXMuc2VnbWVudHM7IC8vIOWPguaVsCBzIOKIiCBbMCwxXVxuICAgICAgY29uc3QgeiA9IHMgKiB0aGlzLmxlbmd0aDsgICAvLyBa5Z2Q5qCHXG4gICAgICBjb25zdCByYWRpdXMgPSB0aGlzLmNhbGN1bGF0ZVJhZGl1cyhzKTtcbiAgICAgIFxuICAgICAgLy8g6K6h566X5rOV5ZCR6YeP6ZyA6KaB55qE5a+85pWwXG4gICAgICBjb25zdCBkZWx0YVMgPSAwLjAwMTtcbiAgICAgIGNvbnN0IHJfbmV4dCA9IHRoaXMuY2FsY3VsYXRlUmFkaXVzKE1hdGgubWluKDEsIHMgKyBkZWx0YVMpKTtcbiAgICAgIGNvbnN0IHJfcHJldiA9IHRoaXMuY2FsY3VsYXRlUmFkaXVzKE1hdGgubWF4KDAsIHMgLSBkZWx0YVMpKTtcbiAgICAgIGNvbnN0IGRyX2RzID0gKHJfbmV4dCAtIHJfcHJldikgLyAoMiAqIGRlbHRhUyk7XG4gICAgICBjb25zdCBkcl9keiA9IGRyX2RzIC8gdGhpcy5sZW5ndGg7XG4gICAgICBcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IHRoaXMucmFkaWFsU2VnbWVudHM7IGorKykge1xuICAgICAgICBjb25zdCBhbmdsZSA9IChqIC8gdGhpcy5yYWRpYWxTZWdtZW50cykgKiBNYXRoLlBJICogMjtcbiAgICAgICAgXG4gICAgICAgIC8vIOiuoeeul+mhtueCueS9jee9rlxuICAgICAgICBjb25zdCB4ID0gTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzO1xuICAgICAgICBjb25zdCB5ID0gTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzO1xuICAgICAgICBcbiAgICAgICAgdmVydGljZXMucHVzaCh4LCB5LCB6KTtcbiAgICAgICAgXG4gICAgICAgIC8vIOiuoeeul+azleWQkemHj1xuICAgICAgICAvLyDlr7nkuo7ml4vovazmm7LpnaLvvIzms5XlkJHph48gPSAoLWRyL2R6ICogY29zKM64KSwgLWRyL2R6ICogc2luKM64KSwgMSkg5b2S5LiA5YyWXG4gICAgICAgIGNvbnN0IG54ID0gLWRyX2R6ICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBjb25zdCBueSA9IC1kcl9keiAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgY29uc3QgbnogPSAxO1xuICAgICAgICBjb25zdCBsZW5ndGhfbiA9IE1hdGguc3FydChueCAqIG54ICsgbnkgKiBueSArIG56ICogbnopO1xuICAgICAgICBcbiAgICAgICAgbm9ybWFscy5wdXNoKG54IC8gbGVuZ3RoX24sIG55IC8gbGVuZ3RoX24sIG56IC8gbGVuZ3RoX24pO1xuICAgICAgICBcbiAgICAgICAgLy8gVVblnZDmoIdcbiAgICAgICAgdXZzLnB1c2goaiAvIHRoaXMucmFkaWFsU2VnbWVudHMsIHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDnlJ/miJDntKLlvJVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VnbWVudHM7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnJhZGlhbFNlZ21lbnRzOyBqKyspIHtcbiAgICAgICAgY29uc3QgYSA9IGkgKiAodGhpcy5yYWRpYWxTZWdtZW50cyArIDEpICsgajtcbiAgICAgICAgY29uc3QgYiA9IGEgKyB0aGlzLnJhZGlhbFNlZ21lbnRzICsgMTtcbiAgICAgICAgY29uc3QgYyA9IGEgKyAxO1xuICAgICAgICBjb25zdCBkID0gYiArIDE7XG4gICAgICAgIFxuICAgICAgICAvLyDkuKTkuKrkuInop5LlvaLnu4TmiJDkuIDkuKrlm5vovrnlvaJcbiAgICAgICAgaW5kaWNlcy5wdXNoKGEsIGIsIGMpO1xuICAgICAgICBpbmRpY2VzLnB1c2goYiwgZCwgYyk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIOiuvue9ruWHoOS9leS9k+WxnuaAp1xuICAgIHRoaXMuZ2VvbWV0cnkuc2V0SW5kZXgoaW5kaWNlcyk7XG4gICAgdGhpcy5nZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcbiAgICB0aGlzLmdlb21ldHJ5LnNldEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobm9ybWFscywgMykpO1xuICAgIHRoaXMuZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCd1dicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKHV2cywgMikpO1xuICAgIFxuICAgIC8vIOiuoeeul+i+ueeVjOeQg+WSjOi+ueeVjOahhlxuICAgIHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG4gICAgdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiOt+WPlueUn+aIkOeahOWHoOS9leS9k1xuICAgKi9cbiAgZ2V0R2VvbWV0cnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VvbWV0cnk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDliJvlu7rmiYflvaLniYfmrrXlh6DkvZXkvZNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlZ21lbnRJbmRleCAtIOaJh+W9oue0ouW8lSAoMC0zKVxuICAgKiBAcGFyYW0ge251bWJlcn0gc2VjdG9yQ291bnQgLSDmgLvmiYflvaLmlbDph48gKOmAmuW4uOaYrzQpXG4gICAqIEByZXR1cm5zIHtUSFJFRS5CdWZmZXJHZW9tZXRyeX0g5omH5b2i54mH5q615Yeg5L2V5L2TXG4gICAqL1xuICBjcmVhdGVTZWN0b3JHZW9tZXRyeShzZWdtZW50SW5kZXgsIHNlY3RvckNvdW50ID0gNCkge1xuICAgIGNvbnN0IHZlcnRpY2VzID0gW107XG4gICAgY29uc3Qgbm9ybWFscyA9IFtdO1xuICAgIGNvbnN0IHV2cyA9IFtdO1xuICAgIGNvbnN0IGluZGljZXMgPSBbXTtcbiAgICBcbiAgICAvLyDorqHnrpfop5LluqbojIPlm7RcbiAgICBjb25zdCBhbmdsZVBlclNlY3RvciA9IChNYXRoLlBJICogMikgLyBzZWN0b3JDb3VudDtcbiAgICBjb25zdCBzdGFydEFuZ2xlID0gc2VnbWVudEluZGV4ICogYW5nbGVQZXJTZWN0b3I7XG4gICAgY29uc3QgZW5kQW5nbGUgPSAoc2VnbWVudEluZGV4ICsgMSkgKiBhbmdsZVBlclNlY3RvcjtcbiAgICBcbiAgICAvLyDorqHnrpfmr4/kuKrmiYflvaLnmoTlvoTlkJHliIbmrrXmlbBcbiAgICBjb25zdCByYWRpYWxTZWdtZW50c1BlclNlY3RvciA9IE1hdGgubWF4KDgsIE1hdGguZmxvb3IodGhpcy5yYWRpYWxTZWdtZW50cyAvIHNlY3RvckNvdW50KSk7XG4gICAgXG4gICAgLy8g55Sf5oiQ5omH5b2i6aG254K5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdGhpcy5zZWdtZW50czsgaSsrKSB7XG4gICAgICBjb25zdCBzID0gaSAvIHRoaXMuc2VnbWVudHM7IC8vIOWPguaVsCBzIOKIiCBbMCwxXVxuICAgICAgY29uc3QgeiA9IHMgKiB0aGlzLmxlbmd0aDsgICAvLyBa5Z2Q5qCHXG4gICAgICBjb25zdCByYWRpdXMgPSB0aGlzLmNhbGN1bGF0ZVJhZGl1cyhzKTtcbiAgICAgIFxuICAgICAgLy8g6K6h566X5rOV5ZCR6YeP6ZyA6KaB55qE5a+85pWwXG4gICAgICBjb25zdCBkZWx0YVMgPSAwLjAwMTtcbiAgICAgIGNvbnN0IHJfbmV4dCA9IHRoaXMuY2FsY3VsYXRlUmFkaXVzKE1hdGgubWluKDEsIHMgKyBkZWx0YVMpKTtcbiAgICAgIGNvbnN0IHJfcHJldiA9IHRoaXMuY2FsY3VsYXRlUmFkaXVzKE1hdGgubWF4KDAsIHMgLSBkZWx0YVMpKTtcbiAgICAgIGNvbnN0IGRyX2RzID0gKHJfbmV4dCAtIHJfcHJldikgLyAoMiAqIGRlbHRhUyk7XG4gICAgICBjb25zdCBkcl9keiA9IGRyX2RzIC8gdGhpcy5sZW5ndGg7XG4gICAgICBcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzUGVyU2VjdG9yOyBqKyspIHtcbiAgICAgICAgLy8g5Zyo5omH5b2i6KeS5bqm6IyD5Zu05YaF5YiG5biDXG4gICAgICAgIGNvbnN0IHQgPSBqIC8gcmFkaWFsU2VnbWVudHNQZXJTZWN0b3I7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gc3RhcnRBbmdsZSArIHQgKiAoZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIOiuoeeul+mhtueCueS9jee9rlxuICAgICAgICBjb25zdCB4ID0gTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzO1xuICAgICAgICBjb25zdCB5ID0gTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzO1xuICAgICAgICBcbiAgICAgICAgdmVydGljZXMucHVzaCh4LCB5LCB6KTtcbiAgICAgICAgXG4gICAgICAgIC8vIOiuoeeul+azleWQkemHj1xuICAgICAgICBjb25zdCBueCA9IC1kcl9keiAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgY29uc3QgbnkgPSAtZHJfZHogKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGNvbnN0IG56ID0gMTtcbiAgICAgICAgY29uc3QgbGVuZ3RoX24gPSBNYXRoLnNxcnQobnggKiBueCArIG55ICogbnkgKyBueiAqIG56KTtcbiAgICAgICAgXG4gICAgICAgIG5vcm1hbHMucHVzaChueCAvIGxlbmd0aF9uLCBueSAvIGxlbmd0aF9uLCBueiAvIGxlbmd0aF9uKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFVW5Z2Q5qCHXG4gICAgICAgIHV2cy5wdXNoKHQsIHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDnlJ/miJDntKLlvJVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VnbWVudHM7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByYWRpYWxTZWdtZW50c1BlclNlY3RvcjsgaisrKSB7XG4gICAgICAgIGNvbnN0IGEgPSBpICogKHJhZGlhbFNlZ21lbnRzUGVyU2VjdG9yICsgMSkgKyBqO1xuICAgICAgICBjb25zdCBiID0gYSArIHJhZGlhbFNlZ21lbnRzUGVyU2VjdG9yICsgMTtcbiAgICAgICAgY29uc3QgYyA9IGEgKyAxO1xuICAgICAgICBjb25zdCBkID0gYiArIDE7XG4gICAgICAgIFxuICAgICAgICAvLyDkuKTkuKrkuInop5LlvaLnu4TmiJDkuIDkuKrlm5vovrnlvaJcbiAgICAgICAgaW5kaWNlcy5wdXNoKGEsIGIsIGMpO1xuICAgICAgICBpbmRpY2VzLnB1c2goYiwgZCwgYyk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIOWIm+W7uuaWsOeahOWHoOS9leS9k1xuICAgIGNvbnN0IHNlY3Rvckdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgc2VjdG9yR2VvbWV0cnkuc2V0SW5kZXgoaW5kaWNlcyk7XG4gICAgc2VjdG9yR2VvbWV0cnkuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKHZlcnRpY2VzLCAzKSk7XG4gICAgc2VjdG9yR2VvbWV0cnkuc2V0QXR0cmlidXRlKCdub3JtYWwnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShub3JtYWxzLCAzKSk7XG4gICAgc2VjdG9yR2VvbWV0cnkuc2V0QXR0cmlidXRlKCd1dicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKHV2cywgMikpO1xuICAgIFxuICAgIC8vIOiuoeeul+i+ueeVjOeQg+WSjOi+ueeVjOahhlxuICAgIHNlY3Rvckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuICAgIHNlY3Rvckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuICAgIFxuICAgIHJldHVybiBzZWN0b3JHZW9tZXRyeTtcbiAgfVxuXG4gIC8qKlxuICAgKiDplIDmr4Hlh6DkvZXkvZPotYTmupBcbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuZ2VvbWV0cnkpIHtcbiAgICAgIHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIOS+v+aNt+WHveaVsO+8muWIm+W7uuaXi+i9rOabsue6v+WHoOS9leS9k1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUm90YXRpb25DdXJ2ZUdlb21ldHJ5KHIxLCByMiwgbGVuZ3RoLCBjdXJ2ZVR5cGUgPSAnRzInLCBzZWdtZW50cyA9IDUwLCByYWRpYWxTZWdtZW50cyA9IDMyKSB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG5ldyBSb3RhdGlvbkN1cnZlR2VvbWV0cnkocjEsIHIyLCBsZW5ndGgsIGN1cnZlVHlwZSwgc2VnbWVudHMsIHJhZGlhbFNlZ21lbnRzKTtcbiAgcmV0dXJuIGdlbmVyYXRvci5nZXRHZW9tZXRyeSgpO1xufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgUm90YXRpb25DdXJ2ZUdlb21ldHJ5IH0gZnJvbSAnLi4vZ2VvbWV0cnkvUm90YXRpb25DdXJ2ZUdlb21ldHJ5LmpzJztcblxuLyoqXG4gKiDlnIbmn7HkvZPov57mjqXnu4Tku7ZcbiAqIOS9v+eUqOaXi+i9rOabsue6v+eUn+aIkOS4pOS4quWchuafseS9k+S5i+mXtOeahOW5s+a7kei/nuaOpVxuICovXG5leHBvcnQgY2xhc3MgQ3lsaW5kZXJDb25uZWN0aW9uIHtcbiAgXG4gIC8qKlxuICAgKiDmnoTpgKDlh73mlbBcbiAgICogQHBhcmFtIHtPYmplY3R9IGN5bGluZGVyMUNvbmZpZyAtIOesrOS4gOS4quWchuafseS9k+mFjee9rlxuICAgKiBAcGFyYW0ge09iamVjdH0gY3lsaW5kZXIyQ29uZmlnIC0g56ys5LqM5Liq5ZyG5p+x5L2T6YWN572uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25uZWN0aW9uQ29uZmlnIC0g6L+e5o6l6YWN572uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjeWxpbmRlcjFDb25maWcsIGN5bGluZGVyMkNvbmZpZywgY29ubmVjdGlvbkNvbmZpZyA9IHt9KSB7XG4gICAgdGhpcy5jeWxpbmRlcjFDb25maWcgPSBjeWxpbmRlcjFDb25maWc7XG4gICAgdGhpcy5jeWxpbmRlcjJDb25maWcgPSBjeWxpbmRlcjJDb25maWc7XG4gICAgdGhpcy5jb25uZWN0aW9uQ29uZmlnID0ge1xuICAgICAgY3VydmVUeXBlOiBjb25uZWN0aW9uQ29uZmlnLmN1cnZlVHlwZSB8fCAnRzInLFxuICAgICAgc2VnbWVudHM6IGNvbm5lY3Rpb25Db25maWcuc2VnbWVudHMgfHwgNTAsXG4gICAgICByYWRpYWxTZWdtZW50czogY29ubmVjdGlvbkNvbmZpZy5yYWRpYWxTZWdtZW50cyB8fCAzMixcbiAgICAgIHZpc2libGU6IGNvbm5lY3Rpb25Db25maWcudmlzaWJsZSAhPT0gZmFsc2UsXG4gICAgICBjb2xvcjogY29ubmVjdGlvbkNvbmZpZy5jb2xvciB8fCAnMHg2NmFhZmYnLFxuICAgICAgb3BhY2l0eTogY29ubmVjdGlvbkNvbmZpZy5vcGFjaXR5IHx8IDAuNyxcbiAgICAgIGNvbm5lY3Rpb25MZW5ndGg6IGNvbm5lY3Rpb25Db25maWcuY29ubmVjdGlvbkxlbmd0aCB8fCAxLjAsIC8vIOi/nuaOpeWMuuWfn+mVv+W6plxuICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgb2Zmc2V0OiBjb25uZWN0aW9uQ29uZmlnLnBvc2l0aW9uPy5vZmZzZXQgfHwgeyB4OiAwLCB5OiAwLCB6OiAwIH1cbiAgICAgIH0sXG4gICAgICByb3RhdGlvbjoge1xuICAgICAgICBvZmZzZXQ6IGNvbm5lY3Rpb25Db25maWcucm90YXRpb24/Lm9mZnNldCB8fCB7IHg6IDAsIHk6IDAsIHo6IDAgfVxuICAgICAgfSxcbiAgICAgIC4uLmNvbm5lY3Rpb25Db25maWdcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuY29ubmVjdGlvbkdyb3VwID0gbmV3IFRIUkVFLkdyb3VwKCk7XG4gICAgdGhpcy5jb25uZWN0aW9uR3JvdXAubmFtZSA9ICdDeWxpbmRlckNvbm5lY3Rpb24nO1xuICAgIFxuICAgIHRoaXMuY29ubmVjdGlvbk1lc2hlcyA9IFtdO1xuICAgIHRoaXMubWF0ZXJpYWxzID0gW107XG4gICAgXG4gICAgdGhpcy5jcmVhdGVDb25uZWN0aW9ucygpO1xuICB9XG4gIFxuICAvKipcbiAgICog5Yib5bu66L+e5o6lXG4gICAqL1xuICBjcmVhdGVDb25uZWN0aW9ucygpIHtcbiAgICAvLyDorqHnrpfkuKTkuKrlnIbmn7HkvZPkuYvpl7TnmoTov57mjqXlj4LmlbBcbiAgICBjb25zdCBjb25uZWN0aW9uSW5mbyA9IHRoaXMuY2FsY3VsYXRlQ29ubmVjdGlvblBhcmFtZXRlcnMoKTtcbiAgICBcbiAgICBpZiAoY29ubmVjdGlvbkluZm8ubmVlZHNDb25uZWN0aW9uKSB7XG4gICAgICB0aGlzLmNyZWF0ZUNvbm5lY3Rpb25NZXNoKGNvbm5lY3Rpb25JbmZvKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDorqHnrpfov57mjqXlj4LmlbBcbiAgICovXG4gIGNhbGN1bGF0ZUNvbm5lY3Rpb25QYXJhbWV0ZXJzKCkge1xuICAgIGNvbnN0IHBvczEgPSB0aGlzLmN5bGluZGVyMUNvbmZpZy5wb3NpdGlvbjtcbiAgICBjb25zdCBwb3MyID0gdGhpcy5jeWxpbmRlcjJDb25maWcucG9zaXRpb247XG4gICAgY29uc3QgcjEgPSB0aGlzLmN5bGluZGVyMUNvbmZpZy5yYWRpdXM7XG4gICAgY29uc3QgcjIgPSB0aGlzLmN5bGluZGVyMkNvbmZpZy5yYWRpdXM7XG4gICAgXG4gICAgLy8g6K6h566X5Lik5Liq5ZyG5p+x5L2T5Lit5b+D5LmL6Ze055qE6Led56a75ZKM5pa55ZCRXG4gICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoXG4gICAgICBNYXRoLnBvdyhwb3MyLnggLSBwb3MxLngsIDIpICsgXG4gICAgICBNYXRoLnBvdyhwb3MyLnkgLSBwb3MxLnksIDIpICsgXG4gICAgICBNYXRoLnBvdyhwb3MyLnogLSBwb3MxLnosIDIpXG4gICAgKTtcbiAgICBcbiAgICAvLyDorqHnrpfov57mjqXlkJHph49cbiAgICBjb25zdCBkaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMyhcbiAgICAgIHBvczIueCAtIHBvczEueCxcbiAgICAgIHBvczIueSAtIHBvczEueSxcbiAgICAgIHBvczIueiAtIHBvczEuelxuICAgICkubm9ybWFsaXplKCk7XG4gICAgXG4gICAgLy8g5Yik5pat5piv5ZCm6ZyA6KaB6L+e5o6l77yI5ZyG5p+x5L2T5LmL6Ze05pyJ6Ze06ZqZ77yJXG4gICAgY29uc3QgY3lsaW5kZXJMZW5ndGgxID0gdGhpcy5jeWxpbmRlcjFDb25maWcuaGVpZ2h0O1xuICAgIGNvbnN0IGN5bGluZGVyTGVuZ3RoMiA9IHRoaXMuY3lsaW5kZXIyQ29uZmlnLmhlaWdodDtcbiAgICBcbiAgICAvLyDorqHnrpflnIbmn7HkvZPnq6/ngrnkvY3nva7vvIjogIPomZHml4vovazvvIlcbiAgICBjb25zdCByb3QxID0gbmV3IFRIUkVFLkV1bGVyKFxuICAgICAgdGhpcy5jeWxpbmRlcjFDb25maWcucm90YXRpb24ueCxcbiAgICAgIHRoaXMuY3lsaW5kZXIxQ29uZmlnLnJvdGF0aW9uLnksXG4gICAgICB0aGlzLmN5bGluZGVyMUNvbmZpZy5yb3RhdGlvbi56XG4gICAgKTtcbiAgICBjb25zdCByb3QyID0gbmV3IFRIUkVFLkV1bGVyKFxuICAgICAgdGhpcy5jeWxpbmRlcjJDb25maWcucm90YXRpb24ueCxcbiAgICAgIHRoaXMuY3lsaW5kZXIyQ29uZmlnLnJvdGF0aW9uLnksXG4gICAgICB0aGlzLmN5bGluZGVyMkNvbmZpZy5yb3RhdGlvbi56XG4gICAgKTtcbiAgICBcbiAgICAvLyDnroDljJblpITnkIbvvJrlgYforr7lnIbmn7HkvZPpg73mmK/msLTlubPmlL7nva7nmoTvvIjnu5Va6L205peL6L2sOTDluqbvvIlcbiAgICAvLyDlnKjov5nnp43mg4XlhrXkuIvvvIzlnIbmn7HkvZPnmoRcIumVv+W6plwi5a6e6ZmF5LiK5piv5ZyoWOaWueWQkeS4ilxuICAgIFxuICAgIGNvbnN0IGdhcCA9IE1hdGguYWJzKGRpc3RhbmNlIC0gY3lsaW5kZXJMZW5ndGgxLzIgLSBjeWxpbmRlckxlbmd0aDIvMik7XG4gICAgY29uc3QgbmVlZHNDb25uZWN0aW9uID0gZ2FwID4gMC4xOyAvLyDlpoLmnpzpl7TpmpnlpKfkuo4wLjHvvIzliJnpnIDopoHov57mjqVcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgbmVlZHNDb25uZWN0aW9uLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBnYXAsXG4gICAgICBzdGFydFBvczogbmV3IFRIUkVFLlZlY3RvcjMocG9zMS54LCBwb3MxLnksIHBvczEueiksXG4gICAgICBlbmRQb3M6IG5ldyBUSFJFRS5WZWN0b3IzKHBvczIueCwgcG9zMi55LCBwb3MyLnopLFxuICAgICAgc3RhcnRSYWRpdXM6IHIxLFxuICAgICAgZW5kUmFkaXVzOiByMixcbiAgICAgIGNvbm5lY3Rpb25MZW5ndGg6IHRoaXMuY29ubmVjdGlvbkNvbmZpZy5jb25uZWN0aW9uTGVuZ3RoXG4gICAgfTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIm+W7uui/nuaOpee9keagvFxuICAgKi9cbiAgY3JlYXRlQ29ubmVjdGlvbk1lc2goY29ubmVjdGlvbkluZm8pIHtcbiAgICAvLyDliJvlu7rov57mjqXmnZDotKggLSDkvb/nlKhTdGFuZGFyZE1hdGVyaWFs5Lul56Gu5L+d6aKc6Imy5LiA6Ie05oCnXG4gICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoe1xuICAgICAgY29sb3I6IHBhcnNlSW50KHRoaXMuY29ubmVjdGlvbkNvbmZpZy5jb2xvciksXG4gICAgICB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgICAgIG9wYWNpdHk6IHRoaXMuY29ubmVjdGlvbkNvbmZpZy5vcGFjaXR5LFxuICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZSxcbiAgICAgIGRlcHRoV3JpdGU6IGZhbHNlLFxuICAgICAgbWV0YWxuZXNzOiAwLjYsXG4gICAgICByb3VnaG5lc3M6IDAuM1xuICAgIH0pO1xuICAgIFxuICAgIHRoaXMubWF0ZXJpYWxzLnB1c2gobWF0ZXJpYWwpO1xuICAgIFxuICAgIC8vIOWIm+W7uuaXi+i9rOabsue6v+WHoOS9leS9k1xuICAgIGNvbnN0IGN1cnZlR2VvbWV0cnkgPSBuZXcgUm90YXRpb25DdXJ2ZUdlb21ldHJ5KFxuICAgICAgY29ubmVjdGlvbkluZm8uc3RhcnRSYWRpdXMsXG4gICAgICBjb25uZWN0aW9uSW5mby5lbmRSYWRpdXMsXG4gICAgICBjb25uZWN0aW9uSW5mby5jb25uZWN0aW9uTGVuZ3RoLFxuICAgICAgdGhpcy5jb25uZWN0aW9uQ29uZmlnLmN1cnZlVHlwZSxcbiAgICAgIHRoaXMuY29ubmVjdGlvbkNvbmZpZy5zZWdtZW50cyxcbiAgICAgIHRoaXMuY29ubmVjdGlvbkNvbmZpZy5yYWRpYWxTZWdtZW50c1xuICAgICk7XG4gICAgXG4gICAgLy8g5Yib5bu6572R5qC8XG4gICAgY29uc3QgY29ubmVjdGlvbk1lc2ggPSBuZXcgVEhSRUUuTWVzaChjdXJ2ZUdlb21ldHJ5LmdldEdlb21ldHJ5KCksIG1hdGVyaWFsKTtcbiAgICBcbiAgICAvLyDorr7nva7kvY3nva7lkozml4vovaxcbiAgICB0aGlzLnBvc2l0aW9uQ29ubmVjdGlvbk1lc2goY29ubmVjdGlvbk1lc2gsIGNvbm5lY3Rpb25JbmZvKTtcbiAgICBcbiAgICAvLyDorr7nva7lj6/op4HmgKdcbiAgICBjb25uZWN0aW9uTWVzaC52aXNpYmxlID0gdGhpcy5jb25uZWN0aW9uQ29uZmlnLnZpc2libGU7XG4gICAgXG4gICAgLy8g5re75Yqg5Yiw57uE5LitXG4gICAgdGhpcy5jb25uZWN0aW9uR3JvdXAuYWRkKGNvbm5lY3Rpb25NZXNoKTtcbiAgICB0aGlzLmNvbm5lY3Rpb25NZXNoZXMucHVzaChjb25uZWN0aW9uTWVzaCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDlrprkvY3ov57mjqXnvZHmoLxcbiAgICovXG4gIHBvc2l0aW9uQ29ubmVjdGlvbk1lc2gobWVzaCwgY29ubmVjdGlvbkluZm8pIHtcbiAgICAvLyDorqHnrpfov57mjqXkuK3lv4PngrlcbiAgICBjb25zdCBjZW50ZXJYID0gKGNvbm5lY3Rpb25JbmZvLnN0YXJ0UG9zLnggKyBjb25uZWN0aW9uSW5mby5lbmRQb3MueCkgLyAyO1xuICAgIGNvbnN0IGNlbnRlclkgPSAoY29ubmVjdGlvbkluZm8uc3RhcnRQb3MueSArIGNvbm5lY3Rpb25JbmZvLmVuZFBvcy55KSAvIDI7XG4gICAgY29uc3QgY2VudGVyWiA9IChjb25uZWN0aW9uSW5mby5zdGFydFBvcy56ICsgY29ubmVjdGlvbkluZm8uZW5kUG9zLnopIC8gMjtcbiAgICBcbiAgICAvLyDlupTnlKjkvY3nva7lgY/np7tcbiAgICBjb25zdCBwb3NPZmZzZXQgPSB0aGlzLmNvbm5lY3Rpb25Db25maWcucG9zaXRpb24ub2Zmc2V0O1xuICAgIG1lc2gucG9zaXRpb24uc2V0KFxuICAgICAgY2VudGVyWCArIHBvc09mZnNldC54LCBcbiAgICAgIGNlbnRlclkgKyBwb3NPZmZzZXQueSwgXG4gICAgICBjZW50ZXJaICsgcG9zT2Zmc2V0LnpcbiAgICApO1xuICAgIFxuICAgIC8vIOiuoeeul+aXi+i9rOS7peWvuem9kOi/nuaOpeaWueWQkVxuICAgIC8vIOm7mOiupOWHoOS9leS9k+aYr+ayv1rovbTmlrnlkJHnmoTvvIzpnIDopoHml4vovazku6Xlr7npvZDlrp7pmYXov57mjqXmlrnlkJFcbiAgICBjb25zdCB0YXJnZXREaXJlY3Rpb24gPSBjb25uZWN0aW9uSW5mby5kaXJlY3Rpb247XG4gICAgY29uc3QgZGVmYXVsdERpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDEpO1xuICAgIFxuICAgIC8vIOiuoeeul+aXi+i9rOWbm+WFg+aVsFxuICAgIGNvbnN0IHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICAgIHF1YXRlcm5pb24uc2V0RnJvbVVuaXRWZWN0b3JzKGRlZmF1bHREaXJlY3Rpb24sIHRhcmdldERpcmVjdGlvbik7XG4gICAgbWVzaC5zZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKHF1YXRlcm5pb24pO1xuICAgIFxuICAgIC8vIOeUseS6juWchuafseS9k+aYr+awtOW5s+eahO+8iOe7lVrovbTml4vovaw5MOW6pu+8ie+8jOi/nuaOpeS5n+mcgOimgeebuOW6lOiwg+aVtFxuICAgIG1lc2gucm90YXRlWihNYXRoLlBJIC8gMik7XG4gICAgXG4gICAgLy8g5bqU55So5peL6L2s5YGP56e7XG4gICAgY29uc3Qgcm90T2Zmc2V0ID0gdGhpcy5jb25uZWN0aW9uQ29uZmlnLnJvdGF0aW9uLm9mZnNldDtcbiAgICBtZXNoLnJvdGF0ZVgocm90T2Zmc2V0LngpO1xuICAgIG1lc2gucm90YXRlWShyb3RPZmZzZXQueSk7XG4gICAgbWVzaC5yb3RhdGVaKHJvdE9mZnNldC56KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiOt+WPlui/nuaOpee7hFxuICAgKi9cbiAgZ2V0Q29ubmVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uR3JvdXA7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDorr7nva7lj6/op4HmgKdcbiAgICovXG4gIHNldFZpc2libGUodmlzaWJsZSkge1xuICAgIHRoaXMuY29ubmVjdGlvbkdyb3VwLnZpc2libGUgPSB2aXNpYmxlO1xuICAgIHRoaXMuY29ubmVjdGlvbk1lc2hlcy5mb3JFYWNoKG1lc2ggPT4ge1xuICAgICAgbWVzaC52aXNpYmxlID0gdmlzaWJsZTtcbiAgICB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiuvue9ruminOiJslxuICAgKi9cbiAgc2V0Q29sb3IoY29sb3IpIHtcbiAgICB0aGlzLm1hdGVyaWFscy5mb3JFYWNoKG1hdGVyaWFsID0+IHtcbiAgICAgIG1hdGVyaWFsLmNvbG9yLnNldEhleChjb2xvcik7XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDorr7nva7pgI/mmI7luqZcbiAgICovXG4gIHNldE9wYWNpdHkob3BhY2l0eSkge1xuICAgIHRoaXMubWF0ZXJpYWxzLmZvckVhY2gobWF0ZXJpYWwgPT4ge1xuICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG9wYWNpdHkpKTtcbiAgICB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiuvue9ruS9jee9ruWBj+enu1xuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFjovbTlgY/np7tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZ6L205YGP56e7ICBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHogLSBa6L205YGP56e7XG4gICAqL1xuICBzZXRQb3NpdGlvbk9mZnNldCh4LCB5LCB6KSB7XG4gICAgdGhpcy5jb25uZWN0aW9uQ29uZmlnLnBvc2l0aW9uLm9mZnNldCA9IHsgeCwgeSwgeiB9O1xuICAgIHRoaXMucmVjcmVhdGVDb25uZWN0aW9ucygpO1xuICB9XG4gIFxuICAvKipcbiAgICog6K6+572u5peL6L2s5YGP56e7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWOi9tOaXi+i9rOWBj+enu++8iOW8p+W6pu+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFnovbTml4vovazlgY/np7vvvIjlvKfluqbvvIlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHogLSBa6L205peL6L2s5YGP56e777yI5byn5bqm77yJXG4gICAqL1xuICBzZXRSb3RhdGlvbk9mZnNldCh4LCB5LCB6KSB7XG4gICAgdGhpcy5jb25uZWN0aW9uQ29uZmlnLnJvdGF0aW9uLm9mZnNldCA9IHsgeCwgeSwgeiB9O1xuICAgIHRoaXMucmVjcmVhdGVDb25uZWN0aW9ucygpO1xuICB9XG4gIFxuICAvKipcbiAgICog6I635Y+W5b2T5YmN5L2N572u5YGP56e7XG4gICAqL1xuICBnZXRQb3NpdGlvbk9mZnNldCgpIHtcbiAgICByZXR1cm4geyAuLi50aGlzLmNvbm5lY3Rpb25Db25maWcucG9zaXRpb24ub2Zmc2V0IH07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDojrflj5blvZPliY3ml4vovazlgY/np7tcbiAgICovXG4gIGdldFJvdGF0aW9uT2Zmc2V0KCkge1xuICAgIHJldHVybiB7IC4uLnRoaXMuY29ubmVjdGlvbkNvbmZpZy5yb3RhdGlvbi5vZmZzZXQgfTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOebtOaOpeiuvue9rui/nuaOpee7hOeahOS9jee9ru+8iOS4jeaUueWPmOmFjee9ru+8jOWPquaYr+S4tOaXtuenu+WKqO+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFjlnZDmoIdcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZ5Z2Q5qCHXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gWuWdkOagh1xuICAgKi9cbiAgc2V0UG9zaXRpb24oeCwgeSwgeikge1xuICAgIHRoaXMuY29ubmVjdGlvbkdyb3VwLnBvc2l0aW9uLnNldCh4LCB5LCB6KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOebtOaOpeiuvue9rui/nuaOpee7hOeahOaXi+i9rO+8iOS4jeaUueWPmOmFjee9ru+8jOWPquaYr+S4tOaXtuaXi+i9rO+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFjovbTml4vovazvvIjlvKfluqbvvIlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZ6L205peL6L2s77yI5byn5bqm77yJXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gWui9tOaXi+i9rO+8iOW8p+W6pu+8iVxuICAgKi9cbiAgc2V0Um90YXRpb24oeCwgeSwgeikge1xuICAgIHRoaXMuY29ubmVjdGlvbkdyb3VwLnJvdGF0aW9uLnNldCh4LCB5LCB6KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiOt+WPlui/nuaOpee7hOeahOW9k+WJjeS9jee9rlxuICAgKi9cbiAgZ2V0UG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbkdyb3VwLnBvc2l0aW9uLmNsb25lKCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDojrflj5bov57mjqXnu4TnmoTlvZPliY3ml4vovaxcbiAgICovXG4gIGdldFJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25Hcm91cC5yb3RhdGlvbi5jbG9uZSgpO1xuICB9XG4gIFxuICAvKipcbiAgICog6K6+572u5puy57q/57G75Z6LXG4gICAqL1xuICBzZXRDdXJ2ZVR5cGUoY3VydmVUeXBlKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uQ29uZmlnLmN1cnZlVHlwZSA9IGN1cnZlVHlwZTtcbiAgICB0aGlzLnJlY3JlYXRlQ29ubmVjdGlvbnMoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOmHjeaWsOWIm+W7uui/nuaOpVxuICAgKi9cbiAgcmVjcmVhdGVDb25uZWN0aW9ucygpIHtcbiAgICAvLyDmuIXnkIbnjrDmnInov57mjqVcbiAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICBcbiAgICAvLyDph43nva7mlbDnu4RcbiAgICB0aGlzLmNvbm5lY3Rpb25NZXNoZXMgPSBbXTtcbiAgICB0aGlzLm1hdGVyaWFscyA9IFtdO1xuICAgIFxuICAgIC8vIOmHjeaWsOWIm+W7ulxuICAgIHRoaXMuY3JlYXRlQ29ubmVjdGlvbnMoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOabtOaWsOmFjee9rlxuICAgKi9cbiAgdXBkYXRlQ29uZmlnKGN5bGluZGVyMUNvbmZpZywgY3lsaW5kZXIyQ29uZmlnLCBjb25uZWN0aW9uQ29uZmlnKSB7XG4gICAgdGhpcy5jeWxpbmRlcjFDb25maWcgPSBjeWxpbmRlcjFDb25maWc7XG4gICAgdGhpcy5jeWxpbmRlcjJDb25maWcgPSBjeWxpbmRlcjJDb25maWc7XG4gICAgXG4gICAgaWYgKGNvbm5lY3Rpb25Db25maWcpIHtcbiAgICAgIHRoaXMuY29ubmVjdGlvbkNvbmZpZyA9IHsgLi4udGhpcy5jb25uZWN0aW9uQ29uZmlnLCAuLi5jb25uZWN0aW9uQ29uZmlnIH07XG4gICAgfVxuICAgIFxuICAgIHRoaXMucmVjcmVhdGVDb25uZWN0aW9ucygpO1xuICB9XG4gIFxuICAvKipcbiAgICog6ZSA5q+B6LWE5rqQXG4gICAqL1xuICBkaXNwb3NlKCkge1xuICAgIC8vIOmUgOavgeadkOi0qFxuICAgIHRoaXMubWF0ZXJpYWxzLmZvckVhY2gobWF0ZXJpYWwgPT4ge1xuICAgICAgbWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIOmUgOavgeWHoOS9leS9k1xuICAgIHRoaXMuY29ubmVjdGlvbkdyb3VwLnRyYXZlcnNlKChjaGlsZCkgPT4ge1xuICAgICAgaWYgKGNoaWxkLmdlb21ldHJ5KSB7XG4gICAgICAgIGNoaWxkLmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5tYXRlcmlhbCkge1xuICAgICAgICBjaGlsZC5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgLy8g5riF55CG57uEXG4gICAgdGhpcy5jb25uZWN0aW9uR3JvdXAuY2xlYXIoKTtcbiAgICBcbiAgICAvLyDph43nva7mlbDnu4RcbiAgICB0aGlzLmNvbm5lY3Rpb25NZXNoZXMgPSBbXTtcbiAgICB0aGlzLm1hdGVyaWFscyA9IFtdO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gJy4uL2NvbmZpZ0xvYWRlci5qcyc7XHJcblxyXG4vKipcclxuICog57uf5LiA57uE5Lu25p2Q6LSo566h55CG5ZmoXHJcbiAqIOS4umN5bGluZGVyMuOAgXJvdGF0aW9uQ3VydmVDb25uZWN0aW9u5ZKMc3VwZXJlbGxpcHNlVHJhbnNpdGlvbuaPkOS+m+e7n+S4gOeahOadkOi0qOeuoeeQhlxyXG4gKiDkvb/lhbbpopzoibLlkozmnZDotKjnrKblkIjnpLrms6LlmajlhoXpg6jnmoTph5HlsZ7mnZDotKjpo47moLxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVbmlmaWVkQ29tcG9uZW50TWF0ZXJpYWwge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy50ZXh0dXJlTG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcclxuICAgIHRoaXMubWF0ZXJpYWxDYWNoZSA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMudGV4dHVyZXMgPSB7fTtcclxuICAgIFxyXG4gICAgLy8g57uf5LiA55qE5p2Q6LSo6YWN572u77yI5Z+65LqO56S65rOi5Zmo5YaF6YOo6YeR5bGe5p2Q6LSo77yJXHJcbiAgICB0aGlzLnVuaWZpZWRDb25maWcgPSB7XHJcbiAgICAgIGNvbG9yOiAweEYwRjBGMCwgICAgICAgIC8vIOmTtueZveiJsumHkeWxnuiJslxyXG4gICAgICBtZXRhbG5lc3M6IDAuNiwgICAgICAgICAvLyDph5HlsZ7luqZcclxuICAgICAgcm91Z2huZXNzOiAwLjMsICAgICAgICAgLy8g57KX57OZ5bqmXHJcbiAgICAgIG9wYWNpdHk6IDAuNywgICAgICAgICAgIC8vIOmAj+aYjuW6plxyXG4gICAgICBlbnZNYXBJbnRlbnNpdHk6IDEuMCwgICAvLyDnjq/looPotLTlm77lvLrluqZcclxuICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZSwgLy8g5Y+M6Z2i5riy5p+TXHJcbiAgICAgIGRlcHRoV3JpdGU6IGZhbHNlLCAgICAgIC8vIOWFs+mXrea3seW6puWGmeWFpe+8iOmAj+aYjueJqeS9k++8iVxyXG4gICAgICB0cmFuc3BhcmVudDogdHJ1ZSAgICAgICAvLyDlkK/nlKjpgI/mmI5cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJ3lp4vljJbnu5/kuIDmnZDotKjns7vnu59cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g6L+U5ZueUHJvbWlzZe+8jOWcqOWIneWni+WMluWujOaIkOWQjuino+aekFxyXG4gICAqL1xyXG4gIGFzeW5jIGluaXRpYWxpemUoKSB7XHJcbiAgICBjb25zb2xlLmxvZygn8J+OqCDmraPlnKjliJ3lp4vljJbnu5/kuIDnu4Tku7bmnZDotKjns7vnu58uLi4nKTtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8g5Yqg6L296YeR5bGe6LS05Zu+XHJcbiAgICAgIGF3YWl0IHRoaXMubG9hZE1ldGFsVGV4dHVyZXMoKTtcclxuICAgICAgXHJcbiAgICAgIC8vIOmihOWIm+W7uuW4uOeUqOadkOi0qFxyXG4gICAgICB0aGlzLmNyZWF0ZVN0YW5kYXJkTWF0ZXJpYWwoKTtcclxuICAgICAgdGhpcy5jcmVhdGVFeHBsb2RlZE1hdGVyaWFsKCk7XHJcbiAgICAgIHRoaXMuY3JlYXRlVHJhbnNpdGlvbk1hdGVyaWFsKCk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmxvZygn4pyFIOe7n+S4gOe7hOS7tuadkOi0qOezu+e7n+WIneWni+WMluWujOaIkCcpO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIOe7n+S4gOadkOi0qOezu+e7n+WIneWni+WMluWksei0pe+8jOS9v+eUqOaXoOi0tOWbvuadkOi0qDonLCBlcnJvcik7XHJcbiAgICAgIHRoaXMuY3JlYXRlRmFsbGJhY2tNYXRlcmlhbHMoKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yqg6L296YeR5bGe6LS05Zu+XHJcbiAgICogQHJldHVybnMge1Byb21pc2V9IOi0tOWbvuWKoOi9vVByb21pc2VcclxuICAgKi9cclxuICBhc3luYyBsb2FkTWV0YWxUZXh0dXJlcygpIHtcclxuICAgIGNvbnN0IG1ldGFsQ29uZmlnID0gQ09ORklHLm1hdGVyaWFscy5tZXRhbDtcclxuICAgIGNvbnN0IGxvYWRQcm9taXNlcyA9IFtdO1xyXG5cclxuICAgIGlmIChtZXRhbENvbmZpZy50ZXh0dXJlcyAmJiBtZXRhbENvbmZpZy50ZXh0dXJlcy5tYXApIHtcclxuICAgICAgbG9hZFByb21pc2VzLnB1c2godGhpcy5sb2FkVGV4dHVyZSgnbWV0YWxNYXAnLCBtZXRhbENvbmZpZy50ZXh0dXJlcy5tYXApKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWV0YWxDb25maWcudGV4dHVyZXMgJiYgbWV0YWxDb25maWcudGV4dHVyZXMubm9ybWFsTWFwKSB7XHJcbiAgICAgIGxvYWRQcm9taXNlcy5wdXNoKHRoaXMubG9hZFRleHR1cmUoJ21ldGFsTm9ybWFsJywgbWV0YWxDb25maWcudGV4dHVyZXMubm9ybWFsTWFwKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1ldGFsQ29uZmlnLnRleHR1cmVzICYmIG1ldGFsQ29uZmlnLnRleHR1cmVzLnJvdWdobmVzc01hcCkge1xyXG4gICAgICBsb2FkUHJvbWlzZXMucHVzaCh0aGlzLmxvYWRUZXh0dXJlKCdtZXRhbFJvdWdobmVzcycsIG1ldGFsQ29uZmlnLnRleHR1cmVzLnJvdWdobmVzc01hcCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtZXRhbENvbmZpZy50ZXh0dXJlcyAmJiBtZXRhbENvbmZpZy50ZXh0dXJlcy5tZXRhbG5lc3NNYXApIHtcclxuICAgICAgbG9hZFByb21pc2VzLnB1c2godGhpcy5sb2FkVGV4dHVyZSgnbWV0YWxNZXRhbG5lc3MnLCBtZXRhbENvbmZpZy50ZXh0dXJlcy5tZXRhbG5lc3NNYXApKTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCBQcm9taXNlLmFsbChsb2FkUHJvbWlzZXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yqg6L295Y2V5Liq6LS05Zu+XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSDotLTlm77lkI3np7BcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIOi0tOWbvui3r+W+hFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSDotLTlm77liqDovb1Qcm9taXNlXHJcbiAgICovXHJcbiAgbG9hZFRleHR1cmUobmFtZSwgcGF0aCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy50ZXh0dXJlTG9hZGVyLmxvYWQoXHJcbiAgICAgICAgcGF0aCxcclxuICAgICAgICAodGV4dHVyZSkgPT4ge1xyXG4gICAgICAgICAgLy8g6K6+572u6LS05Zu+5Y+C5pWwXHJcbiAgICAgICAgICB0ZXh0dXJlLndyYXBTID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XHJcbiAgICAgICAgICB0ZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XHJcbiAgICAgICAgICB0ZXh0dXJlLmZsaXBZID0gZmFsc2U7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHRoaXMudGV4dHVyZXNbbmFtZV0gPSB0ZXh0dXJlO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYPCfk7gg6LS05Zu+5Yqg6L295oiQ5YqfOiAke25hbWV9YCk7XHJcbiAgICAgICAgICByZXNvbHZlKHRleHR1cmUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKGDinYwg6LS05Zu+5Yqg6L295aSx6LSlOiAke25hbWV9YCwgZXJyb3IpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuagh+WHhue7n+S4gOadkOi0qFxyXG4gICAqL1xyXG4gIGNyZWF0ZVN0YW5kYXJkTWF0ZXJpYWwoKSB7XHJcbiAgICBjb25zdCBtYXRlcmlhbFByb3BzID0ge1xyXG4gICAgICAuLi50aGlzLnVuaWZpZWRDb25maWdcclxuICAgIH07XHJcblxyXG4gICAgLy8g5re75Yqg6LS05Zu+77yI5aaC5p6c5pyJ77yJXHJcbiAgICBpZiAodGhpcy50ZXh0dXJlcy5tZXRhbE1hcCkge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm1hcCA9IHRoaXMudGV4dHVyZXMubWV0YWxNYXA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMubWV0YWxOb3JtYWwpIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5ub3JtYWxNYXAgPSB0aGlzLnRleHR1cmVzLm1ldGFsTm9ybWFsO1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm5vcm1hbFNjYWxlID0gbmV3IFRIUkVFLlZlY3RvcjIoMSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMubWV0YWxSb3VnaG5lc3MpIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5yb3VnaG5lc3NNYXAgPSB0aGlzLnRleHR1cmVzLm1ldGFsUm91Z2huZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnRleHR1cmVzLm1ldGFsTWV0YWxuZXNzKSB7XHJcbiAgICAgIG1hdGVyaWFsUHJvcHMubWV0YWxuZXNzTWFwID0gdGhpcy50ZXh0dXJlcy5tZXRhbE1ldGFsbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbChtYXRlcmlhbFByb3BzKTtcclxuICAgIHRoaXMubWF0ZXJpYWxDYWNoZS5zZXQoJ3N0YW5kYXJkJywgbWF0ZXJpYWwpO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn8J+UpyDmoIflh4bnu5/kuIDmnZDotKjliJvlu7rlrozmiJAnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uueIhueCuOWIhuino+aViOaenOadkOi0qO+8iOeojeW+rumAj+aYjuS4gOS6m++8iVxyXG4gICAqL1xyXG4gIGNyZWF0ZUV4cGxvZGVkTWF0ZXJpYWwoKSB7XHJcbiAgICBjb25zdCBtYXRlcmlhbFByb3BzID0ge1xyXG4gICAgICAuLi50aGlzLnVuaWZpZWRDb25maWcsXHJcbiAgICAgIG9wYWNpdHk6IDAuNiAgLy8g54iG54K454q25oCB5pe25pu06YCP5piOXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIOa3u+WKoOi0tOWbvu+8iOWmguaenOacie+8iVxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMubWV0YWxNYXApIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5tYXAgPSB0aGlzLnRleHR1cmVzLm1ldGFsTWFwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnRleHR1cmVzLm1ldGFsTm9ybWFsKSB7XHJcbiAgICAgIG1hdGVyaWFsUHJvcHMubm9ybWFsTWFwID0gdGhpcy50ZXh0dXJlcy5tZXRhbE5vcm1hbDtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5ub3JtYWxTY2FsZSA9IG5ldyBUSFJFRS5WZWN0b3IyKDEsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnRleHR1cmVzLm1ldGFsUm91Z2huZXNzKSB7XHJcbiAgICAgIG1hdGVyaWFsUHJvcHMucm91Z2huZXNzTWFwID0gdGhpcy50ZXh0dXJlcy5tZXRhbFJvdWdobmVzcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy50ZXh0dXJlcy5tZXRhbE1ldGFsbmVzcykge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm1ldGFsbmVzc01hcCA9IHRoaXMudGV4dHVyZXMubWV0YWxNZXRhbG5lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwobWF0ZXJpYWxQcm9wcyk7XHJcbiAgICB0aGlzLm1hdGVyaWFsQ2FjaGUuc2V0KCdleHBsb2RlZCcsIG1hdGVyaWFsKTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ/CfkqUg54iG54K45p2Q6LSo5Yib5bu65a6M5oiQJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rov4fmuKHmnZDotKjvvIjnlKjkuo5TdXBlcmVsbGlwc2VUcmFuc2l0aW9u77yJXHJcbiAgICovXHJcbiAgY3JlYXRlVHJhbnNpdGlvbk1hdGVyaWFsKCkge1xyXG4gICAgY29uc3QgbWF0ZXJpYWxQcm9wcyA9IHtcclxuICAgICAgLi4udGhpcy51bmlmaWVkQ29uZmlnLFxyXG4gICAgICBvcGFjaXR5OiAwLjggIC8vIOi/h+a4oeadkOi0qOeojeW+ruS4jemAj+aYjuS4gOS6m1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyDmt7vliqDotLTlm77vvIjlpoLmnpzmnInvvIlcclxuICAgIGlmICh0aGlzLnRleHR1cmVzLm1ldGFsTWFwKSB7XHJcbiAgICAgIG1hdGVyaWFsUHJvcHMubWFwID0gdGhpcy50ZXh0dXJlcy5tZXRhbE1hcDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy50ZXh0dXJlcy5tZXRhbE5vcm1hbCkge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm5vcm1hbE1hcCA9IHRoaXMudGV4dHVyZXMubWV0YWxOb3JtYWw7XHJcbiAgICAgIG1hdGVyaWFsUHJvcHMubm9ybWFsU2NhbGUgPSBuZXcgVEhSRUUuVmVjdG9yMigxLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy50ZXh0dXJlcy5tZXRhbFJvdWdobmVzcykge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLnJvdWdobmVzc01hcCA9IHRoaXMudGV4dHVyZXMubWV0YWxSb3VnaG5lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMubWV0YWxNZXRhbG5lc3MpIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5tZXRhbG5lc3NNYXAgPSB0aGlzLnRleHR1cmVzLm1ldGFsTWV0YWxuZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKG1hdGVyaWFsUHJvcHMpO1xyXG4gICAgdGhpcy5tYXRlcmlhbENhY2hlLnNldCgndHJhbnNpdGlvbicsIG1hdGVyaWFsKTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ/CflIQg6L+H5rih5p2Q6LSo5Yib5bu65a6M5oiQJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rlpIfnlKjmnZDotKjvvIjml6DotLTlm77niYjmnKzvvIlcclxuICAgKi9cclxuICBjcmVhdGVGYWxsYmFja01hdGVyaWFscygpIHtcclxuICAgIGNvbnNvbGUubG9nKCfwn5qnIOWIm+W7uuWkh+eUqOe7n+S4gOadkOi0qO+8iOaXoOi0tOWbvu+8iScpO1xyXG4gICAgXHJcbiAgICAvLyDmoIflh4bmnZDotKhcclxuICAgIGNvbnN0IHN0YW5kYXJkTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwodGhpcy51bmlmaWVkQ29uZmlnKTtcclxuICAgIHRoaXMubWF0ZXJpYWxDYWNoZS5zZXQoJ3N0YW5kYXJkJywgc3RhbmRhcmRNYXRlcmlhbCk7XHJcbiAgICBcclxuICAgIC8vIOeIhueCuOadkOi0qFxyXG4gICAgY29uc3QgZXhwbG9kZWRNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCh7XHJcbiAgICAgIC4uLnRoaXMudW5pZmllZENvbmZpZyxcclxuICAgICAgb3BhY2l0eTogMC42XHJcbiAgICB9KTtcclxuICAgIHRoaXMubWF0ZXJpYWxDYWNoZS5zZXQoJ2V4cGxvZGVkJywgZXhwbG9kZWRNYXRlcmlhbCk7XHJcbiAgICBcclxuICAgIC8vIOi/h+a4oeadkOi0qFxyXG4gICAgY29uc3QgdHJhbnNpdGlvbk1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcclxuICAgICAgLi4udGhpcy51bmlmaWVkQ29uZmlnLFxyXG4gICAgICBvcGFjaXR5OiAwLjhcclxuICAgIH0pO1xyXG4gICAgdGhpcy5tYXRlcmlhbENhY2hlLnNldCgndHJhbnNpdGlvbicsIHRyYW5zaXRpb25NYXRlcmlhbCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmjIflrprnsbvlnovnmoTmnZDotKhcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIOadkOi0qOexu+WeiyAoJ3N0YW5kYXJkJywgJ2V4cGxvZGVkJywgJ3RyYW5zaXRpb24nKVxyXG4gICAqIEByZXR1cm5zIHtUSFJFRS5NYXRlcmlhbH0g5p2Q6LSo5a+56LGhXHJcbiAgICovXHJcbiAgZ2V0TWF0ZXJpYWwodHlwZSA9ICdzdGFuZGFyZCcpIHtcclxuICAgIGlmICghdGhpcy5tYXRlcmlhbENhY2hlLmhhcyh0eXBlKSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyDmnKrmib7liLDmnZDotKjnsbvlnos6ICR7dHlwZX3vvIzov5Tlm57moIflh4bmnZDotKhgKTtcclxuICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxDYWNoZS5nZXQoJ3N0YW5kYXJkJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5tYXRlcmlhbENhY2hlLmdldCh0eXBlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuiHquWumuS5ieadkOi0qO+8iOWfuuS6jue7n+S4gOmFjee9ru+8iVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjdXN0b21Qcm9wcyAtIOiHquWumuS5ieWxnuaAp1xyXG4gICAqIEByZXR1cm5zIHtUSFJFRS5NYXRlcmlhbH0g6Ieq5a6a5LmJ5p2Q6LSoXHJcbiAgICovXHJcbiAgY3JlYXRlQ3VzdG9tTWF0ZXJpYWwoY3VzdG9tUHJvcHMgPSB7fSkge1xyXG4gICAgY29uc3QgbWF0ZXJpYWxQcm9wcyA9IHtcclxuICAgICAgLi4udGhpcy51bmlmaWVkQ29uZmlnLFxyXG4gICAgICAuLi5jdXN0b21Qcm9wc1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyDmt7vliqDotLTlm77vvIjlpoLmnpzmnInkuJTnlKjmiLfmsqHmnInopobnm5bvvIlcclxuICAgIGlmICh0aGlzLnRleHR1cmVzLm1ldGFsTWFwICYmICFjdXN0b21Qcm9wcy5tYXApIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5tYXAgPSB0aGlzLnRleHR1cmVzLm1ldGFsTWFwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnRleHR1cmVzLm1ldGFsTm9ybWFsICYmICFjdXN0b21Qcm9wcy5ub3JtYWxNYXApIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5ub3JtYWxNYXAgPSB0aGlzLnRleHR1cmVzLm1ldGFsTm9ybWFsO1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm5vcm1hbFNjYWxlID0gbmV3IFRIUkVFLlZlY3RvcjIoMSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMubWV0YWxSb3VnaG5lc3MgJiYgIWN1c3RvbVByb3BzLnJvdWdobmVzc01hcCkge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLnJvdWdobmVzc01hcCA9IHRoaXMudGV4dHVyZXMubWV0YWxSb3VnaG5lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMubWV0YWxNZXRhbG5lc3MgJiYgIWN1c3RvbVByb3BzLm1ldGFsbmVzc01hcCkge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm1ldGFsbmVzc01hcCA9IHRoaXMudGV4dHVyZXMubWV0YWxNZXRhbG5lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbChtYXRlcmlhbFByb3BzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlue7n+S4gOeahOminOiJsuWAvFxyXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IDE26L+b5Yi26aKc6Imy5YC8XHJcbiAgICovXHJcbiAgZ2V0VW5pZmllZENvbG9yKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudW5pZmllZENvbmZpZy5jb2xvcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlue7n+S4gOeahOmAj+aYjuW6puWAvFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0g5p2Q6LSo57G75Z6LXHJcbiAgICogQHJldHVybnMge251bWJlcn0g6YCP5piO5bqm5YC8XHJcbiAgICovXHJcbiAgZ2V0VW5pZmllZE9wYWNpdHkodHlwZSA9ICdzdGFuZGFyZCcpIHtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICBjYXNlICdleHBsb2RlZCc6XHJcbiAgICAgICAgcmV0dXJuIDAuNjtcclxuICAgICAgY2FzZSAndHJhbnNpdGlvbic6XHJcbiAgICAgICAgcmV0dXJuIDAuODtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gdGhpcy51bmlmaWVkQ29uZmlnLm9wYWNpdHk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmm7TmlrDnu5/kuIDphY3nva5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gbmV3Q29uZmlnIC0g5paw55qE6YWN572uXHJcbiAgICovXHJcbiAgdXBkYXRlVW5pZmllZENvbmZpZyhuZXdDb25maWcpIHtcclxuICAgIHRoaXMudW5pZmllZENvbmZpZyA9IHsgLi4udGhpcy51bmlmaWVkQ29uZmlnLCAuLi5uZXdDb25maWcgfTtcclxuICAgIFxyXG4gICAgLy8g6YeN5paw5Yib5bu65omA5pyJ5p2Q6LSoXHJcbiAgICB0aGlzLm1hdGVyaWFsQ2FjaGUuY2xlYXIoKTtcclxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLnRleHR1cmVzKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlU3RhbmRhcmRNYXRlcmlhbCgpO1xyXG4gICAgICB0aGlzLmNyZWF0ZUV4cGxvZGVkTWF0ZXJpYWwoKTtcclxuICAgICAgdGhpcy5jcmVhdGVUcmFuc2l0aW9uTWF0ZXJpYWwoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlRmFsbGJhY2tNYXRlcmlhbHMoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ/CflIQg57uf5LiA5p2Q6LSo6YWN572u5bey5pu05pawJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDph4rmlL7miYDmnInotYTmupBcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgLy8g6YeK5pS+6LS05Zu+XHJcbiAgICBPYmplY3QudmFsdWVzKHRoaXMudGV4dHVyZXMpLmZvckVhY2godGV4dHVyZSA9PiB7XHJcbiAgICAgIHRleHR1cmUuZGlzcG9zZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g6YeK5pS+5p2Q6LSoXHJcbiAgICB0aGlzLm1hdGVyaWFsQ2FjaGUuZm9yRWFjaChtYXRlcmlhbCA9PiB7XHJcbiAgICAgIG1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMudGV4dHVyZXMgPSB7fTtcclxuICAgIHRoaXMubWF0ZXJpYWxDYWNoZS5jbGVhcigpO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn8J+Xke+4jyDnu5/kuIDnu4Tku7bmnZDotKjotYTmupDlt7Lph4rmlL4nKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIOWIm+W7uuWNleS+i+WunuS+i1xyXG5leHBvcnQgY29uc3QgdW5pZmllZENvbXBvbmVudE1hdGVyaWFsID0gbmV3IFVuaWZpZWRDb21wb25lbnRNYXRlcmlhbCgpO1xyXG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyB1bmlmaWVkQ29tcG9uZW50TWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvVW5pZmllZENvbXBvbmVudE1hdGVyaWFsLmpzJztcblxuLyoqXG4gKiDotoXmpK3lnIblvaLnirbmuJDlj5jnu4Tku7ZcbiAqIOWunueOsOS7juWchuW9ouWIsOaWueW9oueahOW5s+a7keWHoOS9lei/h+a4oe+8jOWfuuS6jui2heakreWchuWFrOW8j++8mnx4L2F8Xm0gKyB8eS9ifF5tID0gMVxuICogXG4gKiDlj4LmlbDor7TmmI7vvJpcbiAqIC0gbSA9IDI6IOakreWchi/lnIblvaJcbiAqIC0gbSDihpIg4oieOiDotovov5HmlrnlvaIgIFxuICogLSBtID0gNn4xMjog5ZyG6KeS5pa55b2i5pWI5p6cXG4gKiBcbiAqIOaUr+aMgUcy5LqU5qyh57yT5Yqo56Gu5L+d5puy546H6L+e57ut5oCnXG4gKi9cbmV4cG9ydCBjbGFzcyBTdXBlcmVsbGlwc2VUcmFuc2l0aW9uIHtcbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhcnRDb25maWcgLSDotbflp4vlh6DkvZXphY3nva7vvIjlnIblvaLvvIlcbiAgICogQHBhcmFtIHtPYmplY3R9IGVuZENvbmZpZyAtIOe7k+adn+WHoOS9lemFjee9ru+8iOaWueW9ou+8iVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNpdGlvbkNvbmZpZyAtIOi/h+a4oemFjee9rlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc3RhcnRDb25maWcsIGVuZENvbmZpZywgdHJhbnNpdGlvbkNvbmZpZykge1xuICAgIHRoaXMuc3RhcnRDb25maWcgPSBzdGFydENvbmZpZztcbiAgICB0aGlzLmVuZENvbmZpZyA9IGVuZENvbmZpZzsgXG4gICAgdGhpcy50cmFuc2l0aW9uQ29uZmlnID0ge1xuICAgICAgLy8g6buY6K6k6YWN572uXG4gICAgICBzZWdtZW50czogNjQsICAgICAgICAgICAgICAvLyDplb/luqbliIbmrrXmlbDvvIjlvbHlk43ov4fmuKHlubPmu5HluqbvvIlcbiAgICAgIHJhZGlhbFNlZ21lbnRzOiAzMiwgICAgICAgIC8vIOW+hOWQkeWIhuauteaVsFxuICAgICAgdHJhbnNpdGlvbkxlbmd0aDogMi4wLCAgICAgLy8g6L+H5rih6ZW/5bqmXG4gICAgICBzdGFydEV4cG9uZW50OiAyLjAsICAgICAgICAvLyDotbflp4vmjIfmlbDvvIjlnIblvaLvvIlcbiAgICAgIGVuZEV4cG9uZW50OiAxMDAuMCwgICAgICAgIC8vIOe7k+adn+aMh+aVsO+8iOWujOWFqOebtOinkuefqeW9ou+8iVxuICAgICAgZzJTbW9vdGhpbmc6IHRydWUsICAgICAgICAgLy8g5ZCv55SoRzLkupTmrKHnvJPliqhcbiAgICAgIGNvbG9yOiAweDY2YWFmZixcbiAgICAgIG9wYWNpdHk6IDAuNyxcbiAgICAgIHBvc2l0aW9uOiB7IG9mZnNldDogeyB4OiAwLCB5OiAwLCB6OiAwIH0gfSxcbiAgICAgIHJvdGF0aW9uOiB7IG9mZnNldDogeyB4OiAwLCB5OiAwLCB6OiAwIH0gfSxcbiAgICAgIC8vIOimhueblum7mOiupOmFjee9rlxuICAgICAgLi4udHJhbnNpdGlvbkNvbmZpZ1xuICAgIH07XG4gICAgXG4gICAgdGhpcy50cmFuc2l0aW9uR3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcbiAgICB0aGlzLnRyYW5zaXRpb25Hcm91cC5uYW1lID0gJ1N1cGVyZWxsaXBzZVRyYW5zaXRpb24nO1xuICAgIFxuICAgIC8vIOadkOi0qFxuICAgIHRoaXMubWF0ZXJpYWwgPSBudWxsO1xuICAgIHRoaXMubWVzaGVzID0gW107XG4gICAgXG4gICAgdGhpcy5jcmVhdGVUcmFuc2l0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICog5Yib5bu65b2i54q25riQ5Y+Y6L+H5rihXG4gICAqL1xuICBjcmVhdGVUcmFuc2l0aW9uKCkge1xuICAgIC8vIOS9v+eUqOe7n+S4gOe7hOS7tuadkOi0qO+8iOekuuazouWZqOWGhemDqOmHkeWxnuadkOi0qO+8iVxuICAgIHRoaXMubWF0ZXJpYWwgPSB1bmlmaWVkQ29tcG9uZW50TWF0ZXJpYWwuZ2V0TWF0ZXJpYWwoJ3RyYW5zaXRpb24nKTtcblxuICAgIC8vIOiuoeeul+i/h+a4oeWPguaVsFxuICAgIGNvbnN0IHRyYW5zaXRpb25JbmZvID0gdGhpcy5jYWxjdWxhdGVUcmFuc2l0aW9uUGFyYW1zKCk7XG4gICAgXG4gICAgLy8g5Yib5bu66L+H5rih5Yeg5L2V5L2TXG4gICAgY29uc3QgZ2VvbWV0cnkgPSB0aGlzLmNyZWF0ZVN1cGVyZWxsaXBzZUdlb21ldHJ5KHRyYW5zaXRpb25JbmZvKTtcbiAgICBcbiAgICAvLyDliJvlu7rnvZHmoLxcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwpO1xuICAgIFxuICAgIC8vIOWumuS9jee9keagvFxuICAgIHRoaXMucG9zaXRpb25UcmFuc2l0aW9uTWVzaChtZXNoLCB0cmFuc2l0aW9uSW5mbyk7XG4gICAgXG4gICAgLy8g5re75Yqg5Yiw57uEXG4gICAgdGhpcy50cmFuc2l0aW9uR3JvdXAuYWRkKG1lc2gpO1xuICAgIHRoaXMubWVzaGVzLnB1c2gobWVzaCk7XG4gIH1cblxuICAvKipcbiAgICog6K6h566X6L+H5rih5Y+C5pWwXG4gICAqL1xuICBjYWxjdWxhdGVUcmFuc2l0aW9uUGFyYW1zKCkge1xuICAgIC8vIOiuoeeul+i1t+Wni+WSjOe7k+adn+S9jee9rlxuICAgIGNvbnN0IHN0YXJ0UG9zID0gbmV3IFRIUkVFLlZlY3RvcjMoXG4gICAgICB0aGlzLnN0YXJ0Q29uZmlnLnBvc2l0aW9uLngsXG4gICAgICB0aGlzLnN0YXJ0Q29uZmlnLnBvc2l0aW9uLnksIFxuICAgICAgdGhpcy5zdGFydENvbmZpZy5wb3NpdGlvbi56XG4gICAgKTtcbiAgICBcbiAgICBjb25zdCBlbmRQb3MgPSBuZXcgVEhSRUUuVmVjdG9yMyhcbiAgICAgIHRoaXMuZW5kQ29uZmlnLnBvc2l0aW9uLngsXG4gICAgICB0aGlzLmVuZENvbmZpZy5wb3NpdGlvbi55LFxuICAgICAgdGhpcy5lbmRDb25maWcucG9zaXRpb24uelxuICAgICk7XG4gICAgXG4gICAgLy8g6K6h566X6L+H5rih5pa55ZCR5ZKM6Led56a7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5zdWJWZWN0b3JzKGVuZFBvcywgc3RhcnRQb3MpLm5vcm1hbGl6ZSgpO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gc3RhcnRQb3MuZGlzdGFuY2VUbyhlbmRQb3MpO1xuICAgIFxuICAgIC8vIOiuoeeul+i/h+a4oeS4reW/g+eCuVxuICAgIGNvbnN0IGNlbnRlciA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuYWRkVmVjdG9ycyhzdGFydFBvcywgZW5kUG9zKS5tdWx0aXBseVNjYWxhcigwLjUpO1xuICAgIFxuICAgIC8vIOS9v+eUqOeUqOaIt+mFjee9rueahOi/h+a4oemVv+W6pu+8iOenu+mZpOi3neemu+mZkOWItu+8jOiuqeeUqOaIt+iHqueUseaOp+WItu+8iVxuICAgIGNvbnN0IGFkanVzdGVkTGVuZ3RoID0gdGhpcy50cmFuc2l0aW9uQ29uZmlnLnRyYW5zaXRpb25MZW5ndGg7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0UG9zLFxuICAgICAgZW5kUG9zLFxuICAgICAgY2VudGVyLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICB0cmFuc2l0aW9uTGVuZ3RoOiBhZGp1c3RlZExlbmd0aCxcbiAgICAgIHN0YXJ0UmFkaXVzOiB0aGlzLnN0YXJ0Q29uZmlnLnJhZGl1cyxcbiAgICAgIGVuZFNpemU6IHRoaXMuZW5kQ29uZmlnLnNpemUgLy8g56uL5pa55L2T5bC65a+4XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJvlu7rotoXmpK3lnIbov4fmuKHlh6DkvZXkvZNcbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zaXRpb25JbmZvIC0g6L+H5rih5L+h5oGvXG4gICAqL1xuICBjcmVhdGVTdXBlcmVsbGlwc2VHZW9tZXRyeSh0cmFuc2l0aW9uSW5mbykge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy50cmFuc2l0aW9uQ29uZmlnLnNlZ21lbnRzO1xuICAgIGNvbnN0IHJhZGlhbFNlZ21lbnRzID0gdGhpcy50cmFuc2l0aW9uQ29uZmlnLnJhZGlhbFNlZ21lbnRzO1xuICAgIGNvbnN0IGxlbmd0aCA9IHRyYW5zaXRpb25JbmZvLnRyYW5zaXRpb25MZW5ndGg7XG4gICAgXG4gICAgY29uc3QgdmVydGljZXMgPSBbXTtcbiAgICBjb25zdCBub3JtYWxzID0gW107XG4gICAgY29uc3QgdXZzID0gW107XG4gICAgY29uc3QgaW5kaWNlcyA9IFtdO1xuICAgIFxuICAgIC8vIOayv+mVv+W6puaWueWQkeWIm+W7uuaIqumdolxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpKyspIHtcbiAgICAgIGNvbnN0IHQgPSBpIC8gc2VnbWVudHM7IC8vIDAg5YiwIDFcbiAgICAgIGNvbnN0IHogPSAtbGVuZ3RoIC8gMiArIHQgKiBsZW5ndGg7IC8vIOayv1rovbTliIbluINcbiAgICAgIFxuICAgICAgLy8g5bqU55SoRzLkupTmrKHnvJPliqjov5vooYzlubPmu5Hmj5LlgLxcbiAgICAgIGNvbnN0IHNtb290aFQgPSB0aGlzLnRyYW5zaXRpb25Db25maWcuZzJTbW9vdGhpbmcgPyB0aGlzLmcyU21vb3RoaW5nKHQpIDogdDtcbiAgICAgIFxuICAgICAgLy8g5o+S5YC86K6h566X5b2T5YmN5oiq6Z2i55qE6LaF5qSt5ZyG5Y+C5pWwXG4gICAgICBjb25zdCBjdXJyZW50RXhwb25lbnQgPSBUSFJFRS5NYXRoVXRpbHMubGVycChcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uQ29uZmlnLnN0YXJ0RXhwb25lbnQsIFxuICAgICAgICB0aGlzLnRyYW5zaXRpb25Db25maWcuZW5kRXhwb25lbnQsIFxuICAgICAgICBzbW9vdGhUXG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyDmj5LlgLzorqHnrpflvZPliY3miKrpnaLnmoTlsLrlr7hcbiAgICAgIC8vIOazqOaEj++8mueUseS6jui2heakreWchuS8mue7lVrovbTml4vovaw5MOW6pu+8jOmcgOimgeS6pOaNondpZHRo5ZKMaGVpZ2h055qE5pig5bCEXG4gICAgICAvLyBY6L2077yI5peL6L2s5ZCO5Y+Y5oiQ5Z6C55u05pa55ZCR77yJ5a+55bqU6I2n5YWJ5bGP55qEaGVpZ2h0XG4gICAgICAvLyBZ6L2077yI5peL6L2s5ZCO5Y+Y5oiQ5rC05bmz5pa55ZCR77yJ5a+55bqU6I2n5YWJ5bGP55qEd2lkdGhcbiAgICAgIGNvbnN0IGN1cnJlbnRSYWRpdXNYID0gVEhSRUUuTWF0aFV0aWxzLmxlcnAoXG4gICAgICAgIHRyYW5zaXRpb25JbmZvLnN0YXJ0UmFkaXVzLFxuICAgICAgICB0cmFuc2l0aW9uSW5mby5lbmRTaXplLmhlaWdodCAvIDIsICAvLyDpq5jluqbmmKDlsITliLBY6L20XG4gICAgICAgIHNtb290aFRcbiAgICAgICk7XG4gICAgICBjb25zdCBjdXJyZW50UmFkaXVzWSA9IFRIUkVFLk1hdGhVdGlscy5sZXJwKFxuICAgICAgICB0cmFuc2l0aW9uSW5mby5zdGFydFJhZGl1cyxcbiAgICAgICAgdHJhbnNpdGlvbkluZm8uZW5kU2l6ZS53aWR0aCAvIDIsICAgLy8g5a695bqm5pig5bCE5YiwWei9tFxuICAgICAgICBzbW9vdGhUXG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyDliJvlu7rlvZPliY3miKrpnaLnmoTotoXmpK3lnIbova7lu5NcbiAgICAgIGNvbnN0IGNyb3NzU2VjdGlvbiA9IHRoaXMuZ2VuZXJhdGVTdXBlcmVsbGlwc2VDcm9zc1NlY3Rpb24oXG4gICAgICAgIGN1cnJlbnRSYWRpdXNYLFxuICAgICAgICBjdXJyZW50UmFkaXVzWSxcbiAgICAgICAgY3VycmVudEV4cG9uZW50LFxuICAgICAgICByYWRpYWxTZWdtZW50c1xuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8g5re75Yqg6aG254K55Yiw5Yeg5L2V5L2TXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNyb3NzU2VjdGlvbi5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBwb2ludCA9IGNyb3NzU2VjdGlvbltqXTtcbiAgICAgICAgdmVydGljZXMucHVzaChwb2ludC54LCBwb2ludC55LCB6KTtcbiAgICAgICAgXG4gICAgICAgIC8vIOiuoeeul+azleWQkemHj++8iOeugOWMlueJiO+8jOWPr+i/m+S4gOatpeS8mOWMlu+8iVxuICAgICAgICBjb25zdCBub3JtYWwgPSBuZXcgVEhSRUUuVmVjdG9yMyhwb2ludC54LCBwb2ludC55LCAwKS5ub3JtYWxpemUoKTtcbiAgICAgICAgbm9ybWFscy5wdXNoKG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnopO1xuICAgICAgICBcbiAgICAgICAgLy8gVVblnZDmoIdcbiAgICAgICAgdXZzLnB1c2goaiAvIHJhZGlhbFNlZ21lbnRzLCB0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8g55Sf5oiQ57Si5byV77yI6L+e5o6l55u46YK75oiq6Z2i77yJXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJhZGlhbFNlZ21lbnRzOyBqKyspIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGkgKiByYWRpYWxTZWdtZW50cyArIGo7XG4gICAgICAgIGNvbnN0IG5leHQgPSBpICogcmFkaWFsU2VnbWVudHMgKyAoKGogKyAxKSAlIHJhZGlhbFNlZ21lbnRzKTtcbiAgICAgICAgY29uc3QgY3VycmVudE5leHQgPSAoaSArIDEpICogcmFkaWFsU2VnbWVudHMgKyBqO1xuICAgICAgICBjb25zdCBuZXh0TmV4dCA9IChpICsgMSkgKiByYWRpYWxTZWdtZW50cyArICgoaiArIDEpICUgcmFkaWFsU2VnbWVudHMpO1xuICAgICAgICBcbiAgICAgICAgLy8g5Lik5Liq5LiJ6KeS5b2i57uE5oiQ5LiA5Liq5Zub6L655b2iXG4gICAgICAgIGluZGljZXMucHVzaChjdXJyZW50LCBuZXh0LCBjdXJyZW50TmV4dCk7XG4gICAgICAgIGluZGljZXMucHVzaChuZXh0LCBuZXh0TmV4dCwgY3VycmVudE5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDliJvlu7rlh6DkvZXkvZNcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh2ZXJ0aWNlcywgMykpO1xuICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobm9ybWFscywgMykpO1xuICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgndXYnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh1dnMsIDIpKTtcbiAgICBnZW9tZXRyeS5zZXRJbmRleChpbmRpY2VzKTtcbiAgICBcbiAgICAvLyDorqHnrpfmraPnoa7nmoTms5XlkJHph49cbiAgICBnZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICAgIFxuICAgIHJldHVybiBnZW9tZXRyeTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlJ/miJDotoXmpK3lnIbmiKrpnaLova7lu5NcbiAgICog5L2/55So5YWs5byP77yafHgvYXxebSArIHx5L2J8Xm0gPSAxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNYIC0gWOi9tOWNiuW+hFxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzWSAtIFnovbTljYrlvoQgIFxuICAgKiBAcGFyYW0ge251bWJlcn0gZXhwb25lbnQgLSDotoXmpK3lnIbmjIfmlbBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlZ21lbnRzIC0g5YiG5q615pWwXG4gICAqL1xuICBnZW5lcmF0ZVN1cGVyZWxsaXBzZUNyb3NzU2VjdGlvbihyYWRpdXNYLCByYWRpdXNZLCBleHBvbmVudCwgc2VnbWVudHMpIHtcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBcbiAgICAvLyDlvZPmjIfmlbDpnZ7luLjlpKfml7bvvIznm7TmjqXnlJ/miJDnn6nlvaJcbiAgICBpZiAoZXhwb25lbnQgPj0gNTApIHtcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlUmVjdGFuZ2xlQ3Jvc3NTZWN0aW9uKHJhZGl1c1gsIHJhZGl1c1ksIHNlZ21lbnRzKTtcbiAgICB9XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50czsgaSsrKSB7XG4gICAgICBjb25zdCBhbmdsZSA9IChpIC8gc2VnbWVudHMpICogTWF0aC5QSSAqIDI7XG4gICAgICBcbiAgICAgIC8vIOWPguaVsOaWueeoi+eUn+aIkOi2heakreWchueCuVxuICAgICAgLy8geCA9IGEgKiBzaWduKGNvcyjOuCkpICogfGNvcyjOuCl8XigyL20pXG4gICAgICAvLyB5ID0gYiAqIHNpZ24oc2luKM64KSkgKiB8c2luKM64KXxeKDIvbSlcbiAgICAgIGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgY29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHNpZ25Db3MgPSBNYXRoLnNpZ24oY29zVGhldGEpO1xuICAgICAgY29uc3Qgc2lnblNpbiA9IE1hdGguc2lnbihzaW5UaGV0YSk7XG4gICAgICBcbiAgICAgIC8vIOmBv+WFjeaVsOWAvOmXrumimO+8muW9k+aMh+aVsOW+iOWkp+aXtu+8jOmZkOWItuacgOWwj+WAvFxuICAgICAgY29uc3QgbWluVmFsdWUgPSAxZS0xMjtcbiAgICAgIGNvbnN0IGFic0NvcyA9IE1hdGgubWF4KE1hdGguYWJzKGNvc1RoZXRhKSwgbWluVmFsdWUpO1xuICAgICAgY29uc3QgYWJzU2luID0gTWF0aC5tYXgoTWF0aC5hYnMoc2luVGhldGEpLCBtaW5WYWx1ZSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHBvd0NvcyA9IE1hdGgucG93KGFic0NvcywgMiAvIGV4cG9uZW50KTtcbiAgICAgIGNvbnN0IHBvd1NpbiA9IE1hdGgucG93KGFic1NpbiwgMiAvIGV4cG9uZW50KTtcbiAgICAgIFxuICAgICAgY29uc3QgeCA9IHJhZGl1c1ggKiBzaWduQ29zICogcG93Q29zO1xuICAgICAgY29uc3QgeSA9IHJhZGl1c1kgKiBzaWduU2luICogcG93U2luO1xuICAgICAgXG4gICAgICBwb2ludHMucHVzaChuZXcgVEhSRUUuVmVjdG9yMih4LCB5KSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICAvKipcbiAgICog55Sf5oiQ5a6M5YWo55u06KeS55qE55+p5b2i5oiq6Z2i6L2u5buTXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNYIC0gWOi9tOWNiuW+hFxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzWSAtIFnovbTljYrlvoQgIFxuICAgKiBAcGFyYW0ge251bWJlcn0gc2VnbWVudHMgLSDliIbmrrXmlbBcbiAgICovXG4gIGdlbmVyYXRlUmVjdGFuZ2xlQ3Jvc3NTZWN0aW9uKHJhZGl1c1gsIHJhZGl1c1ksIHNlZ21lbnRzKSB7XG4gICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgY29uc3Qgc2VnbWVudHNQZXJTaWRlID0gTWF0aC5mbG9vcihzZWdtZW50cyAvIDQpO1xuICAgIFxuICAgIC8vIOWPs+i+ue+8iOS7juWPs+S4i+WIsOWPs+S4iu+8iVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHNlZ21lbnRzUGVyU2lkZTsgaSsrKSB7XG4gICAgICBjb25zdCB0ID0gaSAvIHNlZ21lbnRzUGVyU2lkZTtcbiAgICAgIGNvbnN0IHggPSByYWRpdXNYO1xuICAgICAgY29uc3QgeSA9IHJhZGl1c1kgKiAoMiAqIHQgLSAxKTsgLy8gLXJhZGl1c1kg5YiwIHJhZGl1c1lcbiAgICAgIHBvaW50cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKHgsIHkpKTtcbiAgICB9XG4gICAgXG4gICAgLy8g5LiK6L6577yI5LuO5Y+z5LiK5Yiw5bem5LiK77yJXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gc2VnbWVudHNQZXJTaWRlOyBpKyspIHtcbiAgICAgIGNvbnN0IHQgPSBpIC8gc2VnbWVudHNQZXJTaWRlO1xuICAgICAgY29uc3QgeCA9IHJhZGl1c1ggKiAoMSAtIDIgKiB0KTsgLy8gcmFkaXVzWCDliLAgLXJhZGl1c1hcbiAgICAgIGNvbnN0IHkgPSByYWRpdXNZO1xuICAgICAgcG9pbnRzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoeCwgeSkpO1xuICAgIH1cbiAgICBcbiAgICAvLyDlt6bovrnvvIjku47lt6bkuIrliLDlt6bkuIvvvIlcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBzZWdtZW50c1BlclNpZGU7IGkrKykge1xuICAgICAgY29uc3QgdCA9IGkgLyBzZWdtZW50c1BlclNpZGU7XG4gICAgICBjb25zdCB4ID0gLXJhZGl1c1g7XG4gICAgICBjb25zdCB5ID0gcmFkaXVzWSAqICgxIC0gMiAqIHQpOyAvLyByYWRpdXNZIOWIsCAtcmFkaXVzWVxuICAgICAgcG9pbnRzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoeCwgeSkpO1xuICAgIH1cbiAgICBcbiAgICAvLyDkuIvovrnvvIjku47lt6bkuIvliLDlj7PkuIvvvIlcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNlZ21lbnRzUGVyU2lkZTsgaSsrKSB7XG4gICAgICBjb25zdCB0ID0gaSAvIHNlZ21lbnRzUGVyU2lkZTtcbiAgICAgIGNvbnN0IHggPSByYWRpdXNYICogKDIgKiB0IC0gMSk7IC8vIC1yYWRpdXNYIOWIsCByYWRpdXNYXG4gICAgICBjb25zdCB5ID0gLXJhZGl1c1k7XG4gICAgICBwb2ludHMucHVzaChuZXcgVEhSRUUuVmVjdG9yMih4LCB5KSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICAvKipcbiAgICogRzLkupTmrKHnvJPliqjlh73mlbBcbiAgICog5L+d6K+B5L2N572u44CB6YCf5bqm5ZKM5Yqg6YCf5bqm6L+e57ut5oCnXG4gICAqIOWFrOW8j++8mmYodCkgPSAxMHTCsyAtIDE1dOKBtCArIDZ04oG1XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0IC0g6L6T5YWl5Y+C5pWwIFswLDFdXG4gICAqL1xuICBnMlNtb290aGluZyh0KSB7XG4gICAgLy8g6ZmQ5Yi26L6T5YWl6IyD5Zu0XG4gICAgdCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKTtcbiAgICBcbiAgICAvLyBHMuS6lOasoee8k+WKqFxuICAgIHJldHVybiAxMCAqIE1hdGgucG93KHQsIDMpIC0gMTUgKiBNYXRoLnBvdyh0LCA0KSArIDYgKiBNYXRoLnBvdyh0LCA1KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlrprkvY3ov4fmuKHnvZHmoLxcbiAgICogQHBhcmFtIHtUSFJFRS5NZXNofSBtZXNoIC0g572R5qC85a+56LGhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2l0aW9uSW5mbyAtIOi/h+a4oeS/oeaBr1xuICAgKi9cbiAgcG9zaXRpb25UcmFuc2l0aW9uTWVzaChtZXNoLCB0cmFuc2l0aW9uSW5mbykge1xuICAgIC8vIOiuvue9ruWfuuehgOS9jee9ru+8iOi/h+a4oeS4reW/g+eCue+8iVxuICAgIGNvbnN0IGNlbnRlciA9IHRyYW5zaXRpb25JbmZvLmNlbnRlcjtcbiAgICBjb25zdCBwb3NPZmZzZXQgPSB0aGlzLnRyYW5zaXRpb25Db25maWcucG9zaXRpb24ub2Zmc2V0O1xuICAgIFxuICAgIG1lc2gucG9zaXRpb24uc2V0KFxuICAgICAgY2VudGVyLnggKyBwb3NPZmZzZXQueCxcbiAgICAgIGNlbnRlci55ICsgcG9zT2Zmc2V0LnksIFxuICAgICAgY2VudGVyLnogKyBwb3NPZmZzZXQuelxuICAgICk7XG4gICAgXG4gICAgLy8g6K6h566X5peL6L2s5Lul5a+56b2Q6L+H5rih5pa55ZCRXG4gICAgY29uc3QgdGFyZ2V0RGlyZWN0aW9uID0gdHJhbnNpdGlvbkluZm8uZGlyZWN0aW9uO1xuICAgIGNvbnN0IGRlZmF1bHREaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAxKTtcbiAgICBcbiAgICAvLyDorqHnrpfml4vovazlm5vlhYPmlbBcbiAgICBjb25zdCBxdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICBxdWF0ZXJuaW9uLnNldEZyb21Vbml0VmVjdG9ycyhkZWZhdWx0RGlyZWN0aW9uLCB0YXJnZXREaXJlY3Rpb24pO1xuICAgIG1lc2guc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbihxdWF0ZXJuaW9uKTtcbiAgICBcbiAgICAvLyDnlLHkuo7lnIbmn7HkvZPmmK/msLTlubPnmoTvvIjnu5Va6L205peL6L2sOTDluqbvvInvvIzov4fmuKHkuZ/pnIDopoHnm7jlupTosIPmlbRcbiAgICBtZXNoLnJvdGF0ZVooTWF0aC5QSSAvIDIpO1xuICAgIFxuICAgIC8vIOW6lOeUqOaXi+i9rOWBj+enu1xuICAgIGNvbnN0IHJvdE9mZnNldCA9IHRoaXMudHJhbnNpdGlvbkNvbmZpZy5yb3RhdGlvbi5vZmZzZXQ7XG4gICAgbWVzaC5yb3RhdGVYKHJvdE9mZnNldC54KTtcbiAgICBtZXNoLnJvdGF0ZVkocm90T2Zmc2V0LnkpO1xuICAgIG1lc2gucm90YXRlWihyb3RPZmZzZXQueik7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W6L+H5rih57uEXG4gICAqL1xuICBnZXRUcmFuc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb25Hcm91cDtcbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva7lj6/op4HmgKdcbiAgICovXG4gIHNldFZpc2libGUodmlzaWJsZSkge1xuICAgIHRoaXMudHJhbnNpdGlvbkdyb3VwLnZpc2libGUgPSB2aXNpYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruminOiJslxuICAgKi9cbiAgc2V0Q29sb3IoY29sb3IpIHtcbiAgICBpZiAodGhpcy5tYXRlcmlhbCkge1xuICAgICAgdGhpcy5tYXRlcmlhbC5jb2xvci5zZXRIZXgoY29sb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva7pgI/mmI7luqZcbiAgICovXG4gIHNldE9wYWNpdHkob3BhY2l0eSkge1xuICAgIGlmICh0aGlzLm1hdGVyaWFsKSB7XG4gICAgICB0aGlzLm1hdGVyaWFsLm9wYWNpdHkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBvcGFjaXR5KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruS9jee9ruWBj+enu1xuICAgKi9cbiAgc2V0UG9zaXRpb25PZmZzZXQoeCwgeSwgeikge1xuICAgIHRoaXMudHJhbnNpdGlvbkNvbmZpZy5wb3NpdGlvbi5vZmZzZXQgPSB7IHgsIHksIHogfTtcbiAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICog6K6+572u5peL6L2s5YGP56e7ICBcbiAgICovXG4gIHNldFJvdGF0aW9uT2Zmc2V0KHgsIHksIHopIHtcbiAgICB0aGlzLnRyYW5zaXRpb25Db25maWcucm90YXRpb24ub2Zmc2V0ID0geyB4LCB5LCB6IH07XG4gICAgdGhpcy51cGRhdGVSb3RhdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOebtOaOpeiuvue9ruS9jee9rlxuICAgKi9cbiAgc2V0UG9zaXRpb24oeCwgeSwgeikge1xuICAgIHRoaXMudHJhbnNpdGlvbkdyb3VwLnBvc2l0aW9uLnNldCh4LCB5LCB6KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnm7TmjqXorr7nva7ml4vovaxcbiAgICovXG4gIHNldFJvdGF0aW9uKHgsIHksIHopIHtcbiAgICB0aGlzLnRyYW5zaXRpb25Hcm91cC5yb3RhdGlvbi5zZXQoeCwgeSwgeik7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5b2T5YmN5L2N572uXG4gICAqL1xuICBnZXRQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uR3JvdXAucG9zaXRpb24uY2xvbmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blvZPliY3ml4vovaxcbiAgICovXG4gIGdldFJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb25Hcm91cC5yb3RhdGlvbi5jbG9uZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPluS9jee9ruWBj+enu1xuICAgKi9cbiAgZ2V0UG9zaXRpb25PZmZzZXQoKSB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy50cmFuc2l0aW9uQ29uZmlnLnBvc2l0aW9uLm9mZnNldCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPluaXi+i9rOWBj+enu1xuICAgKi9cbiAgZ2V0Um90YXRpb25PZmZzZXQoKSB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy50cmFuc2l0aW9uQ29uZmlnLnJvdGF0aW9uLm9mZnNldCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOS9jee9ru+8iOmHjeaWsOiuoeeul+WfuuS6juWBj+enu++8iVxuICAgKi9cbiAgdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgLy8g6YeN5paw6K6h566X6L+H5rih5Y+C5pWwXG4gICAgY29uc3QgdHJhbnNpdGlvbkluZm8gPSB0aGlzLmNhbGN1bGF0ZVRyYW5zaXRpb25QYXJhbXMoKTtcbiAgICBcbiAgICAvLyDmm7TmlrDmiYDmnInnvZHmoLzkvY3nva5cbiAgICB0aGlzLm1lc2hlcy5mb3JFYWNoKG1lc2ggPT4ge1xuICAgICAgdGhpcy5wb3NpdGlvblRyYW5zaXRpb25NZXNoKG1lc2gsIHRyYW5zaXRpb25JbmZvKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDml4vovazvvIjph43mlrDorqHnrpfln7rkuo7lgY/np7vvvIlcbiAgICovXG4gIHVwZGF0ZVJvdGF0aW9uKCkge1xuICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTsgLy8g5peL6L2s5YGP56e76ZyA6KaB6YeN5paw5a6a5L2NXG4gIH1cblxuICAvKipcbiAgICog5pu05paw6YWN572uXG4gICAqL1xuICB1cGRhdGVDb25maWcoc3RhcnRDb25maWcsIGVuZENvbmZpZywgdHJhbnNpdGlvbkNvbmZpZykge1xuICAgIHRoaXMuc3RhcnRDb25maWcgPSBzdGFydENvbmZpZztcbiAgICB0aGlzLmVuZENvbmZpZyA9IGVuZENvbmZpZztcbiAgICB0aGlzLnRyYW5zaXRpb25Db25maWcgPSB7IC4uLnRoaXMudHJhbnNpdGlvbkNvbmZpZywgLi4udHJhbnNpdGlvbkNvbmZpZyB9O1xuICAgIFxuICAgIC8vIOmHjeaWsOWIm+W7uui/h+a4oVxuICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgIHRoaXMuY3JlYXRlVHJhbnNpdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWKqOaAgeabtOaWsOi2heakreWchuaMh+aVsO+8iOeUqOS6juWKqOeUu+aViOaenO+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRFeHBvbmVudCAtIOi1t+Wni+aMh+aVsFxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kRXhwb25lbnQgLSDnu5PmnZ/mjIfmlbBcbiAgICovXG4gIHVwZGF0ZUV4cG9uZW50cyhzdGFydEV4cG9uZW50LCBlbmRFeHBvbmVudCkge1xuICAgIHRoaXMudHJhbnNpdGlvbkNvbmZpZy5zdGFydEV4cG9uZW50ID0gc3RhcnRFeHBvbmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25Db25maWcuZW5kRXhwb25lbnQgPSBlbmRFeHBvbmVudDtcbiAgICBcbiAgICAvLyDph43mlrDliJvlu7rlh6DkvZXkvZNcbiAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICB0aGlzLmNyZWF0ZVRyYW5zaXRpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDplIDmr4HotYTmupBcbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMubWF0ZXJpYWwpIHtcbiAgICAgIHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLm1lc2hlcy5mb3JFYWNoKG1lc2ggPT4ge1xuICAgICAgaWYgKG1lc2guZ2VvbWV0cnkpIG1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgdGhpcy50cmFuc2l0aW9uR3JvdXAucmVtb3ZlKG1lc2gpO1xuICAgIH0pO1xuICAgIFxuICAgIHRoaXMubWVzaGVzID0gW107XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJztcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gJy4uL2NvbmZpZ0xvYWRlci5qcyc7XG5pbXBvcnQgeyB0d2Vlbkdyb3VwIH0gZnJvbSAnLi4vbWFpbi5qcyc7XG5pbXBvcnQgeyB1bmlmaWVkQ29tcG9uZW50TWF0ZXJpYWwgfSBmcm9tICcuLi9tYXRlcmlhbHMvVW5pZmllZENvbXBvbmVudE1hdGVyaWFsLmpzJztcblxuLyoqXG4gKiBDeWxpbmRlcjLniIbngrjliIbop6PmlYjmnpznsbtcbiAqIOWwhmN5bGluZGVyMuaooeWei+WIhuino+aIkOenr+acqOWdl+eKtue7hOS7tu+8jOaooeaLn+enr+acqOe7hOijhS/liIbop6PmlYjmnpxcbiAqL1xuZXhwb3J0IGNsYXNzIEN5bGluZGVyMkV4cGxvZGVFZmZlY3Qge1xuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqIEBwYXJhbSB7VEhSRUUuTWVzaH0gY3lsaW5kZXIyTWVzaCAtIGN5bGluZGVyMue9keagvOWvueixoVxuICAgKiBAcGFyYW0ge1RIUkVFLkdyb3VwfSBwYXJlbnRHcm91cCAtIOeItue6p+e7hOWvueixoVxuICAgKi9cbiAgY29uc3RydWN0b3IoY3lsaW5kZXIyTWVzaCwgcGFyZW50R3JvdXApIHtcbiAgICB0aGlzLm9yaWdpbmFsTWVzaCA9IGN5bGluZGVyMk1lc2g7XG4gICAgdGhpcy5wYXJlbnRHcm91cCA9IHBhcmVudEdyb3VwO1xuICAgIHRoaXMuZXhwbG9kZWQgPSBmYWxzZTtcbiAgICB0aGlzLmJsb2NrcyA9IFtdO1xuICAgIHRoaXMudHdlZW5zID0gW107XG4gICAgdGhpcy5vcmlnaW5hbFZpc2libGUgPSBjeWxpbmRlcjJNZXNoLnZpc2libGU7XG4gICAgXG4gICAgLy8g5YiG6Kej5Y+C5pWwXG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAvLyDliIbop6Pot53nprvns7vmlbBcbiAgICAgIGV4cGxvZGVEaXN0YW5jZTogMS41LFxuICAgICAgLy8g5Yqo55S75oyB57ut5pe26Ze0XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogMTIwMFxuICAgIH07XG4gICAgXG4gICAgdGhpcy5jcmVhdGVCbG9ja3MoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIm+W7uuenr+acqOWdl1xuICAgKi9cbiAgY3JlYXRlQmxvY2tzKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IENPTkZJRy5zaGVsbC5jeWxpbmRlcjI7XG4gICAgY29uc3QgcmFkaXVzID0gY29uZmlnLnJhZGl1cztcbiAgICBjb25zdCBoZWlnaHQgPSBjb25maWcuaGVpZ2h0O1xuICAgIFxuICAgIC8vIOS9v+eUqOe7n+S4gOe7hOS7tuadkOi0qO+8iOekuuazouWZqOWGhemDqOmHkeWxnuadkOi0qO+8iVxuICAgIGNvbnN0IGJsb2NrTWF0ZXJpYWwgPSB1bmlmaWVkQ29tcG9uZW50TWF0ZXJpYWwuZ2V0TWF0ZXJpYWwoJ2V4cGxvZGVkJyk7XG4gICAgXG4gICAgLy8g5Yib5bu6NOS4quaJh+W9ouWIhuWdl++8iOWbm+WIhuS5i+S4gOWchu+8iVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICBjb25zdCBibG9jayA9IHRoaXMuY3JlYXRlUXVhcnRlckJsb2NrKHJhZGl1cywgaGVpZ2h0LCBibG9ja01hdGVyaWFsLCBpKTtcbiAgICAgIFxuICAgICAgLy8g6K6+572u5Yid5aeL5L2N572uXG4gICAgICBibG9jay5wb3NpdGlvbi5jb3B5KHRoaXMub3JpZ2luYWxNZXNoLnBvc2l0aW9uKTtcbiAgICAgIFxuICAgICAgLy8g5L+d5a2Y5omH5b2i55qE5Z+656GA5peL6L2sXG4gICAgICBjb25zdCBiYXNlUm90YXRpb24gPSBibG9jay5yb3RhdGlvbi5jbG9uZSgpO1xuICAgICAgXG4gICAgICAvLyDlupTnlKhjeWxpbmRlcjLnmoTml4vovazvvIjnu4TlkIjml4vovazvvIlcbiAgICAgIGJsb2NrLnJvdGF0aW9uLmNvcHkodGhpcy5vcmlnaW5hbE1lc2gucm90YXRpb24pO1xuICAgICAgLy8g5Zyo5Y6f5aeL5peL6L2s5Z+656GA5LiK5re75Yqg5omH5b2i55qE5Z+656GA5peL6L2sXG4gICAgICBibG9jay5yb3RhdGlvbi56ICs9IGJhc2VSb3RhdGlvbi56O1xuICAgICAgXG4gICAgICAvLyDliJ3lp4vml7bpmpDol4/np6/mnKjlnZdcbiAgICAgIGJsb2NrLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIFxuICAgICAgLy8g6K6h566X5omH5b2i55qE5Lit5b+D6KeS5bqm77yI55So5LqO5YiG6Kej5pa55ZCR77yJXG4gICAgICBjb25zdCBjZW50ZXJBbmdsZSA9IGkgKiBNYXRoLlBJIC8gMiArIE1hdGguUEkgLyA0OyAvLyDmr4/kuKrmiYflvaLnmoTkuK3lv4Pop5LluqZcbiAgICAgIFxuICAgICAgdGhpcy5ibG9ja3MucHVzaCh7XG4gICAgICAgIG1lc2g6IGJsb2NrLFxuICAgICAgICBvcmlnaW5hbFBvc2l0aW9uOiBibG9jay5wb3NpdGlvbi5jbG9uZSgpLFxuICAgICAgICBvcmlnaW5hbFJvdGF0aW9uOiBibG9jay5yb3RhdGlvbi5jbG9uZSgpLFxuICAgICAgICBzZWdtZW50SW5kZXg6IGksXG4gICAgICAgIGNlbnRlckFuZ2xlOiBjZW50ZXJBbmdsZVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHRoaXMucGFyZW50R3JvdXAuYWRkKGJsb2NrKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDliJvlu7rlm5vliIbkuYvkuIDlnIbmiYflvaLnp6/mnKjlnZdcbiAgICovXG4gIGNyZWF0ZVF1YXJ0ZXJCbG9jayhyYWRpdXMsIGhlaWdodCwgbWF0ZXJpYWwsIHNlZ21lbnRJbmRleCkge1xuICAgIC8vIOWIm+W7uuaJh+W9ouWHoOS9leS9k++8iOWbm+WIhuS5i+S4gOWchu+8iVxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoXG4gICAgICByYWRpdXMsIFxuICAgICAgcmFkaXVzLCBcbiAgICAgIGhlaWdodCwgXG4gICAgICA4LCAvLyDmr4/kuKrmiYflvaLnmoTlvoTlkJHmrrXmlbBcbiAgICAgIDEsIC8vIOmrmOW6puWIhuauteaVsFxuICAgICAgZmFsc2UsIC8vIOS4jeWwgemXrVxuICAgICAgc2VnbWVudEluZGV4ICogTWF0aC5QSSAvIDIsIC8vIOi1t+Wni+inkuW6plxuICAgICAgTWF0aC5QSSAvIDIgLy8g5omH5b2i6KeS5bqm77yIOTDluqbvvIlcbiAgICApO1xuICAgIFxuICAgIC8vIOWIm+W7uue9keagvFxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgIFxuICAgIC8vIOiwg+aVtOaWueWQkeS7peWMuemFjWN5bGluZGVyMueahOaWueWQke+8iOayv1jovbTvvIlcbiAgICBtZXNoLnJvdGF0aW9uLnogPSBNYXRoLlBJIC8gMjtcbiAgICBcbiAgICByZXR1cm4gbWVzaDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiuoeeul+eIhueCuOWQjueahOS9jee9rlxuICAgKi9cbiAgY2FsY3VsYXRlRXhwbG9kZWRQb3NpdGlvbihibG9jaykge1xuICAgIGNvbnN0IHsgY2VudGVyQW5nbGUsIG9yaWdpbmFsUG9zaXRpb24gfSA9IGJsb2NrO1xuICAgIFxuICAgIC8vIOiuoeeul+aJh+W9ouWcqOW+hOWQkeS4iueahOWIhuino+aWueWQkVxuICAgIC8vIOeUseS6jmN5bGluZGVyMuaYr+ayv1jovbTnmoTvvIzmiJHku6zpnIDopoHlnKhZWuW5s+mdouS4iuWIhuino1xuICAgIGNvbnN0IGV4cGxvZGVEaXN0YW5jZSA9IHRoaXMuY29uZmlnLmV4cGxvZGVEaXN0YW5jZTtcbiAgICBcbiAgICAvLyDorqHnrpfliIbop6PnmoTmlrnlkJHlkJHph4/vvIjlnKhZWuW5s+mdouS4iu+8iVxuICAgIGNvbnN0IGRpcmVjdGlvblkgPSBNYXRoLnNpbihjZW50ZXJBbmdsZSkgKiBleHBsb2RlRGlzdGFuY2U7XG4gICAgY29uc3QgZGlyZWN0aW9uWiA9IE1hdGguY29zKGNlbnRlckFuZ2xlKSAqIGV4cGxvZGVEaXN0YW5jZTtcbiAgICBcbiAgICAvLyDorqHnrpfmlrDkvY3nva5cbiAgICBjb25zdCBleHBsb2RlZFBvc2l0aW9uID0gb3JpZ2luYWxQb3NpdGlvbi5jbG9uZSgpO1xuICAgIGV4cGxvZGVkUG9zaXRpb24ueSArPSBkaXJlY3Rpb25ZO1xuICAgIGV4cGxvZGVkUG9zaXRpb24ueiArPSBkaXJlY3Rpb25aO1xuICAgIFxuICAgIHJldHVybiBleHBsb2RlZFBvc2l0aW9uO1xuICB9XG4gIFxuICAvKipcbiAgICog5YiH5o2i54iG54K45pWI5p6cXG4gICAqL1xuICB0b2dnbGUoZXhwbG9kZSA9ICF0aGlzLmV4cGxvZGVkKSB7XG4gICAgdGhpcy5leHBsb2RlZCA9IGV4cGxvZGU7XG4gICAgXG4gICAgLy8g5YGc5q2i5omA5pyJ5q2j5Zyo6L+b6KGM55qE5Yqo55S7XG4gICAgdGhpcy50d2VlbnMuZm9yRWFjaCh0d2VlbiA9PiB0d2Vlbi5zdG9wKCkpO1xuICAgIHRoaXMudHdlZW5zID0gW107XG4gICAgXG4gICAgaWYgKHRoaXMuZXhwbG9kZWQpIHtcbiAgICAgIC8vIOeIhueCuO+8mumakOiXj+WOn+Wni+e9keagvO+8jOaYvuekuuenr+acqOWdl1xuICAgICAgdGhpcy5vcmlnaW5hbE1lc2gudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgdGhpcy5leHBsb2RlQmxvY2tzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIOWQiOW5tu+8mumHjeaWsOe7hOijheenr+acqOWdl++8jOaYvuekuuWOn+Wni+e9keagvFxuICAgICAgdGhpcy5hc3NlbWJsZUJsb2NrcygpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcy5leHBsb2RlZDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIhuino+enr+acqOWdl1xuICAgKi9cbiAgZXhwbG9kZUJsb2NrcygpIHtcbiAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKChibG9jaywgaW5kZXgpID0+IHtcbiAgICAgIC8vIOaYvuekuuenr+acqOWdl1xuICAgICAgYmxvY2subWVzaC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgIFxuICAgICAgLy8g6K6h566X55uu5qCH5L2N572uXG4gICAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IHRoaXMuY2FsY3VsYXRlRXhwbG9kZWRQb3NpdGlvbihibG9jayk7XG4gICAgICBcbiAgICAgIC8vIOWIm+W7uuS9jee9ruWKqOeUu++8iOW4puW7tui/n+S7peS6p+eUn+i/numUgeaViOaenO+8iVxuICAgICAgY29uc3QgZGVsYXkgPSBpbmRleCAqIDEwMDsgLy8gMTAwbXPnmoTlu7bov5/pl7TpmpTvvIzorqnliIbop6PmlYjmnpzmm7TmmI7mmL5cbiAgICAgIFxuICAgICAgY29uc3QgcG9zaXRpb25Ud2VlbiA9IG5ldyBUV0VFTi5Ud2VlbihibG9jay5tZXNoLnBvc2l0aW9uLCB0d2Vlbkdyb3VwKVxuICAgICAgICAudG8oe1xuICAgICAgICAgIHg6IHRhcmdldFBvc2l0aW9uLngsXG4gICAgICAgICAgeTogdGFyZ2V0UG9zaXRpb24ueSxcbiAgICAgICAgICB6OiB0YXJnZXRQb3NpdGlvbi56XG4gICAgICAgIH0sIHRoaXMuY29uZmlnLmFuaW1hdGlvbkR1cmF0aW9uKVxuICAgICAgICAuZGVsYXkoZGVsYXkpXG4gICAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkJhY2suT3V0KVxuICAgICAgICAuc3RhcnQoKTtcbiAgICAgIFxuICAgICAgdGhpcy50d2VlbnMucHVzaChwb3NpdGlvblR3ZWVuKTtcbiAgICB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOe7hOijheenr+acqOWdl1xuICAgKi9cbiAgYXNzZW1ibGVCbG9ja3MoKSB7XG4gICAgdGhpcy5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGluZGV4KSA9PiB7XG4gICAgICAvLyDliJvlu7rlm57lvZLliqjnlLvvvIjlj43lkJHlu7bov5/ku6XkuqfnlJ/ph43mlrDnu4Too4XmlYjmnpzvvIlcbiAgICAgIGNvbnN0IGRlbGF5ID0gKHRoaXMuYmxvY2tzLmxlbmd0aCAtIGluZGV4IC0gMSkgKiA4MDsgLy8g5Y+N5ZCR5bu26L+fXG4gICAgICBcbiAgICAgIGNvbnN0IHBvc2l0aW9uVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oYmxvY2subWVzaC5wb3NpdGlvbiwgdHdlZW5Hcm91cClcbiAgICAgICAgLnRvKHtcbiAgICAgICAgICB4OiBibG9jay5vcmlnaW5hbFBvc2l0aW9uLngsXG4gICAgICAgICAgeTogYmxvY2sub3JpZ2luYWxQb3NpdGlvbi55LFxuICAgICAgICAgIHo6IGJsb2NrLm9yaWdpbmFsUG9zaXRpb24uelxuICAgICAgICB9LCB0aGlzLmNvbmZpZy5hbmltYXRpb25EdXJhdGlvbiAqIDAuOClcbiAgICAgICAgLmRlbGF5KGRlbGF5KVxuICAgICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5CYWNrLkluKVxuICAgICAgICAub25Db21wbGV0ZSgoKSA9PiB7XG4gICAgICAgICAgLy8g5pyA5ZCO5LiA5Liq5Z2X57uE6KOF5a6M5oiQ5ZCO77yM6ZqQ6JeP5omA5pyJ56ev5pyo5Z2X5bm25pi+56S65Y6f5aeL572R5qC8XG4gICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmJsb2Nrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKGIgPT4gYi5tZXNoLnZpc2libGUgPSBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLm9yaWdpbmFsTWVzaC52aXNpYmxlID0gdGhpcy5vcmlnaW5hbFZpc2libGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuc3RhcnQoKTtcbiAgICAgIFxuICAgICAgdGhpcy50d2VlbnMucHVzaChwb3NpdGlvblR3ZWVuKTtcbiAgICB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOa4heeQhui1hOa6kFxuICAgKi9cbiAgZGlzcG9zZSgpIHtcbiAgICAvLyDlgZzmraLmiYDmnInliqjnlLtcbiAgICB0aGlzLnR3ZWVucy5mb3JFYWNoKHR3ZWVuID0+IHR3ZWVuLnN0b3AoKSk7XG4gICAgdGhpcy50d2VlbnMgPSBbXTtcbiAgICBcbiAgICAvLyDnp7vpmaTnp6/mnKjlnZdcbiAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcbiAgICAgIHRoaXMucGFyZW50R3JvdXAucmVtb3ZlKGJsb2NrLm1lc2gpO1xuICAgICAgYmxvY2subWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgICBibG9jay5tZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgICB9KTtcbiAgICBcbiAgICB0aGlzLmJsb2NrcyA9IFtdO1xuICB9XG4gIFxuICAvKipcbiAgICog6I635Y+W54iG54K454q25oCBXG4gICAqL1xuICBpc0V4cGxvZGVkKCkge1xuICAgIHJldHVybiB0aGlzLmV4cGxvZGVkO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgKiBhcyBUV0VFTiBmcm9tICdAdHdlZW5qcy90d2Vlbi5qcyc7XG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuLi9jb25maWdMb2FkZXIuanMnO1xuaW1wb3J0IHsgdHdlZW5Hcm91cCB9IGZyb20gJy4uL21haW4uanMnO1xuaW1wb3J0IHsgUm90YXRpb25DdXJ2ZUdlb21ldHJ5IH0gZnJvbSAnLi4vZ2VvbWV0cnkvUm90YXRpb25DdXJ2ZUdlb21ldHJ5LmpzJztcbmltcG9ydCB7IHVuaWZpZWRDb21wb25lbnRNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFscy9VbmlmaWVkQ29tcG9uZW50TWF0ZXJpYWwuanMnO1xuXG4vKipcbiAqIOaXi+i9rOabsue6v+i/nuaOpeeIhueCuOWIhuino+aViOaenOexu1xuICog5bCG5peL6L2s5puy57q/6L+e5o6l5YiG6Kej5oiQ5omH5b2i5q6177yM5qih5ouf56ev5pyo57uE6KOFL+WIhuino+aViOaenFxuICovXG5leHBvcnQgY2xhc3MgUm90YXRpb25DdXJ2ZUV4cGxvZGVFZmZlY3Qge1xuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqIEBwYXJhbSB7VEhSRUUuTWVzaH0gY29ubmVjdGlvbk1lc2ggLSDml4vovazmm7Lnur/ov57mjqXnvZHmoLzlr7nosaFcbiAgICogQHBhcmFtIHtUSFJFRS5Hcm91cH0gcGFyZW50R3JvdXAgLSDniLbnuqfnu4Tlr7nosaFcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25NZXNoLCBwYXJlbnRHcm91cCkge1xuICAgIHRoaXMub3JpZ2luYWxNZXNoID0gY29ubmVjdGlvbk1lc2g7XG4gICAgdGhpcy5wYXJlbnRHcm91cCA9IHBhcmVudEdyb3VwO1xuICAgIHRoaXMuZXhwbG9kZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNlY3RvcnMgPSBbXTtcbiAgICB0aGlzLnR3ZWVucyA9IFtdO1xuICAgIHRoaXMub3JpZ2luYWxWaXNpYmxlID0gY29ubmVjdGlvbk1lc2gudmlzaWJsZTtcbiAgICBcbiAgICAvLyDliIbop6Plj4LmlbBcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIC8vIOWIhuino+i3neemu+ezu+aVsCAtIOS4jkN5bGluZGVyMkV4cGxvZGVFZmZlY3Tkv53mjIHkuIDoh7RcbiAgICAgIGV4cGxvZGVEaXN0YW5jZTogMS41LFxuICAgICAgLy8g5Yqo55S75oyB57ut5pe26Ze0IC0g5LiOQ3lsaW5kZXIyRXhwbG9kZUVmZmVjdOS/neaMgeS4gOiHtFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IDEyMDAsXG4gICAgICAvLyDmiYflvaLmrrXmlbDph49cbiAgICAgIHNlY3RvckNvdW50OiA0XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmNyZWF0ZVNlY3RvcnMoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIm+W7uuaJh+W9ouautVxuICAgKi9cbiAgY3JlYXRlU2VjdG9ycygpIHtcbiAgICBjb25zdCBjb25maWcgPSBDT05GSUcuc2hlbGwucm90YXRpb25DdXJ2ZUNvbm5lY3Rpb247XG4gICAgaWYgKCFjb25maWcpIHJldHVybjtcbiAgICBcbiAgICAvLyDojrflj5bov57mjqXnmoTln7rmnKzlj4LmlbBcbiAgICBjb25zdCBzZWdtZW50cyA9IGNvbmZpZy5zZWdtZW50cyB8fCA1MDtcbiAgICBjb25zdCByYWRpYWxTZWdtZW50cyA9IGNvbmZpZy5yYWRpYWxTZWdtZW50cyB8fCAzMjtcbiAgICBjb25zdCBjb25uZWN0aW9uTGVuZ3RoID0gY29uZmlnLmNvbm5lY3Rpb25MZW5ndGggfHwgNC44O1xuICAgIFxuICAgIC8vIOS9v+eUqOe7n+S4gOe7hOS7tuadkOi0qO+8iOekuuazouWZqOWGhemDqOmHkeWxnuadkOi0qO+8iVxuICAgIGNvbnN0IHJpbmdNYXRlcmlhbCA9IHVuaWZpZWRDb21wb25lbnRNYXRlcmlhbC5nZXRNYXRlcmlhbCgnZXhwbG9kZWQnKTtcbiAgICBcbiAgICAvLyDliJvlu7o05Liq5omH5b2i5q6177yI5q+P5LiqOTDluqbvvIlcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29uZmlnLnNlY3RvckNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHNlY3RvciA9IHRoaXMuY3JlYXRlU2VjdG9yU2VnbWVudChjb25uZWN0aW9uTGVuZ3RoLCByYWRpYWxTZWdtZW50cywgcmluZ01hdGVyaWFsLCBpKTtcbiAgICAgIFxuICAgICAgLy8g6K6+572u5Yid5aeL5L2N572uXG4gICAgICBzZWN0b3IucG9zaXRpb24uY29weSh0aGlzLm9yaWdpbmFsTWVzaC5wb3NpdGlvbik7XG4gICAgICBcbiAgICAgIC8vIOS/neWtmOaJh+W9oueahOWfuuehgOaXi+i9rFxuICAgICAgY29uc3QgYmFzZVJvdGF0aW9uID0gc2VjdG9yLnJvdGF0aW9uLmNsb25lKCk7XG4gICAgICBcbiAgICAgIC8vIOW6lOeUqOWOn+Wni+i/nuaOpeeahOaXi+i9rO+8iOWkjeWQiOaXi+i9rO+8iVxuICAgICAgc2VjdG9yLnJvdGF0aW9uLmNvcHkodGhpcy5vcmlnaW5hbE1lc2gucm90YXRpb24pO1xuICAgICAgLy8g5Zyo5Y6f5aeL5peL6L2s5Z+656GA5LiK5re75Yqg5omH5b2i55qE5Z+656GA5peL6L2sXG4gICAgICBzZWN0b3Iucm90YXRpb24ueiArPSBiYXNlUm90YXRpb24uejtcbiAgICAgIFxuICAgICAgLy8g5Yid5aeL5pe26ZqQ6JeP5omH5b2i5q61XG4gICAgICBzZWN0b3IudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgXG4gICAgICAvLyDorqHnrpfmiYflvaLmrrXnmoTkuK3lv4Pop5LluqbvvIjnlKjkuo7liIbop6PmlrnlkJHvvIlcbiAgICAgIGNvbnN0IGNlbnRlckFuZ2xlID0gaSAqIE1hdGguUEkgLyAyICsgTWF0aC5QSSAvIDQ7IC8vIOavj+S4quaJh+W9oueahOS4reW/g+inkuW6pu+8iDQ1wrAsIDEzNcKwLCAyMjXCsCwgMzE1wrDvvIlcbiAgICAgIFxuICAgICAgdGhpcy5zZWN0b3JzLnB1c2goe1xuICAgICAgICBtZXNoOiBzZWN0b3IsXG4gICAgICAgIG9yaWdpbmFsUG9zaXRpb246IHNlY3Rvci5wb3NpdGlvbi5jbG9uZSgpLFxuICAgICAgICBvcmlnaW5hbFJvdGF0aW9uOiBzZWN0b3Iucm90YXRpb24uY2xvbmUoKSxcbiAgICAgICAgc2VnbWVudEluZGV4OiBpLFxuICAgICAgICBjZW50ZXJBbmdsZTogY2VudGVyQW5nbGVcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICB0aGlzLnBhcmVudEdyb3VwLmFkZChzZWN0b3IpO1xuICAgIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIm+W7uuWNleS4quaJh+W9ouautVxuICAgKi9cbiAgY3JlYXRlU2VjdG9yU2VnbWVudChsZW5ndGgsIHJhZGlhbFNlZ21lbnRzLCBtYXRlcmlhbCwgc2VnbWVudEluZGV4KSB7XG4gICAgLy8g6I635Y+W5Y6f5aeL6L+e5o6l55qE5Y+C5pWwXG4gICAgY29uc3QgY29ubmVjdGlvblBhcmFtcyA9IHRoaXMuZ2V0Q29ubmVjdGlvblBhcmFtZXRlcnMoKTtcbiAgICBcbiAgICAvLyDliJvlu7rml4vovazmm7Lnur/lh6DkvZXkvZPnlJ/miJDlmahcbiAgICBjb25zdCBjdXJ2ZUdlb21ldHJ5ID0gbmV3IFJvdGF0aW9uQ3VydmVHZW9tZXRyeShcbiAgICAgIGNvbm5lY3Rpb25QYXJhbXMuc3RhcnRSYWRpdXMsXG4gICAgICBjb25uZWN0aW9uUGFyYW1zLmVuZFJhZGl1cyxcbiAgICAgIGNvbm5lY3Rpb25QYXJhbXMuY29ubmVjdGlvbkxlbmd0aCxcbiAgICAgIGNvbm5lY3Rpb25QYXJhbXMuY3VydmVUeXBlLFxuICAgICAgY29ubmVjdGlvblBhcmFtcy5zZWdtZW50cyxcbiAgICAgIGNvbm5lY3Rpb25QYXJhbXMucmFkaWFsU2VnbWVudHNcbiAgICApO1xuICAgIFxuICAgIC8vIOWIm+W7uuaJh+W9oueJh+auteWHoOS9leS9k1xuICAgIGNvbnN0IHNlY3Rvckdlb21ldHJ5ID0gY3VydmVHZW9tZXRyeS5jcmVhdGVTZWN0b3JHZW9tZXRyeShzZWdtZW50SW5kZXgsIHRoaXMuY29uZmlnLnNlY3RvckNvdW50KTtcbiAgICBcbiAgICAvLyDliJvlu7rnvZHmoLxcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goc2VjdG9yR2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICBcbiAgICAvLyDosIPmlbTmlrnlkJHku6XljLnphY3ml4vovazmm7Lnur/ov57mjqXnmoTmlrnlkJHvvIjmsr9Y6L2077yJXG4gICAgbWVzaC5yb3RhdGlvbi56ID0gTWF0aC5QSSAvIDI7XG4gICAgXG4gICAgcmV0dXJuIG1lc2g7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDojrflj5bljp/lp4vov57mjqXnmoTlj4LmlbBcbiAgICovXG4gIGdldENvbm5lY3Rpb25QYXJhbWV0ZXJzKCkge1xuICAgIC8vIOS7jumFjee9ruS4reiOt+WPlui/nuaOpeWPguaVsFxuICAgIGNvbnN0IGNvbmZpZyA9IENPTkZJRy5zaGVsbC5yb3RhdGlvbkN1cnZlQ29ubmVjdGlvbjtcbiAgICBjb25zdCBjeWxpbmRlcjFDb25maWcgPSBDT05GSUcuc2hlbGwuY3lsaW5kZXIxO1xuICAgIGNvbnN0IGN5bGluZGVyMkNvbmZpZyA9IENPTkZJRy5zaGVsbC5jeWxpbmRlcjI7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0UmFkaXVzOiBjeWxpbmRlcjFDb25maWcucmFkaXVzLFxuICAgICAgZW5kUmFkaXVzOiBjeWxpbmRlcjJDb25maWcucmFkaXVzLFxuICAgICAgY29ubmVjdGlvbkxlbmd0aDogY29uZmlnLmNvbm5lY3Rpb25MZW5ndGgsXG4gICAgICBjdXJ2ZVR5cGU6IGNvbmZpZy5jdXJ2ZVR5cGUgfHwgJ0cyJyxcbiAgICAgIHNlZ21lbnRzOiBjb25maWcuc2VnbWVudHMgfHwgNTAsXG4gICAgICByYWRpYWxTZWdtZW50czogY29uZmlnLnJhZGlhbFNlZ21lbnRzIHx8IDMyXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkvLDnrpfov57mjqXnmoTljYrlvoRcbiAgICovXG4gIGVzdGltYXRlQ29ubmVjdGlvblJhZGl1cygpIHtcbiAgICAvLyDln7rkuo7phY3nva7kvLDnrpfljYrlvoTvvIzmiJbogIXkvb/nlKjpu5jorqTlgLxcbiAgICBjb25zdCBjeWxpbmRlcjFSYWRpdXMgPSBDT05GSUcuc2hlbGwuY3lsaW5kZXIxPy5yYWRpdXMgfHwgMS41O1xuICAgIGNvbnN0IGN5bGluZGVyMlJhZGl1cyA9IENPTkZJRy5zaGVsbC5jeWxpbmRlcjI/LnJhZGl1cyB8fCAxLjA7XG4gICAgXG4gICAgLy8g5L2/55So5Lik5Liq5ZyG5p+x5L2T5Y2K5b6E55qE5bmz5Z2H5YC85L2c5Li66L+e5o6l5Y2K5b6EXG4gICAgcmV0dXJuIChjeWxpbmRlcjFSYWRpdXMgKyBjeWxpbmRlcjJSYWRpdXMpIC8gMjtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiuoeeul+eIhueCuOWQjueahOS9jee9rlxuICAgKi9cbiAgY2FsY3VsYXRlRXhwbG9kZWRQb3NpdGlvbihzZWN0b3IpIHtcbiAgICBjb25zdCB7IGNlbnRlckFuZ2xlLCBvcmlnaW5hbFBvc2l0aW9uIH0gPSBzZWN0b3I7XG4gICAgXG4gICAgLy8g6K6h566X5omH5b2i5q615Zyo5b6E5ZCR5LiK55qE5YiG6Kej5pa55ZCRXG4gICAgLy8g55Sx5LqO6L+e5o6l5piv5rK/WOi9tOeahO+8jOaIkeS7rOmcgOimgeWcqFla5bmz6Z2i5LiK5YiG6KejXG4gICAgY29uc3QgZXhwbG9kZURpc3RhbmNlID0gdGhpcy5jb25maWcuZXhwbG9kZURpc3RhbmNlO1xuICAgIFxuICAgIC8vIOiuoeeul+WIhuino+eahOaWueWQkeWQkemHj++8iOWcqFla5bmz6Z2i5LiK77yJXG4gICAgY29uc3QgZGlyZWN0aW9uWSA9IE1hdGguc2luKGNlbnRlckFuZ2xlKSAqIGV4cGxvZGVEaXN0YW5jZTtcbiAgICBjb25zdCBkaXJlY3Rpb25aID0gTWF0aC5jb3MoY2VudGVyQW5nbGUpICogZXhwbG9kZURpc3RhbmNlO1xuICAgIFxuICAgIC8vIOiuoeeul+aWsOS9jee9rlxuICAgIGNvbnN0IGV4cGxvZGVkUG9zaXRpb24gPSBvcmlnaW5hbFBvc2l0aW9uLmNsb25lKCk7XG4gICAgZXhwbG9kZWRQb3NpdGlvbi55ICs9IGRpcmVjdGlvblk7XG4gICAgZXhwbG9kZWRQb3NpdGlvbi56ICs9IGRpcmVjdGlvblo7XG4gICAgXG4gICAgcmV0dXJuIGV4cGxvZGVkUG9zaXRpb247XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDorqHnrpfniIbngrjlkI7nmoTml4vovaxcbiAgICovXG4gIGNhbGN1bGF0ZUV4cGxvZGVkUm90YXRpb24oc2VjdG9yKSB7XG4gICAgY29uc3QgeyBvcmlnaW5hbFJvdGF0aW9uLCBzZWdtZW50SW5kZXggfSA9IHNlY3RvcjtcbiAgICBcbiAgICAvLyDmt7vliqA5MOW6puaXi+i9rOaViOaenOWIsOWIhuemu+eahOaJh+W9ouautVxuICAgIGNvbnN0IGV4cGxvZGVkUm90YXRpb24gPSBvcmlnaW5hbFJvdGF0aW9uLmNsb25lKCk7XG4gICAgXG4gICAgLy8g5Li65q+P5Liq5omH5b2i5q615re75YqgOTDluqbml4vovazvvIjPgC8y5byn5bqm77yJXG4gICAgLy8g5Zu057uVWOi9tOaXi+i9rO+8jOS9v+aJh+W9ouauteS6p+eUn+e/u+a7muaViOaenFxuICAgIGV4cGxvZGVkUm90YXRpb24ueCArPSBNYXRoLlBJIC8gMjtcbiAgICBcbiAgICAvLyDlj6/pgInvvJrkuLrkuI3lkIzmiYflvaLmrrXmt7vliqDovbvlvq7nmoTml4vovazlj5jljJbvvIzlop7liqDliqjmhJ9cbiAgICBjb25zdCByb3RhdGlvblZhcmlhdGlvbiA9IChzZWdtZW50SW5kZXggKiBNYXRoLlBJIC8gOCkgKiAwLjM7IC8vIOavj+S4quautei9u+W+ruS4jeWQjOeahOaXi+i9rOWBj+enu1xuICAgIGV4cGxvZGVkUm90YXRpb24ueSArPSByb3RhdGlvblZhcmlhdGlvbjtcbiAgICBcbiAgICByZXR1cm4gZXhwbG9kZWRSb3RhdGlvbjtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIh+aNoueIhueCuOaViOaenFxuICAgKi9cbiAgdG9nZ2xlKGV4cGxvZGUgPSAhdGhpcy5leHBsb2RlZCkge1xuICAgIHRoaXMuZXhwbG9kZWQgPSBleHBsb2RlO1xuICAgIFxuICAgIC8vIOWBnOatouaJgOacieato+WcqOi/m+ihjOeahOWKqOeUu1xuICAgIHRoaXMudHdlZW5zLmZvckVhY2godHdlZW4gPT4gdHdlZW4uc3RvcCgpKTtcbiAgICB0aGlzLnR3ZWVucyA9IFtdO1xuICAgIFxuICAgIGlmICh0aGlzLmV4cGxvZGVkKSB7XG4gICAgICAvLyDniIbngrjvvJrpmpDol4/ljp/lp4vnvZHmoLzvvIzmmL7npLrmiYflvaLmrrVcbiAgICAgIHRoaXMub3JpZ2luYWxNZXNoLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZXhwbG9kZVNlY3RvcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5ZCI5bm277ya6YeN5paw57uE6KOF5omH5b2i5q6177yM5pi+56S65Y6f5aeL572R5qC8XG4gICAgICB0aGlzLmFzc2VtYmxlU2VjdG9ycygpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcy5leHBsb2RlZDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWIhuino+aJh+W9ouautVxuICAgKi9cbiAgZXhwbG9kZVNlY3RvcnMoKSB7XG4gICAgdGhpcy5zZWN0b3JzLmZvckVhY2goKHNlY3RvciwgaW5kZXgpID0+IHtcbiAgICAgIC8vIOaYvuekuuaJh+W9ouautVxuICAgICAgc2VjdG9yLm1lc2gudmlzaWJsZSA9IHRydWU7XG4gICAgICBcbiAgICAgIC8vIOiuoeeul+ebruagh+S9jee9ruWSjOaXi+i9rFxuICAgICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSB0aGlzLmNhbGN1bGF0ZUV4cGxvZGVkUG9zaXRpb24oc2VjdG9yKTtcbiAgICAgIGNvbnN0IHRhcmdldFJvdGF0aW9uID0gdGhpcy5jYWxjdWxhdGVFeHBsb2RlZFJvdGF0aW9uKHNlY3Rvcik7XG4gICAgICBcbiAgICAgIC8vIOWIm+W7uuS9jee9ruWKqOeUu++8iOW4puW7tui/n+S7peS6p+eUn+i/numUgeaViOaenO+8iVxuICAgICAgY29uc3QgZGVsYXkgPSBpbmRleCAqIDEwMDsgLy8gMTAwbXPnmoTlu7bov5/pl7TpmpTvvIzorqnliIbop6PmlYjmnpzmm7TmmI7mmL7vvIzkuI5DeWxpbmRlcjJFeHBsb2RlRWZmZWN05L+d5oyB5LiA6Ie0XG4gICAgICBcbiAgICAgIGNvbnN0IHBvc2l0aW9uVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oc2VjdG9yLm1lc2gucG9zaXRpb24sIHR3ZWVuR3JvdXApXG4gICAgICAgIC50byh7XG4gICAgICAgICAgeDogdGFyZ2V0UG9zaXRpb24ueCxcbiAgICAgICAgICB5OiB0YXJnZXRQb3NpdGlvbi55LFxuICAgICAgICAgIHo6IHRhcmdldFBvc2l0aW9uLnpcbiAgICAgICAgfSwgdGhpcy5jb25maWcuYW5pbWF0aW9uRHVyYXRpb24pXG4gICAgICAgIC5kZWxheShkZWxheSlcbiAgICAgICAgLmVhc2luZyhUV0VFTi5FYXNpbmcuQmFjay5PdXQpXG4gICAgICAgIC5zdGFydCgpO1xuICAgICAgXG4gICAgICAvLyDliJvlu7rml4vovazliqjnlLtcbiAgICAgIGNvbnN0IHJvdGF0aW9uVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oc2VjdG9yLm1lc2gucm90YXRpb24sIHR3ZWVuR3JvdXApXG4gICAgICAgIC50byh7XG4gICAgICAgICAgeDogdGFyZ2V0Um90YXRpb24ueCxcbiAgICAgICAgICB5OiB0YXJnZXRSb3RhdGlvbi55LFxuICAgICAgICAgIHo6IHRhcmdldFJvdGF0aW9uLnpcbiAgICAgICAgfSwgdGhpcy5jb25maWcuYW5pbWF0aW9uRHVyYXRpb24pXG4gICAgICAgIC5kZWxheShkZWxheSlcbiAgICAgICAgLmVhc2luZyhUV0VFTi5FYXNpbmcuQmFjay5PdXQpXG4gICAgICAgIC5zdGFydCgpO1xuICAgICAgXG4gICAgICB0aGlzLnR3ZWVucy5wdXNoKHBvc2l0aW9uVHdlZW4sIHJvdGF0aW9uVHdlZW4pO1xuICAgIH0pO1xuICB9XG4gIFxuICAvKipcbiAgICog57uE6KOF5omH5b2i5q61XG4gICAqL1xuICBhc3NlbWJsZVNlY3RvcnMoKSB7XG4gICAgdGhpcy5zZWN0b3JzLmZvckVhY2goKHNlY3RvciwgaW5kZXgpID0+IHtcbiAgICAgIC8vIOWIm+W7uuWbnuW9kuWKqOeUu++8iOWPjeWQkeW7tui/n+S7peS6p+eUn+mHjeaWsOe7hOijheaViOaenO+8iVxuICAgICAgY29uc3QgZGVsYXkgPSAodGhpcy5zZWN0b3JzLmxlbmd0aCAtIGluZGV4IC0gMSkgKiA4MDsgLy8g5Y+N5ZCR5bu26L+f77yM5LiOQ3lsaW5kZXIyRXhwbG9kZUVmZmVjdOS/neaMgeS4gOiHtFxuICAgICAgXG4gICAgICBjb25zdCBwb3NpdGlvblR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKHNlY3Rvci5tZXNoLnBvc2l0aW9uLCB0d2Vlbkdyb3VwKVxuICAgICAgICAudG8oe1xuICAgICAgICAgIHg6IHNlY3Rvci5vcmlnaW5hbFBvc2l0aW9uLngsXG4gICAgICAgICAgeTogc2VjdG9yLm9yaWdpbmFsUG9zaXRpb24ueSxcbiAgICAgICAgICB6OiBzZWN0b3Iub3JpZ2luYWxQb3NpdGlvbi56XG4gICAgICAgIH0sIHRoaXMuY29uZmlnLmFuaW1hdGlvbkR1cmF0aW9uICogMC44KVxuICAgICAgICAuZGVsYXkoZGVsYXkpXG4gICAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkJhY2suSW4pXG4gICAgICAgIC5vbkNvbXBsZXRlKCgpID0+IHtcbiAgICAgICAgICAvLyDmnIDlkI7kuIDkuKrmiYflvaLmrrXnu4Too4XlrozmiJDlkI7vvIzpmpDol4/miYDmnInmiYflvaLmrrXlubbmmL7npLrljp/lp4vov57mjqVcbiAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuc2VjdG9ycy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aGlzLnNlY3RvcnMuZm9yRWFjaChzID0+IHMubWVzaC52aXNpYmxlID0gZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbE1lc2gudmlzaWJsZSA9IHRoaXMub3JpZ2luYWxWaXNpYmxlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXJ0KCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJvdGF0aW9uVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oc2VjdG9yLm1lc2gucm90YXRpb24sIHR3ZWVuR3JvdXApXG4gICAgICAgIC50byh7XG4gICAgICAgICAgeDogc2VjdG9yLm9yaWdpbmFsUm90YXRpb24ueCxcbiAgICAgICAgICB5OiBzZWN0b3Iub3JpZ2luYWxSb3RhdGlvbi55LFxuICAgICAgICAgIHo6IHNlY3Rvci5vcmlnaW5hbFJvdGF0aW9uLnpcbiAgICAgICAgfSwgdGhpcy5jb25maWcuYW5pbWF0aW9uRHVyYXRpb24gKiAwLjgpXG4gICAgICAgIC5kZWxheShkZWxheSlcbiAgICAgICAgLmVhc2luZyhUV0VFTi5FYXNpbmcuQmFjay5JbilcbiAgICAgICAgLnN0YXJ0KCk7XG4gICAgICBcbiAgICAgIHRoaXMudHdlZW5zLnB1c2gocG9zaXRpb25Ud2Vlbiwgcm90YXRpb25Ud2Vlbik7XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDmuIXnkIbotYTmupBcbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgLy8g5YGc5q2i5omA5pyJ5Yqo55S7XG4gICAgdGhpcy50d2VlbnMuZm9yRWFjaCh0d2VlbiA9PiB0d2Vlbi5zdG9wKCkpO1xuICAgIHRoaXMudHdlZW5zID0gW107XG4gICAgXG4gICAgLy8g56e76Zmk5omH5b2i5q61XG4gICAgdGhpcy5zZWN0b3JzLmZvckVhY2goc2VjdG9yID0+IHtcbiAgICAgIHRoaXMucGFyZW50R3JvdXAucmVtb3ZlKHNlY3Rvci5tZXNoKTtcbiAgICAgIHNlY3Rvci5tZXNoLmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICAgIHNlY3Rvci5tZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgICB9KTtcbiAgICBcbiAgICB0aGlzLnNlY3RvcnMgPSBbXTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOiOt+WPlueIhueCuOeKtuaAgVxuICAgKi9cbiAgaXNFeHBsb2RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBsb2RlZDtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuLyoqXHJcbiAqIOi2heakreWchuWtkOe9keagvOaJuemHj+WumuS9jeWZqFxyXG4gKiDkuJPpl6jnlKjkuo7lsIZTdXBlcmVsbGlwc2VFeHBsb2RlRWZmZWN05YiG6Kej5ZCO55qE5a2Q572R5qC85oyJ57uZ5a6a5Z2Q5qCH5om56YeP5a6a5L2NXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3VwZXJlbGxpcHNlUG9zaXRpb25lciB7XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICogQHBhcmFtIHtTdXBlcmVsbGlwc2VFeHBsb2RlRWZmZWN0fSBleHBsb2RlRWZmZWN0IC0g6LaF5qSt5ZyG54iG54K45pWI5p6c5a6e5L6LXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZXhwbG9kZUVmZmVjdCkge1xyXG4gICAgdGhpcy5leHBsb2RlRWZmZWN0ID0gZXhwbG9kZUVmZmVjdDtcclxuICAgIHRoaXMub3JpZ2luYWxQb3NpdGlvbnMgPSBuZXcgTWFwKCk7IC8vIOWtmOWCqOWOn+Wni+S9jee9rlxyXG4gICAgdGhpcy5pc1Bvc2l0aW9uZWQgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgdGhpcy5zYXZlT3JpZ2luYWxQb3NpdGlvbnMoKTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5L+d5a2Y5Y6f5aeL5L2N572uXHJcbiAgICovXHJcbiAgc2F2ZU9yaWdpbmFsUG9zaXRpb25zKCkge1xyXG4gICAgdGhpcy5leHBsb2RlRWZmZWN0LmJsb2Nrcy5mb3JFYWNoKChibG9jaywgaW5kZXgpID0+IHtcclxuICAgICAgdGhpcy5vcmlnaW5hbFBvc2l0aW9ucy5zZXQoaW5kZXgsIHtcclxuICAgICAgICB4OiBibG9jay5tZXNoLnBvc2l0aW9uLngsXHJcbiAgICAgICAgeTogYmxvY2subWVzaC5wb3NpdGlvbi55LFxyXG4gICAgICAgIHo6IGJsb2NrLm1lc2gucG9zaXRpb24uelxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDmibnph4/orr7nva7lrZDnvZHmoLzkvY3nva5cclxuICAgKiBAcGFyYW0ge0FycmF5fSBwb3NpdGlvbnMgLSDkvY3nva7mlbDnu4TvvIzmr4/kuKrlhYPntKDljIXlkKsge3gsIHksIHp9IOWdkOagh1xyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAg5pWw57uE6ZW/5bqm5bqU5LiO5a2Q572R5qC85pWw6YeP5Yy56YWNXHJcbiAgICovXHJcbiAgc2V0UG9zaXRpb25zKHBvc2l0aW9ucykge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBvc2l0aW9ucykpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdTdXBlcmVsbGlwc2VQb3NpdGlvbmVyOiBwb3NpdGlvbnMg5b+F6aG75piv5pWw57uEJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHBvc2l0aW9ucy5sZW5ndGggIT09IHRoaXMuZXhwbG9kZUVmZmVjdC5ibG9ja3MubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgU3VwZXJlbGxpcHNlUG9zaXRpb25lcjog5L2N572u5pWw57uE6ZW/5bqmICgke3Bvc2l0aW9ucy5sZW5ndGh9KSDkuI7lrZDnvZHmoLzmlbDph48gKCR7dGhpcy5leHBsb2RlRWZmZWN0LmJsb2Nrcy5sZW5ndGh9KSDkuI3ljLnphY1gKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDnoa7kv53lrZDnvZHmoLzlpITkuo7liIbop6PnirbmgIHlubblj6/op4FcclxuICAgIGlmICghdGhpcy5leHBsb2RlRWZmZWN0LmV4cGxvZGVkKSB7XHJcbiAgICAgIHRoaXMuZXhwbG9kZUVmZmVjdC50b2dnbGUodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOWBnOatouS7u+S9leato+WcqOi/m+ihjOeahOWKqOeUu1xyXG4gICAgdGhpcy5leHBsb2RlRWZmZWN0LnR3ZWVucy5mb3JFYWNoKHR3ZWVuID0+IHR3ZWVuLnN0b3AoKSk7XHJcbiAgICB0aGlzLmV4cGxvZGVFZmZlY3QudHdlZW5zID0gW107XHJcbiAgICBcclxuICAgIC8vIOaJuemHj+iuvue9ruS9jee9rlxyXG4gICAgcG9zaXRpb25zLmZvckVhY2goKHBvc2l0aW9uLCBpbmRleCkgPT4ge1xyXG4gICAgICBpZiAoaW5kZXggPCB0aGlzLmV4cGxvZGVFZmZlY3QuYmxvY2tzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5leHBsb2RlRWZmZWN0LmJsb2Nrc1tpbmRleF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g6aqM6K+B5L2N572u5a+56LGhXHJcbiAgICAgICAgaWYgKHR5cGVvZiBwb3NpdGlvbiA9PT0gJ29iamVjdCcgJiYgcG9zaXRpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgIGlmICh0eXBlb2YgcG9zaXRpb24ueCA9PT0gJ251bWJlcicpIGJsb2NrLm1lc2gucG9zaXRpb24ueCA9IHBvc2l0aW9uLng7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIHBvc2l0aW9uLnkgPT09ICdudW1iZXInKSBibG9jay5tZXNoLnBvc2l0aW9uLnkgPSBwb3NpdGlvbi55O1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBwb3NpdGlvbi56ID09PSAnbnVtYmVyJykgYmxvY2subWVzaC5wb3NpdGlvbi56ID0gcG9zaXRpb24uejtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB0aGlzLmlzUG9zaXRpb25lZCA9IHRydWU7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruWNleS4quWtkOe9keagvOS9jee9rlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIOWtkOe9keagvOe0ouW8lSAoMC0zKVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIOS9jee9ruWvueixoSB7eCwgeSwgen1cclxuICAgKi9cclxuICBzZXRQb3NpdGlvbihpbmRleCwgcG9zaXRpb24pIHtcclxuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5leHBsb2RlRWZmZWN0LmJsb2Nrcy5sZW5ndGgpIHtcclxuICAgICAgY29uc29sZS53YXJuKGBTdXBlcmVsbGlwc2VQb3NpdGlvbmVyOiDntKLlvJUgJHtpbmRleH0g6LaF5Ye66IyD5Zu0ICgwLSR7dGhpcy5leHBsb2RlRWZmZWN0LmJsb2Nrcy5sZW5ndGggLSAxfSlgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodHlwZW9mIHBvc2l0aW9uICE9PSAnb2JqZWN0JyB8fCBwb3NpdGlvbiA9PT0gbnVsbCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ1N1cGVyZWxsaXBzZVBvc2l0aW9uZXI6IHBvc2l0aW9uIOW/hemhu+aYr+WvueixoScpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOehruS/neWtkOe9keagvOWkhOS6juWIhuino+eKtuaAgeW5tuWPr+ingVxyXG4gICAgaWYgKCF0aGlzLmV4cGxvZGVFZmZlY3QuZXhwbG9kZWQpIHtcclxuICAgICAgdGhpcy5leHBsb2RlRWZmZWN0LnRvZ2dsZSh0cnVlKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmV4cGxvZGVFZmZlY3QuYmxvY2tzW2luZGV4XTtcclxuICAgIGlmICh0eXBlb2YgcG9zaXRpb24ueCA9PT0gJ251bWJlcicpIGJsb2NrLm1lc2gucG9zaXRpb24ueCA9IHBvc2l0aW9uLng7XHJcbiAgICBpZiAodHlwZW9mIHBvc2l0aW9uLnkgPT09ICdudW1iZXInKSBibG9jay5tZXNoLnBvc2l0aW9uLnkgPSBwb3NpdGlvbi55O1xyXG4gICAgaWYgKHR5cGVvZiBwb3NpdGlvbi56ID09PSAnbnVtYmVyJykgYmxvY2subWVzaC5wb3NpdGlvbi56ID0gcG9zaXRpb24uejtcclxuICAgIFxyXG4gICAgdGhpcy5pc1Bvc2l0aW9uZWQgPSB0cnVlO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDojrflj5bmiYDmnInlrZDnvZHmoLznmoTlvZPliY3kvY3nva5cclxuICAgKiBAcmV0dXJucyB7QXJyYXl9IOS9jee9ruaVsOe7hFxyXG4gICAqL1xyXG4gIGdldFBvc2l0aW9ucygpIHtcclxuICAgIHJldHVybiB0aGlzLmV4cGxvZGVFZmZlY3QuYmxvY2tzLm1hcChibG9jayA9PiAoe1xyXG4gICAgICB4OiBibG9jay5tZXNoLnBvc2l0aW9uLngsXHJcbiAgICAgIHk6IGJsb2NrLm1lc2gucG9zaXRpb24ueSxcclxuICAgICAgejogYmxvY2subWVzaC5wb3NpdGlvbi56XHJcbiAgICB9KSk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaMh+WumuWtkOe9keagvOeahOS9jee9rlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIOWtkOe9keagvOe0ouW8lVxyXG4gICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0g5L2N572u5a+56LGh5oiWbnVsbFxyXG4gICAqL1xyXG4gIGdldFBvc2l0aW9uKGluZGV4KSB7XHJcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuZXhwbG9kZUVmZmVjdC5ibG9ja3MubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgU3VwZXJlbGxpcHNlUG9zaXRpb25lcjog57Si5byVICR7aW5kZXh9IOi2heWHuuiMg+WbtGApO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgYmxvY2sgPSB0aGlzLmV4cGxvZGVFZmZlY3QuYmxvY2tzW2luZGV4XTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IGJsb2NrLm1lc2gucG9zaXRpb24ueCxcclxuICAgICAgeTogYmxvY2subWVzaC5wb3NpdGlvbi55LFxyXG4gICAgICB6OiBibG9jay5tZXNoLnBvc2l0aW9uLnpcclxuICAgIH07XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOaBouWkjeWIsOWOn+Wni+S9jee9rlxyXG4gICAqL1xyXG4gIHJlc3RvcmVPcmlnaW5hbFBvc2l0aW9ucygpIHtcclxuICAgIHRoaXMuZXhwbG9kZUVmZmVjdC5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IG9yaWdpbmFsUG9zID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9ucy5nZXQoaW5kZXgpO1xyXG4gICAgICBpZiAob3JpZ2luYWxQb3MpIHtcclxuICAgICAgICBibG9jay5tZXNoLnBvc2l0aW9uLnNldChvcmlnaW5hbFBvcy54LCBvcmlnaW5hbFBvcy55LCBvcmlnaW5hbFBvcy56KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHRoaXMuaXNQb3NpdGlvbmVkID0gZmFsc2U7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOS9jee9ruWBj+enu1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvZmZzZXQgLSDlgY/np7vph48ge3gsIHksIHp9XHJcbiAgICovXHJcbiAgYXBwbHlPZmZzZXQob2Zmc2V0KSB7XHJcbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ29iamVjdCcgfHwgb2Zmc2V0ID09PSBudWxsKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignU3VwZXJlbGxpcHNlUG9zaXRpb25lcjogb2Zmc2V0IOW/hemhu+aYr+WvueixoScpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IG9mZnNldFggPSB0eXBlb2Ygb2Zmc2V0LnggPT09ICdudW1iZXInID8gb2Zmc2V0LnggOiAwO1xyXG4gICAgY29uc3Qgb2Zmc2V0WSA9IHR5cGVvZiBvZmZzZXQueSA9PT0gJ251bWJlcicgPyBvZmZzZXQueSA6IDA7XHJcbiAgICBjb25zdCBvZmZzZXRaID0gdHlwZW9mIG9mZnNldC56ID09PSAnbnVtYmVyJyA/IG9mZnNldC56IDogMDtcclxuICAgIFxyXG4gICAgdGhpcy5leHBsb2RlRWZmZWN0LmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgYmxvY2subWVzaC5wb3NpdGlvbi54ICs9IG9mZnNldFg7XHJcbiAgICAgIGJsb2NrLm1lc2gucG9zaXRpb24ueSArPSBvZmZzZXRZO1xyXG4gICAgICBibG9jay5tZXNoLnBvc2l0aW9uLnogKz0gb2Zmc2V0WjtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDph43nva7miYDmnInlrZDnvZHmoLzliLDniIbngrjmlYjmnpznmoTpu5jorqTliIbop6PkvY3nva5cclxuICAgKi9cclxuICByZXNldFRvRXhwbG9kZWRQb3NpdGlvbnMoKSB7XHJcbiAgICB0aGlzLmV4cGxvZGVFZmZlY3QuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICBjb25zdCBleHBsb2RlZFBvcyA9IHRoaXMuZXhwbG9kZUVmZmVjdC5jYWxjdWxhdGVFeHBsb2RlZFBvc2l0aW9uKGJsb2NrKTtcclxuICAgICAgYmxvY2subWVzaC5wb3NpdGlvbi5jb3B5KGV4cGxvZGVkUG9zKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB0aGlzLmlzUG9zaXRpb25lZCA9IGZhbHNlO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDojrflj5blrZDnvZHmoLzmlbDph49cclxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSDlrZDnvZHmoLzmlbDph49cclxuICAgKi9cclxuICBnZXRCbG9ja0NvdW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZXhwbG9kZUVmZmVjdC5ibG9ja3MubGVuZ3RoO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDmo4Dmn6XmmK/lkKblt7Lnu4/lupTnlKjkuoboh6rlrprkuYnlrprkvY1cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0g5piv5ZCm5bey5a6a5L2NXHJcbiAgICovXHJcbiAgaXNDdXN0b21Qb3NpdGlvbmVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNQb3NpdGlvbmVkO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJztcclxuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSAnLi4vY29uZmlnTG9hZGVyLmpzJztcclxuaW1wb3J0IHsgdHdlZW5Hcm91cCB9IGZyb20gJy4uL21haW4uanMnO1xyXG5pbXBvcnQgeyBTdXBlcmVsbGlwc2VQb3NpdGlvbmVyIH0gZnJvbSAnLi4vdXRpbHMvU3VwZXJlbGxpcHNlUG9zaXRpb25lci5qcyc7XHJcblxyXG4vKipcclxuICog6LaF5qSt5ZyG54iG54K45YiG6Kej5pWI5p6c57G7XHJcbiAqIOWwhui2heakreWchuaooeWei+WIhuino+aIkDTkuKrosaHpmZDliIblnZfvvIzmqKHmi5/np6/mnKjnu4Too4Uv5YiG6Kej5pWI5p6cXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3VwZXJlbGxpcHNlRXhwbG9kZUVmZmVjdCB7XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICogQHBhcmFtIHtUSFJFRS5NZXNofSBzdXBlcmVsbGlwc2VNZXNoIC0g6LaF5qSt5ZyG572R5qC85a+56LGhXHJcbiAgICogQHBhcmFtIHtUSFJFRS5Hcm91cH0gcGFyZW50R3JvdXAgLSDniLbnuqfnu4Tlr7nosaFcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihzdXBlcmVsbGlwc2VNZXNoLCBwYXJlbnRHcm91cCkge1xyXG4gICAgdGhpcy5vcmlnaW5hbE1lc2ggPSBzdXBlcmVsbGlwc2VNZXNoO1xyXG4gICAgdGhpcy5wYXJlbnRHcm91cCA9IHBhcmVudEdyb3VwO1xyXG4gICAgdGhpcy5leHBsb2RlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5ibG9ja3MgPSBbXTtcclxuICAgIHRoaXMudHdlZW5zID0gW107XHJcbiAgICB0aGlzLm9yaWdpbmFsVmlzaWJsZSA9IHN1cGVyZWxsaXBzZU1lc2gudmlzaWJsZTtcclxuICAgIFxyXG4gICAgLy8g5YiG6Kej5Y+C5pWwXHJcbiAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgLy8g5YiG6Kej6Led56a757O75pWwXHJcbiAgICAgIGV4cGxvZGVEaXN0YW5jZTogMi4wLFxyXG4gICAgICAvLyDliqjnlLvmjIHnu63ml7bpl7RcclxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IDE1MDBcclxuICAgIH07XHJcbiAgICBcclxuICAgIHRoaXMuY3JlYXRlQmxvY2tzKCk7XHJcbiAgICBcclxuICAgIC8vIOWIneWni+WMluS9jee9ruWZqFxyXG4gICAgdGhpcy5wb3NpdGlvbmVyID0gbmV3IFN1cGVyZWxsaXBzZVBvc2l0aW9uZXIodGhpcyk7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuWIhuWdl1xyXG4gICAqL1xyXG4gIGNyZWF0ZUJsb2NrcygpIHtcclxuICAgIC8vIOiOt+WPluWOn+Wni+WHoOS9leS9k1xyXG4gICAgY29uc3Qgb3JpZ2luYWxHZW9tZXRyeSA9IHRoaXMub3JpZ2luYWxNZXNoLmdlb21ldHJ5O1xyXG4gICAgXHJcbiAgICAvLyDliJvlu7rnu5/kuIDnmoTmnZDotKhcclxuICAgIGNvbnN0IGJsb2NrTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xyXG4gICAgICBjb2xvcjogdGhpcy5vcmlnaW5hbE1lc2gubWF0ZXJpYWwuY29sb3IuZ2V0SGV4KCksXHJcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxyXG4gICAgICBvcGFjaXR5OiB0aGlzLm9yaWdpbmFsTWVzaC5tYXRlcmlhbC5vcGFjaXR5LFxyXG4gICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLFxyXG4gICAgICBkZXB0aFdyaXRlOiBmYWxzZVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOWIm+W7ujTkuKrosaHpmZDliIblnZdcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5jcmVhdGVRdWFkcmFudEJsb2NrKG9yaWdpbmFsR2VvbWV0cnksIGJsb2NrTWF0ZXJpYWwsIGkpO1xyXG4gICAgICBcclxuICAgICAgLy8g6K6+572u5Yid5aeL5L2N572u5ZKM5peL6L2sXHJcbiAgICAgIGJsb2NrLnBvc2l0aW9uLmNvcHkodGhpcy5vcmlnaW5hbE1lc2gucG9zaXRpb24pO1xyXG4gICAgICBibG9jay5yb3RhdGlvbi5jb3B5KHRoaXMub3JpZ2luYWxNZXNoLnJvdGF0aW9uKTtcclxuICAgICAgXHJcbiAgICAgIC8vIOWIneWni+aXtumakOiXj+enr+acqOWdl1xyXG4gICAgICBibG9jay52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgIFxyXG4gICAgICAvLyDorqHnrpfosaHpmZDnmoTkuK3lv4Pop5LluqbvvIjnlKjkuo7liIbop6PmlrnlkJHvvIlcclxuICAgICAgY29uc3QgY2VudGVyQW5nbGUgPSBpICogTWF0aC5QSSAvIDIgKyBNYXRoLlBJIC8gNDsgLy8g5q+P5Liq6LGh6ZmQ55qE5Lit5b+D6KeS5bqmXHJcbiAgICAgIFxyXG4gICAgICB0aGlzLmJsb2Nrcy5wdXNoKHtcclxuICAgICAgICBtZXNoOiBibG9jayxcclxuICAgICAgICBvcmlnaW5hbFBvc2l0aW9uOiBibG9jay5wb3NpdGlvbi5jbG9uZSgpLFxyXG4gICAgICAgIG9yaWdpbmFsUm90YXRpb246IGJsb2NrLnJvdGF0aW9uLmNsb25lKCksXHJcbiAgICAgICAgcXVhZHJhbnRJbmRleDogaSxcclxuICAgICAgICBjZW50ZXJBbmdsZTogY2VudGVyQW5nbGVcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLnBhcmVudEdyb3VwLmFkZChibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuixoemZkOWIhuWdl1xyXG4gICAqIEBwYXJhbSB7VEhSRUUuQnVmZmVyR2VvbWV0cnl9IG9yaWdpbmFsR2VvbWV0cnkgLSDljp/lp4vlh6DkvZXkvZNcclxuICAgKiBAcGFyYW0ge1RIUkVFLk1hdGVyaWFsfSBtYXRlcmlhbCAtIOadkOi0qFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBxdWFkcmFudEluZGV4IC0g6LGh6ZmQ57Si5byVICgwLTMpXHJcbiAgICovXHJcbiAgY3JlYXRlUXVhZHJhbnRCbG9jayhvcmlnaW5hbEdlb21ldHJ5LCBtYXRlcmlhbCwgcXVhZHJhbnRJbmRleCkge1xyXG4gICAgLy8g6I635Y+W5Y6f5aeL5Yeg5L2V5L2T55qE6aG254K55pWw5o2uXHJcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBvcmlnaW5hbEdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcbiAgICBjb25zdCBub3JtYWxzID0gb3JpZ2luYWxHZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbCA/IG9yaWdpbmFsR2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwuYXJyYXkgOiBudWxsO1xyXG4gICAgY29uc3QgdXZzID0gb3JpZ2luYWxHZW9tZXRyeS5hdHRyaWJ1dGVzLnV2ID8gb3JpZ2luYWxHZW9tZXRyeS5hdHRyaWJ1dGVzLnV2LmFycmF5IDogbnVsbDtcclxuICAgIGNvbnN0IGluZGljZXMgPSBvcmlnaW5hbEdlb21ldHJ5LmluZGV4ID8gb3JpZ2luYWxHZW9tZXRyeS5pbmRleC5hcnJheSA6IG51bGw7XHJcbiAgICBcclxuICAgIC8vIOWIm+W7uuaWsOeahOWHoOS9leS9k+aVsOaNruaVsOe7hFxyXG4gICAgY29uc3QgbmV3VmVydGljZXMgPSBbXTtcclxuICAgIGNvbnN0IG5ld05vcm1hbHMgPSBbXTtcclxuICAgIGNvbnN0IG5ld1V2cyA9IFtdO1xyXG4gICAgY29uc3QgbmV3SW5kaWNlcyA9IFtdO1xyXG4gICAgY29uc3QgdmVydGV4TWFwID0gbmV3IE1hcCgpOyAvLyDnlKjkuo7mmKDlsITml6fpobbngrnntKLlvJXliLDmlrDpobbngrnntKLlvJVcclxuICAgIFxyXG4gICAgLy8g5a6a5LmJ6LGh6ZmQ6L6555WM77yI5Z+65LqOWFnlubPpnaLvvIlcclxuICAgIGNvbnN0IHF1YWRyYW50Qm91bmRzID0gdGhpcy5nZXRRdWFkcmFudEJvdW5kcyhxdWFkcmFudEluZGV4KTtcclxuICAgIFxyXG4gICAgLy8g5aSE55CG6aG254K55pWw5o2uXHJcbiAgICBpZiAoaW5kaWNlcykge1xyXG4gICAgICAvLyDmnInntKLlvJXnmoTlh6DkvZXkvZNcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgY29uc3QgdHJpYW5nbGVWZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHRyaWFuZ2xlSW5RdWFkcmFudCA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOajgOafpeS4ieinkuW9oueahOavj+S4qumhtueCuVxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XHJcbiAgICAgICAgICBjb25zdCB2ZXJ0ZXhJbmRleCA9IGluZGljZXNbaSArIGpdO1xyXG4gICAgICAgICAgY29uc3QgeCA9IHBvc2l0aW9uc1t2ZXJ0ZXhJbmRleCAqIDNdO1xyXG4gICAgICAgICAgY29uc3QgeSA9IHBvc2l0aW9uc1t2ZXJ0ZXhJbmRleCAqIDMgKyAxXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdHJpYW5nbGVWZXJ0aWNlcy5wdXNoKHsgaW5kZXg6IHZlcnRleEluZGV4LCB4LCB5IH0pO1xyXG4gICAgICAgICAgdHJpYW5nbGVJblF1YWRyYW50LnB1c2godGhpcy5pc1BvaW50SW5RdWFkcmFudCh4LCB5LCBxdWFkcmFudEJvdW5kcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDlpoLmnpzkuInop5LlvaLnmoTku7vkvZXpobbngrnlnKjlvZPliY3osaHpmZDvvIzliJnljIXlkKvmlbTkuKrkuInop5LlvaJcclxuICAgICAgICBpZiAodHJpYW5nbGVJblF1YWRyYW50LnNvbWUoaW5RdWFkcmFudCA9PiBpblF1YWRyYW50KSkge1xyXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAzOyBqKyspIHtcclxuICAgICAgICAgICAgY29uc3QgdmVydGV4ID0gdHJpYW5nbGVWZXJ0aWNlc1tqXTtcclxuICAgICAgICAgICAgY29uc3Qgb2xkSW5kZXggPSB2ZXJ0ZXguaW5kZXg7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoIXZlcnRleE1hcC5oYXMob2xkSW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgLy8g5re75Yqg5paw6aG254K5XHJcbiAgICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBuZXdWZXJ0aWNlcy5sZW5ndGggLyAzO1xyXG4gICAgICAgICAgICAgIHZlcnRleE1hcC5zZXQob2xkSW5kZXgsIG5ld0luZGV4KTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAvLyDlpI3liLbpobbngrnkvY3nva5cclxuICAgICAgICAgICAgICBuZXdWZXJ0aWNlcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zW29sZEluZGV4ICogM10sXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbb2xkSW5kZXggKiAzICsgMV0sXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbb2xkSW5kZXggKiAzICsgMl1cclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vIOWkjeWItuazleWQkemHj1xyXG4gICAgICAgICAgICAgIGlmIChub3JtYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdOb3JtYWxzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIG5vcm1hbHNbb2xkSW5kZXggKiAzXSxcclxuICAgICAgICAgICAgICAgICAgbm9ybWFsc1tvbGRJbmRleCAqIDMgKyAxXSxcclxuICAgICAgICAgICAgICAgICAgbm9ybWFsc1tvbGRJbmRleCAqIDMgKyAyXVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgLy8g5aSN5Yi2VVblnZDmoIdcclxuICAgICAgICAgICAgICBpZiAodXZzKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdVdnMucHVzaChcclxuICAgICAgICAgICAgICAgICAgdXZzW29sZEluZGV4ICogMl0sXHJcbiAgICAgICAgICAgICAgICAgIHV2c1tvbGRJbmRleCAqIDIgKyAxXVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5ld0luZGljZXMucHVzaCh2ZXJ0ZXhNYXAuZ2V0KG9sZEluZGV4KSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyDml6DntKLlvJXnmoTlh6DkvZXkvZNcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpICs9IDkpIHsgLy8g5q+P5Liq5LiJ6KeS5b2iM+S4qumhtueCue+8jOavj+S4qumhtueCuTPkuKrlnZDmoIdcclxuICAgICAgICBjb25zdCB0cmlhbmdsZUluUXVhZHJhbnQgPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDmo4Dmn6XkuInop5LlvaLnmoTmr4/kuKrpobbngrlcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDM7IGorKykge1xyXG4gICAgICAgICAgY29uc3QgeCA9IHBvc2l0aW9uc1tpICsgaiAqIDNdO1xyXG4gICAgICAgICAgY29uc3QgeSA9IHBvc2l0aW9uc1tpICsgaiAqIDMgKyAxXTtcclxuICAgICAgICAgIHRyaWFuZ2xlSW5RdWFkcmFudC5wdXNoKHRoaXMuaXNQb2ludEluUXVhZHJhbnQoeCwgeSwgcXVhZHJhbnRCb3VuZHMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g5aaC5p6c5LiJ6KeS5b2i55qE5Lu75L2V6aG254K55Zyo5b2T5YmN6LGh6ZmQ77yM5YiZ5YyF5ZCr5pW05Liq5LiJ6KeS5b2iXHJcbiAgICAgICAgaWYgKHRyaWFuZ2xlSW5RdWFkcmFudC5zb21lKGluUXVhZHJhbnQgPT4gaW5RdWFkcmFudCkpIHtcclxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VJZHggPSBpICsgaiAqIDM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDlpI3liLbpobbngrnkvY3nva5cclxuICAgICAgICAgICAgbmV3VmVydGljZXMucHVzaChcclxuICAgICAgICAgICAgICBwb3NpdGlvbnNbYmFzZUlkeF0sXHJcbiAgICAgICAgICAgICAgcG9zaXRpb25zW2Jhc2VJZHggKyAxXSxcclxuICAgICAgICAgICAgICBwb3NpdGlvbnNbYmFzZUlkeCArIDJdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDlpI3liLbms5XlkJHph49cclxuICAgICAgICAgICAgaWYgKG5vcm1hbHMpIHtcclxuICAgICAgICAgICAgICBuZXdOb3JtYWxzLnB1c2goXHJcbiAgICAgICAgICAgICAgICBub3JtYWxzW2Jhc2VJZHhdLFxyXG4gICAgICAgICAgICAgICAgbm9ybWFsc1tiYXNlSWR4ICsgMV0sXHJcbiAgICAgICAgICAgICAgICBub3JtYWxzW2Jhc2VJZHggKyAyXVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOWkjeWItlVW5Z2Q5qCHXHJcbiAgICAgICAgICAgIGlmICh1dnMpIHtcclxuICAgICAgICAgICAgICBjb25zdCB1dklkeCA9IChpIC8gMykgKiAyICsgaiAqIDI7IC8vIFVW57Si5byV6K6h566XXHJcbiAgICAgICAgICAgICAgbmV3VXZzLnB1c2goXHJcbiAgICAgICAgICAgICAgICB1dnNbdXZJZHhdLFxyXG4gICAgICAgICAgICAgICAgdXZzW3V2SWR4ICsgMV1cclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOWIm+W7uuaWsOeahOWHoOS9leS9k1xyXG4gICAgY29uc3QgYmxvY2tHZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG4gICAgXHJcbiAgICBpZiAobmV3VmVydGljZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBibG9ja0dlb21ldHJ5LnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShuZXdWZXJ0aWNlcywgMykpO1xyXG4gICAgICBcclxuICAgICAgaWYgKG5ld05vcm1hbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGJsb2NrR2VvbWV0cnkuc2V0QXR0cmlidXRlKCdub3JtYWwnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShuZXdOb3JtYWxzLCAzKSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChuZXdVdnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGJsb2NrR2VvbWV0cnkuc2V0QXR0cmlidXRlKCd1dicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKG5ld1V2cywgMikpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAobmV3SW5kaWNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgYmxvY2tHZW9tZXRyeS5zZXRJbmRleChuZXdJbmRpY2VzKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8g6K6h566X6L6555WM55uS5ZKM5rOV5ZCR6YePXHJcbiAgICAgIGJsb2NrR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XHJcbiAgICAgIGlmIChuZXdOb3JtYWxzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGJsb2NrR2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g5aaC5p6c5rKh5pyJ6aG254K577yM5Yib5bu65LiA5Liq566A5Y2V55qE5Y2g5L2N5Yeg5L2V5L2TXHJcbiAgICAgIGNvbnNvbGUud2FybihgUXVhZHJhbnQgJHtxdWFkcmFudEluZGV4fSBoYXMgbm8gdmVydGljZXMsIGNyZWF0aW5nIHBsYWNlaG9sZGVyIGdlb21ldHJ5YCk7XHJcbiAgICAgIGNvbnN0IHBsYW5lR2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgwLjEsIDAuMSk7XHJcbiAgICAgIGJsb2NrR2VvbWV0cnkuY29weShwbGFuZUdlb21ldHJ5KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5Yib5bu6572R5qC8XHJcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goYmxvY2tHZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gbWVzaDtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog6I635Y+W6LGh6ZmQ6L6555WMXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWRyYW50SW5kZXggLSDosaHpmZDntKLlvJUgKDAtMylcclxuICAgKi9cclxuICBnZXRRdWFkcmFudEJvdW5kcyhxdWFkcmFudEluZGV4KSB7XHJcbiAgICBzd2l0Y2ggKHF1YWRyYW50SW5kZXgpIHtcclxuICAgICAgY2FzZSAwOiAvLyDnrKzkuIDosaHpmZAgKCt4LCAreSlcclxuICAgICAgICByZXR1cm4geyBtaW5YOiAwLCBtYXhYOiBJbmZpbml0eSwgbWluWTogMCwgbWF4WTogSW5maW5pdHkgfTtcclxuICAgICAgY2FzZSAxOiAvLyDnrKzkuozosaHpmZAgKC14LCAreSlcclxuICAgICAgICByZXR1cm4geyBtaW5YOiAtSW5maW5pdHksIG1heFg6IDAsIG1pblk6IDAsIG1heFk6IEluZmluaXR5IH07XHJcbiAgICAgIGNhc2UgMjogLy8g56ys5LiJ6LGh6ZmQICgteCwgLXkpXHJcbiAgICAgICAgcmV0dXJuIHsgbWluWDogLUluZmluaXR5LCBtYXhYOiAwLCBtaW5ZOiAtSW5maW5pdHksIG1heFk6IDAgfTtcclxuICAgICAgY2FzZSAzOiAvLyDnrKzlm5vosaHpmZAgKCt4LCAteSlcclxuICAgICAgICByZXR1cm4geyBtaW5YOiAwLCBtYXhYOiBJbmZpbml0eSwgbWluWTogLUluZmluaXR5LCBtYXhZOiAwIH07XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIHsgbWluWDogLUluZmluaXR5LCBtYXhYOiBJbmZpbml0eSwgbWluWTogLUluZmluaXR5LCBtYXhZOiBJbmZpbml0eSB9O1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDmo4Dmn6XngrnmmK/lkKblnKjmjIflrprosaHpmZDlhoVcclxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFjlnZDmoIdcclxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFnlnZDmoIdcclxuICAgKiBAcGFyYW0ge09iamVjdH0gYm91bmRzIC0g6LGh6ZmQ6L6555WMXHJcbiAgICovXHJcbiAgaXNQb2ludEluUXVhZHJhbnQoeCwgeSwgYm91bmRzKSB7XHJcbiAgICByZXR1cm4geCA+PSBib3VuZHMubWluWCAmJiB4IDw9IGJvdW5kcy5tYXhYICYmIFxyXG4gICAgICAgICAgIHkgPj0gYm91bmRzLm1pblkgJiYgeSA8PSBib3VuZHMubWF4WTtcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5L2/55SoU3VwZXJlbGxpcHNlUG9zaXRpb25lcuaJuemHj+iuvue9ruS9jee9rlxyXG4gICAqL1xyXG4gIGNhbGN1bGF0ZUV4cGxvZGVkUG9zaXRpb24oYmxvY2spIHtcclxuICAgIC8vIOS9v+eUqFN1cGVyZWxsaXBzZVBvc2l0aW9uZXLov5vooYzkvY3nva7nrqHnkIZcclxuICAgIFxyXG4gICAgLy8g5om56YeP6K6+572u5L2N572u77yINOS4quixoemZkOWtkOe9keagvO+8iVxyXG4gICAgY29uc3QgbmV3UG9zaXRpb25zID0gW1xyXG4gICAgICB7IHg6IDQsIHk6IDEuNSwgejogMSB9LCAgICAvLyDnrKzkuIDosaHpmZBcclxuICAgICAgeyB4OiA0LCB5OiAtMi41LCB6OiAxIH0sICAgLy8g56ys5LqM6LGh6ZmQXHJcbiAgICAgIHsgeDogNCwgeTogLTIuNSwgejogLTEgfSwgIC8vIOesrOS4ieixoemZkFxyXG4gICAgICB7IHg6IDQsIHk6IDEuNSwgejogLTEgfSAgICAvLyDnrKzlm5vosaHpmZBcclxuICAgIF07XHJcbiAgICB0aGlzLnBvc2l0aW9uZXIuc2V0UG9zaXRpb25zKG5ld1Bvc2l0aW9ucyk7XHJcblxyXG4gICAgLy8g5Y2V54us6K6+572u5p+Q5Liq5a2Q572R5qC85L2N572uXHJcbiAgICAvLyB0aGlzLnBvc2l0aW9uZXIuc2V0UG9zaXRpb24oMCwgeyB4OiA1LCB5OiA1LCB6OiAxIH0pO1xyXG5cclxuICAgIC8vIOiOt+WPluW9k+WJjeaJgOacieS9jee9rlxyXG4gICAgY29uc3QgY3VycmVudFBvc2l0aW9ucyA9IHRoaXMucG9zaXRpb25lci5nZXRQb3NpdGlvbnMoKTtcclxuICAgIFxyXG4gICAgLy8g6L+U5Zue5oyH5a6a5Z2X55qE5L2N572uXHJcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvbmVyLmdldFBvc2l0aW9uKGJsb2NrLnF1YWRyYW50SW5kZXgpIHx8IGJsb2NrLm9yaWdpbmFsUG9zaXRpb247XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOWIh+aNoueIhueCuOaViOaenFxyXG4gICAqL1xyXG4gIHRvZ2dsZShleHBsb2RlID0gIXRoaXMuZXhwbG9kZWQpIHtcclxuICAgIHRoaXMuZXhwbG9kZWQgPSBleHBsb2RlO1xyXG4gICAgXHJcbiAgICAvLyDlgZzmraLmiYDmnInmraPlnKjov5vooYznmoTliqjnlLtcclxuICAgIHRoaXMudHdlZW5zLmZvckVhY2godHdlZW4gPT4gdHdlZW4uc3RvcCgpKTtcclxuICAgIHRoaXMudHdlZW5zID0gW107XHJcbiAgICBcclxuICAgIGlmICh0aGlzLmV4cGxvZGVkKSB7XHJcbiAgICAgIC8vIOeIhueCuO+8mumakOiXj+WOn+Wni+e9keagvO+8jOaYvuekuuenr+acqOWdl1xyXG4gICAgICB0aGlzLm9yaWdpbmFsTWVzaC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuZXhwbG9kZUJsb2NrcygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g5ZCI5bm277ya6YeN5paw57uE6KOF56ev5pyo5Z2X77yM5pi+56S65Y6f5aeL572R5qC8XHJcbiAgICAgIHRoaXMuYXNzZW1ibGVCbG9ja3MoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHRoaXMuZXhwbG9kZWQ7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIOWIhuino+enr+acqOWdl1xyXG4gICAqL1xyXG4gIGV4cGxvZGVCbG9ja3MoKSB7XHJcbiAgICB0aGlzLmFuaW1hdGVCbG9ja3ModHJ1ZSk7IC8vIHRydWXooajnpLrliIbop6NcclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICog57uE6KOF56ev5pyo5Z2XXHJcbiAgICovXHJcbiAgYXNzZW1ibGVCbG9ja3MoKSB7XHJcbiAgICB0aGlzLmFuaW1hdGVCbG9ja3MoZmFsc2UpOyAvLyBmYWxzZeihqOekuue7hOijhVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDnu5/kuIDnmoTliqjnlLvlpITnkIblh73mlbBcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGV4cGxvZGUgLSB0cnVl5Li65YiG6Kej77yMZmFsc2XkuLrnu4Too4VcclxuICAgKi9cclxuICBhbmltYXRlQmxvY2tzKGV4cGxvZGUpIHtcclxuICAgIGxldCBjb21wbGV0ZWRBbmltYXRpb25zID0gMDtcclxuICAgIGNvbnN0IHRvdGFsQW5pbWF0aW9ucyA9IHRoaXMuYmxvY2tzLmxlbmd0aDtcclxuICAgIFxyXG4gICAgdGhpcy5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGluZGV4KSA9PiB7XHJcbiAgICAgIC8vIOaYvuekuuaIlumakOiXj+enr+acqOWdl+eahOmAu+i+kVxyXG4gICAgICBpZiAoZXhwbG9kZSkge1xyXG4gICAgICAgIGJsb2NrLm1lc2gudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIOiuoeeul+ebruagh+S9jee9ruWSjOaXi+i9rFxyXG4gICAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IGV4cGxvZGUgXHJcbiAgICAgICAgPyB0aGlzLmNhbGN1bGF0ZUV4cGxvZGVkUG9zaXRpb24oYmxvY2spIFxyXG4gICAgICAgIDogYmxvY2sub3JpZ2luYWxQb3NpdGlvbjtcclxuICAgICAgY29uc3QgdGFyZ2V0Um90YXRpb24gPSBibG9jay5vcmlnaW5hbFJvdGF0aW9uO1xyXG4gICAgICBcclxuICAgICAgLy8g57uf5LiA5bu26L+f5pe26Ze077ya6YO95L2/55SoMTIwbXPpl7TpmpRcclxuICAgICAgY29uc3QgZGVsYXkgPSBpbmRleCAqIDEyMDtcclxuICAgICAgXHJcbiAgICAgIC8vIOe7n+S4gOWKqOeUu+aMgee7reaXtumXtFxyXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGlvbkR1cmF0aW9uO1xyXG4gICAgICBcclxuICAgICAgLy8g57uf5LiA57yT5Yqo5Ye95pWw77ya6YO95L2/55SoQmFjay5PdXRcclxuICAgICAgY29uc3QgZWFzaW5nID0gVFdFRU4uRWFzaW5nLkJhY2suT3V0O1xyXG4gICAgICBcclxuICAgICAgLy8g5Yib5bu65L2N572u5Yqo55S7XHJcbiAgICAgIGNvbnN0IHBvc2l0aW9uVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oYmxvY2subWVzaC5wb3NpdGlvbiwgdHdlZW5Hcm91cClcclxuICAgICAgICAudG8oe1xyXG4gICAgICAgICAgeDogdGFyZ2V0UG9zaXRpb24ueCxcclxuICAgICAgICAgIHk6IHRhcmdldFBvc2l0aW9uLnksXHJcbiAgICAgICAgICB6OiB0YXJnZXRQb3NpdGlvbi56XHJcbiAgICAgICAgfSwgZHVyYXRpb24pXHJcbiAgICAgICAgLmRlbGF5KGRlbGF5KVxyXG4gICAgICAgIC5lYXNpbmcoZWFzaW5nKVxyXG4gICAgICAgIC5vbkNvbXBsZXRlKCgpID0+IHtcclxuICAgICAgICAgIGlmICghZXhwbG9kZSkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZWRBbmltYXRpb25zKys7XHJcbiAgICAgICAgICAgIC8vIOe7hOijheWujOaIkOWQjueahOWkhOeQhlxyXG4gICAgICAgICAgICBpZiAoY29tcGxldGVkQW5pbWF0aW9ucyA9PT0gdG90YWxBbmltYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaChiID0+IGIubWVzaC52aXNpYmxlID0gZmFsc2UpO1xyXG4gICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxNZXNoLnZpc2libGUgPSB0aGlzLm9yaWdpbmFsVmlzaWJsZTtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygn6LaF5qSt5ZyG57uE6KOF5a6M5oiQ77yM5pi+56S65Y6f5aeL572R5qC8Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGFydCgpO1xyXG4gICAgICBcclxuICAgICAgLy8g5Yib5bu65peL6L2s5Yqo55S7XHJcbiAgICAgIGNvbnN0IHJvdGF0aW9uVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oYmxvY2subWVzaC5yb3RhdGlvbiwgdHdlZW5Hcm91cClcclxuICAgICAgICAudG8oe1xyXG4gICAgICAgICAgeDogdGFyZ2V0Um90YXRpb24ueCxcclxuICAgICAgICAgIHk6IHRhcmdldFJvdGF0aW9uLnksXHJcbiAgICAgICAgICB6OiB0YXJnZXRSb3RhdGlvbi56XHJcbiAgICAgICAgfSwgZHVyYXRpb24pXHJcbiAgICAgICAgLmRlbGF5KGRlbGF5KVxyXG4gICAgICAgIC5lYXNpbmcoZWFzaW5nKVxyXG4gICAgICAgIC5zdGFydCgpO1xyXG4gICAgICBcclxuICAgICAgdGhpcy50d2VlbnMucHVzaChwb3NpdGlvblR3ZWVuLCByb3RhdGlvblR3ZWVuKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDmuIXnkIbotYTmupBcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgLy8g5YGc5q2i5omA5pyJ5Yqo55S7XHJcbiAgICB0aGlzLnR3ZWVucy5mb3JFYWNoKHR3ZWVuID0+IHR3ZWVuLnN0b3AoKSk7XHJcbiAgICB0aGlzLnR3ZWVucyA9IFtdO1xyXG4gICAgXHJcbiAgICAvLyDnp7vpmaTnp6/mnKjlnZdcclxuICAgIHRoaXMuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICB0aGlzLnBhcmVudEdyb3VwLnJlbW92ZShibG9jay5tZXNoKTtcclxuICAgICAgYmxvY2subWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcbiAgICAgIC8vIOadkOi0qOWPr+iDveaYr+WFseS6q+eahO+8jOS4jeebtOaOpWRpc3Bvc2VcclxuICAgICAgaWYgKGJsb2NrLm1lc2gubWF0ZXJpYWwgIT09IHRoaXMub3JpZ2luYWxNZXNoLm1hdGVyaWFsKSB7XHJcbiAgICAgICAgYmxvY2subWVzaC5tYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB0aGlzLmJsb2NrcyA9IFtdO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiDojrflj5bniIbngrjnirbmgIFcclxuICAgKi9cclxuICBpc0V4cGxvZGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZXhwbG9kZWQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gJy4uL2NvbmZpZ0xvYWRlcic7XG5pbXBvcnQgeyBDeWxpbmRlckNvbm5lY3Rpb24gfSBmcm9tICcuL0N5bGluZGVyQ29ubmVjdGlvbi5qcyc7XG5pbXBvcnQgeyBTdXBlcmVsbGlwc2VUcmFuc2l0aW9uIH0gZnJvbSAnLi9TdXBlcmVsbGlwc2VUcmFuc2l0aW9uLmpzJztcbmltcG9ydCB7IEN5bGluZGVyMkV4cGxvZGVFZmZlY3QgfSBmcm9tICcuL0N5bGluZGVyMkV4cGxvZGVFZmZlY3QuanMnO1xuaW1wb3J0IHsgUm90YXRpb25DdXJ2ZUV4cGxvZGVFZmZlY3QgfSBmcm9tICcuL1JvdGF0aW9uQ3VydmVFeHBsb2RlRWZmZWN0LmpzJztcbmltcG9ydCB7IFN1cGVyZWxsaXBzZUV4cGxvZGVFZmZlY3QgfSBmcm9tICcuL1N1cGVyZWxsaXBzZUV4cGxvZGVFZmZlY3QuanMnO1xuXG4vKipcbiAqIENSVOato+aWueW9oumAj+aYjuWkluWjs+e7hOS7tlxuICog55So5LqO5YyF6KO55pW05LiqQ1JU5qih5Z6L55qE6YCP5piO5L+d5oqk5aOzXG4gKi9cbmV4cG9ydCBjbGFzcyBDUlRTaGVsbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc2hlbGxHcm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgIHRoaXMuc2hlbGxHcm91cC5uYW1lID0gJ0NSVFNoZWxsJztcbiAgICBcbiAgICAvLyDliJvlu7rkuKTkuKrlnIbmn7HkvZPnmoTmnZDotKhcbiAgICB0aGlzLmN5bGluZGVyMU1hdGVyaWFsID0gbnVsbDtcbiAgICB0aGlzLmN5bGluZGVyMk1hdGVyaWFsID0gbnVsbDtcbiAgICBcbiAgICAvLyDml4vovazmm7Lnur/ov57mjqVcbiAgICB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbiA9IG51bGw7XG4gICAgXG4gICAgLy8g6LaF5qSt5ZyG5b2i54q25riQ5Y+YXG4gICAgdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uID0gbnVsbDtcbiAgICBcbiAgICAvLyBjeWxpbmRlcjLniIbngrjmlYjmnpxcbiAgICB0aGlzLmN5bGluZGVyMkV4cGxvZGVFZmZlY3QgPSBudWxsO1xuICAgIFxuICAgIC8vIOaXi+i9rOabsue6v+i/nuaOpeeIhueCuOaViOaenFxuICAgIHRoaXMucm90YXRpb25DdXJ2ZUV4cGxvZGVFZmZlY3QgPSBudWxsO1xuICAgIFxuICAgIC8vIOi2heakreWchuW9oueKtua4kOWPmOeIhueCuOaViOaenFxuICAgIHRoaXMuc3VwZXJlbGxpcHNlRXhwbG9kZUVmZmVjdCA9IG51bGw7XG4gICAgXG4gICAgdGhpcy5jcmVhdGVTaGVsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uuato+aWueW9oumAj+aYjuWkluWjs++8iOWIoOmZpOmdoOi/keiNp+WFieWxj+eahOWPs+S+p+mdou+8iVxuICAgKi9cbiAgY3JlYXRlU2hlbGwoKSB7XG4gICAgLy8g56uL5pa55L2T5aSW5aOz5p2Q6LSo5bey5Yig6Zmk77yM5LiN5YaN6ZyA6KaBXG4gICAgLy8gdGhpcy5zaGVsbE1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcbiAgICAvLyAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgIC8vICAgb3BhY2l0eTogQ09ORklHLnNoZWxsLm9wYWNpdHksXG4gICAgLy8gICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLFxuICAgIC8vICAgZGVwdGhXcml0ZTogZmFsc2VcbiAgICAvLyB9KTtcblxuICAgIC8vIOeri+aWueS9k+WkluWjs+W3suiiq+WIoOmZpCAtIOWPquS/neeVmeWchuafseS9k+WSjOi/h+a4oeaViOaenFxuICAgIC8vIGNvbnN0IHNoZWxsR2VvbWV0cnkgPSB0aGlzLmNyZWF0ZU9wZW5Cb3hHZW9tZXRyeShcbiAgICAvLyAgIENPTkZJRy5zaGVsbC5zaXplLndpZHRoLFxuICAgIC8vICAgQ09ORklHLnNoZWxsLnNpemUuaGVpZ2h0LFxuICAgIC8vICAgQ09ORklHLnNoZWxsLnNpemUuZGVwdGhcbiAgICAvLyApO1xuICAgIC8vIGNvbnN0IHNoZWxsID0gbmV3IFRIUkVFLk1lc2goc2hlbGxHZW9tZXRyeSwgdGhpcy5zaGVsbE1hdGVyaWFsKTtcbiAgICAvLyBcbiAgICAvLyAvLyDorr7nva7kvY3nva7lsYXkuK1cbiAgICAvLyBzaGVsbC5wb3NpdGlvbi5zZXQoNC41LCAwLCAwKTsgLy8g56iN5b6u5ZCR5YmN5YGP56e75Lul5bGF5Lit5YyF6KO5Q1JUXG4gICAgLy8gXG4gICAgLy8gdGhpcy5zaGVsbEdyb3VwLmFkZChzaGVsbCk7XG4gICAgXG4gICAgLy8g5Yib5bu65Lik5Liq54us56uL55qE5ZyG5p+x5L2TXG4gICAgdGhpcy5jcmVhdGVDeWxpbmRlcjEoKTtcbiAgICB0aGlzLmNyZWF0ZUN5bGluZGVyMigpO1xuICAgIFxuICAgIC8vIOWIm+W7uuaXi+i9rOabsue6v+i/nuaOpVxuICAgIHRoaXMuY3JlYXRlUm90YXRpb25DdXJ2ZUNvbm5lY3Rpb24oKTtcbiAgICBcbiAgICAvLyDliJvlu7rotoXmpK3lnIblvaLnirbmuJDlj5hcbiAgICB0aGlzLmNyZWF0ZVN1cGVyZWxsaXBzZVRyYW5zaXRpb24oKTtcbiAgICBcbiAgICAvLyDorr7nva7liJ3lp4vlj6/op4HmgKdcbiAgICB0aGlzLnNoZWxsR3JvdXAudmlzaWJsZSA9IENPTkZJRy5zaGVsbC52aXNpYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uuW8gOaUvuW8j+ebkuWtkOWHoOS9leS9k++8iOWOu+aOieWPs+S+p+mdou+8jOWNs1jmraPmlrnlkJHnmoTpnaLvvIlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0g5a695bqmXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSDpq5jluqYgXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCAtIOa3seW6plxuICAgKiBAcmV0dXJucyB7VEhSRUUuQnVmZmVyR2VvbWV0cnl9IOWHoOS9leS9k1xuICAgKi9cbiAgY3JlYXRlT3BlbkJveEdlb21ldHJ5KHdpZHRoLCBoZWlnaHQsIGRlcHRoKSB7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICBcbiAgICBjb25zdCB3ID0gd2lkdGggLyAyO1xuICAgIGNvbnN0IGggPSBoZWlnaHQgLyAyO1xuICAgIGNvbnN0IGQgPSBkZXB0aCAvIDI7XG4gICAgXG4gICAgLy8g5a6a5LmJ6aG254K55L2N572uIC0g56uL5pa55L2T55qEOOS4qumhtueCuVxuICAgIGNvbnN0IHZlcnRpY2VzID0gW1xuICAgICAgLy8g5bem5L6n6Z2iIChYID0gLXcpXG4gICAgICAtdywgLWgsIC1kLCAgLXcsIC1oLCAgZCwgIC13LCAgaCwgIGQsXG4gICAgICAtdywgLWgsIC1kLCAgLXcsICBoLCAgZCwgIC13LCAgaCwgLWQsXG4gICAgICBcbiAgICAgIC8vIOWPs+S+p+mdouiiq+WIoOmZpCAtIOS4jea3u+WKoOi/meS4qumdolxuICAgICAgXG4gICAgICAvLyDpobbpnaIgKFkgPSBoKVxuICAgICAgLXcsICBoLCAtZCwgIC13LCAgaCwgIGQsICAgdywgIGgsICBkLFxuICAgICAgLXcsICBoLCAtZCwgICB3LCAgaCwgIGQsICAgdywgIGgsIC1kLFxuICAgICAgXG4gICAgICAvLyDlupXpnaIgKFkgPSAtaClcbiAgICAgIC13LCAtaCwgLWQsICAgdywgLWgsIC1kLCAgIHcsIC1oLCAgZCxcbiAgICAgIC13LCAtaCwgLWQsICAgdywgLWgsICBkLCAgLXcsIC1oLCAgZCxcbiAgICAgIFxuICAgICAgLy8g5YmN6Z2iIChaID0gZClcbiAgICAgIC13LCAtaCwgIGQsICAgdywgLWgsICBkLCAgIHcsICBoLCAgZCxcbiAgICAgIC13LCAtaCwgIGQsICAgdywgIGgsICBkLCAgLXcsICBoLCAgZCxcbiAgICAgIFxuICAgICAgLy8g5ZCO6Z2iIChaID0gLWQpXG4gICAgICAtdywgLWgsIC1kLCAgLXcsICBoLCAtZCwgICB3LCAgaCwgLWQsXG4gICAgICAtdywgLWgsIC1kLCAgIHcsICBoLCAtZCwgICB3LCAtaCwgLWRcbiAgICBdO1xuICAgIFxuICAgIC8vIOWumuS5ieazleWQkemHj1xuICAgIGNvbnN0IG5vcm1hbHMgPSBbXG4gICAgICAvLyDlt6bkvqfpnaJcbiAgICAgIC0xLCAwLCAwLCAgLTEsIDAsIDAsICAtMSwgMCwgMCxcbiAgICAgIC0xLCAwLCAwLCAgLTEsIDAsIDAsICAtMSwgMCwgMCxcbiAgICAgIFxuICAgICAgLy8g6aG26Z2iXG4gICAgICAwLCAxLCAwLCAgMCwgMSwgMCwgIDAsIDEsIDAsXG4gICAgICAwLCAxLCAwLCAgMCwgMSwgMCwgIDAsIDEsIDAsXG4gICAgICBcbiAgICAgIC8vIOW6lemdolxuICAgICAgMCwgLTEsIDAsICAwLCAtMSwgMCwgIDAsIC0xLCAwLFxuICAgICAgMCwgLTEsIDAsICAwLCAtMSwgMCwgIDAsIC0xLCAwLFxuICAgICAgXG4gICAgICAvLyDliY3pnaJcbiAgICAgIDAsIDAsIDEsICAwLCAwLCAxLCAgMCwgMCwgMSxcbiAgICAgIDAsIDAsIDEsICAwLCAwLCAxLCAgMCwgMCwgMSxcbiAgICAgIFxuICAgICAgLy8g5ZCO6Z2iXG4gICAgICAwLCAwLCAtMSwgIDAsIDAsIC0xLCAgMCwgMCwgLTEsXG4gICAgICAwLCAwLCAtMSwgIDAsIDAsIC0xLCAgMCwgMCwgLTFcbiAgICBdO1xuICAgIFxuICAgIC8vIOWumuS5iVVW5Z2Q5qCHXG4gICAgY29uc3QgdXZzID0gW1xuICAgICAgLy8g5bem5L6n6Z2iXG4gICAgICAwLCAwLCAgMSwgMCwgIDEsIDEsXG4gICAgICAwLCAwLCAgMSwgMSwgIDAsIDEsXG4gICAgICBcbiAgICAgIC8vIOmhtumdolxuICAgICAgMCwgMCwgIDEsIDAsICAxLCAxLFxuICAgICAgMCwgMCwgIDEsIDEsICAwLCAxLFxuICAgICAgXG4gICAgICAvLyDlupXpnaJcbiAgICAgIDAsIDAsICAxLCAwLCAgMSwgMSxcbiAgICAgIDAsIDAsICAxLCAxLCAgMCwgMSxcbiAgICAgIFxuICAgICAgLy8g5YmN6Z2iXG4gICAgICAwLCAwLCAgMSwgMCwgIDEsIDEsXG4gICAgICAwLCAwLCAgMSwgMSwgIDAsIDEsXG4gICAgICBcbiAgICAgIC8vIOWQjumdolxuICAgICAgMCwgMCwgIDEsIDAsICAxLCAxLFxuICAgICAgMCwgMCwgIDEsIDEsICAwLCAxXG4gICAgXTtcbiAgICBcbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKG5vcm1hbHMsIDMpKTtcbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3V2JywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodXZzLCAyKSk7XG4gICAgXG4gICAgcmV0dXJuIGdlb21ldHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uuW8gOaUvuW8j+WchuafseS9k+WHoOS9leS9k++8iOayv1jovbTmlrnlkJHvvIzljrvmjonlj7Pnq6/lnIblvaLpnaLvvIlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIOWchuafseS9k+WNiuW+hFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0g5ZyG5p+x5L2T6ZW/5bqm77yI5rK/WOi9tO+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaWFsU2VnbWVudHMgLSDlvoTlkJHliIbmrrXmlbBcbiAgICogQHJldHVybnMge1RIUkVFLkJ1ZmZlckdlb21ldHJ5fSDlh6DkvZXkvZNcbiAgICovXG4gIGNyZWF0ZU9wZW5DeWxpbmRlckdlb21ldHJ5KHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cyA9IDMyKSB7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICBcbiAgICBjb25zdCBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuICAgIGNvbnN0IG5vcm1hbHMgPSBbXTtcbiAgICBjb25zdCB1dnMgPSBbXTtcbiAgICBjb25zdCBpbmRpY2VzID0gW107XG4gICAgXG4gICAgLy8g55Sf5oiQ5ZyG5p+x5L2T5L6n6Z2i6aG254K577yI5rK/WOi9tOaWueWQke+8iVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpKyspIHtcbiAgICAgIGNvbnN0IGFuZ2xlID0gKGkgLyByYWRpYWxTZWdtZW50cykgKiBNYXRoLlBJICogMjtcbiAgICAgIGNvbnN0IHkgPSBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXM7XG4gICAgICBjb25zdCB6ID0gTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzO1xuICAgICAgXG4gICAgICAvLyDlt6bnq6/pobbngrlcbiAgICAgIHZlcnRpY2VzLnB1c2goLWhhbGZIZWlnaHQsIHksIHopO1xuICAgICAgbm9ybWFscy5wdXNoKDAsIHkgLyByYWRpdXMsIHogLyByYWRpdXMpOyAvLyDlvoTlkJHms5XlkJHph49cbiAgICAgIHV2cy5wdXNoKGkgLyByYWRpYWxTZWdtZW50cywgMCk7XG4gICAgICBcbiAgICAgIC8vIOWPs+err+mhtueCuVxuICAgICAgdmVydGljZXMucHVzaChoYWxmSGVpZ2h0LCB5LCB6KTtcbiAgICAgIG5vcm1hbHMucHVzaCgwLCB5IC8gcmFkaXVzLCB6IC8gcmFkaXVzKTsgLy8g5b6E5ZCR5rOV5ZCR6YePXG4gICAgICB1dnMucHVzaChpIC8gcmFkaWFsU2VnbWVudHMsIDEpO1xuICAgIH1cbiAgICBcbiAgICAvLyDnlJ/miJDlnIbmn7HkvZPkvqfpnaLntKLlvJVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhZGlhbFNlZ21lbnRzOyBpKyspIHtcbiAgICAgIGNvbnN0IGxlZnQxID0gaSAqIDI7XG4gICAgICBjb25zdCByaWdodDEgPSBpICogMiArIDE7XG4gICAgICBjb25zdCBsZWZ0MiA9IChpICsgMSkgKiAyO1xuICAgICAgY29uc3QgcmlnaHQyID0gKGkgKyAxKSAqIDIgKyAxO1xuICAgICAgXG4gICAgICAvLyDmr4/kuKrpnaLniYfnlLHkuKTkuKrkuInop5LlvaLnu4TmiJBcbiAgICAgIGluZGljZXMucHVzaChsZWZ0MSwgcmlnaHQxLCBsZWZ0Mik7XG4gICAgICBpbmRpY2VzLnB1c2gocmlnaHQxLCByaWdodDIsIGxlZnQyKTtcbiAgICB9XG4gICAgXG4gICAgLy8g5Y+q5re75Yqg5bem56uv5ZyG5b2i6Z2i77yIWOi9tOi0n+aWueWQke+8ie+8jOi3s+i/h+WPs+err+WchuW9oumdolxuICAgIGNvbnN0IGNlbnRlckxlZnRJbmRleCA9IHZlcnRpY2VzLmxlbmd0aCAvIDM7XG4gICAgdmVydGljZXMucHVzaCgtaGFsZkhlaWdodCwgMCwgMCk7IC8vIOW3puerr+S4reW/g+eCuVxuICAgIG5vcm1hbHMucHVzaCgtMSwgMCwgMCk7XG4gICAgdXZzLnB1c2goMC41LCAwLjUpO1xuICAgIFxuICAgIC8vIOeUn+aIkOW3puerr+WchuW9oumdoueahOmhtueCueWSjOe0ouW8lVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFkaWFsU2VnbWVudHM7IGkrKykge1xuICAgICAgY29uc3QgYW5nbGUgPSAoaSAvIHJhZGlhbFNlZ21lbnRzKSAqIE1hdGguUEkgKiAyO1xuICAgICAgY29uc3QgeSA9IE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cztcbiAgICAgIGNvbnN0IHogPSBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXM7XG4gICAgICBcbiAgICAgIHZlcnRpY2VzLnB1c2goLWhhbGZIZWlnaHQsIHksIHopO1xuICAgICAgbm9ybWFscy5wdXNoKC0xLCAwLCAwKTtcbiAgICAgIHV2cy5wdXNoKCh5IC8gcmFkaXVzICsgMSkgKiAwLjUsICh6IC8gcmFkaXVzICsgMSkgKiAwLjUpO1xuICAgICAgXG4gICAgICAvLyDov57mjqXliLDkuK3lv4PngrnnmoTkuInop5LlvaJcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IGNlbnRlckxlZnRJbmRleCArIDEgKyBpO1xuICAgICAgY29uc3QgbmV4dEluZGV4ID0gY2VudGVyTGVmdEluZGV4ICsgMSArICgoaSArIDEpICUgcmFkaWFsU2VnbWVudHMpO1xuICAgICAgaW5kaWNlcy5wdXNoKGNlbnRlckxlZnRJbmRleCwgY3VycmVudEluZGV4LCBuZXh0SW5kZXgpO1xuICAgIH1cbiAgICBcbiAgICAvLyDms6jmhI/vvJrmiJHku6zmlYXmhI/kuI3mt7vliqDlj7Pnq6/lnIblvaLpnaLvvIzku6Xlrp7njrDlvIDmlL7lvI/orr7orqFcbiAgICBcbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKG5vcm1hbHMsIDMpKTtcbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3V2JywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodXZzLCAyKSk7XG4gICAgZ2VvbWV0cnkuc2V0SW5kZXgoaW5kaWNlcyk7XG4gICAgXG4gICAgcmV0dXJuIGdlb21ldHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uuesrOS4gOS4quWchuafseS9k+e7hOS7tlxuICAgKi9cbiAgY3JlYXRlQ3lsaW5kZXIxKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IENPTkZJRy5zaGVsbC5jeWxpbmRlcjE7XG4gICAgXG4gICAgLy8g5Yib5bu656ys5LiA5Liq5ZyG5p+x5L2T55qE54us56uL5p2Q6LSoXG4gICAgdGhpcy5jeWxpbmRlcjFNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG4gICAgICBjb2xvcjogcGFyc2VJbnQoY29uZmlnLmNvbG9yKSxcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgb3BhY2l0eTogY29uZmlnLm9wYWNpdHksXG4gICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLFxuICAgICAgZGVwdGhXcml0ZTogZmFsc2VcbiAgICB9KTtcbiAgICBcbiAgICAvLyDliJvlu7rlnIbmn7HkvZPlh6DkvZXkvZPvvIjkvb/nlKjni6znq4vnmoTljYrlvoTlj4LmlbDvvIlcbiAgICBjb25zdCBjeWxpbmRlcjFHZW9tZXRyeSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KGNvbmZpZy5yYWRpdXMsIGNvbmZpZy5yYWRpdXMsIGNvbmZpZy5oZWlnaHQsIDMyKTtcbiAgICBjb25zdCBjeWxpbmRlcjEgPSBuZXcgVEhSRUUuTWVzaChjeWxpbmRlcjFHZW9tZXRyeSwgdGhpcy5jeWxpbmRlcjFNYXRlcmlhbCk7XG4gICAgXG4gICAgLy8g6K6+572u5ZyG5p+x5L2T5L2N572u5ZKM5peL6L2sXG4gICAgY3lsaW5kZXIxLnBvc2l0aW9uLnNldChjb25maWcucG9zaXRpb24ueCwgY29uZmlnLnBvc2l0aW9uLnksIGNvbmZpZy5wb3NpdGlvbi56KTtcbiAgICBjeWxpbmRlcjEucm90YXRpb24uc2V0KGNvbmZpZy5yb3RhdGlvbi54LCBjb25maWcucm90YXRpb24ueSwgY29uZmlnLnJvdGF0aW9uLnopO1xuICAgIFxuICAgIC8vIOiuvue9ruWPr+ingeaAp1xuICAgIGN5bGluZGVyMS52aXNpYmxlID0gY29uZmlnLnZpc2libGU7XG4gICAgXG4gICAgLy8g5re75Yqg5Yiw57uE5LitXG4gICAgdGhpcy5zaGVsbEdyb3VwLmFkZChjeWxpbmRlcjEpO1xuICAgIFxuICAgIC8vIOS/neWtmOWchuafseS9k+W8leeUqOS7peS+v+WQjue7reaTjeS9nFxuICAgIHRoaXMuY3lsaW5kZXIxID0gY3lsaW5kZXIxO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uuesrOS6jOS4quWchuafseS9k+e7hOS7tu+8iOWOu+aOieWPs+S+p+WchuW9oumdou+8iVxuICAgKi9cbiAgY3JlYXRlQ3lsaW5kZXIyKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IENPTkZJRy5zaGVsbC5jeWxpbmRlcjI7XG4gICAgXG4gICAgLy8g5L2/55So57uf5LiA57uE5Lu25p2Q6LSo5Lul56Gu5L+d6aKc6Imy5LiA6Ie05oCnXG4gICAgdGhpcy5jeWxpbmRlcjJNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCh7XG4gICAgICBjb2xvcjogcGFyc2VJbnQoY29uZmlnLmNvbG9yKSxcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgb3BhY2l0eTogY29uZmlnLm9wYWNpdHksXG4gICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLFxuICAgICAgZGVwdGhXcml0ZTogZmFsc2UsXG4gICAgICBtZXRhbG5lc3M6IDAuNixcbiAgICAgIHJvdWdobmVzczogMC4zXG4gICAgfSk7XG4gICAgXG4gICAgLy8g5Yib5bu65byA5pS+5byP5ZyG5p+x5L2T5Yeg5L2V5L2T77yI5Y675o6J5Y+z5L6n5ZyG5b2i6Z2i77yJXG4gICAgY29uc3QgY3lsaW5kZXIyR2VvbWV0cnkgPSB0aGlzLmNyZWF0ZU9wZW5DeWxpbmRlckdlb21ldHJ5KGNvbmZpZy5yYWRpdXMsIGNvbmZpZy5oZWlnaHQsIDMyKTtcbiAgICBjb25zdCBjeWxpbmRlcjIgPSBuZXcgVEhSRUUuTWVzaChjeWxpbmRlcjJHZW9tZXRyeSwgdGhpcy5jeWxpbmRlcjJNYXRlcmlhbCk7XG4gICAgXG4gICAgLy8g6K6+572u5ZyG5p+x5L2T5L2N572u5ZKM5peL6L2sXG4gICAgY3lsaW5kZXIyLnBvc2l0aW9uLnNldChjb25maWcucG9zaXRpb24ueCwgY29uZmlnLnBvc2l0aW9uLnksIGNvbmZpZy5wb3NpdGlvbi56KTtcbiAgICBjeWxpbmRlcjIucm90YXRpb24uc2V0KGNvbmZpZy5yb3RhdGlvbi54LCBjb25maWcucm90YXRpb24ueSwgY29uZmlnLnJvdGF0aW9uLnopO1xuICAgIFxuICAgIC8vIOiuvue9ruWPr+ingeaAp1xuICAgIGN5bGluZGVyMi52aXNpYmxlID0gY29uZmlnLnZpc2libGU7XG4gICAgXG4gICAgLy8g5re75Yqg5Yiw57uE5LitXG4gICAgdGhpcy5zaGVsbEdyb3VwLmFkZChjeWxpbmRlcjIpO1xuICAgIFxuICAgIC8vIOS/neWtmOWchuafseS9k+W8leeUqOS7peS+v+WQjue7reaTjeS9nFxuICAgIHRoaXMuY3lsaW5kZXIyID0gY3lsaW5kZXIyO1xuICAgIFxuICAgIC8vIOWIm+W7umN5bGluZGVyMueahOeIhueCuOaViOaenFxuICAgIHRoaXMuY3JlYXRlQ3lsaW5kZXIyRXhwbG9kZUVmZmVjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uuaXi+i9rOabsue6v+i/nuaOpVxuICAgKi9cbiAgY3JlYXRlUm90YXRpb25DdXJ2ZUNvbm5lY3Rpb24oKSB7XG4gICAgY29uc3QgY29uZmlnID0gQ09ORklHLnNoZWxsLnJvdGF0aW9uQ3VydmVDb25uZWN0aW9uO1xuICAgIFxuICAgIGlmICghY29uZmlnIHx8ICFjb25maWcudmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyDliJvlu7rlnIbmn7HkvZPov57mjqVcbiAgICB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbiA9IG5ldyBDeWxpbmRlckNvbm5lY3Rpb24oXG4gICAgICBDT05GSUcuc2hlbGwuY3lsaW5kZXIxLFxuICAgICAgQ09ORklHLnNoZWxsLmN5bGluZGVyMixcbiAgICAgIGNvbmZpZ1xuICAgICk7XG4gICAgXG4gICAgLy8g5re75Yqg5Yiw57uE5LitXG4gICAgdGhpcy5zaGVsbEdyb3VwLmFkZCh0aGlzLmN5bGluZGVyQ29ubmVjdGlvbi5nZXRDb25uZWN0aW9uKCkpO1xuICAgIFxuICAgIC8vIOWIm+W7uuaXi+i9rOabsue6v+i/nuaOpeeIhueCuOaViOaenFxuICAgIHRoaXMuY3JlYXRlQ29ubmVjdGlvbkV4cGxvZGVFZmZlY3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJvlu7rotoXmpK3lnIblvaLnirbmuJDlj5hcbiAgICovXG4gIGNyZWF0ZVN1cGVyZWxsaXBzZVRyYW5zaXRpb24oKSB7XG4gICAgY29uc3QgY29uZmlnID0gQ09ORklHLnNoZWxsLnN1cGVyZWxsaXBzZVRyYW5zaXRpb247XG4gICAgXG4gICAgaWYgKCFjb25maWcgfHwgIWNvbmZpZy52aXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIOWHhuWkh+i1t+Wni+mFjee9ru+8iOesrOS4gOS4quWchuafseS9k++8iVxuICAgIGNvbnN0IHN0YXJ0Q29uZmlnID0ge1xuICAgICAgcG9zaXRpb246IENPTkZJRy5zaGVsbC5jeWxpbmRlcjEucG9zaXRpb24sXG4gICAgICByYWRpdXM6IENPTkZJRy5zaGVsbC5jeWxpbmRlcjEucmFkaXVzXG4gICAgfTtcbiAgICBcbiAgICAvLyDlh4blpIfnu5PmnZ/phY3nva7vvIjpgILphY3ojaflhYnlsY/lsLrlr7jvvIlcbiAgICBjb25zdCBlbmRDb25maWcgPSB7XG4gICAgICBwb3NpdGlvbjogeyB4OiA0LjUsIHk6IDAsIHo6IDAgfSwgLy8g56uL5pa55L2T5Lit5b+D5L2N572uXG4gICAgICBzaXplOiB7XG4gICAgICAgIHdpZHRoOiBDT05GSUcuY29tcG9uZW50cy5zY3JlZW4ud2lkdGgsICAgLy8g6I2n5YWJ5bGP5a695bqm77yaNFxuICAgICAgICBoZWlnaHQ6IENPTkZJRy5jb21wb25lbnRzLnNjcmVlbi5oZWlnaHQsIC8vIOiNp+WFieWxj+mrmOW6pu+8mjNcbiAgICAgICAgZGVwdGg6IENPTkZJRy5zaGVsbC5zaXplLmRlcHRoICAgICAgICAgICAvLyDkv53mjIHljp/mt7HluqbvvJo0XG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvLyDliJvlu7rlvaLnirbmuJDlj5hcbiAgICB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24gPSBuZXcgU3VwZXJlbGxpcHNlVHJhbnNpdGlvbihcbiAgICAgIHN0YXJ0Q29uZmlnLFxuICAgICAgZW5kQ29uZmlnLFxuICAgICAgY29uZmlnXG4gICAgKTtcbiAgICBcbiAgICAvLyDmt7vliqDliLDnu4TkuK1cbiAgICB0aGlzLnNoZWxsR3JvdXAuYWRkKHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbi5nZXRUcmFuc2l0aW9uKCkpO1xuICAgIFxuICAgIC8vIOWIm+W7uui2heakreWchuW9oueKtua4kOWPmOeIhueCuOaViOaenFxuICAgIHRoaXMuY3JlYXRlU3VwZXJlbGxpcHNlRXhwbG9kZUVmZmVjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uuaXi+i9rOabsue6v+i/nuaOpeeIhueCuOaViOaenFxuICAgKi9cbiAgY3JlYXRlQ29ubmVjdGlvbkV4cGxvZGVFZmZlY3QoKSB7XG4gICAgaWYgKCF0aGlzLmN5bGluZGVyQ29ubmVjdGlvbikge1xuICAgICAgY29uc29sZS53YXJuKCdDeWxpbmRlckNvbm5lY3Rpb24gbm90IGZvdW5kLCBjYW5ub3QgY3JlYXRlIGV4cGxvZGUgZWZmZWN0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIOiOt+WPlui/nuaOpee9keagvO+8iOesrOS4gOS4qui/nuaOpee9keagvO+8iVxuICAgIGNvbnN0IGNvbm5lY3Rpb25NZXNoZXMgPSB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbi5jb25uZWN0aW9uTWVzaGVzO1xuICAgIGlmICghY29ubmVjdGlvbk1lc2hlcyB8fCBjb25uZWN0aW9uTWVzaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS53YXJuKCdObyBjb25uZWN0aW9uIG1lc2hlcyBmb3VuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyDliJvlu7rniIbngrjmlYjmnpzlrp7kvotcbiAgICB0aGlzLnJvdGF0aW9uQ3VydmVFeHBsb2RlRWZmZWN0ID0gbmV3IFJvdGF0aW9uQ3VydmVFeHBsb2RlRWZmZWN0KFxuICAgICAgY29ubmVjdGlvbk1lc2hlc1swXSwgLy8g5L2/55So56ys5LiA5Liq6L+e5o6l572R5qC8XG4gICAgICB0aGlzLnNoZWxsR3JvdXBcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7umN5bGluZGVyMueIhueCuOaViOaenFxuICAgKi9cbiAgY3JlYXRlQ3lsaW5kZXIyRXhwbG9kZUVmZmVjdCgpIHtcbiAgICBpZiAoIXRoaXMuY3lsaW5kZXIyKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0N5bGluZGVyMiBub3QgZm91bmQsIGNhbm5vdCBjcmVhdGUgZXhwbG9kZSBlZmZlY3QnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8g5Yib5bu654iG54K45pWI5p6c5a6e5L6LXG4gICAgdGhpcy5jeWxpbmRlcjJFeHBsb2RlRWZmZWN0ID0gbmV3IEN5bGluZGVyMkV4cGxvZGVFZmZlY3QoXG4gICAgICB0aGlzLmN5bGluZGVyMixcbiAgICAgIHRoaXMuc2hlbGxHcm91cFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5Yib5bu66LaF5qSt5ZyG5b2i54q25riQ5Y+Y54iG54K45pWI5p6cXG4gICAqL1xuICBjcmVhdGVTdXBlcmVsbGlwc2VFeHBsb2RlRWZmZWN0KCkge1xuICAgIGlmICghdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1N1cGVyZWxsaXBzZVRyYW5zaXRpb24gbm90IGZvdW5kLCBjYW5ub3QgY3JlYXRlIGV4cGxvZGUgZWZmZWN0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIOiOt+WPlui2heakreWchueahOe9keagvO+8iOesrOS4gOS4que9keagvO+8iVxuICAgIGNvbnN0IHRyYW5zaXRpb25NZXNoZXMgPSB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24ubWVzaGVzO1xuICAgIGlmICghdHJhbnNpdGlvbk1lc2hlcyB8fCB0cmFuc2l0aW9uTWVzaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS53YXJuKCdObyBzdXBlcmVsbGlwc2UgbWVzaGVzIGZvdW5kJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIOWIm+W7uueIhueCuOaViOaenOWunuS+i1xuICAgIHRoaXMuc3VwZXJlbGxpcHNlRXhwbG9kZUVmZmVjdCA9IG5ldyBTdXBlcmVsbGlwc2VFeHBsb2RlRWZmZWN0KFxuICAgICAgdHJhbnNpdGlvbk1lc2hlc1swXSwgLy8g5L2/55So56ys5LiA5Liq572R5qC8XG4gICAgICB0aGlzLnNoZWxsR3JvdXBcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIh+aNomN5bGluZGVyMueIhueCuOaViOaenFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGV4cGxvZGUgLSDmmK/lkKbniIbngrjvvIzpu5jorqTkuLrliIfmjaLnirbmgIFcbiAgICogQHJldHVybnMge2Jvb2xlYW59IOW9k+WJjeeIhueCuOeKtuaAgVxuICAgKi9cbiAgdG9nZ2xlQ3lsaW5kZXIyRXhwbG9kZShleHBsb2RlKSB7XG4gICAgaWYgKCF0aGlzLmN5bGluZGVyMkV4cGxvZGVFZmZlY3QpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ3lsaW5kZXIyIGV4cGxvZGUgZWZmZWN0IG5vdCBpbml0aWFsaXplZCcpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcy5jeWxpbmRlcjJFeHBsb2RlRWZmZWN0LnRvZ2dsZShleHBsb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5ZjeWxpbmRlcjLniIbngrjnirbmgIFcbiAgICogQHJldHVybnMge2Jvb2xlYW59IOaYr+WQpuWkhOS6jueIhueCuOeKtuaAgVxuICAgKi9cbiAgaXNDeWxpbmRlcjJFeHBsb2RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jeWxpbmRlcjJFeHBsb2RlRWZmZWN0ID8gdGhpcy5jeWxpbmRlcjJFeHBsb2RlRWZmZWN0LmlzRXhwbG9kZWQoKSA6IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIh+aNouaXi+i9rOabsue6v+i/nuaOpeeIhueCuOaViOaenFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGV4cGxvZGUgLSDmmK/lkKbniIbngrjvvIzpu5jorqTkuLrliIfmjaLnirbmgIFcbiAgICogQHJldHVybnMge2Jvb2xlYW59IOW9k+WJjeeIhueCuOeKtuaAgVxuICAgKi9cbiAgdG9nZ2xlQ29ubmVjdGlvbkV4cGxvZGUoZXhwbG9kZSkge1xuICAgIGlmICghdGhpcy5yb3RhdGlvbkN1cnZlRXhwbG9kZUVmZmVjdCkge1xuICAgICAgY29uc29sZS53YXJuKCdSb3RhdGlvbkN1cnZlIGV4cGxvZGUgZWZmZWN0IG5vdCBpbml0aWFsaXplZCcpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcy5yb3RhdGlvbkN1cnZlRXhwbG9kZUVmZmVjdC50b2dnbGUoZXhwbG9kZSk7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5peL6L2s5puy57q/6L+e5o6l54iG54K454q25oCBXG4gICAqIEByZXR1cm5zIHtib29sZWFufSDmmK/lkKblpITkuo7niIbngrjnirbmgIFcbiAgICovXG4gIGlzQ29ubmVjdGlvbkV4cGxvZGVkKCkge1xuICAgIHJldHVybiB0aGlzLnJvdGF0aW9uQ3VydmVFeHBsb2RlRWZmZWN0ID8gdGhpcy5yb3RhdGlvbkN1cnZlRXhwbG9kZUVmZmVjdC5pc0V4cGxvZGVkKCkgOiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliIfmjaLotoXmpK3lnIblvaLnirbmuJDlj5jniIbngrjmlYjmnpxcbiAgICogQHBhcmFtIHtib29sZWFufSBleHBsb2RlIC0g5piv5ZCm54iG54K477yM6buY6K6k5Li65YiH5o2i54q25oCBXG4gICAqIEByZXR1cm5zIHtib29sZWFufSDlvZPliY3niIbngrjnirbmgIFcbiAgICovXG4gIHRvZ2dsZVN1cGVyZWxsaXBzZUV4cGxvZGUoZXhwbG9kZSkge1xuICAgIGlmICghdGhpcy5zdXBlcmVsbGlwc2VFeHBsb2RlRWZmZWN0KSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1N1cGVyZWxsaXBzZSBleHBsb2RlIGVmZmVjdCBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuc3VwZXJlbGxpcHNlRXhwbG9kZUVmZmVjdC50b2dnbGUoZXhwbG9kZSk7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W6LaF5qSt5ZyG5b2i54q25riQ5Y+Y54iG54K454q25oCBXG4gICAqIEByZXR1cm5zIHtib29sZWFufSDmmK/lkKblpITkuo7niIbngrjnirbmgIFcbiAgICovXG4gIGlzU3VwZXJlbGxpcHNlRXhwbG9kZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VwZXJlbGxpcHNlRXhwbG9kZUVmZmVjdCA/IHRoaXMuc3VwZXJlbGxpcHNlRXhwbG9kZUVmZmVjdC5pc0V4cGxvZGVkKCkgOiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blpJblo7Pnu4RcbiAgICovXG4gIGdldFNoZWxsKCkge1xuICAgIHJldHVybiB0aGlzLnNoZWxsR3JvdXA7XG4gIH1cblxuICAvKipcbiAgICog6K6+572u5aSW5aOz5Y+v6KeB5oCnXG4gICAqL1xuICBzZXRWaXNpYmxlKHZpc2libGUpIHtcbiAgICB0aGlzLnNoZWxsR3JvdXAudmlzaWJsZSA9IHZpc2libGU7XG4gIH1cblxuICAvKipcbiAgICog6K6+572u5aSW5aOz6YCP5piO5bqmXG4gICAqL1xuICBzZXRPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICAvLyDnq4vmlrnkvZPlpJblo7Plt7LliKDpmaTvvIzmraTmlrnms5XkuI3lho3mnInmlYhcbiAgICAvLyB0aGlzLnNoZWxsTWF0ZXJpYWwub3BhY2l0eSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG9wYWNpdHkpKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIOiuvue9ruWkluWjs+S9jee9rlxuICAgKi9cbiAgc2V0UG9zaXRpb24oeCwgeSwgeikge1xuICAgIHRoaXMuc2hlbGxHcm91cC5wb3NpdGlvbi5zZXQoeCwgeSwgeik7XG4gIH1cblxuICAvKipcbiAgICog6K6+572u56ys5LiA5Liq5ZyG5p+x5L2T5L2N572uXG4gICAqL1xuICBzZXRDeWxpbmRlcjFQb3NpdGlvbih4LCB5LCB6KSB7XG4gICAgaWYgKHRoaXMuY3lsaW5kZXIxKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMS5wb3NpdGlvbi5zZXQoeCwgeSwgeik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruesrOS6jOS4quWchuafseS9k+S9jee9rlxuICAgKi9cbiAgc2V0Q3lsaW5kZXIyUG9zaXRpb24oeCwgeSwgeikge1xuICAgIGlmICh0aGlzLmN5bGluZGVyMikge1xuICAgICAgdGhpcy5jeWxpbmRlcjIucG9zaXRpb24uc2V0KHgsIHksIHopO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blpJblo7PlvZPliY3kvY3nva5cbiAgICovXG4gIGdldFBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNoZWxsR3JvdXAucG9zaXRpb24uY2xvbmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDliqjnlLsgLSDlpJblo7Porr7nva7kuLrpnZnmgIHvvIzml6DliqjnlLvmlYjmnpxcbiAgICovXG4gIHVwZGF0ZShkZWx0YVRpbWUpIHtcbiAgICAvLyDlpJblo7Pkv53mjIHpnZnmgIHvvIzkuI3ov5vooYzku7vkvZXliqjnlLvmm7TmlrBcbiAgICAvLyDlpoLmnpzpnIDopoHliqjnlLvmlYjmnpzvvIzlj6/ku6XlnKjov5nph4zmt7vliqBcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDphY3nva4gLSDlrp7njrDlk43lupTlvI/phY3nva7mm7TmlrBcbiAgICovXG4gIHVwZGF0ZUNvbmZpZygpIHtcbiAgICAvLyDnq4vmlrnkvZPlpJblo7PmnZDotKjlt7LliKDpmaTvvIzkuI3lho3pnIDopoHmm7TmlrBcbiAgICAvLyBpZiAodGhpcy5zaGVsbE1hdGVyaWFsKSB7XG4gICAgLy8gICB0aGlzLnNoZWxsTWF0ZXJpYWwub3BhY2l0eSA9IENPTkZJRy5zaGVsbC5vcGFjaXR5O1xuICAgIC8vIH1cbiAgICBcbiAgICAvLyDmm7TmlrDnrKzkuIDkuKrlnIbmn7HkvZPphY3nva5cbiAgICBpZiAodGhpcy5jeWxpbmRlcjFNYXRlcmlhbCAmJiBDT05GSUcuc2hlbGwuY3lsaW5kZXIxKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMU1hdGVyaWFsLmNvbG9yLnNldEhleChwYXJzZUludChDT05GSUcuc2hlbGwuY3lsaW5kZXIxLmNvbG9yKSk7XG4gICAgICB0aGlzLmN5bGluZGVyMU1hdGVyaWFsLm9wYWNpdHkgPSBDT05GSUcuc2hlbGwuY3lsaW5kZXIxLm9wYWNpdHk7XG4gICAgfVxuICAgIGlmICh0aGlzLmN5bGluZGVyMSAmJiBDT05GSUcuc2hlbGwuY3lsaW5kZXIxKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMS52aXNpYmxlID0gQ09ORklHLnNoZWxsLmN5bGluZGVyMS52aXNpYmxlO1xuICAgICAgdGhpcy5jeWxpbmRlcjEucG9zaXRpb24uc2V0KFxuICAgICAgICBDT05GSUcuc2hlbGwuY3lsaW5kZXIxLnBvc2l0aW9uLngsXG4gICAgICAgIENPTkZJRy5zaGVsbC5jeWxpbmRlcjEucG9zaXRpb24ueSxcbiAgICAgICAgQ09ORklHLnNoZWxsLmN5bGluZGVyMS5wb3NpdGlvbi56XG4gICAgICApO1xuICAgICAgdGhpcy5jeWxpbmRlcjEucm90YXRpb24uc2V0KFxuICAgICAgICBDT05GSUcuc2hlbGwuY3lsaW5kZXIxLnJvdGF0aW9uLngsXG4gICAgICAgIENPTkZJRy5zaGVsbC5jeWxpbmRlcjEucm90YXRpb24ueSxcbiAgICAgICAgQ09ORklHLnNoZWxsLmN5bGluZGVyMS5yb3RhdGlvbi56XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDnrKzkuozkuKrlnIbmn7HkvZPphY3nva5cbiAgICBpZiAodGhpcy5jeWxpbmRlcjJNYXRlcmlhbCAmJiBDT05GSUcuc2hlbGwuY3lsaW5kZXIyKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMk1hdGVyaWFsLmNvbG9yLnNldEhleChwYXJzZUludChDT05GSUcuc2hlbGwuY3lsaW5kZXIyLmNvbG9yKSk7XG4gICAgICB0aGlzLmN5bGluZGVyMk1hdGVyaWFsLm9wYWNpdHkgPSBDT05GSUcuc2hlbGwuY3lsaW5kZXIyLm9wYWNpdHk7XG4gICAgfVxuICAgIGlmICh0aGlzLmN5bGluZGVyMiAmJiBDT05GSUcuc2hlbGwuY3lsaW5kZXIyKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMi52aXNpYmxlID0gQ09ORklHLnNoZWxsLmN5bGluZGVyMi52aXNpYmxlO1xuICAgICAgdGhpcy5jeWxpbmRlcjIucG9zaXRpb24uc2V0KFxuICAgICAgICBDT05GSUcuc2hlbGwuY3lsaW5kZXIyLnBvc2l0aW9uLngsXG4gICAgICAgIENPTkZJRy5zaGVsbC5jeWxpbmRlcjIucG9zaXRpb24ueSxcbiAgICAgICAgQ09ORklHLnNoZWxsLmN5bGluZGVyMi5wb3NpdGlvbi56XG4gICAgICApO1xuICAgICAgdGhpcy5jeWxpbmRlcjIucm90YXRpb24uc2V0KFxuICAgICAgICBDT05GSUcuc2hlbGwuY3lsaW5kZXIyLnJvdGF0aW9uLngsXG4gICAgICAgIENPTkZJRy5zaGVsbC5jeWxpbmRlcjIucm90YXRpb24ueSxcbiAgICAgICAgQ09ORklHLnNoZWxsLmN5bGluZGVyMi5yb3RhdGlvbi56XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDml4vovazmm7Lnur/ov57mjqXphY3nva5cbiAgICBpZiAodGhpcy5jeWxpbmRlckNvbm5lY3Rpb24gJiYgQ09ORklHLnNoZWxsLnJvdGF0aW9uQ3VydmVDb25uZWN0aW9uKSB7XG4gICAgICB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbi51cGRhdGVDb25maWcoXG4gICAgICAgIENPTkZJRy5zaGVsbC5jeWxpbmRlcjEsXG4gICAgICAgIENPTkZJRy5zaGVsbC5jeWxpbmRlcjIsXG4gICAgICAgIENPTkZJRy5zaGVsbC5yb3RhdGlvbkN1cnZlQ29ubmVjdGlvblxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmN5bGluZGVyQ29ubmVjdGlvbiAmJiBDT05GSUcuc2hlbGwucm90YXRpb25DdXJ2ZUNvbm5lY3Rpb24/LnZpc2libGUpIHtcbiAgICAgIC8vIOWmguaenOi/nuaOpeS4jeWtmOWcqOS9humFjee9ruS4reimgeaxguaYvuekuu+8jOWImeWIm+W7uui/nuaOpVxuICAgICAgdGhpcy5jcmVhdGVSb3RhdGlvbkN1cnZlQ29ubmVjdGlvbigpO1xuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDotoXmpK3lnIblvaLnirbmuJDlj5jphY3nva5cbiAgICBpZiAodGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uICYmIENPTkZJRy5zaGVsbC5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uKSB7XG4gICAgICBjb25zdCBzdGFydENvbmZpZyA9IHtcbiAgICAgICAgcG9zaXRpb246IENPTkZJRy5zaGVsbC5jeWxpbmRlcjEucG9zaXRpb24sXG4gICAgICAgIHJhZGl1czogQ09ORklHLnNoZWxsLmN5bGluZGVyMS5yYWRpdXNcbiAgICAgIH07XG4gICAgICBjb25zdCBlbmRDb25maWcgPSB7XG4gICAgICAgIHBvc2l0aW9uOiB7IHg6IDQuNSwgeTogMCwgejogMCB9LFxuICAgICAgICBzaXplOiB7XG4gICAgICAgICAgd2lkdGg6IENPTkZJRy5jb21wb25lbnRzLnNjcmVlbi53aWR0aCwgICAvLyDojaflhYnlsY/lrr3luqbvvJo0XG4gICAgICAgICAgaGVpZ2h0OiBDT05GSUcuY29tcG9uZW50cy5zY3JlZW4uaGVpZ2h0LCAvLyDojaflhYnlsY/pq5jluqbvvJozXG4gICAgICAgICAgZGVwdGg6IENPTkZJRy5zaGVsbC5zaXplLmRlcHRoICAgICAgICAgICAvLyDkv53mjIHljp/mt7HluqbvvJo0XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24udXBkYXRlQ29uZmlnKFxuICAgICAgICBzdGFydENvbmZpZyxcbiAgICAgICAgZW5kQ29uZmlnLFxuICAgICAgICBDT05GSUcuc2hlbGwuc3VwZXJlbGxpcHNlVHJhbnNpdGlvblxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24gJiYgQ09ORklHLnNoZWxsLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24/LnZpc2libGUpIHtcbiAgICAgIC8vIOWmguaenOW9oueKtua4kOWPmOS4jeWtmOWcqOS9humFjee9ruS4reimgeaxguaYvuekuu+8jOWImeWIm+W7uua4kOWPmFxuICAgICAgdGhpcy5jcmVhdGVTdXBlcmVsbGlwc2VUcmFuc2l0aW9uKCk7XG4gICAgfVxuICAgIFxuICAgIC8vIOabtOaWsOWPr+ingeaAp1xuICAgIHRoaXMuc2hlbGxHcm91cC52aXNpYmxlID0gQ09ORklHLnNoZWxsLnZpc2libGU7XG4gIH1cblxuICAvKipcbiAgICog6K6+572u56ys5LiA5Liq5ZyG5p+x5L2T5peL6L2sXG4gICAqL1xuICBzZXRDeWxpbmRlcjFSb3RhdGlvbih4LCB5LCB6KSB7XG4gICAgaWYgKHRoaXMuY3lsaW5kZXIxKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMS5yb3RhdGlvbi5zZXQoeCwgeSwgeik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruesrOS6jOS4quWchuafseS9k+aXi+i9rFxuICAgKi9cbiAgc2V0Q3lsaW5kZXIyUm90YXRpb24oeCwgeSwgeikge1xuICAgIGlmICh0aGlzLmN5bGluZGVyMikge1xuICAgICAgdGhpcy5jeWxpbmRlcjIucm90YXRpb24uc2V0KHgsIHksIHopO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bnrKzkuIDkuKrlnIbmn7HkvZPlvZPliY3ml4vovaxcbiAgICovXG4gIGdldEN5bGluZGVyMVJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmN5bGluZGVyMSA/IHRoaXMuY3lsaW5kZXIxLnJvdGF0aW9uLmNsb25lKCkgOiBuZXcgVEhSRUUuRXVsZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bnrKzkuozkuKrlnIbmn7HkvZPlvZPliY3ml4vovaxcbiAgICovXG4gIGdldEN5bGluZGVyMlJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmN5bGluZGVyMiA/IHRoaXMuY3lsaW5kZXIyLnJvdGF0aW9uLmNsb25lKCkgOiBuZXcgVEhSRUUuRXVsZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva7nrKzkuIDkuKrlnIbmn7HkvZPlj6/op4HmgKdcbiAgICovXG4gIHNldEN5bGluZGVyMVZpc2libGUodmlzaWJsZSkge1xuICAgIGlmICh0aGlzLmN5bGluZGVyMSkge1xuICAgICAgdGhpcy5jeWxpbmRlcjEudmlzaWJsZSA9IHZpc2libGU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruesrOS6jOS4quWchuafseS9k+WPr+ingeaAp1xuICAgKi9cbiAgc2V0Q3lsaW5kZXIyVmlzaWJsZSh2aXNpYmxlKSB7XG4gICAgaWYgKHRoaXMuY3lsaW5kZXIyKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMi52aXNpYmxlID0gdmlzaWJsZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6K6+572u56ys5LiA5Liq5ZyG5p+x5L2T6aKc6ImyXG4gICAqL1xuICBzZXRDeWxpbmRlcjFDb2xvcihjb2xvcikge1xuICAgIGlmICh0aGlzLmN5bGluZGVyMU1hdGVyaWFsKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMU1hdGVyaWFsLmNvbG9yLnNldEhleChjb2xvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruesrOS6jOS4quWchuafseS9k+minOiJslxuICAgKi9cbiAgc2V0Q3lsaW5kZXIyQ29sb3IoY29sb3IpIHtcbiAgICBpZiAodGhpcy5jeWxpbmRlcjJNYXRlcmlhbCkge1xuICAgICAgdGhpcy5jeWxpbmRlcjJNYXRlcmlhbC5jb2xvci5zZXRIZXgoY29sb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva7nrKzkuIDkuKrlnIbmn7HkvZPpgI/mmI7luqZcbiAgICovXG4gIHNldEN5bGluZGVyMU9wYWNpdHkob3BhY2l0eSkge1xuICAgIGlmICh0aGlzLmN5bGluZGVyMU1hdGVyaWFsKSB7XG4gICAgICB0aGlzLmN5bGluZGVyMU1hdGVyaWFsLm9wYWNpdHkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBvcGFjaXR5KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruesrOS6jOS4quWchuafseS9k+mAj+aYjuW6plxuICAgKi9cbiAgc2V0Q3lsaW5kZXIyT3BhY2l0eShvcGFjaXR5KSB7XG4gICAgaWYgKHRoaXMuY3lsaW5kZXIyTWF0ZXJpYWwpIHtcbiAgICAgIHRoaXMuY3lsaW5kZXIyTWF0ZXJpYWwub3BhY2l0eSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG9wYWNpdHkpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6K6+572u5peL6L2s5puy57q/6L+e5o6l55qE5L2N572u5YGP56e7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWOi9tOWBj+enu1xuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFnovbTlgY/np7tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHogLSBa6L205YGP56e7XG4gICAqL1xuICBzZXRDb25uZWN0aW9uUG9zaXRpb25PZmZzZXQoeCwgeSwgeikge1xuICAgIGlmICh0aGlzLmN5bGluZGVyQ29ubmVjdGlvbikge1xuICAgICAgdGhpcy5jeWxpbmRlckNvbm5lY3Rpb24uc2V0UG9zaXRpb25PZmZzZXQoeCwgeSwgeik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruaXi+i9rOabsue6v+i/nuaOpeeahOaXi+i9rOWBj+enu1xuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFjovbTml4vovazlgY/np7vvvIjlvKfluqbvvIlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZ6L205peL6L2s5YGP56e777yI5byn5bqm77yJXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gWui9tOaXi+i9rOWBj+enu++8iOW8p+W6pu+8iVxuICAgKi9cbiAgc2V0Q29ubmVjdGlvblJvdGF0aW9uT2Zmc2V0KHgsIHksIHopIHtcbiAgICBpZiAodGhpcy5jeWxpbmRlckNvbm5lY3Rpb24pIHtcbiAgICAgIHRoaXMuY3lsaW5kZXJDb25uZWN0aW9uLnNldFJvdGF0aW9uT2Zmc2V0KHgsIHksIHopO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnm7TmjqXorr7nva7ml4vovazmm7Lnur/ov57mjqXnmoTkvY3nva5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBY5Z2Q5qCHXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWeWdkOagh1xuICAgKiBAcGFyYW0ge251bWJlcn0geiAtIFrlnZDmoIdcbiAgICovXG4gIHNldENvbm5lY3Rpb25Qb3NpdGlvbih4LCB5LCB6KSB7XG4gICAgaWYgKHRoaXMuY3lsaW5kZXJDb25uZWN0aW9uKSB7XG4gICAgICB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbi5zZXRQb3NpdGlvbih4LCB5LCB6KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog55u05o6l6K6+572u5peL6L2s5puy57q/6L+e5o6l55qE5peL6L2sXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWOi9tOaXi+i9rO+8iOW8p+W6pu+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFnovbTml4vovazvvIjlvKfluqbvvIlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHogLSBa6L205peL6L2s77yI5byn5bqm77yJXG4gICAqL1xuICBzZXRDb25uZWN0aW9uUm90YXRpb24oeCwgeSwgeikge1xuICAgIGlmICh0aGlzLmN5bGluZGVyQ29ubmVjdGlvbikge1xuICAgICAgdGhpcy5jeWxpbmRlckNvbm5lY3Rpb24uc2V0Um90YXRpb24oeCwgeSwgeik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPluaXi+i9rOabsue6v+i/nuaOpeeahOW9k+WJjeS9jee9rlxuICAgKi9cbiAgZ2V0Q29ubmVjdGlvblBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbiA/IHRoaXMuY3lsaW5kZXJDb25uZWN0aW9uLmdldFBvc2l0aW9uKCkgOiBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPluaXi+i9rOabsue6v+i/nuaOpeeahOW9k+WJjeaXi+i9rFxuICAgKi9cbiAgZ2V0Q29ubmVjdGlvblJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbiA/IHRoaXMuY3lsaW5kZXJDb25uZWN0aW9uLmdldFJvdGF0aW9uKCkgOiBuZXcgVEhSRUUuRXVsZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bml4vovazmm7Lnur/ov57mjqXnmoTkvY3nva7lgY/np7tcbiAgICovXG4gIGdldENvbm5lY3Rpb25Qb3NpdGlvbk9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jeWxpbmRlckNvbm5lY3Rpb24gPyB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbi5nZXRQb3NpdGlvbk9mZnNldCgpIDogeyB4OiAwLCB5OiAwLCB6OiAwIH07XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5peL6L2s5puy57q/6L+e5o6l55qE5peL6L2s5YGP56e7XG4gICAqL1xuICBnZXRDb25uZWN0aW9uUm90YXRpb25PZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3lsaW5kZXJDb25uZWN0aW9uID8gdGhpcy5jeWxpbmRlckNvbm5lY3Rpb24uZ2V0Um90YXRpb25PZmZzZXQoKSA6IHsgeDogMCwgeTogMCwgejogMCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruaXi+i9rOabsue6v+i/nuaOpeWPr+ingeaAp1xuICAgKi9cbiAgc2V0Q29ubmVjdGlvblZpc2libGUodmlzaWJsZSkge1xuICAgIGlmICh0aGlzLmN5bGluZGVyQ29ubmVjdGlvbikge1xuICAgICAgdGhpcy5jeWxpbmRlckNvbm5lY3Rpb24uc2V0VmlzaWJsZSh2aXNpYmxlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6K6+572u5peL6L2s5puy57q/6L+e5o6l6aKc6ImyXG4gICAqL1xuICBzZXRDb25uZWN0aW9uQ29sb3IoY29sb3IpIHtcbiAgICBpZiAodGhpcy5jeWxpbmRlckNvbm5lY3Rpb24pIHtcbiAgICAgIHRoaXMuY3lsaW5kZXJDb25uZWN0aW9uLnNldENvbG9yKGNvbG9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6K6+572u5peL6L2s5puy57q/6L+e5o6l6YCP5piO5bqmXG4gICAqL1xuICBzZXRDb25uZWN0aW9uT3BhY2l0eShvcGFjaXR5KSB7XG4gICAgaWYgKHRoaXMuY3lsaW5kZXJDb25uZWN0aW9uKSB7XG4gICAgICB0aGlzLmN5bGluZGVyQ29ubmVjdGlvbi5zZXRPcGFjaXR5KG9wYWNpdHkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva7otoXmpK3lnIblvaLnirbmuJDlj5jnmoTkvY3nva7lgY/np7tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBY6L205YGP56e7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWei9tOWBj+enu1xuICAgKiBAcGFyYW0ge251bWJlcn0geiAtIFrovbTlgY/np7tcbiAgICovXG4gIHNldFRyYW5zaXRpb25Qb3NpdGlvbk9mZnNldCh4LCB5LCB6KSB7XG4gICAgaWYgKHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbikge1xuICAgICAgdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uLnNldFBvc2l0aW9uT2Zmc2V0KHgsIHksIHopO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva7otoXmpK3lnIblvaLnirbmuJDlj5jnmoTml4vovazlgY/np7tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBY6L205peL6L2s5YGP56e777yI5byn5bqm77yJXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWei9tOaXi+i9rOWBj+enu++8iOW8p+W6pu+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0geiAtIFrovbTml4vovazlgY/np7vvvIjlvKfluqbvvIlcbiAgICovXG4gIHNldFRyYW5zaXRpb25Sb3RhdGlvbk9mZnNldCh4LCB5LCB6KSB7XG4gICAgaWYgKHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbikge1xuICAgICAgdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uLnNldFJvdGF0aW9uT2Zmc2V0KHgsIHksIHopO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnm7TmjqXorr7nva7otoXmpK3lnIblvaLnirbmuJDlj5jnmoTkvY3nva5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBY5Z2Q5qCHXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWeWdkOagh1xuICAgKiBAcGFyYW0ge251bWJlcn0geiAtIFrlnZDmoIdcbiAgICovXG4gIHNldFRyYW5zaXRpb25Qb3NpdGlvbih4LCB5LCB6KSB7XG4gICAgaWYgKHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbikge1xuICAgICAgdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uLnNldFBvc2l0aW9uKHgsIHksIHopO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnm7TmjqXorr7nva7otoXmpK3lnIblvaLnirbmuJDlj5jnmoTml4vovaxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBY6L205peL6L2s77yI5byn5bqm77yJXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWei9tOaXi+i9rO+8iOW8p+W6pu+8iVxuICAgKiBAcGFyYW0ge251bWJlcn0geiAtIFrovbTml4vovazvvIjlvKfluqbvvIlcbiAgICovXG4gIHNldFRyYW5zaXRpb25Sb3RhdGlvbih4LCB5LCB6KSB7XG4gICAgaWYgKHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbikge1xuICAgICAgdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uLnNldFJvdGF0aW9uKHgsIHksIHopO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5botoXmpK3lnIblvaLnirbmuJDlj5jnmoTlvZPliY3kvY3nva5cbiAgICovXG4gIGdldFRyYW5zaXRpb25Qb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uID8gdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uLmdldFBvc2l0aW9uKCkgOiBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPlui2heakreWchuW9oueKtua4kOWPmOeahOW9k+WJjeaXi+i9rFxuICAgKi9cbiAgZ2V0VHJhbnNpdGlvblJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24gPyB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24uZ2V0Um90YXRpb24oKSA6IG5ldyBUSFJFRS5FdWxlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPlui2heakreWchuW9oueKtua4kOWPmOeahOS9jee9ruWBj+enu1xuICAgKi9cbiAgZ2V0VHJhbnNpdGlvblBvc2l0aW9uT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24gPyB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24uZ2V0UG9zaXRpb25PZmZzZXQoKSA6IHsgeDogMCwgeTogMCwgejogMCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPlui2heakreWchuW9oueKtua4kOWPmOeahOaXi+i9rOWBj+enu1xuICAgKi9cbiAgZ2V0VHJhbnNpdGlvblJvdGF0aW9uT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24gPyB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24uZ2V0Um90YXRpb25PZmZzZXQoKSA6IHsgeDogMCwgeTogMCwgejogMCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9rui2heakreWchuW9oueKtua4kOWPmOWPr+ingeaAp1xuICAgKi9cbiAgc2V0VHJhbnNpdGlvblZpc2libGUodmlzaWJsZSkge1xuICAgIGlmICh0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbi5zZXRWaXNpYmxlKHZpc2libGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva7otoXmpK3lnIblvaLnirbmuJDlj5jpopzoibJcbiAgICovXG4gIHNldFRyYW5zaXRpb25Db2xvcihjb2xvcikge1xuICAgIGlmICh0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbi5zZXRDb2xvcihjb2xvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9rui2heakreWchuW9oueKtua4kOWPmOmAj+aYjuW6plxuICAgKi9cbiAgc2V0VHJhbnNpdGlvbk9wYWNpdHkob3BhY2l0eSkge1xuICAgIGlmICh0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbi5zZXRPcGFjaXR5KG9wYWNpdHkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDliqjmgIHmm7TmlrDotoXmpK3lnIbmjIfmlbDvvIjnlKjkuo7liqjnlLvmlYjmnpzvvIlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0RXhwb25lbnQgLSDotbflp4vmjIfmlbDvvIjlnIblvaLvvJoyLjDvvIlcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZEV4cG9uZW50IC0g57uT5p2f5oyH5pWw77yI5pa55b2i77yaOC4wK++8iVxuICAgKi9cbiAgdXBkYXRlVHJhbnNpdGlvbkV4cG9uZW50cyhzdGFydEV4cG9uZW50LCBlbmRFeHBvbmVudCkge1xuICAgIGlmICh0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuc3VwZXJlbGxpcHNlVHJhbnNpdGlvbi51cGRhdGVFeHBvbmVudHMoc3RhcnRFeHBvbmVudCwgZW5kRXhwb25lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDplIDmr4HotYTmupBcbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgLy8g56uL5pa55L2T5aSW5aOz5p2Q6LSo5bey5Yig6Zmk77yM5LiN6ZyA6KaB5riF55CGXG4gICAgLy8gaWYgKHRoaXMuc2hlbGxNYXRlcmlhbCkge1xuICAgIC8vICAgdGhpcy5zaGVsbE1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgICAvLyB9XG4gICAgXG4gICAgaWYgKHRoaXMuY3lsaW5kZXIxTWF0ZXJpYWwpIHtcbiAgICAgIHRoaXMuY3lsaW5kZXIxTWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgIH1cbiAgICBcbiAgICBpZiAodGhpcy5jeWxpbmRlcjJNYXRlcmlhbCkge1xuICAgICAgdGhpcy5jeWxpbmRlcjJNYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIFxuICAgIC8vIOa4heeQhuaXi+i9rOabsue6v+i/nuaOpVxuICAgIGlmICh0aGlzLmN5bGluZGVyQ29ubmVjdGlvbikge1xuICAgICAgdGhpcy5jeWxpbmRlckNvbm5lY3Rpb24uZGlzcG9zZSgpO1xuICAgICAgdGhpcy5jeWxpbmRlckNvbm5lY3Rpb24gPSBudWxsO1xuICAgIH1cbiAgICBcbiAgICAvLyDmuIXnkIbotoXmpK3lnIblvaLnirbmuJDlj5hcbiAgICBpZiAodGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLnN1cGVyZWxsaXBzZVRyYW5zaXRpb24uZGlzcG9zZSgpO1xuICAgICAgdGhpcy5zdXBlcmVsbGlwc2VUcmFuc2l0aW9uID0gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgLy8g5riF55CGY3lsaW5kZXIy54iG54K45pWI5p6cXG4gICAgaWYgKHRoaXMuY3lsaW5kZXIyRXhwbG9kZUVmZmVjdCkge1xuICAgICAgdGhpcy5jeWxpbmRlcjJFeHBsb2RlRWZmZWN0LmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuY3lsaW5kZXIyRXhwbG9kZUVmZmVjdCA9IG51bGw7XG4gICAgfVxuICAgIFxuICAgIC8vIOa4heeQhuaXi+i9rOabsue6v+i/nuaOpeeIhueCuOaViOaenFxuICAgIGlmICh0aGlzLnJvdGF0aW9uQ3VydmVFeHBsb2RlRWZmZWN0KSB7XG4gICAgICB0aGlzLnJvdGF0aW9uQ3VydmVFeHBsb2RlRWZmZWN0LmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMucm90YXRpb25DdXJ2ZUV4cGxvZGVFZmZlY3QgPSBudWxsO1xuICAgIH1cbiAgICBcbiAgICAvLyDmuIXnkIbotoXmpK3lnIblvaLnirbmuJDlj5jniIbngrjmlYjmnpxcbiAgICBpZiAodGhpcy5zdXBlcmVsbGlwc2VFeHBsb2RlRWZmZWN0KSB7XG4gICAgICB0aGlzLnN1cGVyZWxsaXBzZUV4cGxvZGVFZmZlY3QuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5zdXBlcmVsbGlwc2VFeHBsb2RlRWZmZWN0ID0gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5zaGVsbEdyb3VwLnRyYXZlcnNlKChjaGlsZCkgPT4ge1xuICAgICAgaWYgKGNoaWxkLmdlb21ldHJ5KSBjaGlsZC5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgICBpZiAoY2hpbGQubWF0ZXJpYWwpIGNoaWxkLm1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyDmuIXnkIblnIbmn7HkvZPlvJXnlKhcbiAgICB0aGlzLmN5bGluZGVyMSA9IG51bGw7XG4gICAgdGhpcy5jeWxpbmRlcjIgPSBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gJy4uL2NvbmZpZ0xvYWRlcic7XHJcblxyXG4vKipcclxuICog5p2Q6LSo566h55CG5Zmo57G7XHJcbiAqIOi0n+i0o+WIm+W7uuWSjOeuoeeQhuaJgOaciTNE5p2Q6LSo77yM5YyF5ous6LS05Zu+5Yqg6L29XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWF0ZXJpYWxNYW5hZ2VyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMudGV4dHVyZUxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCk7XHJcbiAgICB0aGlzLm1hdGVyaWFscyA9IHt9O1xyXG4gICAgdGhpcy50ZXh0dXJlcyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyW5omA5pyJ5p2Q6LSoXHJcbiAgICogQHJldHVybnMge1Byb21pc2V9IOi/lOWbnlByb21pc2XvvIzlnKjmiYDmnInotLTlm77liqDovb3lrozmiJDlkI7op6PmnpBcclxuICAgKi9cclxuICBhc3luYyBpbml0aWFsaXplTWF0ZXJpYWxzKCkge1xyXG4gICAgY29uc29sZS5sb2coJ+ato+WcqOWIneWni+WMluadkOi0qC4uLicpO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyDliqDovb3ph5HlsZ7otLTlm75cclxuICAgICAgYXdhaXQgdGhpcy5sb2FkTWV0YWxUZXh0dXJlcygpO1xyXG4gICAgICBcclxuICAgICAgLy8g5Yib5bu65omA5pyJ5p2Q6LSoXHJcbiAgICAgIHRoaXMuY3JlYXRlTWV0YWxNYXRlcmlhbCgpO1xyXG4gICAgICB0aGlzLmNyZWF0ZVBsYXRlTWF0ZXJpYWwoKTtcclxuICAgICAgdGhpcy5jcmVhdGVTY3JlZW5NYXRlcmlhbCgpO1xyXG4gICAgICB0aGlzLmNyZWF0ZUdsb3dQb2ludE1hdGVyaWFsKCk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmxvZygn5p2Q6LSo5Yid5aeL5YyW5a6M5oiQJyk7XHJcbiAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFscztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+adkOi0qOWIneWni+WMluWksei0pTonLCBlcnJvcik7XHJcbiAgICAgIC8vIOWmguaenOi0tOWbvuWKoOi9veWksei0pe+8jOWIm+W7uuaXoOi0tOWbvueahOadkOi0qFxyXG4gICAgICB0aGlzLmNyZWF0ZUZhbGxiYWNrTWF0ZXJpYWxzKCk7XHJcbiAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFscztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWKoOi9vemHkeWxnui0tOWbvlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSDotLTlm77liqDovb1Qcm9taXNlXHJcbiAgICovXHJcbiAgYXN5bmMgbG9hZE1ldGFsVGV4dHVyZXMoKSB7XHJcbiAgICBjb25zdCBsb2FkUHJvbWlzZXMgPSBbXTtcclxuICAgIFxyXG4gICAgLy8g5Yqg6L2955S15a2Q5p6q6YeR5bGe6LS05Zu+XHJcbiAgICBjb25zdCBtZXRhbENvbmZpZyA9IENPTkZJRy5tYXRlcmlhbHMubWV0YWw7XHJcbiAgICBpZiAobWV0YWxDb25maWcudGV4dHVyZXMpIHtcclxuICAgICAgaWYgKG1ldGFsQ29uZmlnLnRleHR1cmVzLm1hcCkge1xyXG4gICAgICAgIGxvYWRQcm9taXNlcy5wdXNoKHRoaXMubG9hZFRleHR1cmUoJ21ldGFsTWFwJywgbWV0YWxDb25maWcudGV4dHVyZXMubWFwKSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChtZXRhbENvbmZpZy50ZXh0dXJlcy5ub3JtYWxNYXApIHtcclxuICAgICAgICBsb2FkUHJvbWlzZXMucHVzaCh0aGlzLmxvYWRUZXh0dXJlKCdtZXRhbE5vcm1hbCcsIG1ldGFsQ29uZmlnLnRleHR1cmVzLm5vcm1hbE1hcCkpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAobWV0YWxDb25maWcudGV4dHVyZXMucm91Z2huZXNzTWFwKSB7XHJcbiAgICAgICAgbG9hZFByb21pc2VzLnB1c2godGhpcy5sb2FkVGV4dHVyZSgnbWV0YWxSb3VnaG5lc3MnLCBtZXRhbENvbmZpZy50ZXh0dXJlcy5yb3VnaG5lc3NNYXApKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKG1ldGFsQ29uZmlnLnRleHR1cmVzLm1ldGFsbmVzc01hcCkge1xyXG4gICAgICAgIGxvYWRQcm9taXNlcy5wdXNoKHRoaXMubG9hZFRleHR1cmUoJ21ldGFsTWV0YWxuZXNzJywgbWV0YWxDb25maWcudGV4dHVyZXMubWV0YWxuZXNzTWFwKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5Yqg6L295YGP6L2s5p2/6LS05Zu+XHJcbiAgICBjb25zdCBwbGF0ZUNvbmZpZyA9IENPTkZJRy5tYXRlcmlhbHMucGxhdGU7XHJcbiAgICBpZiAocGxhdGVDb25maWcudGV4dHVyZXMpIHtcclxuICAgICAgaWYgKHBsYXRlQ29uZmlnLnRleHR1cmVzLm1hcCkge1xyXG4gICAgICAgIGxvYWRQcm9taXNlcy5wdXNoKHRoaXMubG9hZFRleHR1cmUoJ3BsYXRlTWFwJywgcGxhdGVDb25maWcudGV4dHVyZXMubWFwKSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChwbGF0ZUNvbmZpZy50ZXh0dXJlcy5ub3JtYWxNYXApIHtcclxuICAgICAgICBsb2FkUHJvbWlzZXMucHVzaCh0aGlzLmxvYWRUZXh0dXJlKCdwbGF0ZU5vcm1hbCcsIHBsYXRlQ29uZmlnLnRleHR1cmVzLm5vcm1hbE1hcCkpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAocGxhdGVDb25maWcudGV4dHVyZXMucm91Z2huZXNzTWFwKSB7XHJcbiAgICAgICAgbG9hZFByb21pc2VzLnB1c2godGhpcy5sb2FkVGV4dHVyZSgncGxhdGVSb3VnaG5lc3MnLCBwbGF0ZUNvbmZpZy50ZXh0dXJlcy5yb3VnaG5lc3NNYXApKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKHBsYXRlQ29uZmlnLnRleHR1cmVzLm1ldGFsbmVzc01hcCkge1xyXG4gICAgICAgIGxvYWRQcm9taXNlcy5wdXNoKHRoaXMubG9hZFRleHR1cmUoJ3BsYXRlTWV0YWxuZXNzJywgcGxhdGVDb25maWcudGV4dHVyZXMubWV0YWxuZXNzTWFwKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwobG9hZFByb21pc2VzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWKoOi9veWNleS4qui0tOWbvlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6LS05Zu+5ZCN56ewXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSDotLTlm77ot6/lvoRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g6LS05Zu+5Yqg6L29UHJvbWlzZVxyXG4gICAqL1xyXG4gIGxvYWRUZXh0dXJlKG5hbWUsIHBhdGgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMudGV4dHVyZUxvYWRlci5sb2FkKFxyXG4gICAgICAgIHBhdGgsXHJcbiAgICAgICAgKHRleHR1cmUpID0+IHtcclxuICAgICAgICAgIC8vIOiuvue9rui0tOWbvuWPguaVsFxyXG4gICAgICAgICAgdGV4dHVyZS53cmFwUyA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xyXG4gICAgICAgICAgdGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xyXG4gICAgICAgICAgdGV4dHVyZS5mbGlwWSA9IGZhbHNlO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB0aGlzLnRleHR1cmVzW25hbWVdID0gdGV4dHVyZTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGDotLTlm77liqDovb3miJDlip86ICR7bmFtZX0gKCR7cGF0aH0pYCk7XHJcbiAgICAgICAgICByZXNvbHZlKHRleHR1cmUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKHByb2dyZXNzKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhg6LS05Zu+5Yqg6L296L+b5bqmOiAke25hbWV9IC0gJHsocHJvZ3Jlc3MubG9hZGVkIC8gcHJvZ3Jlc3MudG90YWwgKiAxMDApfSVgKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKGDotLTlm77liqDovb3lpLHotKU6ICR7bmFtZX0gKCR7cGF0aH0pYCwgZXJyb3IpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uumHkeWxnuadkOi0qO+8iOeUteWtkOaequ+8iVxyXG4gICAqL1xyXG4gIGNyZWF0ZU1ldGFsTWF0ZXJpYWwoKSB7XHJcbiAgICBjb25zdCBtZXRhbENvbmZpZyA9IENPTkZJRy5tYXRlcmlhbHMubWV0YWw7XHJcbiAgICBcclxuICAgIGNvbnN0IG1hdGVyaWFsUHJvcHMgPSB7XHJcbiAgICAgIGNvbG9yOiBuZXcgVEhSRUUuQ29sb3IobWV0YWxDb25maWcuY29sb3IpLFxyXG4gICAgICBtZXRhbG5lc3M6IG1ldGFsQ29uZmlnLm1ldGFsbmVzcyxcclxuICAgICAgcm91Z2huZXNzOiBtZXRhbENvbmZpZy5yb3VnaG5lc3MsXHJcbiAgICAgIGVudk1hcEludGVuc2l0eTogMS4wXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIOWmguaenOaciei0tOWbvu+8jOa3u+WKoOWIsOadkOi0qFxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMubWV0YWxNYXApIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5tYXAgPSB0aGlzLnRleHR1cmVzLm1ldGFsTWFwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodGhpcy50ZXh0dXJlcy5tZXRhbE5vcm1hbCkge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm5vcm1hbE1hcCA9IHRoaXMudGV4dHVyZXMubWV0YWxOb3JtYWw7XHJcbiAgICAgIG1hdGVyaWFsUHJvcHMubm9ybWFsU2NhbGUgPSBuZXcgVEhSRUUuVmVjdG9yMigxLCAxKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMubWV0YWxSb3VnaG5lc3MpIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5yb3VnaG5lc3NNYXAgPSB0aGlzLnRleHR1cmVzLm1ldGFsUm91Z2huZXNzO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodGhpcy50ZXh0dXJlcy5tZXRhbE1ldGFsbmVzcykge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm1ldGFsbmVzc01hcCA9IHRoaXMudGV4dHVyZXMubWV0YWxNZXRhbG5lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5tYXRlcmlhbHMubWV0YWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwobWF0ZXJpYWxQcm9wcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rlgY/ovazmnb/mnZDotKhcclxuICAgKi9cclxuICBjcmVhdGVQbGF0ZU1hdGVyaWFsKCkge1xyXG4gICAgY29uc3QgcGxhdGVDb25maWcgPSBDT05GSUcubWF0ZXJpYWxzLnBsYXRlO1xyXG4gICAgXHJcbiAgICBjb25zdCBtYXRlcmlhbFByb3BzID0ge1xyXG4gICAgICBjb2xvcjogbmV3IFRIUkVFLkNvbG9yKHBsYXRlQ29uZmlnLmNvbG9yKSxcclxuICAgICAgbWV0YWxuZXNzOiBwbGF0ZUNvbmZpZy5tZXRhbG5lc3MsXHJcbiAgICAgIHJvdWdobmVzczogcGxhdGVDb25maWcucm91Z2huZXNzLFxyXG4gICAgICBlbnZNYXBJbnRlbnNpdHk6IDEuMCAgLy8g5LiO55S15a2Q5p6q5L+d5oyB5LiA6Ie0XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIOWmguaenOaciei0tOWbvu+8jOa3u+WKoOWIsOadkOi0qFxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMucGxhdGVNYXApIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5tYXAgPSB0aGlzLnRleHR1cmVzLnBsYXRlTWFwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodGhpcy50ZXh0dXJlcy5wbGF0ZU5vcm1hbCkge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm5vcm1hbE1hcCA9IHRoaXMudGV4dHVyZXMucGxhdGVOb3JtYWw7XHJcbiAgICAgIG1hdGVyaWFsUHJvcHMubm9ybWFsU2NhbGUgPSBuZXcgVEhSRUUuVmVjdG9yMigxLCAxKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRoaXMudGV4dHVyZXMucGxhdGVSb3VnaG5lc3MpIHtcclxuICAgICAgbWF0ZXJpYWxQcm9wcy5yb3VnaG5lc3NNYXAgPSB0aGlzLnRleHR1cmVzLnBsYXRlUm91Z2huZXNzO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodGhpcy50ZXh0dXJlcy5wbGF0ZU1ldGFsbmVzcykge1xyXG4gICAgICBtYXRlcmlhbFByb3BzLm1ldGFsbmVzc01hcCA9IHRoaXMudGV4dHVyZXMucGxhdGVNZXRhbG5lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5tYXRlcmlhbHMucGxhdGUgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwobWF0ZXJpYWxQcm9wcyk7XHJcbiAgICBcclxuICAgIC8vIOiwg+ivlei+k+WHuuWBj+i9rOadv+adkOi0qOS/oeaBr1xyXG4gICAgY29uc29sZS5sb2coJ/CflKcg5YGP6L2s5p2/5p2Q6LSo5Yib5bu65a6M5oiQOicsIHtcclxuICAgICAgaGFzTWFwOiAhIW1hdGVyaWFsUHJvcHMubWFwLFxyXG4gICAgICBoYXNOb3JtYWxNYXA6ICEhbWF0ZXJpYWxQcm9wcy5ub3JtYWxNYXAsXHJcbiAgICAgIGNvbG9yOiBtYXRlcmlhbFByb3BzLmNvbG9yLmdldEhleFN0cmluZygpLFxyXG4gICAgICBtZXRhbG5lc3M6IG1hdGVyaWFsUHJvcHMubWV0YWxuZXNzLFxyXG4gICAgICByb3VnaG5lc3M6IG1hdGVyaWFsUHJvcHMucm91Z2huZXNzLFxyXG4gICAgICBlbnZNYXBJbnRlbnNpdHk6IG1hdGVyaWFsUHJvcHMuZW52TWFwSW50ZW5zaXR5XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuiNp+WFieWxj+adkOi0qFxyXG4gICAqL1xyXG4gIGNyZWF0ZVNjcmVlbk1hdGVyaWFsKCkge1xyXG4gICAgY29uc3Qgc2NyZWVuQ29uZmlnID0gQ09ORklHLm1hdGVyaWFscy5zY3JlZW47XHJcbiAgICBcclxuICAgIHRoaXMubWF0ZXJpYWxzLnNjcmVlbiA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCh7XHJcbiAgICAgIGNvbG9yOiBuZXcgVEhSRUUuQ29sb3Ioc2NyZWVuQ29uZmlnLmNvbG9yKSxcclxuICAgICAgZW1pc3NpdmU6IG5ldyBUSFJFRS5Db2xvcihDT05GSUcuc2NyZWVuLmNvbG9yKSxcclxuICAgICAgZW1pc3NpdmVJbnRlbnNpdHk6IENPTkZJRy5zY3JlZW4uaW50ZW5zaXR5LFxyXG4gICAgICByb3VnaG5lc3M6IHNjcmVlbkNvbmZpZy5yb3VnaG5lc3MsXHJcbiAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu65Y+R5YWJ54K55p2Q6LSoXHJcbiAgICovXHJcbiAgY3JlYXRlR2xvd1BvaW50TWF0ZXJpYWwoKSB7XHJcbiAgICB0aGlzLm1hdGVyaWFscy5nbG93UG9pbnQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICBjb2xvcjogbmV3IFRIUkVFLkNvbG9yKENPTkZJRy5kb3RMaWdodC5jb2xvciksXHJcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxyXG4gICAgICBvcGFjaXR5OiBDT05GSUcubWF0ZXJpYWxzLmdsb3cub3BhY2l0eVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rlpIfnlKjmnZDotKjvvIjlvZPotLTlm77liqDovb3lpLHotKXml7bkvb/nlKjvvIlcclxuICAgKi9cclxuICBjcmVhdGVGYWxsYmFja01hdGVyaWFscygpIHtcclxuICAgIGNvbnNvbGUubG9nKCfliJvlu7rlpIfnlKjmnZDotKjvvIjml6DotLTlm77vvIknKTtcclxuICAgIFxyXG4gICAgdGhpcy5tYXRlcmlhbHMubWV0YWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoe1xyXG4gICAgICBjb2xvcjogbmV3IFRIUkVFLkNvbG9yKENPTkZJRy5tYXRlcmlhbHMubWV0YWwuY29sb3IpLFxyXG4gICAgICBtZXRhbG5lc3M6IENPTkZJRy5tYXRlcmlhbHMubWV0YWwubWV0YWxuZXNzLFxyXG4gICAgICByb3VnaG5lc3M6IENPTkZJRy5tYXRlcmlhbHMubWV0YWwucm91Z2huZXNzLFxyXG4gICAgICBlbnZNYXBJbnRlbnNpdHk6IDEuMFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5tYXRlcmlhbHMucGxhdGUgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoe1xyXG4gICAgICBjb2xvcjogbmV3IFRIUkVFLkNvbG9yKENPTkZJRy5tYXRlcmlhbHMucGxhdGUuY29sb3IpLFxyXG4gICAgICBtZXRhbG5lc3M6IENPTkZJRy5tYXRlcmlhbHMucGxhdGUubWV0YWxuZXNzLFxyXG4gICAgICByb3VnaG5lc3M6IENPTkZJRy5tYXRlcmlhbHMucGxhdGUucm91Z2huZXNzLFxyXG4gICAgICBlbnZNYXBJbnRlbnNpdHk6IDEuMCAgLy8g5LiO55S15a2Q5p6q5L+d5oyB5LiA6Ie0XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZVNjcmVlbk1hdGVyaWFsKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUdsb3dQb2ludE1hdGVyaWFsKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmjIflrprmnZDotKhcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIOadkOi0qOWQjeensFxyXG4gICAqIEByZXR1cm5zIHtUSFJFRS5NYXRlcmlhbH0g5p2Q6LSo5a+56LGhXHJcbiAgICovXHJcbiAgZ2V0TWF0ZXJpYWwobmFtZSkge1xyXG4gICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxzW25hbWVdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pu05paw5p2Q6LSo5bGe5oCnXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsTmFtZSAtIOadkOi0qOWQjeensFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0g6KaB5pu05paw55qE5bGe5oCnXHJcbiAgICovXHJcbiAgdXBkYXRlTWF0ZXJpYWwobWF0ZXJpYWxOYW1lLCBwcm9wZXJ0aWVzKSB7XHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWxzW21hdGVyaWFsTmFtZV07XHJcbiAgICBpZiAobWF0ZXJpYWwpIHtcclxuICAgICAgT2JqZWN0LmFzc2lnbihtYXRlcmlhbCwgcHJvcGVydGllcyk7XHJcbiAgICAgIG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmHiuaUvuaJgOacieadkOi0qOWSjOi0tOWbvui1hOa6kFxyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICAvLyDph4rmlL7otLTlm75cclxuICAgIE9iamVjdC52YWx1ZXModGhpcy50ZXh0dXJlcykuZm9yRWFjaCh0ZXh0dXJlID0+IHtcclxuICAgICAgdGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDph4rmlL7mnZDotKhcclxuICAgIE9iamVjdC52YWx1ZXModGhpcy5tYXRlcmlhbHMpLmZvckVhY2gobWF0ZXJpYWwgPT4ge1xyXG4gICAgICBtYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRleHR1cmVzID0ge307XHJcbiAgICB0aGlzLm1hdGVyaWFscyA9IHt9O1xyXG4gIH1cclxufVxyXG4iLCIvLyA9PT09PSDln7rnoYDlr7zlhaUgPT09PT1cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJzsgLy8g5LiJ57u05bqTXG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHMnOyAvLyDovajpgZPmjqfliLblmahcbmltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJzsgLy8g5Yqo55S75bqTXG5cbi8vID09PT09IOWvvOWFpSBzd2l0Y2hlciDmqKHlnZfvvIhFUzYg5a+85YWl77yM5bm25ZyoIERPTSDlsLHnu6rlkI7liJ3lp4vljJbvvIkgPT09PT1cbmltcG9ydCB7IHJlbmRlclN3aXRjaGVyIH0gZnJvbSAnLi4vc3JjL3dpZGdldHMvc3dpdGNoZXIuanMnO1xuXG5cbi8vID09PT09IOWvvOWFpeiHquWumuS5ieaooeWdlyA9PT09PVxuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSAnLi9jb25maWdMb2FkZXInO1xuaW1wb3J0IHsgQ29ubmVjdGlvblBvc2l0aW9uRGVtbyB9IGZyb20gJy4vZXhhbXBsZXMvQ29ubmVjdGlvblBvc2l0aW9uRGVtby5qcyc7XG5pbXBvcnQgeyBTdXBlcmVsbGlwc2VUcmFuc2l0aW9uRGVtbyB9IGZyb20gJy4vZXhhbXBsZXMvU3VwZXJlbGxpcHNlVHJhbnNpdGlvbkRlbW8uanMnOyAgLy8g6YWN572u5paH5Lu2XG5pbXBvcnQgeyBHdWlDb250cm9sbGVyIH0gZnJvbSAnLi9jb250cm9sbGVycy9HdWlDb250cm9sbGVyJzsgIC8vIEdVSeaOp+WItuWZqFxuaW1wb3J0IHsgVUlDb250cm9sbGVyIH0gZnJvbSAnLi9jb250cm9sbGVycy9VSUNvbnRyb2xsZXInOyAgLy8gVUnmjqfliLblmahcbmltcG9ydCB7IFdhdmVmb3JtR2VuZXJhdG9yIH0gZnJvbSAnLi9jb21wb25lbnRzL1dhdmVmb3JtR2VuZXJhdG9yJzsgIC8vIOazouW9oueUn+aIkOWZqFxuaW1wb3J0IHsgRWxlY3Ryb25CZWFtIH0gZnJvbSAnLi9jb21wb25lbnRzL0VsZWN0cm9uQmVhbSc7ICAvLyDnlLXlrZDmnZ9cbmltcG9ydCB7IFNjcmVlbiB9IGZyb20gJy4vY29tcG9uZW50cy9TY3JlZW4nOyAgLy8g6I2n5YWJ5bGPXG5pbXBvcnQgeyBMYWJlbFN5c3RlbSB9IGZyb20gJy4vY29tcG9uZW50cy9MYWJlbFN5c3RlbSc7ICAvLyDmoIfnrb7ns7vnu59cbmltcG9ydCB7IEV4cGxvZGVkVmlldyB9IGZyb20gJy4vY29tcG9uZW50cy9FeHBsb2RlZFZpZXcnOyAgLy8g5YiG6Kej6KeG5Zu+XG5pbXBvcnQgeyBEZW1vQW5pbWF0aW9uIH0gZnJvbSAnLi9jb21wb25lbnRzL0RlbW9BbmltYXRpb24nOyAgLy8g5ryU56S65Yqo55S7XG5pbXBvcnQgeyBDUlRTaGVsbCB9IGZyb20gJy4vY29tcG9uZW50cy9DUlRTaGVsbCc7ICAvLyBDUlTlpJblo7NcbmltcG9ydCB7IE1hdGVyaWFsTWFuYWdlciB9IGZyb20gJy4vbWF0ZXJpYWxzL01hdGVyaWFsTWFuYWdlcic7ICAvLyDmnZDotKjnrqHnkIblmahcbmltcG9ydCB7IHVuaWZpZWRDb21wb25lbnRNYXRlcmlhbCB9IGZyb20gJy4vbWF0ZXJpYWxzL1VuaWZpZWRDb21wb25lbnRNYXRlcmlhbC5qcyc7ICAvLyDnu5/kuIDnu4Tku7bmnZDotKjnrqHnkIblmahcblxuLy8gPT09PT0g5YWo5bGA5Y+Y6YePID09PT09XG5sZXQgc2NlbmUsIGNhbWVyYSwgcmVuZGVyZXIsIGNvbnRyb2xzOyAgLy8g5Zy65pmv44CB55u45py644CB5riy5p+T5Zmo44CB5o6n5Yi25ZmoXG5sZXQgZWxlY3Ryb25CZWFtLCB3YXZlZm9ybUdlbmVyYXRvciwgc2NyZWVuQ29udHJvbGxlcjsgIC8vIOeUteWtkOadn+OAgeazouW9oueUn+aIkOWZqOOAgeiNp+WFieWxj+aOp+WItuWZqFxubGV0IGd1aUNvbnRyb2xsZXIsIHVpQ29udHJvbGxlcjsgIC8vIEdVSeaOp+WItuWZqOOAgVVJ5o6n5Yi25ZmoXG5sZXQgbGFiZWxTeXN0ZW0sIGV4cGxvZGVkVmlldywgZGVtb0FuaW1hdGlvbjsgIC8vIOagh+etvuezu+e7n+OAgeWIhuino+inhuWbvuOAgea8lOekuuWKqOeUu1xubGV0IGNydFNoZWxsOyAgLy8gQ1JU5aSW5aOzXG5sZXQgbWF0ZXJpYWxNYW5hZ2VyOyAgLy8g5p2Q6LSo566h55CG5ZmoXG5cbi8vIOWIm+W7uiBUV0VFTiBHcm91cCDnrqHnkIbliqjnlLvvvIjop6PlhrMgVFdFRU4udXBkYXRlKCkg5byD55So6Zeu6aKY77yJXG5leHBvcnQgY29uc3QgdHdlZW5Hcm91cCA9IG5ldyBUV0VFTi5Hcm91cCgpO1xuXG4vLyA9PT09PSDng63ph43ovb3mlK/mjIEgPT09PT1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KCcuL2NvbmZpZ0xvYWRlcicsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygn6YWN572u5paH5Lu25bey5pu05paw77yM6YeN5paw5Yqg6L29Li4uJyk7XG4gICAgLy8g6YeN5paw5Yid5aeL5YyW57uE5Lu25Lul5bqU55So5paw6YWN572uXG4gICAgaWYgKGVsZWN0cm9uQmVhbSkgZWxlY3Ryb25CZWFtLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgaWYgKHNjcmVlbkNvbnRyb2xsZXIpIHNjcmVlbkNvbnRyb2xsZXIudXBkYXRlTWF0ZXJpYWwoKTtcbiAgICBpZiAoY3J0U2hlbGwpIGNydFNoZWxsLnVwZGF0ZUNvbmZpZygpOyAgLy8g5re75YqgQ1JUU2hlbGzlk43lupTlvI/mm7TmlrBcbiAgfSk7XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChbJy4vY29tcG9uZW50cy9FbGVjdHJvbkJlYW0nLCAnLi9jb21wb25lbnRzL1NjcmVlbicsICcuL2NvbXBvbmVudHMvV2F2ZWZvcm1HZW5lcmF0b3InLCAnLi9jb21wb25lbnRzL0NSVFNoZWxsJ10sICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygn57uE5Lu25bey5pu05paw77yM6YeN5paw5Yqg6L29Li4uJyk7XG4gIH0pO1xufVxuXG4vLyA9PT09PSDlnLrmma/lr7nosaHlvJXnlKggPT09PT1cbmxldCBndW4sIGd1bkhlYWQsIHYxLCB2MiwgaDEsIGgyLCBzY3JlZW47ICAvLyDnlLXlrZDmnqrjgIHnlLXlrZDmnqrlpLTjgIHlnoLnm7TlgY/ovazmnb/jgIHmsLTlubPlgY/ovazmnb/jgIHojaflhYnlsY8gICAgXG5cbi8vID09PT09IOW3peWFt+WHveaVsCA9PT09PVxuLyoqXG4gKiDop6PmnpDpopzoibLlgLzvvIzmlK/mjIHlpJrnp43moLzlvI9cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gY29sb3IgLSDpopzoibLlgLzvvIjlj6/ku6XmmK8gXCIjZmZmZmZmXCIsIFwiMHhmZmZmZmZcIiwgUkdC562J5qC85byP77yJXG4gKiBAcmV0dXJucyB7bnVtYmVyfG51bGx9IC0g6Kej5p6Q5ZCO55qE5Y2B5YWt6L+b5Yi25pWw5YC877yM5aSx6LSl6L+U5ZuebnVsbFxuICovXG5mdW5jdGlvbiBwYXJzZUNvbG9yKGNvbG9yKSB7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG4gICAgXG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIOWkhOeQhuWNgeWFrei/m+WItuagvOW8jyBcIjB4ZmZmZmZmXCJcbiAgICAgIGlmIChjb2xvci5zdGFydHNXaXRoKCcweCcpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvciwgMTYpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyDlpITnkIZDU1PljYHlha3ov5vliLbmoLzlvI8gXCIjZmZmZmZmXCJcbiAgICAgIGlmIChjb2xvci5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGNvbG9yLnJlcGxhY2UoJyMnLCAnMHgnKSwgMTYpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyDlpITnkIbnuq/ljYHlha3ov5vliLblrZfnrKbkuLIgXCJmZmZmZmZcIlxuICAgICAgaWYgKC9eWzAtOWEtZkEtRl17Nn0kLy50ZXN0KGNvbG9yKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoJzB4JyArIGNvbG9yLCAxNik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIOWwneivleebtOaOpeino+aekFxuICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQoY29sb3IsIDE2KTtcbiAgICAgIGlmICghaXNOYU4ocGFyc2VkKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLndhcm4oJ+aXoOazleino+aekOminOiJsuWAvDonLCBjb2xvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign6aKc6Imy6Kej5p6Q6ZSZ6K+vOicsIGVycm9yLCAn6L6T5YWl5YC8OicsIGNvbG9yKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vLyA9PT09PSDliJ3lp4vljJblh73mlbAgPT09PT1cbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gIGNvbnNvbGUubG9nKCfliJ3lp4vljJblupTnlKguLi4nKTtcbiAgaW5pdFNjZW5lKCk7IC8vIOWIneWni+WMluWcuuaZr1xuICBpbml0Q2FtZXJhKCk7IC8vIOWIneWni+WMluebuOaculxuICBpbml0UmVuZGVyZXIoKTsgLy8g5Yid5aeL5YyW5riy5p+T5ZmoXG4gIGluaXRDb250cm9scygpOyAvLyDliJ3lp4vljJbmjqfliLblmahcbiAgaW5pdExpZ2h0cygpOyAvLyDliJ3lp4vljJblhYnmupBcbiAgaW5pdEdyaWQoKTsgLy8g5Yid5aeL5YyW572R5qC8XG4gIGF3YWl0IGluaXRNYXRlcmlhbHMoKTsgLy8g5Yid5aeL5YyW5p2Q6LSo77yI5byC5q2l77yJXG4gIGluaXRDb21wb25lbnRzKCk7IC8vIOWIneWni+WMlue7hOS7tlxuICBjb25zb2xlLmxvZygn5Yid5aeL5YyW5qCH562+57O757ufLi4uJyk7XG4gIGluaXRMYWJlbFN5c3RlbSgpOyAvLyDliJ3lp4vljJbmoIfnrb7ns7vnu59cbiAgY29uc29sZS5sb2coJ+WIneWni+WMluWIhuino+inhuWbvi4uLicpO1xuICBpbml0RXhwbG9kZWRWaWV3KCk7IC8vIOWIneWni+WMluWIhuino+inhuWbvlxuICBjb25zb2xlLmxvZygn5Yid5aeL5YyWR1VJLi4uJyk7XG4gIGluaXRHdWkoKTsgLy8g5Yid5aeL5YyWR1VJ77yI6ZyA6KaB5Zyo5ryU56S65Yqo55S75LmL5YmN5Yid5aeL5YyW77yJXG4gIGNvbnNvbGUubG9nKCfliJ3lp4vljJbmvJTnpLrliqjnlLsuLi4nKTtcbiAgaW5pdERlbW9BbmltYXRpb24oKTsgLy8g5Yid5aeL5YyW5ryU56S65Yqo55S7XG4gIGNvbnNvbGUubG9nKCfliJ3lp4vljJZVSeaOp+WItuWZqC4uLicpO1xuICBpbml0VUlDb250cm9sbGVyKCk7IC8vIOWIneWni+WMllVJ5o6n5Yi25ZmoXG4gIFxuICAvLyDliJ3lp4vljJbms6LlvaLmmL7npLpcbiAgdXBkYXRlU2NyZWVuV2F2ZWZvcm0oKTtcbiAgXG4gIC8vIOWIneWni+WMlueUteWtkOadn++8iOehruS/neWQr+WKqOaXtuWwseacieeUteWtkOadn+aYvuekuu+8iVxuICB1cGRhdGVFbGVjdHJvbkJlYW0oKTtcbiAgXG4gIC8vIOW8gOWni+WKqOeUu+W+queOr1xuICBhbmltYXRlKCk7IC8vIOW8gOWni+WKqOeUu+W+queOr1xuICBcbiAgLy8g56qX5Y+j6Ieq6YCC5bqUXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7ICAgLy8g56qX5Y+j5aSn5bCP6LCD5pW05LqL5Lu255uR5ZCsXG4gIFxuICBjb25zb2xlLmxvZygn5bqU55So5Yid5aeL5YyW5a6M5oiQJyk7XG59XG5cbi8vID09PT09IOWcuuaZr+WIneWni+WMliA9PT09PVxuZnVuY3Rpb24gaW5pdFNjZW5lKCkge1xuICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpOyAvLyDliJvlu7rlnLrmma9cbiAgc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcihDT05GSUcuc2NlbmUuYmFja2dyb3VuZCk7IC8vIOiuvue9ruWcuuaZr+iDjOaZr+minOiJslxufVxuXG4vLyA9PT09PSDnm7jmnLrliJ3lp4vljJYgPT09PT1cbmZ1bmN0aW9uIGluaXRDYW1lcmEoKSB7XG4gIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggLy8g6YCP6KeG55u45py6XG4gICAgQ09ORklHLmNhbWVyYS5mb3YsIC8vIOinhuinklxuICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAvLyDlrr3pq5jmr5RcbiAgICBDT05GSUcuY2FtZXJhLm5lYXIsIC8vIOi/keaIqumdolxuICAgIENPTkZJRy5jYW1lcmEuZmFyIC8vIOi/nOaIqumdolxuICApO1xuICBjYW1lcmEucG9zaXRpb24uc2V0KENPTkZJRy5jYW1lcmEucG9zaXRpb24ueCwgQ09ORklHLmNhbWVyYS5wb3NpdGlvbi55LCBDT05GSUcuY2FtZXJhLnBvc2l0aW9uLnopOyAvLyDorr7nva7nm7jmnLrkvY3nva5cbn1cblxuLy8gPT09PT0g5riy5p+T5Zmo5Yid5aeL5YyWID09PT09XG5mdW5jdGlvbiBpbml0UmVuZGVyZXIoKSB7XG4gIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7IC8vIOWIm+W7uua4suafk+WZqFxuICBcbiAgLy8g6auYRFBJ5bGP5bmV6YCC6YWNXG4gIGNvbnN0IGRldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKE1hdGgubWluKGRldmljZVBpeGVsUmF0aW8sIDIpKTsgLy8g6ZmQ5Yi25pyA5aSnRFBJ5q+U546H5Li6MlxuICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpOyAvLyDorr7nva7muLLmn5PlmajlpKflsI9cbiAgXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7IC8vIOWwhua4suafk+WZqOa3u+WKoOWIsOaWh+aho+S4rVxufVxuXG4vLyA9PT09PSDmjqfliLblmajliJ3lp4vljJYgPT09PT1cbmZ1bmN0aW9uIGluaXRDb250cm9scygpIHsgXG4gIGNvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbHMoY2FtZXJhLCByZW5kZXJlci5kb21FbGVtZW50KTsgLy8g5Yib5bu65o6n5Yi25ZmoXG4gIGNvbnRyb2xzLmVuYWJsZURhbXBpbmcgPSB0cnVlOyAvLyDlkK/nlKjpmLvlsLxcbn1cblxuLy8gPT09PT0g5YWJ5rqQ5Yid5aeL5YyWID09PT09XG5mdW5jdGlvbiBpbml0TGlnaHRzKCkgeyBcbiAgLy8g546v5aKD5YWJIC0g5Li66YeR5bGe5p2Q6LSo5o+Q5L6b5Z+656GA54Wn5piOXG4gIHNjZW5lLmFkZChuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4ZmZmZmZmLCAwLjQpKTsgXG4gIFxuICAvLyDkuLvopoHlrprlkJHlhYkgLSDmqKHmi5/lpKrpmLPlhYnvvIzlop7lvLrph5HlsZ7lj43lsITmlYjmnpxcbiAgY29uc3QgZGlyZWN0aW9uYWxMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ZmZmZmZmLCAwLjgpO1xuICBkaXJlY3Rpb25hbExpZ2h0LnBvc2l0aW9uLnNldCgxMCwgMTAsIDUpO1xuICBkaXJlY3Rpb25hbExpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlO1xuICBzY2VuZS5hZGQoZGlyZWN0aW9uYWxMaWdodCk7XG4gIFxuICAvLyDooaXlhYXngrnlhYnmupAgLSDku47kuI3lkIzop5Lluqbnhafkuq7ph5HlsZ7ooajpnaJcbiAgY29uc3QgcG9pbnRMaWdodDEgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgweGZmZmZmZiwgMC42KTtcbiAgcG9pbnRMaWdodDEucG9zaXRpb24uc2V0KC0xMCwgOCwgOCk7XG4gIHNjZW5lLmFkZChwb2ludExpZ2h0MSk7XG4gIFxuICAvLyDnrKzkuozkuKrngrnlhYnmupAgLSDlop7liqDph5HlsZ7mnZDotKjnmoTpq5jlhYnmlYjmnpxcbiAgY29uc3QgcG9pbnRMaWdodDIgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgweGYwZjBmMCwgMC40KTtcbiAgcG9pbnRMaWdodDIucG9zaXRpb24uc2V0KDUsIC01LCAxMCk7XG4gIHNjZW5lLmFkZChwb2ludExpZ2h0Mik7XG59XG5cbi8vID09PT09IOe9keagvOWcsOmdouWIneWni+WMliA9PT09PVxuZnVuY3Rpb24gaW5pdEdyaWQoKSB7XG4gIGNvbnN0IGdyaWQgPSBuZXcgVEhSRUUuR3JpZEhlbHBlcihcbiAgICBDT05GSUcuc2NlbmUuZ3JpZC5zaXplLCBcbiAgICBDT05GSUcuc2NlbmUuZ3JpZC5kaXZpc2lvbnMsIFxuICAgIENPTkZJRy5zY2VuZS5ncmlkLmNvbG9yMSwgXG4gICAgQ09ORklHLnNjZW5lLmdyaWQuY29sb3IyXG4gICk7IC8vIOWIm+W7uue9keagvFxuICBncmlkLnBvc2l0aW9uLnNldChcbiAgICBDT05GSUcuc2NlbmUuZ3JpZC5wb3NpdGlvbi54LCBcbiAgICBDT05GSUcuc2NlbmUuZ3JpZC5wb3NpdGlvbi55LCBcbiAgICBDT05GSUcuc2NlbmUuZ3JpZC5wb3NpdGlvbi56XG4gICk7IC8vIOiuvue9rue9keagvOS9jee9rlxuICBzY2VuZS5hZGQoZ3JpZCk7IC8vIOWwhue9keagvOa3u+WKoOWIsOWcuuaZr+S4rVxufVxuXG4vLyA9PT09PSDmnZDotKjliJ3lp4vljJYgPT09PT1cbmFzeW5jIGZ1bmN0aW9uIGluaXRNYXRlcmlhbHMoKSB7XG4gIGNvbnNvbGUubG9nKCfliJ3lp4vljJbmnZDotKjnrqHnkIblmaguLi4nKTtcbiAgbWF0ZXJpYWxNYW5hZ2VyID0gbmV3IE1hdGVyaWFsTWFuYWdlcigpO1xuICBhd2FpdCBtYXRlcmlhbE1hbmFnZXIuaW5pdGlhbGl6ZU1hdGVyaWFscygpO1xuICBcbiAgY29uc29sZS5sb2coJ+WIneWni+WMlue7n+S4gOe7hOS7tuadkOi0qOeuoeeQhuWZqC4uLicpO1xuICBhd2FpdCB1bmlmaWVkQ29tcG9uZW50TWF0ZXJpYWwuaW5pdGlhbGl6ZSgpO1xuICBcbiAgY29uc29sZS5sb2coJ+adkOi0qOWIneWni+WMluWujOaIkCcpO1xufVxuXG4vLyA9PT09PSDnu4Tku7bliJ3lp4vljJYgPT09PT1cbmZ1bmN0aW9uIGluaXRDb21wb25lbnRzKCkge1xuICAvLyDku47mnZDotKjnrqHnkIblmajojrflj5bmnZDotKhcbiAgY29uc3QgbWV0YWxNYXQgPSBtYXRlcmlhbE1hbmFnZXIuZ2V0TWF0ZXJpYWwoJ21ldGFsJyk7XG4gIGNvbnN0IHBsYXRlTWF0ID0gbWF0ZXJpYWxNYW5hZ2VyLmdldE1hdGVyaWFsKCdwbGF0ZScpO1xuICBjb25zdCBzY3JlZW5NYXQgPSBtYXRlcmlhbE1hbmFnZXIuZ2V0TWF0ZXJpYWwoJ3NjcmVlbicpO1xuICBjb25zdCBnbG93UG9pbnRNYXQgPSBtYXRlcmlhbE1hbmFnZXIuZ2V0TWF0ZXJpYWwoJ2dsb3dQb2ludCcpO1xuXG4gIC8vIOeUteWtkOaeqlxuICBndW4gPSBuZXcgVEhSRUUuTWVzaChcbiAgICBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeShDT05GSUcuY29tcG9uZW50cy5ndW4ucmFkaXVzLCAwLjMsIENPTkZJRy5jb21wb25lbnRzLmd1bi5oZWlnaHQsIDMyKSxcbiAgICBtZXRhbE1hdFxuICApO1xuICBndW4ucm90YXRpb24ueiA9IE1hdGguUEkgLyAyO1xuICBndW4ucG9zaXRpb24uc2V0KENPTkZJRy5jb21wb25lbnRzLmd1bi5wb3NpdGlvbi54LCBDT05GSUcuY29tcG9uZW50cy5ndW4ucG9zaXRpb24ueSwgQ09ORklHLmNvbXBvbmVudHMuZ3VuLnBvc2l0aW9uLnopO1xuICBzY2VuZS5hZGQoZ3VuKTtcblxuICBndW5IZWFkID0gbmV3IFRIUkVFLk1lc2goXG4gICAgbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoQ09ORklHLmNvbXBvbmVudHMuZ3VuSGVhZC5yYWRpdXMsIENPTkZJRy5jb21wb25lbnRzLmd1bkhlYWQucmFkaXVzLCBDT05GSUcuY29tcG9uZW50cy5ndW5IZWFkLmhlaWdodCwgMzIpLFxuICAgIG1ldGFsTWF0XG4gICk7XG4gIGd1bkhlYWQucm90YXRpb24ueiA9IE1hdGguUEkgLyAyO1xuICBndW5IZWFkLnBvc2l0aW9uLnNldChDT05GSUcuY29tcG9uZW50cy5ndW5IZWFkLnBvc2l0aW9uLngsIENPTkZJRy5jb21wb25lbnRzLmd1bkhlYWQucG9zaXRpb24ueSwgQ09ORklHLmNvbXBvbmVudHMuZ3VuSGVhZC5wb3NpdGlvbi56KTtcbiAgc2NlbmUuYWRkKGd1bkhlYWQpO1xuXG4gIC8vIOWeguebtOWBj+i9rOadv1xuICBjb25zdCB2R2VvbSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeShDT05GSUcuY29tcG9uZW50cy52ZXJ0aWNhbFBsYXRlcy53aWR0aCwgQ09ORklHLmNvbXBvbmVudHMudmVydGljYWxQbGF0ZXMuaGVpZ2h0LCBDT05GSUcuY29tcG9uZW50cy52ZXJ0aWNhbFBsYXRlcy5kZXB0aCk7XG4gIHYxID0gbmV3IFRIUkVFLk1lc2godkdlb20sIHBsYXRlTWF0KTtcbiAgdjIgPSB2MS5jbG9uZSgpO1xuXG4gIHYxLnJvdGF0aW9uLnggPSBNYXRoLlBJIC8gMjtcbiAgdjIucm90YXRpb24ueCA9IE1hdGguUEkgLyAyO1xuICAvLyDlho3nu5UgWiDovbQgOTDCsFxuICB2MS5yb3RhdGlvbi55ICs9IE1hdGguUEkgLyAyO1xuICB2Mi5yb3RhdGlvbi55ICs9IE1hdGguUEkgLyAyO1xuXG4gIHYxLnBvc2l0aW9uLnNldChDT05GSUcuY29tcG9uZW50cy52ZXJ0aWNhbFBsYXRlcy5wb3NpdGlvbnNbMF0ueCwgQ09ORklHLmNvbXBvbmVudHMudmVydGljYWxQbGF0ZXMucG9zaXRpb25zWzBdLnksIENPTkZJRy5jb21wb25lbnRzLnZlcnRpY2FsUGxhdGVzLnBvc2l0aW9uc1swXS56KTtcbiAgdjIucG9zaXRpb24uc2V0KENPTkZJRy5jb21wb25lbnRzLnZlcnRpY2FsUGxhdGVzLnBvc2l0aW9uc1sxXS54LCBDT05GSUcuY29tcG9uZW50cy52ZXJ0aWNhbFBsYXRlcy5wb3NpdGlvbnNbMV0ueSwgQ09ORklHLmNvbXBvbmVudHMudmVydGljYWxQbGF0ZXMucG9zaXRpb25zWzFdLnopO1xuICBzY2VuZS5hZGQodjEsIHYyKTtcblxuICAvLyDmsLTlubPlgY/ovazmnb9cbiAgY29uc3QgaEdlb20gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoQ09ORklHLmNvbXBvbmVudHMuaG9yaXpvbnRhbFBsYXRlcy53aWR0aCwgQ09ORklHLmNvbXBvbmVudHMuaG9yaXpvbnRhbFBsYXRlcy5oZWlnaHQsIENPTkZJRy5jb21wb25lbnRzLmhvcml6b250YWxQbGF0ZXMuZGVwdGgpO1xuICBoMSA9IG5ldyBUSFJFRS5NZXNoKGhHZW9tLCBwbGF0ZU1hdCk7XG4gIGgyID0gaDEuY2xvbmUoKTtcblxuICBoMS5yb3RhdGlvbi54ID0gLU1hdGguUEkgLyAyO1xuICBoMi5yb3RhdGlvbi54ID0gLU1hdGguUEkgLyAyO1xuXG4gIGgxLnBvc2l0aW9uLnNldChDT05GSUcuY29tcG9uZW50cy5ob3Jpem9udGFsUGxhdGVzLnBvc2l0aW9uc1swXS54LCBDT05GSUcuY29tcG9uZW50cy5ob3Jpem9udGFsUGxhdGVzLnBvc2l0aW9uc1swXS55LCBDT05GSUcuY29tcG9uZW50cy5ob3Jpem9udGFsUGxhdGVzLnBvc2l0aW9uc1swXS56KTtcbiAgaDIucG9zaXRpb24uc2V0KENPTkZJRy5jb21wb25lbnRzLmhvcml6b250YWxQbGF0ZXMucG9zaXRpb25zWzFdLngsIENPTkZJRy5jb21wb25lbnRzLmhvcml6b250YWxQbGF0ZXMucG9zaXRpb25zWzFdLnksIENPTkZJRy5jb21wb25lbnRzLmhvcml6b250YWxQbGF0ZXMucG9zaXRpb25zWzFdLnopO1xuICBzY2VuZS5hZGQoaDEsIGgyKTtcblxuICAvLyDojaflhYnlsY9cbiAgc2NyZWVuID0gbmV3IFRIUkVFLk1lc2gobmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoQ09ORklHLmNvbXBvbmVudHMuc2NyZWVuLndpZHRoLCBDT05GSUcuY29tcG9uZW50cy5zY3JlZW4uaGVpZ2h0KSwgc2NyZWVuTWF0KTsgLy8g5Yib5bu66I2n5YWJ5bGPXG4gIHNjcmVlbi5wb3NpdGlvbi5zZXQoQ09ORklHLmNvbXBvbmVudHMuc2NyZWVuLnBvc2l0aW9uLngsIENPTkZJRy5jb21wb25lbnRzLnNjcmVlbi5wb3NpdGlvbi55LCBDT05GSUcuY29tcG9uZW50cy5zY3JlZW4ucG9zaXRpb24ueik7IC8vIOiuvue9ruiNp+WFieWxj+S9jee9rlxuICBzY3JlZW4ucm90YXRpb24ueSA9IC1NYXRoLlBJIC8gMjsgLy8g6K6+572u6I2n5YWJ5bGP5peL6L2sXG4gIHNjZW5lLmFkZChzY3JlZW4pOyAvLyDlsIbojaflhYnlsY/mt7vliqDliLDlnLrmma/kuK1cbiAgIFxuICBcbiAgLy8g5Yid5aeL5YyW55S15a2Q5p2f5o6n5Yi25ZmoXG4gIGVsZWN0cm9uQmVhbSA9IG5ldyBFbGVjdHJvbkJlYW0oc2NlbmUpO1xuICBcbiAgLy8g5Yid5aeL5YyW5rOi5b2i55Sf5oiQ5ZmoXG4gIHdhdmVmb3JtR2VuZXJhdG9yID0gbmV3IFdhdmVmb3JtR2VuZXJhdG9yKCk7XG4gIFxuICAvLyDorr7nva7ms6LlvaLph43nva7lm57osIPvvIzlnKjmlrDlkajmnJ/lvIDlp4vml7bmuIXpmaTlm57miavnur9cbiAgd2F2ZWZvcm1HZW5lcmF0b3Iuc2V0V2F2ZWZvcm1SZXNldENhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoZWxlY3Ryb25CZWFtKSB7XG4gICAgICBlbGVjdHJvbkJlYW0uc3RhcnROZXdUcmFjZVNlZ21lbnQoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgLy8g5Yid5aeL5YyW6I2n5YWJ5bGP5o6n5Yi25ZmoXG4gIHNjcmVlbkNvbnRyb2xsZXIgPSBuZXcgU2NyZWVuKHNjZW5lLCBzY3JlZW4pO1xuICBcbiAgLy8g5Yid5aeL5YyWQ1JU5aSW5aOzXG4gIGNydFNoZWxsID0gbmV3IENSVFNoZWxsKCk7XG4gIHNjZW5lLmFkZChjcnRTaGVsbC5nZXRTaGVsbCgpKTtcbiAgXG4gIC8vIOWIneWni+WMlui/nuaOpeS9jee9rua8lOekuu+8iOS9v+WFtuWcqOWFqOWxgOWPr+eUqO+8iVxuICB3aW5kb3cuY29ubmVjdGlvbkRlbW8gPSBuZXcgQ29ubmVjdGlvblBvc2l0aW9uRGVtbyhjcnRTaGVsbCk7XG4gIFxuICAvLyDliJ3lp4vljJbotoXmpK3lnIblvaLnirbmuJDlj5jmvJTnpLrvvIjkvb/lhbblnKjlhajlsYDlj6/nlKjvvIlcbiAgd2luZG93LnRyYW5zaXRpb25EZW1vID0gbmV3IFN1cGVyZWxsaXBzZVRyYW5zaXRpb25EZW1vKGNydFNoZWxsKTtcbn1cblxuLy8gPT09PT0g5qCH562+57O757uf5Yid5aeL5YyWID09PT09XG5mdW5jdGlvbiBpbml0TGFiZWxTeXN0ZW0oKSB7XG4gIC8vIOWIm+W7uuagh+etvuezu+e7n1xuICBsYWJlbFN5c3RlbSA9IG5ldyBMYWJlbFN5c3RlbShzY2VuZSwgZG9jdW1lbnQuYm9keSk7XG4gIFxuICAvLyDkuLrlkITnu4Tku7bmt7vliqDmoIfnrb5cbiAgY29uc3QgY29tcG9uZW50TGFiZWxzID0gW1xuICAgIHsgaWQ6ICdndW4nLCB0YXJnZXQ6IGd1biwgdGV4dDogQ09ORklHLmRlc2NyaXB0aW9ucy5ndW4ubmFtZSwgb2Zmc2V0OiBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLjUsIDApLCBkZXNjcmlwdGlvbjogQ09ORklHLmRlc2NyaXB0aW9ucy5ndW4uZGVzY3JpcHRpb24gfSxcbiAgICB7IGlkOiAnZ3VuSGVhZCcsIHRhcmdldDogZ3VuSGVhZCwgdGV4dDogQ09ORklHLmRlc2NyaXB0aW9ucy5ndW5IZWFkLm5hbWUsIG9mZnNldDogbmV3IFRIUkVFLlZlY3RvcjMoMCwgMC4zLCAwKSwgZGVzY3JpcHRpb246IENPTkZJRy5kZXNjcmlwdGlvbnMuZ3VuSGVhZC5kZXNjcmlwdGlvbiB9LFxuICAgIHsgaWQ6ICd2MScsIHRhcmdldDogdjEsIHRleHQ6IENPTkZJRy5kZXNjcmlwdGlvbnMudjEubmFtZSwgb2Zmc2V0OiBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLjMsIDApLCBkZXNjcmlwdGlvbjogQ09ORklHLmRlc2NyaXB0aW9ucy52MS5kZXNjcmlwdGlvbiB9LFxuICAgIHsgaWQ6ICd2MicsIHRhcmdldDogdjIsIHRleHQ6IENPTkZJRy5kZXNjcmlwdGlvbnMudjIubmFtZSwgb2Zmc2V0OiBuZXcgVEhSRUUuVmVjdG9yMygwLCAtMC4zLCAwKSwgZGVzY3JpcHRpb246IENPTkZJRy5kZXNjcmlwdGlvbnMudjIuZGVzY3JpcHRpb24gfSxcbiAgICB7IGlkOiAnaDEnLCB0YXJnZXQ6IGgxLCB0ZXh0OiBDT05GSUcuZGVzY3JpcHRpb25zLmgxLm5hbWUsIG9mZnNldDogbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMC4zKSwgZGVzY3JpcHRpb246IENPTkZJRy5kZXNjcmlwdGlvbnMuaDEuZGVzY3JpcHRpb24gfSxcbiAgICB7IGlkOiAnaDInLCB0YXJnZXQ6IGgyLCB0ZXh0OiBDT05GSUcuZGVzY3JpcHRpb25zLmgyLm5hbWUsIG9mZnNldDogbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgLTAuMyksIGRlc2NyaXB0aW9uOiBDT05GSUcuZGVzY3JpcHRpb25zLmgyLmRlc2NyaXB0aW9uIH0sXG4gICAgeyBpZDogJ3NjcmVlbicsIHRhcmdldDogc2NyZWVuLCB0ZXh0OiBDT05GSUcuZGVzY3JpcHRpb25zLnNjcmVlbi5uYW1lLCBvZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IzKDAuMSwgMC41LCAwKSwgZGVzY3JpcHRpb246IENPTkZJRy5kZXNjcmlwdGlvbnMuc2NyZWVuLmRlc2NyaXB0aW9uIH1cbiAgXTtcbiAgXG4gIC8vIOWIm+W7uuagh+etvlxuICBjb21wb25lbnRMYWJlbHMuZm9yRWFjaChsYWJlbCA9PiB7XG4gICAgbGFiZWxTeXN0ZW0uY3JlYXRlTGFiZWwobGFiZWwuaWQsIGxhYmVsLnRleHQsIGxhYmVsLnRhcmdldCwgbGFiZWwub2Zmc2V0LCBsYWJlbC5kZXNjcmlwdGlvbik7XG4gIH0pO1xufVxuXG4vLyA9PT09PSDliIbop6Pop4blm77liJ3lp4vljJYgPT09PT1cbmZ1bmN0aW9uIGluaXRFeHBsb2RlZFZpZXcoKSB7XG4gIC8vIOWIm+W7uuWIhuino+inhuWbvuaOp+WItuWZqFxuICAvLyDms6jmhI/vvJrov5nkupvnu4Tku7bkuI3lj4LkuI7liIbop6PliqjnlLvvvIzkvYbpnIDopoHlvJXnlKjku6XmlK/mjIHnm7jmnLrogZrnhKblip/og71cbiAgZXhwbG9kZWRWaWV3ID0gbmV3IEV4cGxvZGVkVmlldyh7XG4gICAgLy8g5re75Yqg5Li76KaB57uE5Lu255qE5byV55So77yM55So5LqO55u45py66IGa54Sm5Yqf6IO9XG4gICAgLy8g6L+Z5Lqb57uE5Lu25LiN5Lya5pyJ5YiG6Kej5Yqo55S777yM5L2G5Y+v5Lul6KKr6IGa54SmXG4gICAgZ3VuOiBndW4sXG4gICAgZ3VuSGVhZDogZ3VuSGVhZCwgXG4gICAgdjE6IHYxLFxuICAgIHYyOiB2MixcbiAgICBoMTogaDEsXG4gICAgaDI6IGgyLFxuICAgIHNjcmVlbjogc2NyZWVuXG4gICAgLy8gQ1JU5aSW5aOzKGNydFNoZWxsKeacieiHquW3seeahOWGhemDqOWIhuino+acuuWItu+8jOS4jeWcqOatpOWkhOeQhlxuICB9KTtcbn1cblxuLy8gPT09PT0g5ryU56S65Yqo55S75Yid5aeL5YyWID09PT09XG5mdW5jdGlvbiBpbml0RGVtb0FuaW1hdGlvbigpIHtcbiAgLy8g5Yib5bu65ryU56S65Yqo55S75o6n5Yi25ZmoXG4gIGRlbW9BbmltYXRpb24gPSBuZXcgRGVtb0FuaW1hdGlvbihcbiAgICBzY2VuZSxcbiAgICB7XG4gICAgICBndW4sXG4gICAgICBndW5IZWFkLFxuICAgICAgdjEsXG4gICAgICB2MixcbiAgICAgIGgxLFxuICAgICAgaDIsXG4gICAgICBzY3JlZW46IHNjcmVlbkNvbnRyb2xsZXIsICAvLyDkvKDpgJJTY3JlZW7nsbvlrp7kvovogIzkuI3mmK9USFJFRS5qc+e9keagvOWvueixoVxuICAgICAgZWxlY3Ryb25CZWFtXG4gICAgfSxcbiAgICB7XG4gICAgICBjYW1lcmEsXG4gICAgICBjb250cm9scyxcbiAgICAgIHNjcmVlbkNvbnRyb2xsZXIsXG4gICAgICBndWlDb250cm9sbGVyLCAgLy8g5Lyg6YCSR1VJ5o6n5Yi25Zmo77yM55So5LqO5ryU56S65pe25oqY5Y+g6Z2i5p2/XG4gICAgICBvbkRlZmxlY3Rpb25DaGFuZ2U6IChkZWZsZWN0aW9uUGFyYW1zKSA9PiB7XG4gICAgICAgIHVwZGF0ZUVsZWN0cm9uQmVhbSgpO1xuICAgICAgfSxcbiAgICAgIG9uV2F2ZWZvcm1DaGFuZ2U6ICh3YXZlZm9ybVBhcmFtcykgPT4ge1xuICAgICAgICB1cGRhdGVFbGVjdHJvbkJlYW0oKTtcbiAgICAgICAgdXBkYXRlU2NyZWVuV2F2ZWZvcm0oKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIFxuICAvLyDorr7nva7lhajlsYDlvJXnlKjkvpvms6LlvaLnlJ/miJDlmajkvb/nlKhcbiAgd2luZG93LmRlbW9BbmltYXRpb24gPSBkZW1vQW5pbWF0aW9uO1xuICBcbiAgLy8gPT09PT0g6KeG6KeS5p+l55yL5ZmoIC0g5Zyo5o6n5Yi25Y+w5p+l55yL5b2T5YmN5pGE5YOP5aS05L2N572u5ZKM55uu5qCHID09PT09XG4gIHdpbmRvdy5nZXRWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFjYW1lcmEgfHwgIWNvbnRyb2xzKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyDmkYTlg4/lpLTmiJbmjqfliLblmajmnKrliJ3lp4vljJYnKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB2aWV3SW5mbyA9IHtcbiAgICAgIHBvc2l0aW9uOiB7IFxuICAgICAgICB4OiBNYXRoLnJvdW5kKGNhbWVyYS5wb3NpdGlvbi54ICogMTAwKSAvIDEwMCxcbiAgICAgICAgeTogTWF0aC5yb3VuZChjYW1lcmEucG9zaXRpb24ueSAqIDEwMCkgLyAxMDAsIFxuICAgICAgICB6OiBNYXRoLnJvdW5kKGNhbWVyYS5wb3NpdGlvbi56ICogMTAwKSAvIDEwMCBcbiAgICAgIH0sXG4gICAgICB0YXJnZXQ6IHsgXG4gICAgICAgIHg6IE1hdGgucm91bmQoY29udHJvbHMudGFyZ2V0LnggKiAxMDApIC8gMTAwLFxuICAgICAgICB5OiBNYXRoLnJvdW5kKGNvbnRyb2xzLnRhcmdldC55ICogMTAwKSAvIDEwMCwgXG4gICAgICAgIHo6IE1hdGgucm91bmQoY29udHJvbHMudGFyZ2V0LnogKiAxMDApIC8gMTAwIFxuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/Cfk7cg5b2T5YmN6KeG6KeS5L+h5oGvOicpO1xuICAgIGNvbnNvbGUubG9nKCfkvY3nva4gKHBvc2l0aW9uKTonLCB2aWV3SW5mby5wb3NpdGlvbik7XG4gICAgY29uc29sZS5sb2coJ+ebruaghyAodGFyZ2V0KTonLCB2aWV3SW5mby50YXJnZXQpO1xuICAgIGNvbnNvbGUubG9nKCctLS0nKTtcbiAgICBjb25zb2xlLmxvZygn5aSN5Yi255So5Luj56CBOicpO1xuICAgIGNvbnNvbGUubG9nKGBwb3NpdGlvbjogeyB4OiAke3ZpZXdJbmZvLnBvc2l0aW9uLnh9LCB5OiAke3ZpZXdJbmZvLnBvc2l0aW9uLnl9LCB6OiAke3ZpZXdJbmZvLnBvc2l0aW9uLnp9IH1gKTtcbiAgICBjb25zb2xlLmxvZyhgdGFyZ2V0OiB7IHg6ICR7dmlld0luZm8udGFyZ2V0Lnh9LCB5OiAke3ZpZXdJbmZvLnRhcmdldC55fSwgejogJHt2aWV3SW5mby50YXJnZXQuen0gfWApO1xuICAgIFxuICAgIHJldHVybiB2aWV3SW5mbztcbiAgfTtcbn1cblxuLy8gPT09PT0gR1VJ5Yid5aeL5YyWID09PT09XG5mdW5jdGlvbiBpbml0R3VpKCkge1xuICBndWlDb250cm9sbGVyID0gbmV3IEd1aUNvbnRyb2xsZXIoe1xuICAgIG9uQmVhbUNoYW5nZTogKGJlYW1QYXJhbXMpID0+IHtcbiAgICAgIGVsZWN0cm9uQmVhbS51cGRhdGVNYXRlcmlhbCgpO1xuICAgIH0sXG4gICAgb25EZWZsZWN0aW9uQ2hhbmdlOiAoZGVmbGVjdGlvblBhcmFtcykgPT4ge1xuICAgICAgdXBkYXRlRWxlY3Ryb25CZWFtKCk7XG4gICAgfSxcbiAgICBvbldhdmVmb3JtQ2hhbmdlOiAod2F2ZWZvcm1QYXJhbXMpID0+IHtcbiAgICAgIC8vIOazouW9ouWPguaVsOWPmOWMluaXtu+8jOmcgOimgeabtOaWsOeUteWtkOadn1xuICAgICAgdXBkYXRlRWxlY3Ryb25CZWFtKCk7XG4gICAgICAvLyDlkIzml7bmm7TmlrDojaflhYnlsY/kuIrnmoTms6LlvaLmmL7npLpcbiAgICAgIHVwZGF0ZVNjcmVlbldhdmVmb3JtKCk7XG4gICAgfSxcbiAgICBvblNjcmVlbkNoYW5nZTogKHNjcmVlblBhcmFtcykgPT4ge1xuICAgICAgc2NyZWVuQ29udHJvbGxlci51cGRhdGVNYXRlcmlhbCgpO1xuICAgIH0sXG4gICAgb25TaGVsbENoYW5nZTogKHNoZWxsUGFyYW1zKSA9PiB7XG4gICAgICBpZiAoY3J0U2hlbGwpIHtcbiAgICAgICAgY3J0U2hlbGwuc2V0VmlzaWJsZShzaGVsbFBhcmFtcy52aXNpYmxlKTtcbiAgICAgICAgY3J0U2hlbGwuc2V0T3BhY2l0eShzaGVsbFBhcmFtcy5vcGFjaXR5KTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyDlpITnkIbnrKzkuIDkuKrlnIbmn7HkvZNcbiAgICAgICAgaWYgKHNoZWxsUGFyYW1zLmN5bGluZGVyMSkge1xuICAgICAgICAgIGlmIChzaGVsbFBhcmFtcy5jeWxpbmRlcjEuaGFzT3duUHJvcGVydHkoJ3Zpc2libGUnKSkge1xuICAgICAgICAgICAgY3J0U2hlbGwuc2V0Q3lsaW5kZXIxVmlzaWJsZShzaGVsbFBhcmFtcy5jeWxpbmRlcjEudmlzaWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaGVsbFBhcmFtcy5jeWxpbmRlcjEuaGFzT3duUHJvcGVydHkoJ29wYWNpdHknKSkge1xuICAgICAgICAgICAgY3J0U2hlbGwuc2V0Q3lsaW5kZXIxT3BhY2l0eShzaGVsbFBhcmFtcy5jeWxpbmRlcjEub3BhY2l0eSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaGVsbFBhcmFtcy5jeWxpbmRlcjEuY29sb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGN5bGluZGVyMUNvbG9yID0gcGFyc2VDb2xvcihzaGVsbFBhcmFtcy5jeWxpbmRlcjEuY29sb3IpO1xuICAgICAgICAgICAgaWYgKGN5bGluZGVyMUNvbG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGNydFNoZWxsLnNldEN5bGluZGVyMUNvbG9yKGN5bGluZGVyMUNvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNoZWxsUGFyYW1zLmN5bGluZGVyMS5wb3NpdGlvbikge1xuICAgICAgICAgICAgY3J0U2hlbGwuc2V0Q3lsaW5kZXIxUG9zaXRpb24oXG4gICAgICAgICAgICAgIHNoZWxsUGFyYW1zLmN5bGluZGVyMS5wb3NpdGlvbi54LFxuICAgICAgICAgICAgICBzaGVsbFBhcmFtcy5jeWxpbmRlcjEucG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgc2hlbGxQYXJhbXMuY3lsaW5kZXIxLnBvc2l0aW9uLnpcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaGVsbFBhcmFtcy5jeWxpbmRlcjEucm90YXRpb24pIHtcbiAgICAgICAgICAgIGNydFNoZWxsLnNldEN5bGluZGVyMVJvdGF0aW9uKFxuICAgICAgICAgICAgICBzaGVsbFBhcmFtcy5jeWxpbmRlcjEucm90YXRpb24ueCxcbiAgICAgICAgICAgICAgc2hlbGxQYXJhbXMuY3lsaW5kZXIxLnJvdGF0aW9uLnksXG4gICAgICAgICAgICAgIHNoZWxsUGFyYW1zLmN5bGluZGVyMS5yb3RhdGlvbi56XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g5aSE55CG56ys5LqM5Liq5ZyG5p+x5L2TXG4gICAgICAgIGlmIChzaGVsbFBhcmFtcy5jeWxpbmRlcjIpIHtcbiAgICAgICAgICBpZiAoc2hlbGxQYXJhbXMuY3lsaW5kZXIyLmhhc093blByb3BlcnR5KCd2aXNpYmxlJykpIHtcbiAgICAgICAgICAgIGNydFNoZWxsLnNldEN5bGluZGVyMlZpc2libGUoc2hlbGxQYXJhbXMuY3lsaW5kZXIyLnZpc2libGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2hlbGxQYXJhbXMuY3lsaW5kZXIyLmhhc093blByb3BlcnR5KCdvcGFjaXR5JykpIHtcbiAgICAgICAgICAgIGNydFNoZWxsLnNldEN5bGluZGVyMk9wYWNpdHkoc2hlbGxQYXJhbXMuY3lsaW5kZXIyLm9wYWNpdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2hlbGxQYXJhbXMuY3lsaW5kZXIyLmNvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBjeWxpbmRlcjJDb2xvciA9IHBhcnNlQ29sb3Ioc2hlbGxQYXJhbXMuY3lsaW5kZXIyLmNvbG9yKTtcbiAgICAgICAgICAgIGlmIChjeWxpbmRlcjJDb2xvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBjcnRTaGVsbC5zZXRDeWxpbmRlcjJDb2xvcihjeWxpbmRlcjJDb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaGVsbFBhcmFtcy5jeWxpbmRlcjIucG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNydFNoZWxsLnNldEN5bGluZGVyMlBvc2l0aW9uKFxuICAgICAgICAgICAgICBzaGVsbFBhcmFtcy5jeWxpbmRlcjIucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgc2hlbGxQYXJhbXMuY3lsaW5kZXIyLnBvc2l0aW9uLnksXG4gICAgICAgICAgICAgIHNoZWxsUGFyYW1zLmN5bGluZGVyMi5wb3NpdGlvbi56XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2hlbGxQYXJhbXMuY3lsaW5kZXIyLnJvdGF0aW9uKSB7XG4gICAgICAgICAgICBjcnRTaGVsbC5zZXRDeWxpbmRlcjJSb3RhdGlvbihcbiAgICAgICAgICAgICAgc2hlbGxQYXJhbXMuY3lsaW5kZXIyLnJvdGF0aW9uLngsXG4gICAgICAgICAgICAgIHNoZWxsUGFyYW1zLmN5bGluZGVyMi5yb3RhdGlvbi55LFxuICAgICAgICAgICAgICBzaGVsbFBhcmFtcy5jeWxpbmRlcjIucm90YXRpb24uelxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIOinpuWPkemFjee9ruabtOaWsOS7peS/neaMgeWQjOatpVxuICAgICAgICBjcnRTaGVsbC51cGRhdGVDb25maWcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vLyA9PT09PSBVSeaOp+WItuWZqOWIneWni+WMliA9PT09PVxuZnVuY3Rpb24gaW5pdFVJQ29udHJvbGxlcigpIHtcbiAgLy8g5Yib5bu6VUnmjqfliLblmahcbiAgdWlDb250cm9sbGVyID0gbmV3IFVJQ29udHJvbGxlcih7XG4gICAgY29tcG9uZW50czoge1xuICAgICAgZ3VuLFxuICAgICAgZ3VuSGVhZCxcbiAgICAgIHYxLFxuICAgICAgdjIsXG4gICAgICBoMSxcbiAgICAgIGgyLFxuICAgICAgc2NyZWVuLFxuICAgICAgY3J0U2hlbGxcbiAgICB9LFxuICAgIGNvbnRyb2xsZXJzOiB7XG4gICAgICBjYW1lcmEsXG4gICAgICBjb250cm9scyxcbiAgICAgIGxhYmVsU3lzdGVtLFxuICAgICAgZXhwbG9kZWRWaWV3LFxuICAgICAgZGVtb0FuaW1hdGlvbixcbiAgICAgIHNjcmVlbkNvbnRyb2xsZXIsXG4gICAgICBvbkRlZmxlY3Rpb25DaGFuZ2U6IChkZWZsZWN0aW9uUGFyYW1zKSA9PiB7XG4gICAgICAgIHVwZGF0ZUVsZWN0cm9uQmVhbSgpO1xuICAgICAgfSxcbiAgICAgIG9uV2F2ZWZvcm1DaGFuZ2U6ICh3YXZlZm9ybVBhcmFtcykgPT4ge1xuICAgICAgICB1cGRhdGVFbGVjdHJvbkJlYW0oKTtcbiAgICAgICAgdXBkYXRlU2NyZWVuV2F2ZWZvcm0oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vLyA9PT09PSDmm7TmlrDnlLXlrZDmnZ8gPT09PT1cbmZ1bmN0aW9uIHVwZGF0ZUVsZWN0cm9uQmVhbSgpIHtcbiAgbGV0IGRlZmxlY3Rpb25QYXJhbXM7XG4gIFxuICAvLyDlpoLmnpzms6LlvaLlkK/nlKjvvIzorqHnrpfms6LlvaLkuqfnlJ/nmoTlgY/ovaznlLXljotcbiAgaWYgKENPTkZJRy53YXZlZm9ybS5lbmFibGVkKSB7XG4gICAgY29uc3QgZGVmbGVjdGlvblZvbHRhZ2UgPSB3YXZlZm9ybUdlbmVyYXRvci5jYWxjdWxhdGVEZWZsZWN0aW9uVm9sdGFnZShcbiAgICAgIENPTkZJRy53YXZlZm9ybSxcbiAgICAgIENPTkZJRy5kZWZsZWN0aW9uXG4gICAgKTtcbiAgICBkZWZsZWN0aW9uUGFyYW1zID0ge1xuICAgICAgaG9yaXpvbnRhbDogeyB2b2x0YWdlOiBkZWZsZWN0aW9uVm9sdGFnZS5ob3Jpem9udGFsIH0sXG4gICAgICB2ZXJ0aWNhbDogeyB2b2x0YWdlOiBkZWZsZWN0aW9uVm9sdGFnZS52ZXJ0aWNhbCB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyDnm7TmjqXkvb/nlKjmjqfliLbpnaLmnb/kuIrnmoTnlLXljovlgLxcbiAgICBkZWZsZWN0aW9uUGFyYW1zID0gQ09ORklHLmRlZmxlY3Rpb247XG4gIH1cbiAgXG4gIC8vIOabtOaWsOeUteWtkOadn+i3r+W+hFxuICBlbGVjdHJvbkJlYW0udXBkYXRlQmVhbVBhdGgoZGVmbGVjdGlvblBhcmFtcyk7XG4gIFxuICAvLyDmm7TmlrDojaflhYnlsY/lkozliqjmgIHlhYnngrlcbiAgdXBkYXRlU2NyZWVuQW5kR2xvd1BvaW50KCk7XG59XG5cbi8qKlxuICog5pu05paw6I2n5YWJ5bGP5rOi5b2i5pi+56S6XG4gKiDlnKjms6LlvaLlj4LmlbDmlLnlj5jml7bmuIXpmaTml6fnmoTmmL7npLrlhoXlrrlcbiAqL1xuZnVuY3Rpb24gdXBkYXRlU2NyZWVuV2F2ZWZvcm0oKSB7XG4gIC8vIOa4hemZpOiNp+WFieWxj+S4iueahOaJgOacieiNp+WFieeCuVxuICBpZiAoc2NyZWVuQ29udHJvbGxlcikge1xuICAgIHNjcmVlbkNvbnRyb2xsZXIuY2xlYXJBbGxHbG93UG9pbnRzKCk7XG4gIH1cbiAgXG4gIC8vIOa4hemZpOeUteWtkOadn+eahOi9qOi/ueeCuVxuICBpZiAoZWxlY3Ryb25CZWFtKSB7XG4gICAgZWxlY3Ryb25CZWFtLmNsZWFyQWxsVHJhY2VzKCk7XG4gIH1cbiAgXG4gIC8vIOmHjee9ruazouW9oueUn+aIkOWZqOeahOaXtumXtO+8jOmBv+WFjeazouW9ouS4jei/nue7rVxuICAvLyDov5nnoa7kv53mlrDnmoTms6LlvaLlj4LmlbDog73ku47lubLlh4DnmoTnirbmgIHlvIDlp4vmmL7npLpcbiAgaWYgKHdhdmVmb3JtR2VuZXJhdG9yKSB7XG4gICAgd2F2ZWZvcm1HZW5lcmF0b3IucmVzZXRUaW1lKCk7XG4gIH1cbiAgXG4gIGNvbnNvbGUubG9nKCfms6LlvaLlj4LmlbDlj5jljJbvvJrlt7LmuIXpmaTml6fnmoTms6LlvaLmmL7npLrvvIzlh4blpIfmmL7npLrmlrDms6LlvaInKTtcbn1cblxuLyoqXG4gKiDmm7TmlrDojaflhYnlsY/lkozliqjmgIHlhYnngrlcbiAqL1xuZnVuY3Rpb24gdXBkYXRlU2NyZWVuQW5kR2xvd1BvaW50KCkge1xuICBjb25zdCBsYXN0QmVhbVBvaW50ID0gZWxlY3Ryb25CZWFtLmJlYW1Qb2ludHNbZWxlY3Ryb25CZWFtLmJlYW1Qb2ludHMubGVuZ3RoIC0gMV07XG4gIFxuICAvLyDmm7TmlrDojaflhYnlsY/kuIrnmoTngrlcbiAgc2NyZWVuQ29udHJvbGxlci5hZGRHbG93UG9pbnQobGFzdEJlYW1Qb2ludCk7XG4gIFxufVxuXG4vLyA9PT09PSDnqpflj6PlpKflsI/osIPmlbQgPT09PT1cbmZ1bmN0aW9uIG9uV2luZG93UmVzaXplKCkge1xuICAvLyDojrflj5blrp7pmYXmmL7npLrlsLrlr7jvvIzogIPomZFEUEnnvKnmlL5cbiAgY29uc3QgZGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIGNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gIGNvbnN0IGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgXG4gIGNhbWVyYS5hc3BlY3QgPSB3aWR0aCAvIGhlaWdodDtcbiAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgXG4gIC8vIOiuvue9rua4suafk+WZqOWwuuWvuO+8jOiAg+iZkemrmERQSVxuICByZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKE1hdGgubWluKGRldmljZVBpeGVsUmF0aW8sIDIpKTsgLy8g6ZmQ5Yi25pyA5aSnRFBJ5q+U546H5Li6MlxuICBcbiAgLy8g5pu05paw5qCH562+57O757ufXG4gIGlmIChsYWJlbFN5c3RlbSkge1xuICAgIGxhYmVsU3lzdGVtLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuICBcbiAgLy8g5pu05pawVUnmjqfliLblmahcbiAgaWYgKHVpQ29udHJvbGxlcikge1xuICAgIHVpQ29udHJvbGxlci5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gIH1cbn1cblxuLy8gPT09PT0g5Yqo55S75b6q546vID09PT09XG5mdW5jdGlvbiBhbmltYXRlKHRpbWVzdGFtcCkge1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIFxuICAvLyDmm7TmlrDmjqfliLblmahcbiAgY29udHJvbHMudXBkYXRlKCk7XG4gIFxuICAvLyDmm7TmlrDms6LlvaLnlJ/miJDlmahcbiAgd2F2ZWZvcm1HZW5lcmF0b3IudXBkYXRlKHRpbWVzdGFtcCk7XG4gIFxuICAvLyDmjIHnu63mm7TmlrDnlLXlrZDmnZ/vvIjml6Dorrrms6LlvaLmmK/lkKblkK/nlKjpg73opoHmm7TmlrDvvIlcbiAgLy8g6L+Z56Gu5L+d5LqG55S15a2Q5p2f5aeL57uI5Y+v6KeB5bm25ZON5bqU5Y+C5pWw5Y+Y5YyWXG4gIHVwZGF0ZUVsZWN0cm9uQmVhbSgpO1xuICBcbiAgLy8g5pu05paw6I2n5YWJ5bGP5pWI5p6cXG4gIHNjcmVlbkNvbnRyb2xsZXIudXBkYXRlKCk7XG4gIFxuICAvLyDmm7TmlrBDUlTlpJblo7NcbiAgaWYgKGNydFNoZWxsKSB7XG4gICAgY3J0U2hlbGwudXBkYXRlKHRpbWVzdGFtcCk7XG4gIH1cbiAgXG4gIC8vIOabtOaWsOWIhuino+inhuWbvlxuICBpZiAoZXhwbG9kZWRWaWV3KSB7XG4gICAgZXhwbG9kZWRWaWV3LnVwZGF0ZSgpO1xuICB9XG4gIFxuICAvLyDmm7TmlrDmvJTnpLrliqjnlLtcbiAgaWYgKGRlbW9BbmltYXRpb24pIHtcbiAgICBkZW1vQW5pbWF0aW9uLnVwZGF0ZSgpO1xuICB9XG4gIFxuICAvLyDmm7TmlrDmoIfnrb7ns7vnu59cbiAgaWYgKGxhYmVsU3lzdGVtKSB7XG4gICAgbGFiZWxTeXN0ZW0udXBkYXRlKGNhbWVyYSk7XG4gIH1cbiAgXG4gIC8vIOabtOaWsFRXRUVO77yI5L2/55So5paw55qEIEdyb3VwIEFQSe+8iVxuICB0d2Vlbkdyb3VwLnVwZGF0ZSgpO1xuICBcbiAgLy8g5riy5p+T5Zy65pmvXG4gIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbn1cblxuLy8gPT09PT0g5ZCv5Yqo5bqU55SoID09PT09XG5pbml0KCkuY2F0Y2goZXJyb3IgPT4ge1xuICBjb25zb2xlLmVycm9yKCflupTnlKjliJ3lp4vljJblpLHotKU6JywgZXJyb3IpO1xufSk7XG5cbi8vID09PT09IOWIneWni+WMluWPs+S4iuinkuWIh+aNouaOp+S7tu+8iOWGhemDqOmhte+8iSA9PT09PVxuY29uc3QgYm9vdEludGVybmFsU3dpdGNoZXIgPSAoKSA9PiB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmVuZGVyU3dpdGNoZXIoJ2ludGVybmFsJyk7XG4gIH1cbn07XG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGJvb3RJbnRlcm5hbFN3aXRjaGVyKTtcbn0gZWxzZSB7XG4gIGJvb3RJbnRlcm5hbFN3aXRjaGVyKCk7XG59XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///297\n")},688:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.switcher{\r\n  position: fixed;\r\n  top: 12px;\r\n  right: 12px;\r\n  z-index: 9999;\r\n  display: grid;\r\n  grid-template-columns: var(--tile, 48px) var(--tile, 48px);\r\n  column-gap: var(--switcher-gap, 0px);\r\n  padding: 0 var(--switcher-extra, 0px);\r\n  --icon-active: #42B983;\r\n  --icon-inactive: #9aa3b2;\r\n}\r\n\r\n.switcher .tile{\r\n  all: unset;\r\n  cursor: pointer;\r\n  width: var(--tile, 48px);\r\n  height: var(--tile, 48px);\r\n  display: grid;\r\n  place-items: center;\r\n  position: relative;\r\n  background:\r\n    repeating-linear-gradient(0deg, #1c1e23 0 2px, #15171b 2px 4px),\r\n    repeating-linear-gradient(90deg, #14161a 0 8px, #121418 8px 16px);\r\n  box-shadow:\r\n    inset 0 0 0 1px rgba(255,255,255,.2),\r\n    inset 0 0 0 2px rgba(255,255,255,.06);\r\n}\r\n\r\n.switcher .tile.right{\r\n  box-shadow:\r\n    inset 1px 0 0 #00000090,\r\n    inset 2px 0 0 #ffffff10,\r\n    inset 0 0 0 1px rgba(255,255,255,.2),\r\n    inset 0 0 0 2px rgba(255,255,255,.06);\r\n}\r\n\r\n.switcher .tile:active{ transform: translateY(1px) }\r\n.switcher .tile[aria-selected="false"]{ filter: brightness(.78) contrast(1.05) }\r\n.switcher .tile[aria-selected="true"]{\r\n  box-shadow: inset 0 0 0 1px #e7e9ec, inset 0 0 0 2px rgba(255,255,255,.2), 0 0 0 1px #ffffff20;\r\n}\r\n\r\n.switcher svg{ width: var(--icon, 24px); height: var(--icon, 24px); display: block }\r\n.switcher .stroke{ stroke: var(--icon-inactive); stroke-width:1.8; fill:none; stroke-linecap:round; stroke-linejoin:round }\r\n.switcher .dot{ fill: var(--icon-inactive) }\r\n.switcher .tile[aria-selected="true"] .stroke{ stroke: var(--icon-active) }\r\n.switcher .tile[aria-selected="true"] .dot{ fill: var(--icon-active) }\r\n.switcher .tile:hover .stroke{ stroke: var(--icon-active) }\r\n.switcher .tile:hover .dot{ fill: var(--icon-active) }\r\n\r\n.sr-only{ position:absolute; width:1px; height:1px; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0 }\r\n\r\n\r\n\r\n\r\n`, "",{"version":3,"sources":["webpack://./src/controllers/switcher.css"],"names":[],"mappings":"AAAA;EACE,eAAe;EACf,SAAS;EACT,WAAW;EACX,aAAa;EACb,aAAa;EACb,0DAA0D;EAC1D,oCAAoC;EACpC,qCAAqC;EACrC,sBAAsB;EACtB,wBAAwB;AAC1B;;AAEA;EACE,UAAU;EACV,eAAe;EACf,wBAAwB;EACxB,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB;;qEAEmE;EACnE;;yCAEuC;AACzC;;AAEA;EACE;;;;yCAIuC;AACzC;;AAEA,wBAAwB,2BAA2B;AACnD,wCAAwC,uCAAuC;AAC/E;EACE,8FAA8F;AAChG;;AAEA,eAAe,wBAAwB,EAAE,yBAAyB,EAAE,eAAe;AACnF,mBAAmB,4BAA4B,EAAE,gBAAgB,EAAE,SAAS,EAAE,oBAAoB,EAAE,sBAAsB;AAC1H,gBAAgB,2BAA2B;AAC3C,+CAA+C,2BAA2B;AAC1E,4CAA4C,yBAAyB;AACrE,+BAA+B,2BAA2B;AAC1D,4BAA4B,yBAAyB;;AAErD,UAAU,iBAAiB,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,eAAe,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,SAAS","sourcesContent":[".switcher{\\r\\n  position: fixed;\\r\\n  top: 12px;\\r\\n  right: 12px;\\r\\n  z-index: 9999;\\r\\n  display: grid;\\r\\n  grid-template-columns: var(--tile, 48px) var(--tile, 48px);\\r\\n  column-gap: var(--switcher-gap, 0px);\\r\\n  padding: 0 var(--switcher-extra, 0px);\\r\\n  --icon-active: #42B983;\\r\\n  --icon-inactive: #9aa3b2;\\r\\n}\\r\\n\\r\\n.switcher .tile{\\r\\n  all: unset;\\r\\n  cursor: pointer;\\r\\n  width: var(--tile, 48px);\\r\\n  height: var(--tile, 48px);\\r\\n  display: grid;\\r\\n  place-items: center;\\r\\n  position: relative;\\r\\n  background:\\r\\n    repeating-linear-gradient(0deg, #1c1e23 0 2px, #15171b 2px 4px),\\r\\n    repeating-linear-gradient(90deg, #14161a 0 8px, #121418 8px 16px);\\r\\n  box-shadow:\\r\\n    inset 0 0 0 1px rgba(255,255,255,.2),\\r\\n    inset 0 0 0 2px rgba(255,255,255,.06);\\r\\n}\\r\\n\\r\\n.switcher .tile.right{\\r\\n  box-shadow:\\r\\n    inset 1px 0 0 #00000090,\\r\\n    inset 2px 0 0 #ffffff10,\\r\\n    inset 0 0 0 1px rgba(255,255,255,.2),\\r\\n    inset 0 0 0 2px rgba(255,255,255,.06);\\r\\n}\\r\\n\\r\\n.switcher .tile:active{ transform: translateY(1px) }\\r\\n.switcher .tile[aria-selected=\\"false\\"]{ filter: brightness(.78) contrast(1.05) }\\r\\n.switcher .tile[aria-selected=\\"true\\"]{\\r\\n  box-shadow: inset 0 0 0 1px #e7e9ec, inset 0 0 0 2px rgba(255,255,255,.2), 0 0 0 1px #ffffff20;\\r\\n}\\r\\n\\r\\n.switcher svg{ width: var(--icon, 24px); height: var(--icon, 24px); display: block }\\r\\n.switcher .stroke{ stroke: var(--icon-inactive); stroke-width:1.8; fill:none; stroke-linecap:round; stroke-linejoin:round }\\r\\n.switcher .dot{ fill: var(--icon-inactive) }\\r\\n.switcher .tile[aria-selected=\\"true\\"] .stroke{ stroke: var(--icon-active) }\\r\\n.switcher .tile[aria-selected=\\"true\\"] .dot{ fill: var(--icon-active) }\\r\\n.switcher .tile:hover .stroke{ stroke: var(--icon-active) }\\r\\n.switcher .tile:hover .dot{ fill: var(--icon-active) }\\r\\n\\r\\n.sr-only{ position:absolute; width:1px; height:1px; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0 }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29zY2lsbG9zY29wZS1zaW11bGF0b3IvLi9zcmMvY29udHJvbGxlcnMvc3dpdGNoZXIuY3NzP2I2OGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zd2l0Y2hlcntcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAxMnB4O1xyXG4gIHJpZ2h0OiAxMnB4O1xyXG4gIHotaW5kZXg6IDk5OTk7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHZhcigtLXRpbGUsIDQ4cHgpIHZhcigtLXRpbGUsIDQ4cHgpO1xyXG4gIGNvbHVtbi1nYXA6IHZhcigtLXN3aXRjaGVyLWdhcCwgMHB4KTtcclxuICBwYWRkaW5nOiAwIHZhcigtLXN3aXRjaGVyLWV4dHJhLCAwcHgpO1xyXG4gIC0taWNvbi1hY3RpdmU6ICM0MkI5ODM7XHJcbiAgLS1pY29uLWluYWN0aXZlOiAjOWFhM2IyO1xyXG59XHJcblxyXG4uc3dpdGNoZXIgLnRpbGV7XHJcbiAgYWxsOiB1bnNldDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgd2lkdGg6IHZhcigtLXRpbGUsIDQ4cHgpO1xyXG4gIGhlaWdodDogdmFyKC0tdGlsZSwgNDhweCk7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBwbGFjZS1pdGVtczogY2VudGVyO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBiYWNrZ3JvdW5kOlxyXG4gICAgcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCgwZGVnLCAjMWMxZTIzIDAgMnB4LCAjMTUxNzFiIDJweCA0cHgpLFxyXG4gICAgcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg5MGRlZywgIzE0MTYxYSAwIDhweCwgIzEyMTQxOCA4cHggMTZweCk7XHJcbiAgYm94LXNoYWRvdzpcclxuICAgIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwyNTUsMjU1LC4yKSxcclxuICAgIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4wNik7XHJcbn1cclxuXHJcbi5zd2l0Y2hlciAudGlsZS5yaWdodHtcclxuICBib3gtc2hhZG93OlxyXG4gICAgaW5zZXQgMXB4IDAgMCAjMDAwMDAwOTAsXHJcbiAgICBpbnNldCAycHggMCAwICNmZmZmZmYxMCxcclxuICAgIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwyNTUsMjU1LC4yKSxcclxuICAgIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4wNik7XHJcbn1cclxuXHJcbi5zd2l0Y2hlciAudGlsZTphY3RpdmV7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxcHgpIH1cclxuLnN3aXRjaGVyIC50aWxlW2FyaWEtc2VsZWN0ZWQ9XCJmYWxzZVwiXXsgZmlsdGVyOiBicmlnaHRuZXNzKC43OCkgY29udHJhc3QoMS4wNSkgfVxyXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cInRydWVcIl17XHJcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICNlN2U5ZWMsIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4yKSwgMCAwIDAgMXB4ICNmZmZmZmYyMDtcclxufVxyXG5cclxuLnN3aXRjaGVyIHN2Z3sgd2lkdGg6IHZhcigtLWljb24sIDI0cHgpOyBoZWlnaHQ6IHZhcigtLWljb24sIDI0cHgpOyBkaXNwbGF5OiBibG9jayB9XHJcbi5zd2l0Y2hlciAuc3Ryb2tleyBzdHJva2U6IHZhcigtLWljb24taW5hY3RpdmUpOyBzdHJva2Utd2lkdGg6MS44OyBmaWxsOm5vbmU7IHN0cm9rZS1saW5lY2FwOnJvdW5kOyBzdHJva2UtbGluZWpvaW46cm91bmQgfVxyXG4uc3dpdGNoZXIgLmRvdHsgZmlsbDogdmFyKC0taWNvbi1pbmFjdGl2ZSkgfVxyXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0gLnN0cm9rZXsgc3Ryb2tlOiB2YXIoLS1pY29uLWFjdGl2ZSkgfVxyXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0gLmRvdHsgZmlsbDogdmFyKC0taWNvbi1hY3RpdmUpIH1cclxuLnN3aXRjaGVyIC50aWxlOmhvdmVyIC5zdHJva2V7IHN0cm9rZTogdmFyKC0taWNvbi1hY3RpdmUpIH1cclxuLnN3aXRjaGVyIC50aWxlOmhvdmVyIC5kb3R7IGZpbGw6IHZhcigtLWljb24tYWN0aXZlKSB9XHJcblxyXG4uc3Itb25seXsgcG9zaXRpb246YWJzb2x1dGU7IHdpZHRoOjFweDsgaGVpZ2h0OjFweDsgbWFyZ2luOi0xcHg7IG92ZXJmbG93OmhpZGRlbjsgY2xpcDpyZWN0KDAsMCwwLDApOyB3aGl0ZS1zcGFjZTpub3dyYXA7IGJvcmRlcjowIH1cclxuXHJcblxyXG5cclxuXHJcbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbnRyb2xsZXJzL3N3aXRjaGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGVBQWU7RUFDZixTQUFTO0VBQ1QsV0FBVztFQUNYLGFBQWE7RUFDYixhQUFhO0VBQ2IsMERBQTBEO0VBQzFELG9DQUFvQztFQUNwQyxxQ0FBcUM7RUFDckMsc0JBQXNCO0VBQ3RCLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLFVBQVU7RUFDVixlQUFlO0VBQ2Ysd0JBQXdCO0VBQ3hCLHlCQUF5QjtFQUN6QixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQjs7cUVBRW1FO0VBQ25FOzt5Q0FFdUM7QUFDekM7O0FBRUE7RUFDRTs7Ozt5Q0FJdUM7QUFDekM7O0FBRUEsd0JBQXdCLDJCQUEyQjtBQUNuRCx3Q0FBd0MsdUNBQXVDO0FBQy9FO0VBQ0UsOEZBQThGO0FBQ2hHOztBQUVBLGVBQWUsd0JBQXdCLEVBQUUseUJBQXlCLEVBQUUsZUFBZTtBQUNuRixtQkFBbUIsNEJBQTRCLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLHNCQUFzQjtBQUMxSCxnQkFBZ0IsMkJBQTJCO0FBQzNDLCtDQUErQywyQkFBMkI7QUFDMUUsNENBQTRDLHlCQUF5QjtBQUNyRSwrQkFBK0IsMkJBQTJCO0FBQzFELDRCQUE0Qix5QkFBeUI7O0FBRXJELFVBQVUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLFNBQVNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnN3aXRjaGVye1xcclxcbiAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgdG9wOiAxMnB4O1xcclxcbiAgcmlnaHQ6IDEycHg7XFxyXFxuICB6LWluZGV4OiA5OTk5O1xcclxcbiAgZGlzcGxheTogZ3JpZDtcXHJcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogdmFyKC0tdGlsZSwgNDhweCkgdmFyKC0tdGlsZSwgNDhweCk7XFxyXFxuICBjb2x1bW4tZ2FwOiB2YXIoLS1zd2l0Y2hlci1nYXAsIDBweCk7XFxyXFxuICBwYWRkaW5nOiAwIHZhcigtLXN3aXRjaGVyLWV4dHJhLCAwcHgpO1xcclxcbiAgLS1pY29uLWFjdGl2ZTogIzQyQjk4MztcXHJcXG4gIC0taWNvbi1pbmFjdGl2ZTogIzlhYTNiMjtcXHJcXG59XFxyXFxuXFxyXFxuLnN3aXRjaGVyIC50aWxle1xcclxcbiAgYWxsOiB1bnNldDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIHdpZHRoOiB2YXIoLS10aWxlLCA0OHB4KTtcXHJcXG4gIGhlaWdodDogdmFyKC0tdGlsZSwgNDhweCk7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgcGxhY2UtaXRlbXM6IGNlbnRlcjtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIGJhY2tncm91bmQ6XFxyXFxuICAgIHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoMGRlZywgIzFjMWUyMyAwIDJweCwgIzE1MTcxYiAycHggNHB4KSxcXHJcXG4gICAgcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg5MGRlZywgIzE0MTYxYSAwIDhweCwgIzEyMTQxOCA4cHggMTZweCk7XFxyXFxuICBib3gtc2hhZG93OlxcclxcbiAgICBpbnNldCAwIDAgMCAxcHggcmdiYSgyNTUsMjU1LDI1NSwuMiksXFxyXFxuICAgIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4wNik7XFxyXFxufVxcclxcblxcclxcbi5zd2l0Y2hlciAudGlsZS5yaWdodHtcXHJcXG4gIGJveC1zaGFkb3c6XFxyXFxuICAgIGluc2V0IDFweCAwIDAgIzAwMDAwMDkwLFxcclxcbiAgICBpbnNldCAycHggMCAwICNmZmZmZmYxMCxcXHJcXG4gICAgaW5zZXQgMCAwIDAgMXB4IHJnYmEoMjU1LDI1NSwyNTUsLjIpLFxcclxcbiAgICBpbnNldCAwIDAgMCAycHggcmdiYSgyNTUsMjU1LDI1NSwuMDYpO1xcclxcbn1cXHJcXG5cXHJcXG4uc3dpdGNoZXIgLnRpbGU6YWN0aXZleyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMXB4KSB9XFxyXFxuLnN3aXRjaGVyIC50aWxlW2FyaWEtc2VsZWN0ZWQ9XFxcImZhbHNlXFxcIl17IGZpbHRlcjogYnJpZ2h0bmVzcyguNzgpIGNvbnRyYXN0KDEuMDUpIH1cXHJcXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cXFwidHJ1ZVxcXCJde1xcclxcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMXB4ICNlN2U5ZWMsIGluc2V0IDAgMCAwIDJweCByZ2JhKDI1NSwyNTUsMjU1LC4yKSwgMCAwIDAgMXB4ICNmZmZmZmYyMDtcXHJcXG59XFxyXFxuXFxyXFxuLnN3aXRjaGVyIHN2Z3sgd2lkdGg6IHZhcigtLWljb24sIDI0cHgpOyBoZWlnaHQ6IHZhcigtLWljb24sIDI0cHgpOyBkaXNwbGF5OiBibG9jayB9XFxyXFxuLnN3aXRjaGVyIC5zdHJva2V7IHN0cm9rZTogdmFyKC0taWNvbi1pbmFjdGl2ZSk7IHN0cm9rZS13aWR0aDoxLjg7IGZpbGw6bm9uZTsgc3Ryb2tlLWxpbmVjYXA6cm91bmQ7IHN0cm9rZS1saW5lam9pbjpyb3VuZCB9XFxyXFxuLnN3aXRjaGVyIC5kb3R7IGZpbGw6IHZhcigtLWljb24taW5hY3RpdmUpIH1cXHJcXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cXFwidHJ1ZVxcXCJdIC5zdHJva2V7IHN0cm9rZTogdmFyKC0taWNvbi1hY3RpdmUpIH1cXHJcXG4uc3dpdGNoZXIgLnRpbGVbYXJpYS1zZWxlY3RlZD1cXFwidHJ1ZVxcXCJdIC5kb3R7IGZpbGw6IHZhcigtLWljb24tYWN0aXZlKSB9XFxyXFxuLnN3aXRjaGVyIC50aWxlOmhvdmVyIC5zdHJva2V7IHN0cm9rZTogdmFyKC0taWNvbi1hY3RpdmUpIH1cXHJcXG4uc3dpdGNoZXIgLnRpbGU6aG92ZXIgLmRvdHsgZmlsbDogdmFyKC0taWNvbi1hY3RpdmUpIH1cXHJcXG5cXHJcXG4uc3Itb25seXsgcG9zaXRpb246YWJzb2x1dGU7IHdpZHRoOjFweDsgaGVpZ2h0OjFweDsgbWFyZ2luOi0xcHg7IG92ZXJmbG93OmhpZGRlbjsgY2xpcDpyZWN0KDAsMCwwLDApOyB3aGl0ZS1zcGFjZTpub3dyYXA7IGJvcmRlcjowIH1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///688\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(n){var g=__webpack_module_cache__[n];if(void 0!==g)return g.exports;var I=__webpack_module_cache__[n]={id:n,exports:{}};return __webpack_modules__[n](I,I.exports,__webpack_require__),I.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(n,g,I,t)=>{if(!g){var l=1/0;for(C=0;C<deferred.length;C++){for(var[g,I,t]=deferred[C],e=!0,c=0;c<g.length;c++)(!1&t||l>=t)&&Object.keys(__webpack_require__.O).every((n=>__webpack_require__.O[n](g[c])))?g.splice(c--,1):(e=!1,t<l&&(l=t));if(e){deferred.splice(C--,1);var i=I();void 0!==i&&(n=i)}}return n}t=t||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>t;C--)deferred[C]=deferred[C-1];deferred[C]=[g,I,t]},__webpack_require__.n=n=>{var g=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=(n,g)=>{for(var I in g)__webpack_require__.o(g,I)&&!__webpack_require__.o(n,I)&&Object.defineProperty(n,I,{enumerable:!0,get:g[I]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),__webpack_require__.o=(n,g)=>Object.prototype.hasOwnProperty.call(n,g),(()=>{var n={456:0};__webpack_require__.O.j=g=>0===n[g];var g=(g,I)=>{var t,l,[e,c,i]=I,C=0;if(e.some((g=>0!==n[g]))){for(t in c)__webpack_require__.o(c,t)&&(__webpack_require__.m[t]=c[t]);if(i)var B=i(__webpack_require__)}for(g&&g(I);C<e.length;C++)l=e[C],__webpack_require__.o(n,l)&&n[l]&&n[l][0](),n[l]=0;return __webpack_require__.O(B)},I=self.webpackChunkoscilloscope_simulator=self.webpackChunkoscilloscope_simulator||[];I.forEach(g.bind(null,0)),I.push=g.bind(null,I.push.bind(I))})(),__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__.O(void 0,[233,96],(()=>__webpack_require__(297)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();